{
  "security": [
    {
      "BearerAuthentication": []
    },
    {
      "DominoApiKey": []
    }
  ],
  "tags": [],
  "paths": {
    "/accounts/{userId}/gitcredentials": {
      "post": {
        "operationId": "addGitCredential",
        "tags": [
          "Git Credentials"
        ],
        "summary": "add git credential",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "userId",
            "description": "User id for adding git credential",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Git credential",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.server.account.api.GitCredentialDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.server.account.api.GitCredentialAccessorDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "get": {
        "operationId": "getGitCredentials",
        "tags": [
          "Git Credentials"
        ],
        "summary": "retrieves git credentials for the given user",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "userId",
            "description": "User id for retrieving git credentials",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.server.account.api.GitCredentialAccessorDto"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/accounts/{userId}/gitcredentials/{credentialId}": {
      "delete": {
        "operationId": "deleteGitCredential",
        "tags": [
          "Git Credentials"
        ],
        "summary": "delete git credential",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "userId",
            "description": "User id for deleting git credential",
            "required": true
          },
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "credentialId",
            "description": "Id of the git credential to delete",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.server.account.api.GitCredentialAccessorDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/accounts/gitproviders": {
      "get": {
        "operationId": "getProviderList",
        "tags": [
          "Git Credentials"
        ],
        "summary": "retrieves git providers list",
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projects.api.repositories.GitProvidersDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/accounts/idpid/{idpid}/environmentvariables": {
      "post": {
        "operationId": "setUserEnvironmentVariable",
        "tags": [
          "Users"
        ],
        "summary": "sets an Environment Variable for the user",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "path",
            "name": "idpid",
            "description": "Idp ID of the user for which the environment variable is set",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Environment Variable",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.common.models.EnvironmentVariable"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/accounts/idpid/{idpid}/environmentvariables/{variableName}": {
      "delete": {
        "operationId": "unsetUserEnvironmentVariable",
        "tags": [
          "Users"
        ],
        "summary": "unsets an Environment Variable for the user",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "path",
            "name": "idpid",
            "description": "Idp ID of the user for which the environment variable is unset",
            "required": true
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "path",
            "name": "variableName",
            "description": "The name of the environment variable to unset",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/activity": {
      "get": {
        "operationId": "getActivityStream",
        "tags": [
          "Activity"
        ],
        "summary": "Gets all activity stream",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "projectId",
            "description": "Project id to get the activity",
            "required": true
          },
          {
            "schema": {
              "nullable": true,
              "format": "int32",
              "type": "number"
            },
            "in": "query",
            "name": "pageSize",
            "description": "page size to get the activity",
            "required": false
          },
          {
            "schema": {
              "nullable": true,
              "format": "int64",
              "type": "number"
            },
            "in": "query",
            "name": "latestTimeStamp",
            "description": "latest time stamp of the activity",
            "required": false
          },
          {
            "schema": {
              "nullable": true,
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "project",
                  "job",
                  "model_api",
                  "comment",
                  "app",
                  "goals",
                  "schedule_job",
                  "files",
                  "workspace",
                  "registered_model"
                ]
              }
            },
            "in": "query",
            "name": "filterBy",
            "description": "Comma-separated activity sources",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.activity.api.ActivityStream"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/activity/metadata": {
      "get": {
        "operationId": "notFound",
        "tags": [
          "Activity"
        ],
        "summary": "Metadata entries.",
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.activity.api.AllMetadata"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/admin/executions": {
      "get": {
        "operationId": "getCurrentExecutions",
        "tags": [
          "Admin"
        ],
        "summary": "Gets all non-completed executions (running on the Kubernetes Compute Grid, for now)",
        "parameters": [
          {
            "schema": {
              "default": 0,
              "nullable": true,
              "format": "int32",
              "type": "integer"
            },
            "in": "query",
            "name": "offset",
            "description": "The number of items to skip relative to the sort criteria.",
            "required": false
          },
          {
            "schema": {
              "default": 50,
              "nullable": true,
              "format": "int32",
              "type": "integer"
            },
            "in": "query",
            "name": "pageSize",
            "description": "The size of the page to return.",
            "required": false
          },
          {
            "schema": {
              "default": "executionId",
              "nullable": true,
              "type": "string",
              "enum": [
                "executionId",
                "hardwareTier",
                "user",
                "project",
                "title",
                "started",
                "status"
              ]
            },
            "in": "query",
            "name": "sortBy",
            "description": "A column name to sort over.",
            "required": false
          },
          {
            "schema": {
              "default": "asc",
              "nullable": true,
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            },
            "in": "query",
            "name": "sortOrder",
            "description": "order of sort",
            "required": false
          },
          {
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "in": "query",
            "name": "searchQuery",
            "description": "string to filter on",
            "required": false
          },
          {
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "in": "query",
            "name": "searchColumns",
            "description": "comma-separated list of columns to search in for searchQuery",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.admin.interface.ExecutionOverviewsWithTotalCount"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/admin/nodes": {
      "get": {
        "operationId": "getNodes",
        "tags": [
          "Admin"
        ],
        "summary": "Gets information about nodes in the compute cluster",
        "parameters": [],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.admin.interface.ComputeNodeOverview"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/admin/infrastructure": {
      "get": {
        "operationId": "getInfrastructureInfo",
        "tags": [
          "Admin"
        ],
        "summary": "Gets information about all the nodes' names, instance types, and node pools in the cluster",
        "parameters": [],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.admin.interface.ComputeNodeInfrastructureInfo"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/admin/supportbundle/{executionId}": {
      "get": {
        "operationId": "getExecutionSupportBundle",
        "tags": [
          "Admin"
        ],
        "summary": "Gets a zipfile containing useful information about an executionId, FIXME should this path be /executions/executionId/supportbundle",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "executionId",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/admin/whitelabel/configurations": {
      "get": {
        "operationId": "getWhiteLabelConfigurations",
        "tags": [
          "WhiteLabel"
        ],
        "summary": "Gets whitelabel configurations",
        "parameters": [],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.admin.interface.WhiteLabelConfigurations"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/admin/dashboardEntries": {
      "get": {
        "operationId": "getDashboardEntries",
        "tags": [
          "Admin"
        ],
        "summary": "Gets all dashboard entries",
        "parameters": [
          {
            "schema": {
              "default": 0,
              "nullable": true,
              "format": "int32",
              "type": "integer"
            },
            "in": "query",
            "name": "offset",
            "description": "The number of items to skip relative to the checkpoint project before starting to collect the\npage. If no checkpoint project is provided, will skip relative to the first project of the first user.\nCan be negative.\n",
            "required": false
          },
          {
            "schema": {
              "default": 50,
              "nullable": true,
              "format": "int32",
              "type": "integer"
            },
            "in": "query",
            "name": "pageSize",
            "description": "The size of the page to return.",
            "required": false
          },
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "query",
            "name": "checkpointProjectId",
            "description": "The projectId to construct the page relative to.",
            "required": false
          },
          {
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "in": "query",
            "name": "searchString",
            "description": "Filters projects by owner name and project name substrings",
            "required": false
          },
          {
            "schema": {
              "nullable": true,
              "type": "string",
              "enum": [
                "ownerId",
                "name",
                "created"
              ]
            },
            "in": "query",
            "name": "sortBy",
            "description": "A column name to sort over.",
            "required": false
          },
          {
            "schema": {
              "nullable": true,
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            },
            "in": "query",
            "name": "sortOrder",
            "description": "order of sort",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.admin.interface.ProjectSearchResultsDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/admin/centralConfigSettings": {
      "post": {
        "operationId": "createCentralConfigSetting",
        "tags": [
          "Admin"
        ],
        "summary": "Create a new central config setting",
        "parameters": [],
        "requestBody": {
          "description": "config setting to create",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.admin.interface.ConfigSettingDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.admin.interface.ConfigSettingEntityDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "get": {
        "operationId": "getCentralConfigSettings",
        "tags": [
          "Admin"
        ],
        "summary": "Gets all central config settings",
        "parameters": [],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.admin.interface.ConfigSettingEntityDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/admin/centralConfigSettings/{id}": {
      "delete": {
        "operationId": "deleteCentralConfigSetting",
        "tags": [
          "Admin"
        ],
        "summary": "Delete a central config setting",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "path",
            "name": "id",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "put": {
        "operationId": "updateCentralConfigSetting",
        "tags": [
          "Admin"
        ],
        "summary": "Update a central config setting",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "path",
            "name": "id",
            "required": true
          }
        ],
        "requestBody": {
          "description": "config setting to create",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.admin.interface.ConfigSettingDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.admin.interface.ConfigSettingEntityDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/admin/adminMenu": {
      "get": {
        "operationId": "getAdminMenu",
        "tags": [
          "Admin"
        ],
        "summary": "Gets the Admin menu items customized for the caller.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.admin.web.MenuItemDto"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/admin/user-management/users": {
      "get": {
        "operationId": "getUsers",
        "tags": [
          "UserManagement"
        ],
        "summary": "Get users.",
        "parameters": [
          {
            "schema": {
              "nullable": true,
              "format": "int32",
              "type": "integer"
            },
            "in": "query",
            "name": "offset",
            "description": "How many users from the start to skip. Defaults to 0.",
            "required": false
          },
          {
            "schema": {
              "nullable": true,
              "format": "int32",
              "type": "integer"
            },
            "in": "query",
            "name": "limit",
            "description": "Max number of users to fetch. Defaults to 50.",
            "required": false
          },
          {
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "in": "query",
            "name": "query",
            "description": "Search string.",
            "required": false
          },
          {
            "schema": {
              "nullable": true,
              "type": "string",
              "enum": [
                "username",
                "email",
                "idpid",
                "dominouserid"
              ]
            },
            "in": "query",
            "name": "sortby",
            "description": "Field to sort by.",
            "required": false
          },
          {
            "schema": {
              "nullable": true,
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            },
            "in": "query",
            "name": "sortdir",
            "description": "Sort direction (default - ascending).",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.admin.usermanagement.api.UsersResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/admin/user-management/users-with-usage": {
      "get": {
        "operationId": "getUsersWithUsage",
        "tags": [
          "UserManagement"
        ],
        "summary": "Gets users and their user usage reports.",
        "parameters": [
          {
            "schema": {
              "nullable": true,
              "format": "int32",
              "type": "integer"
            },
            "in": "query",
            "name": "offset",
            "description": "How many users from the start to skip. Defaults to 0.",
            "required": false
          },
          {
            "schema": {
              "nullable": true,
              "format": "int32",
              "type": "integer"
            },
            "in": "query",
            "name": "limit",
            "description": "Max number of users to fetch. Defaults to 50.",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.admin.usermanagement.api.UsersWithUsageResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/admin/user-management/users/{targetUserIdpId}": {
      "patch": {
        "operationId": "updateUser",
        "tags": [
          "UserManagement"
        ],
        "summary": "Update a user.",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "path",
            "name": "targetUserIdpId",
            "description": "IdpId of user to update.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Fields to update",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.admin.usermanagement.api.UpdateUserRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.admin.usermanagement.api.AdminUserManagementUser"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/admin/user-management/users/{targetUserIdpId}/password-reset": {
      "post": {
        "operationId": "passwordReset",
        "tags": [
          "UserManagement"
        ],
        "summary": "Reset a user's password.",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "path",
            "name": "targetUserIdpId",
            "description": "IdpId of the target user.",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/admin/user-management/users/reports/aggregate-user-activity-report": {
      "get": {
        "operationId": "aggregateUserActivityReport",
        "tags": [
          "UserManagement"
        ],
        "summary": "Gets aggregate user activity report",
        "parameters": [
          {
            "in": "path",
            "name": "targetUserIdpId",
            "required": true,
            "description": "IdpId of the target user.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.admin.usermanagement.api.AggregateUserActivityReport"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/aigateway/audit/download": {
      "get": {
        "operationId": "downloadAIGatewayAuditData",
        "tags": [
          "AIGateway"
        ],
        "summary": "Download AI Gateway Audit Data for past 6 months",
        "parameters": [
          {
            "schema": {
              "nullable": true,
              "type": "boolean"
            },
            "in": "query",
            "name": "useJson",
            "description": "if true output will be json file, else txt",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/aigateway/provider-configs": {
      "get": {
        "operationId": "getRequiredProviderConfigs",
        "tags": [
          "AIGateway"
        ],
        "summary": "Get AI Gateway required model provider configuration parameters",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "modelProvider",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/aigateway/provider-models": {
      "get": {
        "operationId": "getAvailableModels",
        "tags": [
          "AIGateway"
        ],
        "summary": "Get the map of model provider and endpoint type to list of models",
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.aigateway.interface.ProviderModelsMap"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/auth/principal": {
      "get": {
        "operationId": "getPrincipal",
        "tags": [
          "Authentication and Authorization"
        ],
        "summary": "retrieves the current security principal",
        "parameters": [],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.nucleus.lib.auth.PrincipalWithFeatureFlags"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/auth/authorizations/{operation}": {
      "get": {
        "operationId": "isAuthorized",
        "tags": [
          "Authentication and Authorization"
        ],
        "summary": "andrewziegler TODO document route",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "path",
            "name": "operation",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success"
          }
        }
      }
    },
    "/computecluster/{executionId}/computeClusterStatus": {
      "get": {
        "operationId": "getComputeClusterStatus",
        "tags": [
          "ComputeCluster"
        ],
        "summary": "Get the status of the compute cluster for an execution",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string",
              "$ref": "#/components/schemas/DominoId"
            },
            "in": "path",
            "name": "executionId",
            "description": "ID of the execution",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.computegrid.ComputeClusterStatus"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/computecluster/{executionId}/computeClusterFileSync": {
      "post": {
        "operationId": "startComputeClusterFileSync",
        "tags": [
          "ComputeCluster"
        ],
        "summary": "Start compute cluster file sync",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string",
              "$ref": "#/components/schemas/DominoId"
            },
            "in": "path",
            "name": "executionId",
            "description": "ID of the execution",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.computegrid.ComputeClusterFileSyncResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/computecluster/{executionId}/computeClusterFileSyncStatus": {
      "get": {
        "operationId": "getComputeClusterFileSyncStatus",
        "tags": [
          "ComputeCluster"
        ],
        "summary": "Get the file sync status of the compute cluster for an execution",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string",
              "$ref": "#/components/schemas/DominoId"
            },
            "in": "path",
            "name": "executionId",
            "description": "ID of the execution",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.computegrid.ComputeClusterFileSyncStatusResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/gruz/import": {
      "post": {
        "operationId": "importRuns",
        "tags": [
          "Gruz"
        ],
        "summary": "Import Run records (for migration purposes)",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "ImportRunRequest wrapping an array of Raw Run objects",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.gruz.web.RunImportRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success (content is the number of created runs)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DominoId"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/guardrails/comments": {
      "post": {
        "operationId": "createComment",
        "tags": [
          "Guardrails"
        ],
        "summary": "Create a comment",
        "requestBody": {
          "description": "comment creation details",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.guardrails.web.CreateCommentRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.guardrails.interface.DeliverableCommentThreadDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "get": {
        "operationId": "getCommentThreads",
        "tags": [
          "Guardrails"
        ],
        "summary": "get comments threads for a deliverable",
        "parameters": [
          {
            "in": "query",
            "name": "deliverableId",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "schema": {
              "nullable": true,
              "type": "string",
              "enum": [
                "Open",
                "Resolved"
              ]
            },
            "in": "query",
            "name": "threadStatus",
            "description": "optional filter by comment thread status (either Open or Resolved)",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.guardrails.interface.DeliverableCommentThreadDto"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/guardrails/comments/deliverable/{deliverableId}/artifact/{artifactId}": {
      "get": {
        "operationId": "getCommentThreadByArtifact",
        "tags": [
          "Guardrails"
        ],
        "summary": "Get a comment thread by deliverable ID and artifact ID",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "path",
            "name": "deliverableId",
            "description": "Deliverable Id",
            "required": true
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "path",
            "name": "artifactId",
            "description": "Artifact ID",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.guardrails.interface.DeliverableCommentThreadDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/guardrails/comments/deliverable/{deliverableId}/approval/{approvalId}": {
      "get": {
        "operationId": "getCommentThreadByApproval",
        "tags": [
          "Guardrails"
        ],
        "summary": "Get a comment thread by deliverable ID and approval ID",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "path",
            "name": "deliverableId",
            "description": "Deliverable Id",
            "required": true
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "path",
            "name": "approvalId",
            "description": "Approval ID",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.guardrails.interface.DeliverableCommentThreadDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/guardrails/comments/{threadId}/{commentId}": {
      "delete": {
        "operationId": "deleteComment",
        "tags": [
          "Guardrails"
        ],
        "summary": "delete a comment in a comment thread",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            },
            "in": "path",
            "name": "threadId",
            "description": "Comment thread ID",
            "required": true
          },
          {
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            },
            "in": "path",
            "name": "commentId",
            "description": "Comment ID",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.guardrails.interface.DeliverableCommentThreadDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "put": {
        "operationId": "updateComment",
        "tags": [
          "Guardrails"
        ],
        "summary": "Update a comment in a comment thread",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            },
            "in": "path",
            "name": "threadId",
            "description": "Comment thread ID",
            "required": true
          },
          {
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            },
            "in": "path",
            "name": "commentId",
            "description": "Comment ID",
            "required": true
          }
        ],
        "requestBody": {
          "description": "updated comment body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.guardrails.web.UpdateCommentRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.guardrails.interface.DeliverableCommentThreadDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/guardrails/comments/{threadId}": {
      "put": {
        "operationId": "updateThreadStatus",
        "tags": [
          "Guardrails"
        ],
        "summary": "update a comment thread's status",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            },
            "in": "path",
            "name": "threadId",
            "description": "Comment thread ID",
            "required": true
          }
        ],
        "requestBody": {
          "description": "updated comment body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.guardrails.web.UpdateThreadStatusRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.guardrails.interface.DeliverableCommentThreadDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/guardrails/comments/summary": {
      "get": {
        "operationId": "getCommentsSummary",
        "tags": [
          "Guardrails"
        ],
        "summary": "get comments summary for a deliverable",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "deliverableId",
            "description": "deliverable ID for which to get comments summary",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.guardrails.interface.DeliverableCommentsSummary"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/guardrails/comments/counts": {
      "post": {
        "operationId": "getCommentCounts",
        "tags": [
          "Guardrails"
        ],
        "summary": "get comments counts for a list of deliverables",
        "requestBody": {
          "description": "deliverable IDs for which to get comment counts",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.guardrails.web.GetCommentCountsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.guardrails.interface.CommentCountsDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/guardrails/audit-event": {
      "post": {
        "operationId": "recordGuardrailsAuditEvent",
        "tags": [
          "Guardrails"
        ],
        "summary": "record guardrails audit event",
        "requestBody": {
          "description": "guardrails audit event type and details",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.guardrails.web.RecordGuardrailsAuditEventRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/jobs": {
      "get": {
        "operationId": "getJobs",
        "tags": [
          "Jobs"
        ],
        "summary": "Gets all Jobs for the given Project",
        "parameters": [
          {
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "in": "query",
            "name": "dominoStatsSortFieldName",
            "description": "If orderBy is set to \"dominoStatsField\", then which field of Domino Stats to sort by. Otherwise, this field is ignored",
            "required": false
          },
          {
            "in": "query",
            "name": "projectId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Id of the Project"
          },
          {
            "in": "query",
            "name": "page_size",
            "schema": {
              "type": "number"
            },
            "description": "Number of projects to fetch"
          },
          {
            "in": "query",
            "name": "sort_by",
            "schema": {
              "type": "string"
            },
            "description": "Order to sort by"
          },
          {
            "in": "query",
            "name": "order_by",
            "schema": {
              "type": "string"
            },
            "description": "Field on which sort has to be applied"
          },
          {
            "in": "query",
            "name": "page_no",
            "schema": {
              "type": "number"
            },
            "description": "Page number to fetch"
          },
          {
            "in": "query",
            "name": "status",
            "schema": {
              "type": "string"
            },
            "description": "Status of job to fetch"
          },
          {
            "in": "query",
            "name": "tag",
            "schema": {
              "type": "string"
            },
            "description": "Optional Tag filter"
          },
          {
            "in": "query",
            "name": "query",
            "schema": {
              "type": "string"
            },
            "description": "Optional search query"
          },
          {
            "in": "query",
            "name": "show_archived",
            "schema": {
              "type": "boolean"
            },
            "required": false,
            "description": "If show_archived is true, then jobs that are archived also will be shown."
          },
          {
            "in": "query",
            "name": "type",
            "schema": {
              "type": "string"
            },
            "description": "Optional job type filter"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.jobs.interface.JobSet"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/jobs/timeline/project/{projectId}": {
      "get": {
        "operationId": "getJobsTimeline",
        "tags": [
          "Jobs"
        ],
        "summary": "Gets Jobs timeline for a Project",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "projectId",
            "required": true
          },
          {
            "in": "query",
            "name": "tag",
            "schema": {
              "type": "string"
            },
            "required": false,
            "description": "Optional Tag filter"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.jobs.interface.JobsTimelineSet"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/jobs/{jobId}": {
      "get": {
        "operationId": "getJob",
        "tags": [
          "Jobs"
        ],
        "summary": "Gets a job",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "jobId",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.jobs.interface.Job"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/jobs/{jobId}/tags": {
      "get": {
        "operationId": "getTagsForJob",
        "tags": [
          "Tags"
        ],
        "summary": "Get the Tags applied to the given Job",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "jobId",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.jobs.interface.TagApplication"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/jobs/projects/{projectId}/tags": {
      "get": {
        "operationId": "getTagsInProject",
        "tags": [
          "Tags"
        ],
        "summary": "Get the Job Tags used in this Project",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "projectId",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.jobs.interface.Tag"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/jobs/{jobId}/comments": {
      "get": {
        "operationId": "getComments",
        "tags": [
          "JobComments"
        ],
        "summary": "Get all comments specific to job context",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "jobId",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.jobs.interface.CommentThread"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/jobs/{jobId}/allComments": {
      "get": {
        "operationId": "getAllComments",
        "tags": [
          "JobComments"
        ],
        "summary": "Get all aggregated comments",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "jobId",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.jobs.interface.CommentThread"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/jobs/{jobId}/resultFile/comments": {
      "get": {
        "operationId": "getResultFileComments",
        "tags": [
          "JobComments"
        ],
        "summary": "Get all comments specific to result files generated by running the job",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "jobId",
            "required": true
          },
          {
            "in": "query",
            "name": "fileName",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Name of the result file"
          },
          {
            "in": "query",
            "name": "commitId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "git commit identifier to pick the result file"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.jobs.interface.CommentThread"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/jobs/{jobId}/comment": {
      "post": {
        "operationId": "createJobComment",
        "tags": [
          "JobComments"
        ],
        "summary": "Create a Job Comment",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "jobId",
            "required": true
          }
        ],
        "requestBody": {
          "description": "JSON object with information to comment on the job",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.jobs.web.CreateComment"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.jobs.interface.CommentThread"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/jobs/{jobId}/file/comment": {
      "post": {
        "operationId": "createJobResultFileComment",
        "tags": [
          "JobComments"
        ],
        "summary": "Create a Job Result File Comment",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "jobId",
            "required": true
          },
          {
            "in": "query",
            "name": "fileName",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Name of the result file to comment to"
          },
          {
            "in": "query",
            "name": "commitId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "git commit identifier to pick the result file"
          }
        ],
        "requestBody": {
          "description": "JSON object with information to comment on a result file",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.jobs.web.CreateComment"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.jobs.interface.CommentThread"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/jobs/{jobId}/comment/{threadId}": {
      "delete": {
        "operationId": "archiveComment",
        "tags": [
          "JobComments"
        ],
        "summary": "Archive the comment in a comment thread",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "jobId",
            "required": true
          },
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "threadId",
            "required": true
          }
        ],
        "requestBody": {
          "description": "JSON object with information about the index of the comment to be archived",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.jobs.web.ArchiveComment"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.jobs.interface.Comment"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/jobs/{jobId}/tag": {
      "post": {
        "operationId": "addTagToJob",
        "tags": [
          "Tags"
        ],
        "summary": "Creates a Tag for a jobId",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "jobId",
            "required": true
          }
        ],
        "requestBody": {
          "description": "JSON object with information for creating tag",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.jobs.web.CreateTag"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.jobs.interface.Tag"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "delete": {
        "operationId": "removeTagFromJob",
        "tags": [
          "Tags"
        ],
        "summary": "Deletes a tag for a jobId",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "jobId",
            "required": true
          }
        ],
        "requestBody": {
          "description": "JSON object with information for delete tag",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.jobs.web.RemoveTagFromJob"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.jobs.interface.Tag"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/jobs/{jobId}/name": {
      "post": {
        "operationId": "updateJob",
        "tags": [
          "Jobs"
        ],
        "summary": "Update name for job",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "jobId",
            "required": true
          }
        ],
        "requestBody": {
          "description": "JSON object with information for new name",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.jobs.web.UpdateJobName"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.jobs.interface.Job"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/jobs/{jobId}/results": {
      "get": {
        "operationId": "getResults",
        "tags": [
          "JobResults"
        ],
        "summary": "Get Results for a Job",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "jobId",
            "required": true
          },
          {
            "in": "query",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ProjectId associated with the job"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.jobs.interface.JobResultFiles"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/jobs/{jobId}/{contentId}/contents": {
      "get": {
        "operationId": "getResultContents",
        "tags": [
          "JobResults"
        ],
        "summary": "Gets the contents of the result file",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "jobId",
            "required": true
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "path",
            "name": "contentId",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.jobs.interface.ResultFileContent"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/jobs/{jobId}/logsWithProblemSuggestions": {
      "get": {
        "operationId": "getLogsWithProblemSuggestions",
        "tags": [
          "LogsWithProblemSuggestion"
        ],
        "summary": "Get the suggestion when problem occurs in a job along with the logs",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "jobId",
            "required": true
          },
          {
            "in": "query",
            "name": "logType",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "console",
                "stdout",
                "stderr",
                "stdoutstderr",
                "prepareoutput"
              ],
              "example": "console  |  stdout  |  stderr  |  stdoutstderr  |  prepareoutput",
              "default": "console"
            },
            "description": "Types of logs:\n * `console` - This is the default if the value is not provided. All logs lines displayed in the job's runtime environment.\n * `stdout` - Log lines displayed in the stderr of the job's runtime environment.\n * `stderr` - Log lines displayed in the stderr of the job's runtime environment.\n * `stdoutstderr` - Interleaved stdout and stderr.\n * `prepareoutput` - Log lines generated by the environment preparing the job.\n"
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "number",
              "default": 10000
            },
            "description": "Max number of log lines to fetch. Will be overridden by the configuration's limit if this value exceeds the configuration's limit, or if this value is not provided."
          },
          {
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "type": "number",
              "default": 0
            },
            "description": "The index of the current body of logs to start fetching from. 0 by default and typically won't be used for a timestamp-based offset log fetching strategy."
          },
          {
            "in": "query",
            "name": "latestTimeNano",
            "required": false,
            "schema": {
              "type": "string",
              "example": "1543538813745986325",
              "default": "0"
            },
            "description": "The epoch time in nanoseconds to start fetching from, such as \"1543538813745986325\". \"0\" by default and will typically be used for a timestamp-based offset log fetching strategy."
          }
        ],
        "responses": {
          "200": {
            "description": "Scenarios:<br>\nIf the problem  detector detects no problem, then the client should expect\n  * a `LogsWithProblemSuggestion` object with only logs\n\nIf the problem  detector detects the problem, then the client should expect\n  * a `LogsWithProblemSuggestion` object with logs with problem suggestions\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.jobs.interface.LogsWithProblemSuggestion"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/jobs/jobs/{jobId}/usage": {
      "get": {
        "operationId": "getResourceUsage",
        "tags": [
          "Jobs"
        ],
        "summary": "Get resource usage for a Job",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "jobId",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.jobs.interface.JobResourceUsage"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/jobs/jobs/{jobId}/gpuUsage": {
      "get": {
        "operationId": "getGpuResourceUsage",
        "tags": [
          "Jobs"
        ],
        "summary": "Get gpu usage for a Job",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "jobId",
            "required": true
          },
          {
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "in": "query",
            "name": "nodeType",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.jobs.interface.JobGpuResourceUsage"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/jobs/start": {
      "post": {
        "operationId": "startJob",
        "tags": [
          "Jobs"
        ],
        "summary": "Starts a new Job",
        "requestBody": {
          "description": "JSON object with information for starting the Job",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.jobs.web.StartJobRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.jobs.interface.Job"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "409": {
            "$ref": "#/components/responses/Relogin"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/jobs/startWorkflowJob": {
      "post": {
        "operationId": "startWorkflowJob",
        "tags": [
          "Jobs"
        ],
        "summary": "Starts a new Job as part of a workflow",
        "requestBody": {
          "description": "JSON object with information for starting the Job",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.jobs.web.StartWorkflowJobRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.jobs.interface.Job"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "409": {
            "$ref": "#/components/responses/Relogin"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/jobs/{projectId}/resolveJobDefaults": {
      "post": {
        "operationId": "resolveJobDefaults",
        "tags": [
          "Jobs"
        ],
        "summary": "Resolves default values used to create a Job. Allows all properties to be known externally before Job creation",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "projectId",
            "required": true
          }
        ],
        "requestBody": {
          "description": "JSON object with information for starting the Job",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.jobs.web.ResolveDefaultJobPropertiesRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.jobs.interface.ResolvedJobProperties"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "409": {
            "$ref": "#/components/responses/Relogin"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/jobs/{projectId}/retrieveValidProperties": {
      "get": {
        "operationId": "retrieveValidJobProperties",
        "tags": [
          "Jobs"
        ],
        "summary": "Retrieves valid properties that can be used for starting a job, like available hardware tiers, environments, etc.",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "projectId",
            "required": true
          },
          {
            "schema": {
              "nullable": true,
              "format": "int32",
              "type": "number"
            },
            "default": 10,
            "in": "query",
            "name": "pageSize",
            "description": "Number of environments, revisions per environment, and edvs to retrieve",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.jobs.interface.ValidJobProperties"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "409": {
            "$ref": "#/components/responses/Relogin"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/jobs/archive": {
      "post": {
        "operationId": "archiveJob",
        "tags": [
          "Jobs"
        ],
        "summary": "Archive a Job",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "JSON object with information for archiving the Job",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.jobs.web.ArchiveJobRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.jobs.interface.Job"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/jobs/stop": {
      "post": {
        "operationId": "stopJob",
        "tags": [
          "Jobs"
        ],
        "summary": "Stop a Job",
        "parameters": [],
        "requestBody": {
          "description": "JSON object with information for stopping the Job",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.jobs.web.JobStopOperationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.jobs.interface.Job"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/jobs/restart": {
      "post": {
        "operationId": "restartJob",
        "tags": [
          "Jobs"
        ],
        "summary": "Restart a Job",
        "parameters": [],
        "requestBody": {
          "description": "JSON object with information for restarting the Job",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.jobs.web.JobRestartOperationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.jobs.interface.Job"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "409": {
            "$ref": "#/components/responses/Relogin"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/jobs/getStatus/values": {
      "get": {
        "operationId": "getJobStatuses",
        "tags": [
          "Jobs"
        ],
        "summary": "Get possible status for a Job",
        "parameters": [],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.jobs.interface.JobStatus"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/jobs/events": {
      "get": {
        "operationId": "notFound",
        "tags": [
          "Jobs",
          "Socket"
        ],
        "summary": "Entities that are pushed via socket updates.",
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.jobs.web.JobEvents"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/jobs/{jobId}/resourceStatuses": {
      "get": {
        "operationId": "getResourcesStatus",
        "tags": [
          "Jobs"
        ],
        "summary": "Gets the resource statuses for the running Job",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "jobId",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.jobs.interface.JobResourcesStatus"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/jobs/{jobId}/runtimeExecutionDetails": {
      "get": {
        "operationId": "getRuntimeExecutionDetails",
        "tags": [
          "Jobs"
        ],
        "summary": "Get the runtime execution details for a given job",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "jobId",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.jobs.interface.JobRuntimeExecutionDetails"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/jobs/{jobId}/linkJobToGoal": {
      "post": {
        "operationId": "linkJobToGoal",
        "tags": [
          "Job"
        ],
        "summary": "Link job to a goal",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "jobId",
            "required": true
          }
        ],
        "requestBody": {
          "description": "JSON object with information for linking goal to a job",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.jobs.web.LinkJobtoGoalRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.jobs.interface.JobGoal"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/jobs/{jobId}/unlinkJobGoal": {
      "post": {
        "operationId": "unlinkJobFromGoal",
        "tags": [
          "Job"
        ],
        "summary": "Unlink job from a goal",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "jobId",
            "required": true
          }
        ],
        "requestBody": {
          "description": "JSON object with information for linking goal to a job",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.jobs.web.UnlinkJobfromGoalRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.jobs.interface.JobGoal"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/jobs/{jobId}/{clusterType}/hostAndPort": {
      "get": {
        "operationId": "getComputeClusterHostAndPort",
        "tags": [
          "Jobs"
        ],
        "summary": "Gets host and port for spark web ui reverse proxy",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "jobId",
            "description": "ID of the job",
            "required": true
          },
          {
            "in": "path",
            "name": "clusterType",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/domino.computecluster.api.ComputeClusterType.Value"
            },
            "description": "name of the cluster to connect to"
          }
        ],
        "responses": {
          "200": {
            "description": "success"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/jobs/project/{projectId}/codeInfo/{jobId}": {
      "get": {
        "operationId": "getCodeInfo",
        "tags": [
          "Job"
        ],
        "summary": "get CodeInfo for a specific job",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "projectId",
            "description": "Id of the project",
            "required": true
          },
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "jobId",
            "description": "ID of the job",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/components/schemas/domino.jobs.interface.CodeInfoDto"
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/jobs/job/{jobId}/artifactsInfo": {
      "get": {
        "operationId": "getArtifactsInfo",
        "tags": [
          "Job"
        ],
        "summary": "get ArtifactsInfoDto for a specific job",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "jobId",
            "description": "ID of the job",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/components/schemas/domino.jobs.interface.ArtifactsInfoDto"
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/jobs/{jobId}/computeClusterStatus": {
      "get": {
        "operationId": "getComputeClusterStatus",
        "tags": [
          "Job"
        ],
        "summary": "Get the status of the compute cluster for a job",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string",
              "$ref": "#/components/schemas/DominoId"
            },
            "in": "path",
            "name": "jobId",
            "description": "ID of the job",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.computegrid.ComputeClusterStatus"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/jobs/{jobId}/computeClusterDetails": {
      "get": {
        "operationId": "getComputeClusterDetails",
        "tags": [
          "Job"
        ],
        "summary": "Get the details of the compute cluster for a job",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string",
              "$ref": "#/components/schemas/DominoId"
            },
            "in": "path",
            "name": "jobId",
            "description": "ID of the job",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.computecluster.api.ComputeClusterDetails"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/jobs/{jobId}/computeClusterFileSync": {
      "post": {
        "operationId": "syncFilesToComputeCluster",
        "tags": [
          "Job"
        ],
        "summary": "Start compute cluster file sync",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string",
              "$ref": "#/components/schemas/DominoId"
            },
            "in": "path",
            "name": "jobId",
            "description": "ID of the job",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.computegrid.ComputeClusterFileSyncResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/jobs/{jobId}/computeClusterFileSyncStatus": {
      "get": {
        "operationId": "getComputeClusterFileSyncStatus",
        "tags": [
          "Job"
        ],
        "summary": "Get the file sync status of the compute cluster for a job",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string",
              "$ref": "#/components/schemas/DominoId"
            },
            "in": "path",
            "name": "jobId",
            "description": "ID of the job",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.computegrid.ComputeClusterFileSyncStatusResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/jobs/{projectId}/{clusterType}/defaultComputeClusterSettings": {
      "get": {
        "operationId": "getDefaultComputeClusterSettings",
        "tags": [
          "Job"
        ],
        "summary": "Get the default compute settings for jobs",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string",
              "$ref": "#/components/schemas/DominoId"
            },
            "in": "path",
            "name": "projectId",
            "description": "ID of the project",
            "required": true
          },
          {
            "in": "path",
            "name": "clusterType",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/domino.computecluster.api.ComputeClusterType.Value"
            },
            "description": "Type of the cluster to get settings for"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.computecluster.api.DefaultComputeClusterSettings"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/jobs/actionableInsights/startJob": {
      "post": {
        "operationId": "startActionableInsightsJob",
        "tags": [
          "ActionableInsights"
        ],
        "summary": "Run Actionable Insights Job",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "userEmail",
            "description": "Email of the user",
            "type": "string",
            "required": true
          },
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string",
              "$ref": "#/components/schemas/DominoId"
            },
            "in": "query",
            "name": "projectId",
            "description": "Id of the project",
            "required": true
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "commandParameters",
            "description": "Command parameters that needs to be passed to the job",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projects.api.ProjectSummary"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/jobs/{jobId}/snapshots": {
      "get": {
        "operationId": "getSnapshotsCreatedByJob",
        "tags": [
          "Jobs"
        ],
        "summary": "Get snapshots created by a job",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "jobId",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.datasetrw.api.DatasetRwSnapshotDto"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/hardwareTier/{hardwareTierId}": {
      "get": {
        "operationId": "getHardwareTier",
        "tags": [
          "Hardware Tier"
        ],
        "summary": "Get a hardware tier",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "path",
            "name": "hardwareTierId",
            "required": true
          },
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string",
              "$ref": "#/components/schemas/DominoId"
            },
            "in": "query",
            "name": "projectId",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.hardwaretier.api.HardwareTierDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/hardwareTier/withCapacity/{hardwareTierId}": {
      "get": {
        "operationId": "getHardwareTierWithCapacity",
        "tags": [
          "Hardware Tier"
        ],
        "summary": "Get a hardware tier with capacity",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "path",
            "name": "hardwareTierId",
            "required": true
          },
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string",
              "$ref": "#/components/schemas/DominoId"
            },
            "in": "query",
            "name": "projectId",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.hardwaretier.api.HardwareTierWithCapacityDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/hardwareTier": {
      "post": {
        "operationId": "createHardwareTier",
        "tags": [
          "Hardware Tier"
        ],
        "summary": "Create a hardware tier",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.hardwaretier.api.NewHardwareTierDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.hardwaretier.api.HardwareTierDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "get": {
        "operationId": "getAllHardwareTiers",
        "tags": [
          "Hardware Tier"
        ],
        "summary": "Get all hardware tiers",
        "parameters": [
          {
            "in": "query",
            "name": "show_archived",
            "schema": {
              "type": "boolean"
            },
            "required": false,
            "description": "If show_archived is true, then hardware tiers that are archived also will be shown."
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.hardwaretier.api.HardwareTierEnvelope"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/hardwareTier/update": {
      "put": {
        "operationId": "updateHardwareTier",
        "tags": [
          "Hardware Tier"
        ],
        "summary": "Update a hardware tier",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.hardwaretier.api.HardwareTierDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.hardwaretier.api.HardwareTierDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/hardwareTier/archive": {
      "post": {
        "operationId": "archiveHardwareTier",
        "tags": [
          "Hardware Tier"
        ],
        "summary": "Archive a hardware tier",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.hardwaretier.api.HardwareTierIdentifier"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "description": "not found"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/workspace/project/{projectId}/workspace": {
      "post": {
        "operationId": "createAndStartWorkspace",
        "tags": [
          "Workspace"
        ],
        "summary": "Create workspace",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "projectId",
            "description": "Id of the project",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Create workspace request",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.workspace.web.CreateWorkspaceRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.workspace.api.WorkspaceDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "get": {
        "operationId": "provisionedWorkspaces",
        "tags": [
          "Workspace"
        ],
        "summary": "Get all provisioned (i.e. not deleted) workspaces for project",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "projectId",
            "description": "project id",
            "required": true
          },
          {
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "in": "query",
            "name": "offset",
            "description": "offset",
            "required": true
          },
          {
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "in": "query",
            "name": "limit",
            "description": "max length returned",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.workspace.api.WorkspacePageDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/workspace/project/{projectId}/reproduceWorkspace": {
      "post": {
        "operationId": "reproduceAndStartWorkspace",
        "tags": [
          "Workspace"
        ],
        "summary": "Reproduce workspace",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "projectId",
            "description": "Id of the project",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Reproduce workspace request",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.workspace.web.ReproduceWorkspaceRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.workspace.api.WorkspaceDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/workspace/project/{projectId}/workspace/{workspaceId}/updateTitle": {
      "post": {
        "operationId": "updateWorkspaceTitle",
        "tags": [
          "Workspace"
        ],
        "summary": "Update workspace title",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "projectId",
            "description": "Id of the project",
            "required": true
          },
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "workspaceId",
            "description": "workspace id",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Update workspace title request",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.workspace.web.UpdateWorkspaceTitleRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.workspace.api.WorkspaceDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/workspace/project/{projectId}/workspace/{workspaceId}": {
      "post": {
        "operationId": "updateWorkspaceConfigTemplate",
        "tags": [
          "Workspace"
        ],
        "summary": "Update workspace",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "projectId",
            "description": "Id of the project",
            "required": true
          },
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "workspaceId",
            "description": "workspace id",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Update workspace request",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.workspace.web.UpdateWorkspaceRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.workspace.api.WorkspaceDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "get": {
        "operationId": "getWorkspace",
        "tags": [
          "Workspace"
        ],
        "summary": "Get workspace",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "projectId",
            "description": "Id of the project",
            "required": true
          },
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "workspaceId",
            "description": "workspace id",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.workspace.api.WorkspaceDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "delete": {
        "operationId": "deleteWorkspace",
        "tags": [
          "Workspace"
        ],
        "summary": "Delete workspace",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "projectId",
            "description": "Id of the project",
            "required": true
          },
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "workspaceId",
            "description": "workspace id",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.workspace.api.WorkspaceDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/workspace/project/{projectId}/deleted": {
      "get": {
        "operationId": "deletedWorkspaces",
        "tags": [
          "Workspace"
        ],
        "summary": "Get deleted workspaces for project",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "projectId",
            "description": "project id",
            "required": true
          },
          {
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "in": "query",
            "name": "offset",
            "description": "offset",
            "required": true
          },
          {
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "in": "query",
            "name": "limit",
            "description": "max length returned",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.workspace.api.WorkspacePageDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/workspace/project/{projectId}/owner/{ownerId}": {
      "get": {
        "operationId": "ownerProvisionedWorkspaces",
        "tags": [
          "Workspace"
        ],
        "summary": "Get all provisioned (i.e. not deleted) workspaces for project by owner",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "projectId",
            "description": "project id",
            "required": true
          },
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "ownerId",
            "description": "owner id",
            "required": true
          },
          {
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "in": "query",
            "name": "offset",
            "description": "offset",
            "required": true
          },
          {
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "in": "query",
            "name": "limit",
            "description": "max length returned",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.workspace.api.WorkspacePageDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/workspace": {
      "get": {
        "operationId": "ownerProvisionedWorkspacesAllProjects",
        "tags": [
          "Workspace"
        ],
        "summary": "Get all provisioned (i.e. not deleted) workspaces owned by a user across projects, sorted by last started time descending.",
        "parameters": [
          {
            "schema": {
              "default": 10,
              "format": "int32",
              "type": "integer"
            },
            "in": "query",
            "name": "pageSize",
            "description": "length of items in page",
            "required": false
          },
          {
            "schema": {
              "default": 1,
              "format": "int32",
              "type": "integer"
            },
            "in": "query",
            "name": "pageNumber",
            "description": "page number",
            "required": false
          },
          {
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "in": "query",
            "name": "q",
            "description": "the searchy query to filter by name",
            "required": false
          },
          {
            "schema": {
              "default": "LastStarted",
              "nullable": true,
              "type": "string",
              "enum": [
                "Name",
                "ProjectName",
                "LastStarted",
                "HardwareTierName",
                "Status"
              ]
            },
            "in": "query",
            "name": "sortField",
            "description": "The field to sort the collection by (in the given sortOrder).",
            "required": false
          },
          {
            "schema": {
              "default": "desc",
              "nullable": true,
              "type": "string",
              "items": {
                "type": "string"
              },
              "enum": [
                "asc",
                "desc"
              ]
            },
            "in": "query",
            "name": "sortOrder",
            "description": "The direction to sort the collection by. The direction is 'desc' by default in all cases.",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.workspace.api.WorkspacePageCollectionDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/workspace/project/{projectId}/workspace/{workspaceId}/sessions": {
      "post": {
        "operationId": "startWorkspaceSession",
        "tags": [
          "Workspace"
        ],
        "summary": "Start workspace session",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "projectId",
            "description": "Id of the project",
            "required": true
          },
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "workspaceId",
            "description": "workspace id",
            "required": true
          },
          {
            "schema": {
              "type": "array",
              "items": {
                "pattern": "^[0-9a-f]{24}$",
                "type": "string"
              }
            },
            "in": "query",
            "name": "externalVolumeMounts",
            "description": "external volume mount id's",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.workspace.api.WorkspaceSessionDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "get": {
        "operationId": "listWorkspaceSessions",
        "tags": [
          "Workspace"
        ],
        "summary": "List workspace sessions",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "projectId",
            "description": "Id of the project",
            "required": true
          },
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "workspaceId",
            "description": "workspace id",
            "required": true
          },
          {
            "schema": {
              "default": 0,
              "format": "int32",
              "type": "integer"
            },
            "in": "query",
            "name": "offset",
            "description": "offset",
            "required": false
          },
          {
            "schema": {
              "default": 5,
              "format": "int32",
              "type": "integer"
            },
            "in": "query",
            "name": "limit",
            "description": "limit",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.workspace.api.WorkspaceSessionDto"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/workspace/project/{projectId}/workspace/{workspaceId}/stop": {
      "post": {
        "operationId": "stopWorkspaceSession",
        "tags": [
          "Workspace"
        ],
        "summary": "Stop workspace session",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "projectId",
            "description": "Id of the project",
            "required": true
          },
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "workspaceId",
            "description": "workspace id",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.workspace.api.WorkspaceSessionDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/workspace/project/{projectId}/sessions/{workspaceSessionId}": {
      "get": {
        "operationId": "getWorkspaceSession",
        "tags": [
          "Workspace"
        ],
        "summary": "Get workspace session",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "projectId",
            "description": "Id of the project",
            "required": true
          },
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "workspaceSessionId",
            "description": "workspace session id",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.workspace.api.WorkspaceSessionDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/workspace/project/{projectId}/owner/{ownerId}/quota": {
      "get": {
        "operationId": "quotaStatus",
        "tags": [
          "Workspace"
        ],
        "summary": "Get status of workspace quota",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "projectId",
            "description": "project id",
            "required": true
          },
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "ownerId",
            "description": "owner id",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.workspace.api.WorkspaceQuotaStatusDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/workspace/adminDashboardSummary": {
      "get": {
        "operationId": "getWorkspaceAdminSummary",
        "tags": [
          "Workspace"
        ],
        "summary": "Get workspace admin dashboard summary data",
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.workspace.api.WorkspaceAdminPageSummaryDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/workspace/adminDashboardRowData": {
      "get": {
        "operationId": "getAdminDashboardRowData",
        "tags": [
          "Workspace"
        ],
        "summary": "Get all workspace admin dashboard entries",
        "parameters": [
          {
            "schema": {
              "default": 0,
              "nullable": true,
              "format": "int32",
              "type": "integer"
            },
            "in": "query",
            "name": "offset",
            "description": "The number of items to skip relative to the checkpoint project before starting to collect the\npage. If no checkpoint project is provided, will skip relative to the first project of the first user.\nCan be negative.\n",
            "required": false
          },
          {
            "schema": {
              "default": 50,
              "nullable": true,
              "format": "int32",
              "type": "integer"
            },
            "in": "query",
            "name": "limit",
            "description": "The size of the page to return.",
            "required": false
          },
          {
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "in": "query",
            "name": "searchString",
            "description": "Filters projects by owner name and project name substrings",
            "required": false
          },
          {
            "schema": {
              "nullable": true,
              "type": "string",
              "$ref": "#/components/schemas/domino.workspace.api.WorkspaceSortableColumns.Value",
              "enum": [
                "volumeSize",
                "lastStartTime",
                "createdTime"
              ]
            },
            "in": "query",
            "name": "sortBy",
            "description": "A column name to sort over.",
            "required": false
          },
          {
            "schema": {
              "nullable": true,
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            },
            "in": "query",
            "name": "sortOrder",
            "description": "order of sort",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.workspace.api.WorkspaceAdminPageDataDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/workspace/events": {
      "get": {
        "operationId": "notFound",
        "tags": [
          "Workspace",
          "Socket"
        ],
        "summary": "A hack, which allows types for pusher service to be generated for consumption by the frontend. Should be deleted when we fix how we use swagger.",
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.workspace.web.WorkspaceEvents"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/workspace/{projectId}/getProvisionedWorkspaceCount": {
      "get": {
        "operationId": "getProvisionedWorkspaceCount",
        "tags": [
          "Workspace"
        ],
        "summary": "Get the number of provisioned workspaces for project",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "projectId",
            "description": "Id of the project",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/workspace/getGlobalSettings": {
      "get": {
        "operationId": "getGlobalSettings",
        "tags": [
          "Workspace"
        ],
        "summary": "Get the global workspace settings",
        "parameters": null,
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.workspace.api.WorkspaceGlobalSettingsDto"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/workspace/{executionId}/getSessionByExecutionId": {
      "get": {
        "operationId": "getWorkspaceExecutionInfo",
        "tags": [
          "Workspace"
        ],
        "summary": "Get workspace execution info",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "executionId",
            "description": "Id of the project",
            "required": true
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "ownerName",
            "description": "name of owner of this workspace",
            "required": true
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "projectName",
            "description": "name of project for this workspace is in",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.workspace.api.WorkspaceExecutionInfoDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/workspace/project/{projectId}/workspace/{workspaceId}/getWritableProjectMounts": {
      "get": {
        "operationId": "getWritableProjectMounts",
        "tags": [
          "Workspace"
        ],
        "summary": "For the frontend to get info on workspace's writable mounts (e.g. imported git repos)",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "projectId",
            "description": "project id",
            "required": true
          },
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "workspaceId",
            "description": "workspace id",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projects.api.WritableProjectMounts"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/workspace/{projectId}/{workspaceSessionId}/logs": {
      "get": {
        "operationId": "getLogs",
        "tags": [
          "Workspace",
          "Logs"
        ],
        "summary": "Get the logs of a workspace",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "projectId",
            "description": "ID of the project with the workspace",
            "required": true
          },
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "workspaceSessionId",
            "description": "ID of the workspace session",
            "required": true
          },
          {
            "schema": {
              "default": 10000,
              "nullable": true,
              "format": "int32",
              "type": "number"
            },
            "in": "query",
            "name": "limit",
            "description": "Max number of log lines to fetch. Will be overridden by the configuration's limit if this value exceeds the configuration's limit, or if this value is not provided.",
            "required": false
          },
          {
            "schema": {
              "default": 0,
              "format": "int32",
              "type": "number"
            },
            "in": "query",
            "name": "offset",
            "description": "The index of the current body of logs to start fetching from. 0 by default and typically won't be used for a timestamp-based offset log fetching strategy.",
            "required": false
          },
          {
            "schema": {
              "default": "0",
              "nullable": true,
              "type": "string",
              "example": "1543538813745986325"
            },
            "in": "query",
            "name": "latestTimeNano",
            "description": "The epoch time in nanoseconds to start fetching from, such as \"1543538813745986325\". \"0\" by default and will typically be used for a timestamp-based offset log fetching strategy.",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Scenarios:<br>\nIf the log retriever got NO logs, then the client should expect\n  * an empty `logContent` array\n\nfrom the returned LogSet.<br><br>\nIf the log retriever was done fetching ALL of the logs, then the client should expect\n  * `isComplete = true`\n  * `paginationFilter.limit = 0`\n\nfrom the returned LogSet.<br><br>\nIf the log retriever was NOT done fetching all of the logs, then the client should expect\n  * `isComplete = false`\n  * `paginationFilter` encoding the next `offset` or `latestTimeNano` of the last log line fetched by the retriever.\n\nfrom the returned LogSet.<br><br>\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.computegrid.LogSet"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/workspace/{projectId}/{workspaceSessionId}/realTimeLogs": {
      "get": {
        "operationId": "getRealTimeLogs",
        "tags": [
          "Workspace",
          "Logs"
        ],
        "summary": "Get the logs of a workspace",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "projectId",
            "description": "ID of the project with the workspace",
            "required": true
          },
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "workspaceSessionId",
            "description": "ID of the workspace session",
            "required": true
          },
          {
            "schema": {
              "default": 10000,
              "nullable": true,
              "format": "int32",
              "type": "number"
            },
            "in": "query",
            "name": "limit",
            "description": "Max number of log lines to fetch. Will be overridden by the configuration's limit if this value exceeds the configuration's limit, or if this value is not provided.",
            "required": false
          },
          {
            "schema": {
              "default": 0,
              "format": "int32",
              "type": "number"
            },
            "in": "query",
            "name": "offset",
            "description": "The index of the current body of logs to start fetching from. 0 by default and typically won't be used for a timestamp-based offset log fetching strategy.",
            "required": false
          },
          {
            "schema": {
              "default": "0",
              "nullable": true,
              "type": "string",
              "example": "1543538813745986325"
            },
            "in": "query",
            "name": "latestTimeNano",
            "description": "The epoch time in nanoseconds to start fetching from, such as \"1543538813745986325\". \"0\" by default and will typically be used for a timestamp-based offset log fetching strategy.",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Scenarios:<br>\nIf the log retriever got NO logs, then the client should expect\n  * an empty `logContent` array\n\nfrom the returned LogSet.<br><br>\nIf the log retriever was done fetching ALL of the logs, then the client should expect\n  * `isComplete = true`\n  * `paginationFilter.limit = 0`\n\nfrom the returned LogSet.<br><br>\nIf the log retriever was NOT done fetching all of the logs, then the client should expect\n  * `isComplete = false`\n  * `paginationFilter` encoding the next `offset` or `latestTimeNano` of the last log line fetched by the retriever.\n\nfrom the returned LogSet.<br><br>\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.computegrid.LogSet"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/workspace/{workspaceSessionId}/usage": {
      "get": {
        "operationId": "getResourceUsage",
        "tags": [
          "Workspace"
        ],
        "summary": "Get resource usage for a workspace session",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "query",
            "name": "projectId",
            "description": "projectId associated with the workspace",
            "required": true
          },
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "workspaceSessionId",
            "description": "ID of the workspace session",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.computegrid.ResourceUsage"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/workspace/{workspaceSessionId}/gpuUsage": {
      "get": {
        "operationId": "getGpuResourceUsage",
        "tags": [
          "Workspace"
        ],
        "summary": "Get gpu resource usage for a workspace session",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "workspaceSessionId",
            "description": "ID of the workspace session",
            "required": true
          },
          {
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "in": "query",
            "name": "nodeType",
            "description": "Type of Compute node. None defaults to running on standard execution",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.computegrid.GpuResourceUsage"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/workspace/{workspaceSessionId}/resourceStatuses": {
      "get": {
        "operationId": "getWorkspaceRepositoryStatus",
        "tags": [
          "Workspace"
        ],
        "summary": "Get the status of a workspace's repositories",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "query",
            "name": "projectId",
            "description": "ID of the Project",
            "required": true
          },
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "workspaceSessionId",
            "description": "ID of the workspace session",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.workspace.api.WorkspaceRepositoryState"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/workspace/{workspaceSessionId}/executionCheckpointStatuses": {
      "get": {
        "operationId": "getExecutionCheckpointReport",
        "tags": [
          "Workspace"
        ],
        "summary": "Get checkpoint in (name, status, and possibly detailed info about monitored resources associated with the checkpoint) for an execution",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "query",
            "name": "projectId",
            "description": "ID of the Project",
            "required": true
          },
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "workspaceSessionId",
            "description": "ID of the workspace session",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.computegrid.MonitoredResourceExecutionCheckpoint"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/workspace/{workspaceSessionId}/computeClusterStatus": {
      "get": {
        "operationId": "getComputeClusterStatus",
        "tags": [
          "Workspace"
        ],
        "summary": "Get the status of the compute cluster for a workspace session",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "query",
            "name": "projectId",
            "description": "ID of the Project",
            "required": true
          },
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "workspaceSessionId",
            "description": "ID of the workspace session",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.computegrid.ComputeClusterStatus"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/workspace/{workspaceSessionId}/computeClusterDetails": {
      "get": {
        "operationId": "getComputeClusterDetails",
        "tags": [
          "Workspace"
        ],
        "summary": "Get the details about the compute cluster for a workspace session",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "query",
            "name": "projectId",
            "description": "ID of the Project",
            "required": true
          },
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "workspaceSessionId",
            "description": "ID of the workspace session",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.computecluster.api.ComputeClusterDetails"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/workspace/{workspaceSessionId}/computeClusterFileSync": {
      "post": {
        "operationId": "syncFilesToComputeCluster",
        "tags": [
          "Workspace"
        ],
        "summary": "Start compute cluster file sync",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "query",
            "name": "projectId",
            "description": "ID of the Project",
            "required": true
          },
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "workspaceSessionId",
            "description": "ID of the workspace session",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.computegrid.ComputeClusterFileSyncResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/workspace/{workspaceSessionId}/computeClusterFileSyncStatus": {
      "get": {
        "operationId": "getComputeClusterFileSyncStatus",
        "tags": [
          "Workspace"
        ],
        "summary": "Get status of compute cluster file sync",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "query",
            "name": "projectId",
            "description": "ID of the Project",
            "required": true
          },
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "workspaceSessionId",
            "description": "ID of the workspace session",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.computegrid.ComputeClusterFileSyncStatusResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/workspace/{executionId}/{clusterType}/hostAndPort": {
      "get": {
        "operationId": "getComputeClusterHostAndPort",
        "tags": [
          "Workspace"
        ],
        "summary": "Get the host and port for a compute cluster's webUi",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "executionId",
            "description": "ID of the execution",
            "required": true
          },
          {
            "in": "path",
            "name": "clusterType",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/domino.computecluster.api.ComputeClusterType.Value"
            },
            "description": "name of the cluster to connect to"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/workspace/{projectId}/{clusterType}/defaultComputeClusterSettings": {
      "get": {
        "operationId": "getDefaultComputeClusterSettings",
        "tags": [
          "Workspace"
        ],
        "summary": "Get the default compute settings for workspaces",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string",
              "$ref": "#/components/schemas/DominoId"
            },
            "in": "path",
            "name": "projectId",
            "description": "ID of the project",
            "required": true
          },
          {
            "in": "path",
            "name": "clusterType",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/domino.computecluster.api.ComputeClusterType.Value"
            },
            "description": "Type of the cluster to get settings for"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.computecluster.api.DefaultComputeClusterSettings"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/workspace/project/{projectId}/runningClassicWorkspaces": {
      "get": {
        "operationId": "getRunningClassicWorkspaces",
        "tags": [
          "Workspace"
        ],
        "summary": "Get running classic workspaces for project",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "projectId",
            "description": "project id",
            "required": true
          },
          {
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "in": "query",
            "name": "offset",
            "description": "offset",
            "required": true
          },
          {
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "in": "query",
            "name": "limit",
            "description": "max length returned",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.workspace.api.WorkspacePageDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/workspace/project/{projectId}/ownerRunningClassicWorkspaces": {
      "get": {
        "operationId": "getRunningClassicWorkspacesForOwner",
        "tags": [
          "Workspace"
        ],
        "summary": "Get running classic workspaces owned by a user in a project",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "projectId",
            "description": "project id",
            "required": true
          },
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "query",
            "name": "ownerId",
            "description": "workspace owner id",
            "required": true
          },
          {
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "in": "query",
            "name": "offset",
            "description": "offset",
            "required": true
          },
          {
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "in": "query",
            "name": "limit",
            "description": "max length returned",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.workspace.api.WorkspacePageDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/workspace/stop/discard": {
      "post": {
        "operationId": "stopClassicWorkspaceDiscardChanges",
        "tags": [
          "Workspace"
        ],
        "summary": "Stop a Classic Workspace and throw away all changes",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.workspace.web.StopClassicWorkspaceRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/workspace/stop/save": {
      "post": {
        "operationId": "stopClassicWorkspaceSaveChanges",
        "tags": [
          "Workspace"
        ],
        "summary": "Stop a Classic Workspace and save all changes",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.workspace.web.StopClassicWorkspaceRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/workspace/project/{projectId}/getCheckpointForCommitIds": {
      "post": {
        "operationId": "getCheckpointForCommits",
        "tags": [
          "Workspace"
        ],
        "summary": "Get checkpoint for commitId",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "projectId",
            "description": "Id of the project",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Fetch checkpoint for commits request",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.workspace.web.FetchCheckpointForCommitsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.provenance.api.ProvenanceCheckpointDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/workspace/workspaceSessionId/{workspaceSessionId}/provenanceCheckpoints": {
      "get": {
        "operationId": "getProvenanceCheckpointsForWorkspaceSession",
        "tags": [
          "Workspace"
        ],
        "summary": "Get the provenance checkpoints for a workspace session",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "workspaceSessionId",
            "description": "ID of the execution corresponding to a workspace session",
            "required": true
          },
          {
            "schema": {
              "default": 0,
              "nullable": true,
              "format": "int32",
              "type": "integer"
            },
            "in": "query",
            "name": "offset",
            "description": "The number of items to skip.  Can not be negative.",
            "required": false
          },
          {
            "schema": {
              "default": 50,
              "nullable": true,
              "format": "int32",
              "type": "integer"
            },
            "in": "query",
            "name": "limit",
            "description": "The size of the page to return.",
            "required": false
          },
          {
            "schema": {
              "nullable": true,
              "type": "string",
              "$ref": "#/components/schemas/domino.provenance.api.SortableFields.Value",
              "enum": [
                "createdAt",
                "dfsBranch",
                "executionStart",
                "mainGitBranch"
              ]
            },
            "in": "query",
            "name": "sortBy",
            "description": "A column name to sort over - createdAt, dfsBranch, executionStart, mainGitBranch - default is 'createdAt'.",
            "required": false
          },
          {
            "schema": {
              "nullable": true,
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            },
            "in": "query",
            "name": "sortOrder",
            "description": "order of sort.  default is 'desc'.",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.workspace.api.WorkspaceSessionProvenanceDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/workspace/{executionId}/provenanceCheckpoints": {
      "get": {
        "operationId": "getProvenanceCheckpointsForExecution",
        "tags": [
          "Workspace"
        ],
        "summary": "Deprecated, please use getProvenanceCheckpointsForWorkspaceSession instead",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "query",
            "name": "projectId",
            "description": "ID of the Project",
            "required": true
          },
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "executionId",
            "description": "ID of the execution corresponding to a workspace session",
            "required": true
          },
          {
            "schema": {
              "default": 0,
              "nullable": true,
              "format": "int32",
              "type": "integer"
            },
            "in": "query",
            "name": "offset",
            "description": "The number of items to skip.  Can not be negative.",
            "required": false
          },
          {
            "schema": {
              "default": 50,
              "nullable": true,
              "format": "int32",
              "type": "integer"
            },
            "in": "query",
            "name": "limit",
            "description": "The size of the page to return.",
            "required": false
          },
          {
            "schema": {
              "nullable": true,
              "type": "string",
              "$ref": "#/components/schemas/domino.provenance.api.SortableFields.Value",
              "enum": [
                "createdAt",
                "dfsBranch",
                "executionStart",
                "mainGitBranch"
              ]
            },
            "in": "query",
            "name": "sortBy",
            "description": "A column name to sort over - createdAt, dfsBranch, executionStart, mainGitBranch - default is 'createdAt'.",
            "required": false
          },
          {
            "schema": {
              "nullable": true,
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            },
            "in": "query",
            "name": "sortOrder",
            "description": "order of sort.  default is 'desc'.",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.workspace.api.WorkspaceSessionProvenanceDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/workspace/project/{projectId}/workspaceId/{workspaceId}/provenanceCheckpoints": {
      "get": {
        "operationId": "getProvenanceCheckpointsForWorkspace",
        "tags": [
          "Workspace"
        ],
        "summary": "Get all provenance checkpoints for a workspace",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "projectId",
            "description": "ID of the project containing the workspace",
            "required": true
          },
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "workspaceId",
            "description": "ID of the workspace",
            "required": true
          },
          {
            "schema": {
              "default": 0,
              "nullable": true,
              "format": "int32",
              "type": "integer"
            },
            "in": "query",
            "name": "offset",
            "description": "The number of items to skip.  Can not be negative.\n",
            "required": false
          },
          {
            "schema": {
              "default": 50,
              "nullable": true,
              "format": "int32",
              "type": "integer"
            },
            "in": "query",
            "name": "limit",
            "description": "The size of the page to return.",
            "required": false
          },
          {
            "schema": {
              "nullable": true,
              "type": "string",
              "$ref": "#/components/schemas/domino.provenance.api.SortableFields.Value",
              "enum": [
                "createdAt",
                "dfsBranch",
                "executionStart",
                "mainGitBranch"
              ]
            },
            "in": "query",
            "name": "sortBy",
            "description": "A column name to sort over - createdAt, dfsBranch, executionStart, mainGitBranch - default is 'createdAt'.",
            "required": false
          },
          {
            "schema": {
              "nullable": true,
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            },
            "in": "query",
            "name": "sortOrder",
            "description": "order of sort.  default is 'desc'.",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.provenance.api.ProvenanceCheckpointDto"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/workspace/{workspaceId}/listBranches": {
      "post": {
        "operationId": "listBranches",
        "tags": [
          "Workspace",
          "Git"
        ],
        "summary": "List branches of a git repository",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "workspaceId",
            "description": "Id of the Workspace",
            "required": true
          }
        ],
        "requestBody": {
          "description": "query to filter the list of branches by",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.executor.api.ListBranchesRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.executor.api.ListBranchesResponseDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/workspace/{workspaceId}/checkoutBranch": {
      "post": {
        "operationId": "checkoutBranch",
        "tags": [
          "Workspace",
          "Git"
        ],
        "summary": "checkout branch of a git repository",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "workspaceId",
            "description": "Id of the Workspace",
            "required": true
          }
        ],
        "requestBody": {
          "description": "repository and which branch to checkout to",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.executor.api.CheckoutBranchRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.executor.api.CheckoutBranchResponseDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/workspace/{workspaceId}/cancelMergeResolution": {
      "post": {
        "operationId": "cancelMergeConflictResolution",
        "tags": [
          "Workspace",
          "Git"
        ],
        "summary": "Cancel an existing merge conflict",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "workspaceId",
            "description": "Id of the Workspace",
            "required": true
          }
        ],
        "requestBody": {
          "description": "list of repositories that are in conflict",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.workspace.api.git.CancelMergeConflictResolutionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.workspace.api.git.MergeConflictResolutionResponseDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/workspace/{workspaceId}/forcePushResolution": {
      "post": {
        "operationId": "forcePushResolution",
        "tags": [
          "Workspace",
          "Git"
        ],
        "summary": "Force push branch to resolve merge conflict",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "workspaceId",
            "description": "Id of the Workspace",
            "required": true
          }
        ],
        "requestBody": {
          "description": "list of repositories that are in conflict",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.workspace.api.git.ForcePushResolutionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.workspace.api.git.MergeConflictResolutionResponseDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/workspace/{workspaceId}/hardResetResolution": {
      "post": {
        "operationId": "hardResetResolution",
        "tags": [
          "Workspace",
          "Git"
        ],
        "summary": "Hard reset to remote tracking branch to resolve merge conflict",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "workspaceId",
            "description": "Id of the Workspace",
            "required": true
          }
        ],
        "requestBody": {
          "description": "list of repositories that are in conflict",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.workspace.api.git.HardResetResolutionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.workspace.api.git.MergeConflictResolutionResponseDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/workspace/{workspaceId}/continueMergeResolution": {
      "post": {
        "operationId": "continueMergeConflictResolution",
        "tags": [
          "Workspace",
          "Git"
        ],
        "summary": "Continue merge conflict resolution",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "workspaceId",
            "description": "Id of the Workspace",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Repository to continue rebase for along with a commit message",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.workspace.api.git.ContinueMergeConflictResolutionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.workspace.api.git.ContinueMergeConflictResolutionResponseDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/workspace/{workspaceId}/stageFileBasedOnCurrentLocalState": {
      "post": {
        "operationId": "stageFileBasedOnCurrentLocalState",
        "tags": [
          "Workspace",
          "Git"
        ],
        "summary": "Git add (stage) a file using the current local version during merge conflict resolution",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "workspaceId",
            "description": "Id of the Workspace",
            "required": true
          }
        ],
        "requestBody": {
          "description": "repo and file path of file to stage",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.workspace.api.git.StageCurrentLocalFileRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.workspace.api.git.StageFileResponseDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/workspace/{workspaceId}/stageFileBasedOnLocalCommit": {
      "post": {
        "operationId": "stageFileBasedOnLocalCommit",
        "tags": [
          "Workspace",
          "Git"
        ],
        "summary": "Git add (stage) a file using the last local commit during merge conflict resolution",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "workspaceId",
            "description": "Id of the Workspace",
            "required": true
          }
        ],
        "requestBody": {
          "description": "repo and file path of file to stage",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.workspace.api.git.StageLocalCommitFileRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.workspace.api.git.StageFileResponseDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/workspace/{workspaceId}/stageFileBasedOnRemoteCommit": {
      "post": {
        "operationId": "stageFileBasedOnRemoteCommit",
        "tags": [
          "Workspace",
          "Git"
        ],
        "summary": "Git add (stage) a file using the last remote commit during merge conflict resolution",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "workspaceId",
            "description": "Id of the Workspace",
            "required": true
          }
        ],
        "requestBody": {
          "description": "repo and file path of file to stage",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.workspace.api.git.StageRemoteCommitFileRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.workspace.api.git.StageFileResponseDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/workspace/{workspaceId}/commitAndPushReposEnhanced": {
      "post": {
        "operationId": "commitAndPushReposEnhanced",
        "tags": [
          "Workspace",
          "Git"
        ],
        "summary": "Commit and Push for enhanced merge conflicts",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "workspaceId",
            "description": "Id of the Workspace",
            "required": true
          }
        ],
        "requestBody": {
          "description": "list of repositories that should be committed and pushed",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.workspace.api.git.CommitAndPushRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.workspace.api.git.CommitAndPushReposResponseDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/workspace/{workspaceId}/commitRepos": {
      "post": {
        "operationId": "commitRepos",
        "tags": [
          "Workspace",
          "Git"
        ],
        "summary": "Commit repos",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "workspaceId",
            "description": "Id of the Workspace",
            "required": true
          }
        ],
        "requestBody": {
          "description": "list of repositories that should be committed",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.workspace.api.git.CommitRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.workspace.api.git.CommitReposResponseDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/workspace/{workspaceId}/pullReposEnhanced": {
      "post": {
        "operationId": "pullReposEnhanced",
        "tags": [
          "Workspace",
          "Git"
        ],
        "summary": "Pull repos with enhanced merge conflict resolution",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "workspaceId",
            "description": "Id of the Workspace",
            "required": true
          }
        ],
        "requestBody": {
          "description": "list of repositories that should be pulled",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.workspace.api.git.PullReposRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.workspace.api.git.PullReposResponseDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/workspaces": {
      "get": {
        "operationId": "listWorkspaceSummary",
        "tags": [
          "Workspaces"
        ],
        "summary": "Gets the available workspaces for the given Project",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "query",
            "name": "projectId",
            "description": "ID of the Project",
            "required": true
          },
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "query",
            "name": "userToFilter",
            "description": "Filter so only workspaces started by the given user are returned",
            "required": false
          },
          {
            "in": "query",
            "name": "status",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/domino.workspaces.api.ListWorkspaceStatus"
            },
            "description": "Filter on workspace state defaults all if not provided."
          },
          {
            "in": "query",
            "name": "tag",
            "schema": {
              "type": "string"
            },
            "description": "Optional Tag filter"
          },
          {
            "in": "query",
            "name": "show_archived",
            "schema": {
              "type": "boolean"
            },
            "required": false,
            "description": "If show_archived is true, then will fetch workspaces that are archived also."
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.workspaces.api.WorkspaceSummary"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/workspaces/workspace/{workspaceId}": {
      "get": {
        "operationId": "getWorkspaceById",
        "tags": [
          "Workspaces"
        ],
        "summary": "Gets the workspace for the given workspace id",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "query",
            "name": "projectId",
            "description": "Fetch workspace based on id",
            "required": true
          },
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "workspaceId",
            "description": "ID of the workspace",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.workspaces.api.Workspace"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/workspaces/workspace/{workspaceId}/summary": {
      "get": {
        "operationId": "getWorkspaceSummaryById",
        "tags": [
          "Workspaces"
        ],
        "summary": "Gets the workspace summary for the given workspace",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "query",
            "name": "projectId",
            "description": "Fetch workspace based on id",
            "required": true
          },
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "workspaceId",
            "description": "ID of the workspace",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.workspaces.api.WorkspaceSummary"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/workspaces/definitions": {
      "get": {
        "operationId": "getAvailableWorkspaceDefinitions",
        "tags": [
          "Workspaces"
        ],
        "summary": "Gets the available workspace definitions for the given Project",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "query",
            "name": "projectId",
            "description": "ID of the Project",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.workspaces.api.WorkspaceDefinitionDto"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/workspaces/launch": {
      "post": {
        "operationId": "launchWorkspace",
        "tags": [
          "Workspaces"
        ],
        "summary": "Launch a new Workspace in the given Project",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "query",
            "name": "projectId",
            "description": "ID of the Project",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.workspaces.web.LaunchWorkspaceInputs"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "409": {
            "$ref": "#/components/responses/Relogin"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/workspaces/stop/end": {
      "post": {
        "operationId": "endWorkspaceSession",
        "tags": [
          "Workspaces"
        ],
        "summary": "Stop a Workspace for the given Project, when the status of DFS, git repos, datasets, are unknown",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.workspaces.web.StopEndWorkspaceDetails"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/workspaces/stop/discard": {
      "post": {
        "operationId": "stopWorkspaceDiscardChanges",
        "tags": [
          "Workspaces"
        ],
        "summary": "Stop a Workspace and throw away all changes",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.workspaces.web.StopDiscardWorkspaceDetails"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/workspaces/stop/commit": {
      "post": {
        "operationId": "stopWorkspaceSaveChanges",
        "tags": [
          "Workspaces"
        ],
        "summary": "Stop a Workspace and save all changes",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.workspaces.web.StopCommitWorkspaceDetails"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/workspaces/archive": {
      "post": {
        "operationId": "archiveWorkspace",
        "tags": [
          "Workspaces"
        ],
        "summary": "Archive a Workspace for the given Project. Archived workspaces won't show up in workspaces.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.workspaces.web.ArchiveWorkspaceInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/workspaces/{workspaceId}/logs": {
      "get": {
        "operationId": "getLogs",
        "tags": [
          "Logs"
        ],
        "summary": "Get the logs of a workspace",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "workspaceId",
            "description": "ID of the workspace",
            "required": true
          },
          {
            "in": "query",
            "name": "logType",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "console",
                "stdout",
                "stderr",
                "stdoutstderr",
                "prepareoutput"
              ],
              "example": "console  |  stdout  |  stderr  |  stdoutstderr  |  prepareoutput",
              "default": "console"
            },
            "description": "Types of logs:\n * `console` - This is the default if the value is not provided. All logs lines displayed in the workspace's runtime environment.\n * `stdout` - Log lines displayed in the stderr of the workspace's runtime environment.\n * `stderr` - Log lines displayed in the stderr of the workspace's runtime environment.\n * `stdoutstderr` - Interleaved stdout and stderr.\n * `prepareoutput` - Log lines generated by the environment preparing the workspace.\n"
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "number",
              "default": 10000
            },
            "description": "Max number of log lines to fetch. Will be overridden by the configuration's limit if this value exceeds the configuration's limit, or if this value is not provided."
          },
          {
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "type": "number",
              "default": 0
            },
            "description": "The index of the current body of logs to start fetching from. 0 by default and typically won't be used for a timestamp-based offset log fetching strategy."
          },
          {
            "in": "query",
            "name": "latestTimeNano",
            "required": false,
            "schema": {
              "type": "string",
              "example": "1543538813745986325",
              "default": "0"
            },
            "description": "The epoch time in nanoseconds to start fetching from, such as \"1543538813745986325\". \"0\" by default and will typically be used for a timestamp-based offset log fetching strategy."
          }
        ],
        "responses": {
          "200": {
            "description": "Scenarios:<br>\nIf the log retriever got NO logs, then the client should expect\n  * an empty `logContent` array\n\nfrom the returned LogSet.<br><br>\nIf the log retriever was done fetching ALL of the logs, then the client should expect\n  * `isComplete = true`\n  * `paginationFilter.limit = 0`\n\nfrom the returned LogSet.<br><br>\nIf the log retriever was NOT done fetching all of the logs, then the client should expect\n  * `isComplete = false`\n  * `paginationFilter` encoding the next `offset` or `latestTimeNano` of the last log line fetched by the retriever.\n\nfrom the returned LogSet.<br><br>\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.workspaces.api.LogSet"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/workspaces/{workspaceId}/realTimeLogs": {
      "get": {
        "operationId": "getRealTimeLogs",
        "tags": [
          "Logs"
        ],
        "summary": "Get the logs of a workspace without going to s3",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "workspaceId",
            "description": "ID of the workspace",
            "required": true
          },
          {
            "in": "query",
            "name": "logType",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "console",
                "stdout",
                "stderr",
                "stdoutstderr",
                "prepareoutput"
              ],
              "example": "console  |  stdout  |  stderr  |  stdoutstderr  |  prepareoutput",
              "default": "console"
            },
            "description": "Types of logs:\n * `console` - This is the default if the value is not provided. All logs lines displayed in the workspace's runtime environment.\n * `stdout` - Log lines displayed in the stderr of the workspace's runtime environment.\n * `stderr` - Log lines displayed in the stderr of the workspace's runtime environment.\n * `stdoutstderr` - Interleaved stdout and stderr.\n * `prepareoutput` - Log lines generated by the environment preparing the workspace.\n"
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "number",
              "default": 10000
            },
            "description": "Max number of log lines to fetch. Will be overridden by the configuration's limit if this value exceeds the configuration's limit, or if this value is not provided."
          },
          {
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "type": "number",
              "default": 0
            },
            "description": "The index of the current body of logs to start fetching from. 0 by default and typically won't be used for a timestamp-based offset log fetching strategy."
          },
          {
            "in": "query",
            "name": "latestTimeNano",
            "required": false,
            "schema": {
              "type": "string",
              "example": "1543538813745986325",
              "default": "0"
            },
            "description": "The epoch time in nanoseconds to start fetching from, such as \"1543538813745986325\". \"0\" by default and will typically be used for a timestamp-based offset log fetching strategy."
          }
        ],
        "responses": {
          "200": {
            "description": "Scenarios:<br>\nIf the log retriever got NO logs, then the client should expect\n  * an empty `logContent` array\n\nfrom the returned LogSet.<br><br>\nIf the log retriever was done fetching ALL of the logs, then the client should expect\n  * `isComplete = true`\n  * `paginationFilter.limit = 0`\n\nfrom the returned LogSet.<br><br>\nIf the log retriever was NOT done fetching all of the logs, then the client should expect\n  * `isComplete = false`\n  * `paginationFilter` encoding the next `offset` or `latestTimeNano` of the last log line fetched by the retriever.\n\nfrom the returned LogSet.<br><br>\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.workspaces.api.LogSet"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/workspaces/{workspaceId}/tags": {
      "post": {
        "operationId": "createTag",
        "tags": [
          "Tags"
        ],
        "summary": "Creates a Tag for a workspaceId",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "query",
            "name": "projectId",
            "description": "ProjectId associated with the workspace",
            "required": true
          },
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "workspaceId",
            "description": "ID of the workspace",
            "required": true
          }
        ],
        "requestBody": {
          "description": "JSON object with information for new tag",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "tagName"
                ],
                "properties": {
                  "tagName": {
                    "type": "string",
                    "example": "test"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.workspaces.api.WorkspaceTag"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "get": {
        "operationId": "getTags",
        "tags": [
          "Tags"
        ],
        "summary": "Get the tags that a workspace belongs to",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "query",
            "name": "projectId",
            "description": "ProjectId associated with the workspace",
            "required": true
          },
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "workspaceId",
            "description": "ID of the workspace",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.workspaces.api.WorkspaceTag"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "delete": {
        "operationId": "deleteTag",
        "tags": [
          "Tags"
        ],
        "summary": "Deletes a Tag for a workspaceId",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "query",
            "name": "projectId",
            "description": "ProjectId associated with the workspace",
            "required": true
          },
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "workspaceId",
            "description": "ID of the workspace",
            "required": true
          },
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "query",
            "name": "tagId",
            "description": "Tag Name to be deleted",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.workspaces.api.WorkspaceTag"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/workspaces/{workspaceId}/usage": {
      "get": {
        "operationId": "getResourceUsage",
        "tags": [
          "Workspaces"
        ],
        "summary": "Get resource usage for a Workspace",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "query",
            "name": "projectId",
            "description": "ProjectId associated with the workspace",
            "required": true
          },
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "workspaceId",
            "description": "ID of the workspace",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.workspaces.api.WorkspaceResourceUsage"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/workspaces/{workspaceId}/results": {
      "get": {
        "operationId": "getResults",
        "tags": [
          "WorkspaceResults"
        ],
        "summary": "Get Results for a Workspace",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "query",
            "name": "projectId",
            "description": "ProjectId associated with the workspace",
            "required": true
          },
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "workspaceId",
            "description": "ID of the workspace",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.workspaces.api.WorkspaceResultFiles"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/workspaces/{workspaceId}/comments": {
      "get": {
        "operationId": "getComments",
        "tags": [
          "WorkspaceComments"
        ],
        "summary": "Get all comments specific to workspace context",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "workspaceId",
            "description": "ID of the workspace",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.workspaces.api.CommentThread"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/workspaces/{workspaceId}/allComments": {
      "get": {
        "operationId": "getAllComments",
        "tags": [
          "WorkspaceComments"
        ],
        "summary": "Get all aggregated comments",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "workspaceId",
            "description": "ID of the workspace",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.workspaces.api.CommentThread"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/workspaces/{workspaceId}/resultFile/comments": {
      "get": {
        "operationId": "getResultFileComments",
        "tags": [
          "WorkspaceComments"
        ],
        "summary": "Get all comments specific to result files generated by running the workspace",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "workspaceId",
            "description": "ID of the workspace",
            "required": true
          },
          {
            "in": "query",
            "name": "fileName",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Name of the result file"
          },
          {
            "in": "query",
            "name": "commitId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "git commit identifier to pick the result file"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.workspaces.api.CommentThread"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/workspaces/{workspaceId}/comment": {
      "post": {
        "operationId": "createWorkspaceComment",
        "tags": [
          "WorkspaceComments"
        ],
        "summary": "Create a Workspace Comment",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "workspaceId",
            "description": "ID of the workspace",
            "required": true
          }
        ],
        "requestBody": {
          "description": "JSON object with information to comment on the workspace",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.workspaces.web.CreateCommentInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.workspaces.api.CommentThread"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/workspaces/{workspaceId}/file/comment": {
      "post": {
        "operationId": "createWorkspaceResultFileComment",
        "tags": [
          "WorkspaceComments"
        ],
        "summary": "Create a Workspace Result File Comment",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "workspaceId",
            "description": "ID of the workspace",
            "required": true
          },
          {
            "in": "query",
            "name": "fileName",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Name of the result file to comment to"
          },
          {
            "in": "query",
            "name": "commitId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "git commit identifier to pick the result file"
          }
        ],
        "requestBody": {
          "description": "JSON object with information to comment on a result file",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.workspaces.web.CreateCommentInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.workspaces.api.CommentThread"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/workspaces/{workspaceId}/comment/{threadId}": {
      "delete": {
        "operationId": "archiveComment",
        "tags": [
          "WorkspaceComments"
        ],
        "summary": "Archive the comment in a comment thread",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "workspaceId",
            "description": "ID of the workspace",
            "required": true
          },
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "threadId",
            "required": true
          }
        ],
        "requestBody": {
          "description": "JSON object with information about the index of the comment to be archived",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.workspaces.web.ArchiveCommentInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.workspaces.api.Comment"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/workspaces/{workspaceId}/updateTitle": {
      "post": {
        "operationId": "updateWorkspaceTitle",
        "tags": [
          "Workspaces"
        ],
        "summary": "Update title of the workspace",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "query",
            "name": "projectId",
            "description": "ID of the Project",
            "required": true
          },
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "workspaceId",
            "description": "ID of the workspace",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.workspaces.web.UpdateWorkspaceTitle"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/workspaces/events": {
      "get": {
        "operationId": "notFound",
        "tags": [
          "Workspaces",
          "Socket"
        ],
        "summary": "Entities that are pushed via socket updates.",
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.workspaces.web.WorkspaceEvents"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/workspaces/{workspaceId}/resourceStatuses": {
      "get": {
        "operationId": "getWorkspaceRepositoryStatus",
        "tags": [
          "Workspaces"
        ],
        "summary": "Get workspace Resources status",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "query",
            "name": "projectId",
            "description": "ID of the Project",
            "required": true
          },
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "workspaceId",
            "description": "ID of the workspace",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.workspaces.api.WorkspaceRepositoryStatus"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/workspaces/relaunch": {
      "post": {
        "operationId": "relaunchWorkspace",
        "tags": [
          "Workspaces"
        ],
        "summary": "Relaunch a Workspace for the given Project",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.workspaces.web.WorkspaceRelaunchOperationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.workspaces.api.Workspace"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "409": {
            "$ref": "#/components/responses/Relogin"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/workspaces/{workspaceId}/runtimeExecutionDetails": {
      "get": {
        "operationId": "getRuntimeExecutionDetails",
        "tags": [
          "Workspaces"
        ],
        "summary": "Get the runtime execution details for a given workspace",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "query",
            "name": "projectId",
            "description": "ProjectId for the workspace",
            "required": true
          },
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "workspaceId",
            "description": "ID of the workspace",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.workspaces.api.WorkspaceRuntimeExecutionDetails"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/workspaces/{workspaceId}/linkWorkspacetoGoal": {
      "post": {
        "operationId": "linkWorkspaceToGoal",
        "tags": [
          "Workspaces"
        ],
        "summary": "Link workspace to a goal",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "workspaceId",
            "description": "ID of the workspace",
            "required": true
          }
        ],
        "requestBody": {
          "description": "JSON object with information for linking workspace to a goal",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.workspaces.web.LinkWorkspaceToGoal"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.workspaces.api.WorkspaceGoal"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/workspaces/{workspaceId}/unlinkWorkspacefromGoal": {
      "post": {
        "operationId": "unlinkWorkspaceFromGoal",
        "tags": [
          "Workspaces"
        ],
        "summary": "Unlink workspace from a goal",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "workspaceId",
            "description": "ID of the workspace",
            "required": true
          }
        ],
        "requestBody": {
          "description": "JSON object with information for unlinking workspace from a goal",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.workspaces.web.UnlinkWorkspaceFromGoal"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.workspaces.api.WorkspaceGoal"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/workspaces/{workspaceId}/autoSyncFrequency": {
      "post": {
        "operationId": "setAutoSyncFrequency",
        "tags": [
          "Workspaces"
        ],
        "summary": "Update workspace auto sync settings",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "workspaceId",
            "description": "ID of the workspace",
            "required": true
          }
        ],
        "requestBody": {
          "description": "JSON object with auto sync related info",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.workspaces.web.AutoSyncFrequencyRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.workspaces.api.WorkspaceGoal"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/workspaces/{workspaceId}/executionCheckpointStatuses": {
      "get": {
        "operationId": "getExecutionCheckpointStatuses",
        "tags": [
          "Workspaces"
        ],
        "summary": "Get each checkpoint name and their individual status for an execution",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "workspaceId",
            "description": "ID of the workspace",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.workspaces.api.ExecutionCheckpointStatus"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/workspaces/project/{projectId}/environment/{environmentId}/availableTools": {
      "get": {
        "operationId": "getAvailableToolsForEnvironment",
        "tags": [
          "Workspaces"
        ],
        "summary": "Get the list of available Workspace tools for the given Environment",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "projectId",
            "description": "ID of the Project",
            "required": true
          },
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "environmentId",
            "description": "ID of the Environment",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.workspaces.api.AvailableWorkspaceTools"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/workspaces/workspace/{workspaceId}/onDemandSparkStatus": {
      "get": {
        "operationId": "getOnDemandSparkClusterStatus",
        "tags": [
          "Workspaces"
        ],
        "summary": "Get on demand spark cluster for on demand spark cluster.",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "workspaceId",
            "description": "ID of the workspace",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projects.api.OnDemandSparkClusterStatus"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/workspaces/workspace/{workspaceId}/sparkClusterDetails": {
      "get": {
        "operationId": "getSparkClusterDetails",
        "tags": [
          "Workspaces"
        ],
        "summary": "Gets spark cluster properties for a given workspace",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "workspaceId",
            "description": "ID of the workspace",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projects.api.OnDemandSparkClusterDetailsView"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/workspaces/project/{projectId}/defaultSparkSettings": {
      "get": {
        "operationId": "getDefaultOnDemandSparkSettings",
        "tags": [
          "Workspaces"
        ],
        "summary": "gets the default spark settings for workspaces",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "projectId",
            "description": "ID of the project",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projects.api.DefaultOnDemandSparkClusterPropertiesSpec"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/workspaces/{workspaceId}/project/{projectId}/getWritableProjectMounts": {
      "get": {
        "operationId": "getWritableProjectMounts",
        "tags": [
          "Workspaces"
        ],
        "summary": "Gets the writable mounts for this workspace. This includes the main git repo, dfs mount, and imported git repos",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "projectId",
            "description": "ID of the project",
            "required": true
          },
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "workspaceId",
            "description": "ID of the workspace",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projects.api.WritableProjectMounts"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/workspaces/{projectId}/getActiveClassicWorkspaceCount": {
      "get": {
        "operationId": "getActiveClassicWorkspaceCount",
        "tags": [
          "Workspaces"
        ],
        "summary": "Get the number of active \"classic\" workspace sessions for this project",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "projectId",
            "description": "Id of the project",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/users": {
      "post": {
        "operationId": "createUser",
        "tags": [
          "Users"
        ],
        "summary": "Create a new user",
        "requestBody": {
          "description": "Create user request",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.common.user.CreateUserRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "success"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "get": {
        "operationId": "listUsers",
        "tags": [
          "Users"
        ],
        "summary": "retrieves a list of users",
        "parameters": [
          {
            "schema": {
              "nullable": true,
              "type": "array",
              "items": {
                "pattern": "^[0-9a-f]{24}$",
                "type": "string"
              }
            },
            "in": "query",
            "name": "userId",
            "description": "Optional list of user identifiers to select the previously known users",
            "required": false
          },
          {
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "in": "query",
            "name": "userName",
            "description": "Optional filter for an exact user name",
            "required": false
          },
          {
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "in": "query",
            "name": "query",
            "description": "Optional filter for a user name (returns usernames starting with this query)",
            "required": false
          },
          {
            "in": "query",
            "name": "listOnlyUsers",
            "schema": {
              "nullable": true,
              "type": "boolean"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.common.user.Person"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/users/self": {
      "get": {
        "operationId": "getCurrentUser",
        "tags": [
          "Users"
        ],
        "summary": "retrieves the current user",
        "parameters": [],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.common.user.Person"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/users/requestForTrialPeriodExtension": {
      "get": {
        "operationId": "requestForTrialPeriodExtension",
        "tags": [
          "Users"
        ],
        "summary": "extend trial period",
        "parameters": [
          {
            "in": "header",
            "name": "X-Domino-Api-Key",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "API Key"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.nucleus.user.Response"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/users/isLiteUser": {
      "get": {
        "operationId": "isLiteUser",
        "tags": [
          "Users"
        ],
        "summary": "Check if the user is lite user or not",
        "parameters": [
          {
            "in": "header",
            "name": "X-Domino-Api-Key",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "API Key"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.common.user.LiteUserResponseDTO"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/users/isDataAnalystUser": {
      "get": {
        "operationId": "isDataAnalystUser",
        "tags": [
          "Users"
        ],
        "summary": "Check if the user is data lite user or not",
        "parameters": [],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/users/trialStatus": {
      "get": {
        "operationId": "getCurrentUserTrialStatus",
        "tags": [
          "Users"
        ],
        "summary": "Get trial status of the current user",
        "parameters": [
          {
            "in": "header",
            "name": "X-Domino-Api-Key",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "API Key"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.common.user.TrialStatusDTO"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/users/extendTrialPeriod/{userId}/{extensionPeriodInDays}": {
      "get": {
        "operationId": "extendTrialPeriod",
        "tags": [
          "Users"
        ],
        "summary": "extend trial period for a user",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "userId",
            "description": "Domino id of the user to whom the extension will apply",
            "required": true
          },
          {
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "in": "path",
            "name": "extensionPeriodInDays",
            "description": "How many days to extend by",
            "required": true
          },
          {
            "in": "header",
            "name": "X-Domino-Api-Key",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "API Key"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.nucleus.user.Response"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/users/environmentVariables": {
      "get": {
        "operationId": "listUserEnvironmentVariables",
        "tags": [
          "Users"
        ],
        "summary": "retrieves the specified user's environment variables",
        "parameters": [],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.common.models.EnvironmentVariables"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "delete": {
        "operationId": "deleteUserEnvironmentVariables",
        "tags": [
          "Users"
        ],
        "summary": "deletes all of the specified user's environment variables",
        "parameters": [],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.common.models.EnvironmentVariables"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "put": {
        "operationId": "setUserEnvironmentVariables",
        "tags": [
          "Users"
        ],
        "summary": "set the specified user's environment variables",
        "requestBody": {
          "description": "The user environment variables",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.common.models.EnvironmentVariables"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/users/updatePinnedProjects": {
      "post": {
        "operationId": "updatePinnedProjects",
        "tags": [
          "Users"
        ],
        "summary": "Mark project Id as pinned or unpinned",
        "requestBody": {
          "description": "Update pinned projects request",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.nucleus.user.UpdatePinnedProjects"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.nucleus.user.Response"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/users/uiuxState": {
      "get": {
        "operationId": "getCurrentUserUIUXState",
        "tags": [
          "Users"
        ],
        "summary": "Get server-stored UI/UX state for the current user",
        "parameters": [
          {
            "in": "header",
            "name": "X-Domino-Api-Key",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "API Key"
          },
          {
            "in": "query",
            "name": "keys",
            "schema": {
              "type": "string"
            },
            "required": false,
            "description": "If provided, will only return state associated with the given keys. Can provide multiple keys like \"/uiuxState?keys=foo&keys=bar\""
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.common.user.UserUIUXStateDTO"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "put": {
        "operationId": "setCurrentUserUIUXState",
        "tags": [
          "Users"
        ],
        "summary": "Set server-stored UI/UX state for the current user",
        "parameters": [
          {
            "in": "header",
            "name": "X-Domino-Api-Key",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "API Key"
          }
        ],
        "requestBody": {
          "description": "The user's uiux state to set. If replace=true, then will replace all of user's uiux state with the provided state. If omitted or false, then will set only the provided state.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.common.user.UpdateUserUIUXStateDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success. Returned state corresponds only to the state keys provided in the request. If after this call you want all state and you did not provide replace=true, issue a subsequent GET.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.common.user.UserUIUXStateDTO"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/users/userCreationContext": {
      "get": {
        "operationId": "getUserCreationContext",
        "tags": [
          "Users"
        ],
        "summary": "Get context needed for create user form",
        "parameters": [],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.common.user.UserCreationContext"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/serviceAccounts": {
      "post": {
        "operationId": "createServiceAccount",
        "tags": [
          "ServiceAccounts"
        ],
        "summary": "Create a new service account",
        "requestBody": {
          "description": "Create service account request",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.admin.interface.CreateServiceAccountRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "success"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "get": {
        "operationId": "listServiceAccounts",
        "tags": [
          "ServiceAccounts"
        ],
        "summary": "retrieves a list of service account",
        "parameters": [
          {
            "schema": {
              "default": false,
              "type": "boolean"
            },
            "in": "query",
            "name": "includeDeactivated",
            "description": "If true, the list will include deactivated service accounts. Default value is false.",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.admin.interface.ServiceAccount"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/serviceAccounts/{serviceAccountIdpId}/deactivate": {
      "post": {
        "operationId": "deactivateServiceAccount",
        "tags": [
          "ServiceAccounts"
        ],
        "summary": "Deactivate a service account",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "path",
            "name": "serviceAccountIdpId",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "success"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/serviceAccounts/{serviceAccountIdpId}/activate": {
      "post": {
        "operationId": "activateServiceAccount",
        "tags": [
          "ServiceAccounts"
        ],
        "summary": "Activate a service account",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "path",
            "name": "serviceAccountIdpId",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "success"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/serviceAccounts/{serviceAccountIdpId}/resetpassword": {
      "post": {
        "operationId": "resetServiceAccountPassword",
        "tags": [
          "ServiceAccounts"
        ],
        "summary": "Regenerate and synchronize service account's password, update both local storage and keycloak",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "path",
            "name": "serviceAccountIdpId",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "success"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/serviceAccounts/{serviceAccountIdpId}/tokens": {
      "post": {
        "operationId": "createServiceAccountToken",
        "tags": [
          "ServiceAccounts"
        ],
        "summary": "Create a service account token",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "path",
            "name": "serviceAccountIdpId",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Invalidate service account token request",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.admin.interface.CreateServiceAccountTokenRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.admin.interface.ServiceAccountTokenMetadataAndToken"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "get": {
        "operationId": "listServiceAccountTokens",
        "tags": [
          "ServiceAccounts"
        ],
        "summary": "retrieves a list of service account",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "path",
            "name": "serviceAccountIdpId",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.admin.interface.ServiceAccountTokenMetadata"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/serviceAccounts/{serviceAccountIdpId}/tokens/{serviceAccountTokenName}": {
      "get": {
        "operationId": "getServiceAccountToken",
        "tags": [
          "ServiceAccounts"
        ],
        "summary": "Get service account token, both metadata and the token itself",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "path",
            "name": "serviceAccountIdpId",
            "required": true
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "path",
            "name": "serviceAccountTokenName",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "$ref": "#/components/schemas/domino.admin.interface.ServiceAccountTokenMetadataAndToken"
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "delete": {
        "operationId": "deleteServiceAccountToken",
        "tags": [
          "ServiceAccounts"
        ],
        "summary": "Delete a service account token",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "path",
            "name": "serviceAccountIdpId",
            "required": true
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "path",
            "name": "serviceAccountTokenName",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "success"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/serviceAccounts/{serviceAccountIdpId}/tokens/{serviceAccountTokenName}/invalidate": {
      "post": {
        "operationId": "invalidateServiceAccountToken",
        "tags": [
          "ServiceAccounts"
        ],
        "summary": "Invalidate a service account token",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "path",
            "name": "serviceAccountIdpId",
            "required": true
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "path",
            "name": "serviceAccountTokenName",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "success"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/organizations": {
      "post": {
        "operationId": "createOrganization",
        "tags": [
          "Organizations"
        ],
        "summary": "creates an Organization",
        "parameters": [],
        "requestBody": {
          "description": "Information necessary to create a new organization",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewOrganization"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organization"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "get": {
        "operationId": "getAllOrganizations",
        "tags": [
          "Organizations"
        ],
        "summary": "allows an Admin to retrieve all Organizations",
        "parameters": [
          {
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "in": "query",
            "name": "name",
            "description": "Optional filter with a name of the specific organization",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Organization"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/organizations/self": {
      "get": {
        "operationId": "getCurrentUserOrganizations",
        "tags": [
          "Organizations"
        ],
        "summary": "retrieves the current user's Organizations",
        "parameters": [
          {
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "in": "query",
            "name": "name",
            "description": "Optional filter with a name of the specific organization",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Organization"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/organizations/{organizationUserId}": {
      "get": {
        "operationId": "getOrganization",
        "tags": [
          "Organizations"
        ],
        "summary": "retrieves an Organization by user id",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "organizationUserId",
            "description": "Identifier of organization's user",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organization"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/organizations/{organizationUserId}/members": {
      "put": {
        "operationId": "changeOrganizationMembers",
        "tags": [
          "Organizations"
        ],
        "summary": "add/remove members from an Organization",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "organizationUserId",
            "description": "Identifier of organization's user to set members",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Object with a list of new organization members",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.organizations.api.OrganizationMembersDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organization"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/projectManagement/jiraBasicAuth": {
      "post": {
        "operationId": "jiraBasicAuth",
        "tags": [
          "ProjectManagement"
        ],
        "summary": "Add Project Management Linker Data For Jira Basic Authentication",
        "requestBody": {
          "description": "JSON object with data to link a Project Management Tool",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.projectManagement.api.PmLinker"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "409": {
            "$ref": "#/components/responses/ProjectManagementErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/projectManagement/unlinkProjectManagement": {
      "post": {
        "operationId": "unlinkProjectManagement",
        "tags": [
          "ProjectManagement"
        ],
        "summary": "Removes Project Management Linker Data For Project Management",
        "parameters": [],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projectManagement.api.ResponseMessage"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "409": {
            "$ref": "#/components/responses/ProjectManagementErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/projectManagement/isUserAuthenticated": {
      "post": {
        "operationId": "isUserAuthenticated",
        "tags": [
          "ProjectManagement"
        ],
        "summary": "Tells whether User is Authenticated",
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "409": {
            "$ref": "#/components/responses/ProjectManagementErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/projectManagement/getProjectsFromPMT": {
      "get": {
        "operationId": "getRelevantBriefProjects",
        "tags": [
          "ProjectManagement"
        ],
        "summary": "Gets List of Relevant Project Management Projects from Project Management Tool",
        "parameters": [
          {
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "in": "query",
            "name": "projectName",
            "description": "The Name of the Jira Project to filter further",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.projectManagement.api.PmProjectSummary"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "409": {
            "$ref": "#/components/responses/ProjectManagementErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/projectManagement/getTicketsFromPMT": {
      "get": {
        "operationId": "getRelevantBriefTickets",
        "tags": [
          "ProjectManagement"
        ],
        "summary": "Gets List of Relevant Project Management Tickets for Project Management Tool",
        "parameters": [
          {
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "in": "query",
            "name": "projectName",
            "description": "The Name of the Jira Project to filter further",
            "required": false
          },
          {
            "schema": {
              "nullable": true,
              "type": "boolean"
            },
            "in": "query",
            "name": "onlyAssignedToMe",
            "description": "Flag, to filter ticket Assigned to Me",
            "required": false
          },
          {
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "in": "query",
            "name": "filterText",
            "description": "The text to filter out Tickets",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.projectManagement.api.PmTicketSummary"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "409": {
            "$ref": "#/components/responses/ProjectManagementErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/projectManagement/fullSync": {
      "post": {
        "operationId": "fullSync",
        "tags": [
          "ProjectManagement"
        ],
        "summary": "Sync project with linked project management ticket.",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "query",
            "name": "projectId",
            "description": "Id of the domino project to be synced",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "409": {
            "$ref": "#/components/responses/ProjectManagementErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/projectManagement/{projectId}/fullSyncStatus": {
      "get": {
        "operationId": "getFullSyncStatus",
        "tags": [
          "ProjectManagement"
        ],
        "summary": "Gets Current Full Sync Status For Project",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string",
              "$ref": "#/components/schemas/DominoId"
            },
            "in": "path",
            "name": "projectId",
            "description": "Domino id of the project",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projectManagement.api.FullSyncStatus"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "409": {
            "$ref": "#/components/responses/ProjectManagementErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/projectManagement/{projectId}/linkDominoProjectToPMTTicket": {
      "post": {
        "operationId": "linkPmTicketWithDominoEntity",
        "tags": [
          "ProjectManagement"
        ],
        "summary": "Link a Project with a Project Management Ticket",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "ticketId",
            "description": "TicketId of the Ticket in the Project management tool which needs to linked",
            "required": true
          },
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string",
              "$ref": "#/components/schemas/DominoId"
            },
            "in": "path",
            "name": "projectId",
            "description": "Domino id of the project",
            "required": true
          },
          {
            "schema": {
              "type": "boolean"
            },
            "in": "query",
            "name": "keepExistingGoals",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projectManagement.api.ResponseMessage"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "409": {
            "$ref": "#/components/responses/ProjectManagementErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/projectManagement/{projectId}/unlinkDominoProjectToPMTTicket": {
      "post": {
        "operationId": "unlinkPmTicketWithDominoEntity",
        "tags": [
          "ProjectManagement"
        ],
        "summary": "UnLink a Project with Project Management Ticket",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string",
              "$ref": "#/components/schemas/DominoId"
            },
            "in": "path",
            "name": "projectId",
            "description": "Domino id of the project",
            "required": true
          },
          {
            "schema": {
              "type": "boolean"
            },
            "in": "query",
            "name": "keepExistingGoals",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projectManagement.api.ResponseMessage"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "409": {
            "$ref": "#/components/responses/ProjectManagementErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/projectManagement/getTicketDetails": {
      "get": {
        "operationId": "getTicketDetails",
        "tags": [
          "ProjectManagement"
        ],
        "summary": "Gets Ticket Details from Project Management",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "ticketId",
            "description": "The Project Management Ticket Id",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projectManagement.api.PmTicket"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "409": {
            "$ref": "#/components/responses/ProjectManagementErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/projectManagement/{projectId}/getLinkedTicket": {
      "get": {
        "operationId": "getLinkedTicketByProjectId",
        "tags": [
          "ProjectManagement"
        ],
        "summary": "Get Ticket Linked to a Project",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string",
              "$ref": "#/components/schemas/DominoId"
            },
            "in": "path",
            "name": "projectId",
            "description": "Domino id of the project",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projectManagement.api.TicketToDominoMapper"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "409": {
            "$ref": "#/components/responses/ProjectManagementErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/projectManagement/{goalId}/getLinkedSubTicket": {
      "get": {
        "operationId": "getLinkedTicketByGoalId",
        "tags": [
          "ProjectManagement"
        ],
        "summary": "Get Ticket Linked to a Goal",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string",
              "$ref": "#/components/schemas/DominoId"
            },
            "in": "path",
            "name": "goalId",
            "description": "Domino id of the goal",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projectManagement.api.SubTicketToDominoMapper"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "409": {
            "$ref": "#/components/responses/ProjectManagementErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/projectManagement/{projectId}/getLinkedSubTickets": {
      "get": {
        "operationId": "getLinkedSubTicketsByProjectId",
        "tags": [
          "ProjectManagement"
        ],
        "summary": "Get SubTickets Linked to a Project",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string",
              "$ref": "#/components/schemas/DominoId"
            },
            "in": "path",
            "name": "projectId",
            "description": "Domino id of the project",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.projectManagement.api.SubTicketToDominoMapper"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "409": {
            "$ref": "#/components/responses/ProjectManagementErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/projectManagement/jiraOAuth": {
      "get": {
        "operationId": "jiraOAuth",
        "tags": [
          "ProjectManagement"
        ],
        "summary": "Completes authentication with jira server/cloud through OAuth protocol.",
        "parameters": [
          {
            "name": "oauth_verifier",
            "in": "query",
            "required": false,
            "description": "The verifier token provided by jira server",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dominoRedirectionUrl",
            "in": "query",
            "required": false,
            "description": "Domino page url to be opened after successful authentication by oAuth",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projectManagement.api.ResponseMessage"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "409": {
            "$ref": "#/components/responses/ProjectManagementErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/projectManagement/getJiraOAuthConfiguration": {
      "get": {
        "operationId": "getJiraOAuthConfiguration",
        "tags": [
          "ProjectManagement"
        ],
        "summary": "Gets the Jira OAuth-1a configuration",
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projectManagement.api.PmOAuth1aConfiguration"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "409": {
            "$ref": "#/components/responses/ProjectManagementErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/projectManagement/createJiraOAuthConfiguration": {
      "post": {
        "operationId": "createJiraOAuthConfiguration",
        "tags": [
          "ProjectManagement"
        ],
        "summary": "Create Jira oauth  configuration",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "jiraUrl",
            "description": "Jira Host Url",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projectManagement.api.PmOAuth1aConfiguration"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "409": {
            "$ref": "#/components/responses/ProjectManagementErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/projectManagement/deleteJiraOAuthConfiguration": {
      "delete": {
        "operationId": "removeJiraOAuthConfiguration",
        "tags": [
          "ProjectManagement"
        ],
        "summary": "Delete Jira oauth configuration",
        "parameters": [],
        "responses": {
          "200": {
            "description": "success"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "409": {
            "$ref": "#/components/responses/ProjectManagementErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/projectManagement/allLinkedProjects": {
      "get": {
        "operationId": "getAllLinkedProjects",
        "tags": [
          "ProjectManagement"
        ],
        "summary": "Get All Linked Projects",
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.projectManagement.api.LinkedProjectDetails"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "409": {
            "$ref": "#/components/responses/ProjectManagementErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/projectManagement/totalNumberOfLinkedProjects": {
      "get": {
        "operationId": "getTotalNumberOfLinkedProjects",
        "tags": [
          "ProjectManagement"
        ],
        "summary": "count All Linked Projects",
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "409": {
            "$ref": "#/components/responses/ProjectManagementErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/projectManagement/{projectId}/unlinkAndResetProject": {
      "post": {
        "operationId": "unlinkAndResetProject",
        "tags": [
          "ProjectManagement"
        ],
        "summary": "Unlink and Reset Project",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string",
              "$ref": "#/components/schemas/DominoId"
            },
            "in": "path",
            "name": "projectId",
            "description": "Domino id of the project",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "409": {
            "$ref": "#/components/responses/ProjectManagementErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/projectManagement/isUserAuthorized": {
      "get": {
        "operationId": "isUserAuthorized",
        "tags": [
          "ProjectManagement"
        ],
        "summary": "Checks if User is authorized to view that linked project",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "query",
            "name": "projectId",
            "description": "Domino Project Id which is linked to jira.",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "409": {
            "$ref": "#/components/responses/ProjectManagementErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/projectManagement/isProjectLinked": {
      "get": {
        "operationId": "isProjectLinked",
        "tags": [
          "ProjectManagement"
        ],
        "summary": "Verifies if Project is linked to a ticket in Project Management Tool.",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "query",
            "name": "projectId",
            "description": "Domino Project Id which is linked to jira.",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "409": {
            "$ref": "#/components/responses/ProjectManagementErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/projectManagement/project/{projectId}/stage/list": {
      "get": {
        "operationId": "getStagesForProject",
        "tags": [
          "ProjectManagement"
        ],
        "summary": "Get allowed stages for a given project",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string",
              "$ref": "#/components/schemas/DominoId"
            },
            "in": "path",
            "name": "projectId",
            "description": "Domino id of the project",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.projects.api.ProjectStage"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "409": {
            "$ref": "#/components/responses/ProjectManagementErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/projectManagement/moveProjectToStage": {
      "post": {
        "operationId": "moveProjectToStage",
        "tags": [
          "ProjectManagement"
        ],
        "summary": "Assign stage to a project",
        "requestBody": {
          "description": "JSON object with data to assign a stage to a project",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.projects.web.MoveProjectToStage"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projects.api.ProjectStageAndStatus"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "409": {
            "$ref": "#/components/responses/ProjectManagementErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/projectManagement/goal/{goalId}/stage/list": {
      "get": {
        "operationId": "getStagesForGoal",
        "tags": [
          "ProjectManagement"
        ],
        "summary": "Get allowed goal stages for a given goal",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string",
              "$ref": "#/components/schemas/DominoId"
            },
            "in": "path",
            "name": "goalId",
            "description": "Domino id of the goal",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.projects.api.ProjectStage"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "409": {
            "$ref": "#/components/responses/ProjectManagementErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/projectManagement/goal/{goalId}/stage/{stageId}": {
      "post": {
        "operationId": "moveGoalToStage",
        "tags": [
          "ProjectManagement"
        ],
        "summary": "Assign stage to a Goal",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string",
              "$ref": "#/components/schemas/DominoId"
            },
            "in": "path",
            "name": "goalId",
            "description": "Domino id of the goal",
            "required": true
          },
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string",
              "$ref": "#/components/schemas/DominoId"
            },
            "in": "path",
            "name": "stageId",
            "description": "Domino id of the project stage",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projects.api.ProjectGoalStageAndStatus"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "409": {
            "$ref": "#/components/responses/ProjectManagementErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/projectManagement/{projectId}/createProjectGoalStage": {
      "post": {
        "operationId": "createProjectGoalStage",
        "tags": [
          "ProjectManagement"
        ],
        "summary": "Create goal stages",
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            }
          }
        ],
        "requestBody": {
          "description": "JSON object with data to create a goal stage",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.projectManagement.web.CreateProjectGoalStage"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projects.api.ProjectStage"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/projectManagement/{projectId}/updateProjectGoalStage": {
      "post": {
        "operationId": "updateProjectGoalStage",
        "tags": [
          "ProjectManagement"
        ],
        "summary": "Update name of existing goal stage",
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            }
          }
        ],
        "requestBody": {
          "description": "JSON object with data to create a goal stage",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.projectManagement.web.UpdateProjectGoalStage"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projects.api.ProjectStage"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/projectManagement/{projectId}/archiveProjectGoalStage": {
      "delete": {
        "operationId": "archiveProjectGoalStage",
        "tags": [
          "ProjectManagement"
        ],
        "summary": "Archive a goal stage",
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            }
          }
        ],
        "requestBody": {
          "description": "JSON object with data to create a goal stage",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.projectManagement.web.ArchiveProjectGoalStage"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projects.api.ProjectStage"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/projectManagement/{projectId}/projectGoalStages": {
      "get": {
        "operationId": "getProjectGoalStages",
        "tags": [
          "ProjectManagement"
        ],
        "summary": "Get all project goal stages on a project.",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string",
              "$ref": "#/components/schemas/DominoId"
            },
            "in": "path",
            "name": "projectId",
            "description": "Domino id of the project to get goal stages from",
            "required": true
          },
          {
            "schema": {
              "nullable": true,
              "type": "boolean"
            },
            "in": "query",
            "name": "includeArchived",
            "description": "Include archived stages in the results",
            "type": "Boolean",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.projects.api.ProjectStage"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/projectManagement/{projectId}/goals": {
      "post": {
        "operationId": "getFilteredProjectGoals",
        "tags": [
          "ProjectManagement"
        ],
        "summary": "Get project goals",
        "requestBody": {
          "description": "JSON object with data to filter project goals",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.projectManagement.web.FilterProjectGoals"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.projects.api.ProjectGoal"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "409": {
            "$ref": "#/components/responses/ProjectManagementErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            }
          }
        ]
      },
      "get": {
        "operationId": "getProjectGoals",
        "tags": [
          "ProjectManagement"
        ],
        "summary": "Get project goals",
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.projects.api.ProjectGoal"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "409": {
            "$ref": "#/components/responses/ProjectManagementErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            }
          }
        ]
      }
    },
    "/projectManagement/goal/{goalId}": {
      "get": {
        "operationId": "getProjectGoal",
        "tags": [
          "ProjectManagement"
        ],
        "summary": "Get individual project goal",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string",
              "$ref": "#/components/schemas/DominoId"
            },
            "in": "path",
            "name": "goalId",
            "description": "Domino id of the goal to get",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projects.api.ProjectGoal"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "409": {
            "$ref": "#/components/responses/ProjectManagementErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "delete": {
        "operationId": "deleteProjectGoal",
        "tags": [
          "ProjectManagement"
        ],
        "summary": "Delete a project goal",
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projects.api.ProjectGoal"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "409": {
            "$ref": "#/components/responses/ProjectManagementErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "goalId",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            }
          }
        ]
      }
    },
    "/projectManagement/{projectId}/createGoal": {
      "post": {
        "operationId": "createProjectGoal",
        "tags": [
          "ProjectManagement"
        ],
        "summary": "Create project goal",
        "requestBody": {
          "description": "JSON object with data to create a project goal",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.projects.web.CreateProjectGoal"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projects.api.ProjectGoal"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "409": {
            "$ref": "#/components/responses/ProjectManagementErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            }
          }
        ]
      }
    },
    "/projectManagement/goal/{goalId}/assign": {
      "post": {
        "operationId": "assignUserToGoal",
        "tags": [
          "ProjectManagement"
        ],
        "summary": "Assign a user to a goal",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string",
              "$ref": "#/components/schemas/DominoId"
            },
            "in": "path",
            "name": "goalId",
            "description": "Domino id of the goal",
            "required": true
          },
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string",
              "$ref": "#/components/schemas/DominoId"
            },
            "in": "query",
            "name": "assigneeId",
            "description": "Domino id of user being assigned to the goal",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projects.api.ProjectGoal"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "409": {
            "$ref": "#/components/responses/ProjectManagementErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/projectManagement/goal/{goalId}/assignableUsers": {
      "get": {
        "operationId": "getUsersForLinkedGoal",
        "tags": [
          "ProjectManagement"
        ],
        "summary": "Get Assignable Users for Linked Goal",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string",
              "$ref": "#/components/schemas/DominoId"
            },
            "in": "path",
            "name": "goalId",
            "description": "Domino id of the goal",
            "required": true
          },
          {
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "in": "query",
            "name": "filterText",
            "description": "filter text for users",
            "type": "string",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.projectManagement.api.PmUser"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "409": {
            "$ref": "#/components/responses/ProjectManagementErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/projectManagement/goal/assignJiraUser": {
      "put": {
        "operationId": "assignJiraUserToLinkedGoal",
        "tags": [
          "ProjectManagement"
        ],
        "summary": "Update the assignee of a linked goal (jira ticket)",
        "requestBody": {
          "description": "JSON object with data to assign to a jira user",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.projectManagement.web.SetAssigneeForLinkedGoalRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "409": {
            "$ref": "#/components/responses/ProjectManagementErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/projectManagement/goal/{goalId}/updateTitle": {
      "post": {
        "operationId": "updateProjectGoalTitle",
        "tags": [
          "ProjectManagement"
        ],
        "summary": "Update title of a project goal",
        "requestBody": {
          "description": "JSON object with title to be updated",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.projects.web.UpdateProjectGoalTitle"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projects.api.ProjectGoal"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "409": {
            "$ref": "#/components/responses/ProjectManagementErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "goalId",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            }
          }
        ]
      }
    },
    "/projectManagement/goal/{goalId}/updateDescription": {
      "post": {
        "operationId": "updateProjectGoalDescription",
        "tags": [
          "ProjectManagement"
        ],
        "summary": "Update description of a project goal",
        "requestBody": {
          "description": "JSON object with description be updated",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.projects.web.UpdateProjectGoalDescription"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projects.api.ProjectGoal"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "409": {
            "$ref": "#/components/responses/ProjectManagementErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "goalId",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            }
          }
        ]
      }
    },
    "/projectManagement/{projectId}/bulkEditGoals": {
      "post": {
        "operationId": "bulkEditProjectGoals",
        "tags": [
          "ProjectManagement"
        ],
        "summary": "Bulk edit project goals",
        "requestBody": {
          "description": "JSON object with goals to edit",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.projectManagement.web.BulkEditProjectGoals"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.projects.api.ProjectGoal"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "409": {
            "$ref": "#/components/responses/ProjectManagementErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            }
          }
        ]
      }
    },
    "/projectManagement/{projectId}/bulkDeleteGoals": {
      "post": {
        "operationId": "bulkDeleteProjectGoals",
        "tags": [
          "ProjectManagement"
        ],
        "summary": "Bulk delete project goals",
        "requestBody": {
          "description": "JSON object with goals to delete",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.projectManagement.web.BulkDeleteProjectGoals"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.projects.api.ProjectGoal"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "409": {
            "$ref": "#/components/responses/ProjectManagementErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            }
          }
        ]
      }
    },
    "/projectManagement/goal/{goalId}/comment/list": {
      "get": {
        "operationId": "getCommentsOnGoal",
        "tags": [
          "ProjectManagement"
        ],
        "summary": "Get comments on a Goal",
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projects.api.CommentThread"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "409": {
            "$ref": "#/components/responses/ProjectManagementErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "goalId",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            }
          }
        ]
      }
    },
    "/projectManagement/goal/{goalId}/comment": {
      "post": {
        "operationId": "addCommentOnGoal",
        "tags": [
          "ProjectManagement"
        ],
        "summary": "Add comment on Goal",
        "requestBody": {
          "description": "JSON object with data to add comment on Goal",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.projectManagement.web.CommentRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projects.api.CommentThread"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "409": {
            "$ref": "#/components/responses/ProjectManagementErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "goalId",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            }
          }
        ]
      }
    },
    "/projectManagement/goalComment/{threadId}/{commentId}/canUpdate": {
      "get": {
        "operationId": "canUpdateCommentOnGoal",
        "tags": [
          "ProjectManagement"
        ],
        "summary": "Boolean representing user can update a comment on Goal",
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "409": {
            "$ref": "#/components/responses/ProjectManagementErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "threadId",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            }
          },
          {
            "in": "path",
            "name": "commentId",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            }
          }
        ]
      }
    },
    "/projectManagement/goalComment/{threadId}/{commentId}": {
      "delete": {
        "operationId": "archiveCommentOnGoal",
        "tags": [
          "ProjectManagement"
        ],
        "summary": "Archive comment on Goal",
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projects.api.Comment"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "409": {
            "$ref": "#/components/responses/ProjectManagementErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "threadId",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            }
          },
          {
            "in": "path",
            "name": "commentId",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            }
          }
        ]
      },
      "put": {
        "operationId": "updateCommentOnGoal",
        "tags": [
          "ProjectManagement"
        ],
        "summary": "Update comment on Goal",
        "requestBody": {
          "description": "JSON object with data to update comment on Goal",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.projectManagement.web.CommentRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projects.api.Comment"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "409": {
            "$ref": "#/components/responses/ProjectManagementErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "threadId",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            }
          },
          {
            "in": "path",
            "name": "commentId",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            }
          }
        ]
      }
    },
    "/projectManagement/project/{projectId}/comment/list": {
      "get": {
        "operationId": "getCommentsOnProject",
        "tags": [
          "ProjectManagement"
        ],
        "summary": "Get comments on a Project",
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projects.api.CommentThread"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "409": {
            "$ref": "#/components/responses/ProjectManagementErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            }
          }
        ]
      }
    },
    "/projectManagement/project/{projectId}/comment": {
      "post": {
        "operationId": "addCommentOnProject",
        "tags": [
          "ProjectManagement"
        ],
        "summary": "Add comment on Project",
        "requestBody": {
          "description": "JSON object with data to add comment on Project",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.projectManagement.web.CommentRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projects.api.CommentThread"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "409": {
            "$ref": "#/components/responses/ProjectManagementErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            }
          }
        ]
      }
    },
    "/projectManagement/projectComment/{threadId}/{commentId}/canUpdate": {
      "get": {
        "operationId": "canUpdateCommentOnProject",
        "tags": [
          "ProjectManagement"
        ],
        "summary": "Boolean representing user can update comment on Project",
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "409": {
            "$ref": "#/components/responses/ProjectManagementErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "threadId",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            }
          },
          {
            "in": "path",
            "name": "commentId",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            }
          }
        ]
      }
    },
    "/projectManagement/projectComment/{threadId}/{commentId}": {
      "delete": {
        "operationId": "archiveCommentOnProject",
        "tags": [
          "ProjectManagement"
        ],
        "summary": "Archive comment on Project",
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projects.api.Comment"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "409": {
            "$ref": "#/components/responses/ProjectManagementErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "threadId",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            }
          },
          {
            "in": "path",
            "name": "commentId",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            }
          }
        ]
      },
      "put": {
        "operationId": "updateCommentOnProject",
        "tags": [
          "ProjectManagement"
        ],
        "summary": "Update comment on Project",
        "requestBody": {
          "description": "JSON object with data to update comment on Project",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.projectManagement.web.CommentRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projects.api.Comment"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "409": {
            "$ref": "#/components/responses/ProjectManagementErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "threadId",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            }
          },
          {
            "in": "path",
            "name": "commentId",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            }
          }
        ]
      }
    },
    "/projectManagement/{jobId}/linkJobToGoal": {
      "post": {
        "operationId": "linkJobToGoal",
        "tags": [
          "ProjectManagement"
        ],
        "summary": "Link job to goal",
        "requestBody": {
          "description": "JSON object with information for linking goal to a job",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.projectManagement.web.LinkJobToGoalRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projectManagement.api.ResponseMessage"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "409": {
            "$ref": "#/components/responses/ProjectManagementErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "jobId",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            }
          }
        ]
      }
    },
    "/projectManagement/{jobId}/unlinkJobFromGoal": {
      "post": {
        "operationId": "unlinkJobFromGoal",
        "tags": [
          "ProjectManagement"
        ],
        "summary": "Unlink job from goal",
        "requestBody": {
          "description": "JSON object with information for unlinking goal from job",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.projectManagement.web.UnlinkJobFromGoalRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projectManagement.api.ResponseMessage"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "409": {
            "$ref": "#/components/responses/ProjectManagementErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "jobId",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            }
          }
        ]
      }
    },
    "/projectManagement/{workspaceId}/linkWorkspaceToGoal": {
      "post": {
        "operationId": "linkWorkspaceToGoal",
        "tags": [
          "ProjectManagement"
        ],
        "summary": "Link workspace to goal",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string",
              "$ref": "#/components/schemas/DominoId"
            },
            "in": "path",
            "name": "workspaceId",
            "description": "ID of the workspace",
            "required": true
          }
        ],
        "requestBody": {
          "description": "JSON object with information for linking goal to a workspace",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.projectManagement.web.LinkWorkspaceToGoalRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projectManagement.api.ResponseMessage"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "409": {
            "$ref": "#/components/responses/ProjectManagementErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/projectManagement/{workspaceId}/unlinkWorkspaceFromGoal": {
      "post": {
        "operationId": "unlinkWorkspaceFromGoal",
        "tags": [
          "ProjectManagement"
        ],
        "summary": "Unlink workspace from goal",
        "requestBody": {
          "description": "JSON object with information for unlinking goal from workspace",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.projectManagement.web.UnlinkWorkspaceFromGoalRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projectManagement.api.ResponseMessage"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "409": {
            "$ref": "#/components/responses/ProjectManagementErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            }
          }
        ]
      }
    },
    "/projectManagement/linkFileToGoal": {
      "post": {
        "operationId": "linkFileToGoal",
        "tags": [
          "ProjectManagement"
        ],
        "summary": "Link a file to a goal",
        "requestBody": {
          "description": "JSON object with information for unlinking goal from workspace",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.projectManagement.web.LinkFileToGoalRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projectManagement.api.ResponseMessage"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "409": {
            "$ref": "#/components/responses/ProjectManagementErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/projectManagement/unlinkFileFromGoal": {
      "post": {
        "operationId": "unlinkFileFromGoal",
        "tags": [
          "ProjectManagement"
        ],
        "summary": "Unlink a file from a goal",
        "requestBody": {
          "description": "JSON object with information for unlinking goal from workspace",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.projectManagement.web.UnlinkFileFromGoalRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projectManagement.api.ResponseMessage"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "409": {
            "$ref": "#/components/responses/ProjectManagementErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/projects": {
      "post": {
        "operationId": "createProject",
        "tags": [
          "Projects"
        ],
        "summary": "creates a project",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.nucleus.project.models.NewProject"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.nucleus.project.models.Project"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/projects/{projectId}": {
      "get": {
        "operationId": "getProjectSummary",
        "tags": [
          "Projects"
        ],
        "summary": "gets the summary for this given projectId",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "projectId",
            "description": "Id of the project",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projects.api.ProjectSummary"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "delete": {
        "operationId": "archiveProjectById",
        "tags": [
          "Projects"
        ],
        "summary": "archive an project by id",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "projectId",
            "description": "Id of the project to archive",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/projects/{projectToForkId}/fork": {
      "post": {
        "operationId": "forkProject",
        "tags": [
          "Projects"
        ],
        "summary": "forks a project",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "projectToForkId",
            "description": "Id of the project to fork",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.nucleus.project.models.ForkOrCopyProject"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.nucleus.project.models.Project"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/projects/{projectToCopyId}/copy": {
      "post": {
        "operationId": "copyProject",
        "tags": [
          "Projects"
        ],
        "summary": "copies a project",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "projectToCopyId",
            "description": "Id of the project to copy",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.nucleus.project.models.ForkOrCopyProject"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.nucleus.project.models.Project"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/projects/{projectId}/description": {
      "patch": {
        "operationId": "updateProjectDescription",
        "tags": [
          "Projects"
        ],
        "summary": "update project description for this given projectId",
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.nucleus.project.models.UpdateProjectDescription"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/projects/{projectId}/visibility": {
      "patch": {
        "operationId": "updateProjectVisibility",
        "tags": [
          "Projects"
        ],
        "summary": "update project visibility for this given projectId",
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.nucleus.project.models.UpdateProjectVisibility"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/projects/{projectId}/tags": {
      "post": {
        "operationId": "addTags",
        "tags": [
          "Projects"
        ],
        "summary": "adds tag(s) to a project",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "projectId",
            "description": "Id of the project to add tag(s) to",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.nucleus.project.models.NewTags"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projects.api.ProjectTagDTO"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/projects/{projectId}/tags/{tagId}": {
      "delete": {
        "operationId": "removeTagFromProject",
        "tags": [
          "Projects"
        ],
        "summary": "delete a tag from a project",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "projectId",
            "description": "Id of the project to delete tag from",
            "required": true
          },
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "tagId",
            "description": "Id of the tag to delete",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/projects/{projectId}/releases": {
      "get": {
        "operationId": "getProjectReleases",
        "tags": [
          "Projects"
        ],
        "summary": "gets the releases for the given Project",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "projectId",
            "description": "Id of the project",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.server.projectreleases.ProjectReleaseDto"
                  }
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/projects/{projectId}/settings": {
      "get": {
        "operationId": "getProjectSettings",
        "tags": [
          "Projects"
        ],
        "summary": "gets the settings for the given Project",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "projectId",
            "description": "Id of the project",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.nucleus.project.ProjectSettingsDto"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "put": {
        "operationId": "updateProjectSettings",
        "tags": [
          "Projects"
        ],
        "summary": "update the settings for the given Project",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "projectId",
            "description": "Domino id of the project",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.nucleus.project.ProjectSettingsUpdateDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/projects/{projectId}/hardwareTiers": {
      "get": {
        "operationId": "listHardwareTiersForProject",
        "tags": [
          "Projects"
        ],
        "summary": "retrieves the Hardware Tiers accessible for a Project",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "projectId",
            "description": "Id of the project",
            "required": true
          },
          {
            "schema": {
              "nullable": true,
              "type": "boolean"
            },
            "in": "query",
            "name": "showArchived",
            "description": "Flag to declare if archived hardware tiers are included in the response.",
            "required": false
          },
          {
            "schema": {
              "nullable": true,
              "type": "boolean"
            },
            "in": "query",
            "name": "forModelApi",
            "description": "Flag to declare if only model api hardware tiers are returned in the response.",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.hardwaretier.api.HardwareTierWithCapacityDto"
                  }
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/projects/{projectId}/collaborators": {
      "post": {
        "operationId": "addCollaborator",
        "tags": [
          "Projects"
        ],
        "summary": "adds a user or organization to Project as a collaborator",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "projectId",
            "description": "Id of the project to add collaborator to",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.nucleus.project.models.Collaborator"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.nucleus.project.models.Collaborator"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "get": {
        "operationId": "getProjectCollaborators",
        "tags": [
          "Projects"
        ],
        "summary": "Retrieves all of the collaborators in a project",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "projectId",
            "description": "Id of the project",
            "required": true
          },
          {
            "schema": {
              "nullable": true,
              "type": "boolean"
            },
            "in": "query",
            "name": "getUsers",
            "description": "Return only users and org members.",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.common.user.Person"
                  }
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/projects/{projectId}/collaborators/{collaboratorId}": {
      "delete": {
        "operationId": "removeCollaborator",
        "tags": [
          "Projects"
        ],
        "summary": "remove a collaborator from a Project",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "projectId",
            "description": "Id of the project",
            "required": true
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "path",
            "name": "collaboratorId",
            "description": "Id of the collaborator to remove from the project",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/projects/{projectId}/commits/head/files/{path}": {
      "post": {
        "operationId": "uploadFile",
        "tags": [
          "Files"
        ],
        "summary": "uploads a file to the head commit of the project's repository",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "projectId",
            "description": "Id of the project to upload the file to",
            "required": true
          },
          {
            "in": "path",
            "name": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Path in the project's repository to upload the file to"
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "upfile": {
                    "type": "string",
                    "format": "binary",
                    "description": "The file to upload"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.files.interface.ProjectFile"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "get": {
        "operationId": "getProjectFilesFromHead",
        "tags": [
          "Files"
        ],
        "summary": "returns all the files for a specified project from the last commit",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "projectId",
            "description": "Id of the project to return files for",
            "required": true
          },
          {
            "in": "path",
            "name": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Path in the project's repository to list files from (if not specified, files in the root will be listed)"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.nucleus.file.ProjectFileDeprecated"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/projects/{projectId}/commits/{commitId}/files/{path}": {
      "get": {
        "operationId": "getProjectFiles",
        "tags": [
          "Files"
        ],
        "summary": "returns all the files for a specified project",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "projectId",
            "description": "Id of the project to return files for",
            "required": true
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "path",
            "name": "commitId",
            "description": "Id of a commit in the project repository to list files from",
            "required": true
          },
          {
            "in": "path",
            "name": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Path in the project's repository to list files from (if not specified, files in the root will be listed)"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.nucleus.file.ProjectFileDeprecated"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/projects/{projectId}/commits/head": {
      "get": {
        "operationId": "getProjectHeadCommit",
        "tags": [
          "Files"
        ],
        "summary": "retrieves the last (head) commit in the repository associated with the specified project",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "projectId",
            "description": "Id of the project to return head commit for",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.nucleus.file.ProjectCommitDeprecated"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/projects/{projectId}/commits": {
      "get": {
        "operationId": "getProjectCommits",
        "tags": [
          "Files"
        ],
        "summary": "retrieves commits of the repository associated with the specified project",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "projectId",
            "description": "Id of the project to return commits for",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.nucleus.file.ProjectCommitDeprecated"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/projects/{projectId}/gitRepositories": {
      "post": {
        "operationId": "addGitRepo",
        "tags": [
          "Projects"
        ],
        "summary": "adds a git repository to a project",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "projectId",
            "description": "Id of the project to add the repository to",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.projects.api.repositories.GitRepositoryDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projects.api.repositories.GitRepositoryDTO"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "get": {
        "operationId": "getGitRepos",
        "tags": [
          "Projects"
        ],
        "summary": "gets git repositories for a project",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "projectId",
            "description": "Id of the project to get the repositories from",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.projects.api.repositories.GitRepositoryDTO"
                  }
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/projects/{projectId}/gitRepositories/{repositoryId}": {
      "patch": {
        "operationId": "editGitRepo",
        "tags": [
          "Projects"
        ],
        "summary": "edits a git repository",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "projectId",
            "description": "Id of the project to get the repository from",
            "required": true
          },
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "repositoryId",
            "description": "Id of the repository being edited",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.projects.api.repositories.GitRepositoryDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "delete": {
        "operationId": "archiveGitRepo",
        "tags": [
          "Projects"
        ],
        "summary": "archives a git repository from a project",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "projectId",
            "description": "Id of the project to archive the repository from",
            "required": true
          },
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "repositoryId",
            "description": "Id of the repository to archive",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/projects/{projectId}/requireCommitMessage/{requireCommitMessage}": {
      "patch": {
        "operationId": "setRequireCommitMessage",
        "tags": [
          "Projects"
        ],
        "summary": "require a commit message for a project",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "projectId",
            "description": "Id of the project",
            "required": true
          },
          {
            "schema": {
              "type": "boolean"
            },
            "in": "path",
            "name": "requireCommitMessage",
            "description": "should a commit message be required",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/projects/{projectId}/requireCommitMessage": {
      "get": {
        "operationId": "getRequireCommitMessage",
        "tags": [
          "Projects"
        ],
        "summary": "get if commit message is required for a project",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "projectId",
            "description": "Id of the project",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/projects/portfolio/getProjectStages": {
      "get": {
        "operationId": "getProjectStages",
        "tags": [
          "Projects"
        ],
        "summary": "Get project stages",
        "parameters": [],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.projects.api.ProjectStage"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/projects/portfolio/createProjectStage": {
      "post": {
        "operationId": "createProjectStage",
        "tags": [
          "Projects"
        ],
        "summary": "Create project stages",
        "parameters": [],
        "requestBody": {
          "description": "JSON object with data to create a projectStage",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.projects.web.CreateProjectStage"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projects.api.ProjectStage"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/projects/portfolio/archiveProjectStage": {
      "delete": {
        "operationId": "archiveProjectStage",
        "tags": [
          "Projects"
        ],
        "summary": "Archive project stage",
        "parameters": [],
        "requestBody": {
          "description": "JSON object with data to archive a projectStage",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.projects.web.ArchiveProjectStage"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projects.api.ProjectStage"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/projects/portfolio/moveProjectToStage": {
      "post": {
        "operationId": "moveProjectToStage",
        "tags": [
          "Projects"
        ],
        "summary": "Assign stage to a project",
        "parameters": [],
        "requestBody": {
          "description": "JSON object with data to assign a stage to a project",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.projects.web.MoveProjectToStage"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projects.api.ProjectStageAndStatus"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/projects/portfolio/raiseBlockerToProject": {
      "post": {
        "operationId": "raiseBlockerToProject",
        "tags": [
          "Projects"
        ],
        "summary": "Raise blocker to a project",
        "parameters": [],
        "requestBody": {
          "description": "JSON object with data to raise blocker to a project",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.projects.web.RaiseBlockerToProject"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projects.api.ProjectStageAndStatus"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/projects/portfolio/markProjectComplete": {
      "post": {
        "operationId": "markProjectComplete",
        "tags": [
          "Projects"
        ],
        "summary": "Mark Project as complete",
        "parameters": [],
        "requestBody": {
          "description": "JSON object with data to mark project as complete",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.projects.web.MarkProjectComplete"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projects.api.ProjectStageAndStatus"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/projects/portfolio/markProjectActive": {
      "post": {
        "operationId": "markProjectActive",
        "tags": [
          "Projects"
        ],
        "summary": "Mark Project as active",
        "parameters": [],
        "requestBody": {
          "description": "JSON object with data to mark project as active",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.projects.web.MarkProjectActive"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projects.api.ProjectStageAndStatus"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/projects/{projectId}/getCurrentStageAndStatus": {
      "get": {
        "operationId": "getCurrentProjectStageAndStatus",
        "tags": [
          "Projects"
        ],
        "summary": "Get current project stage and status",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "projectId",
            "description": "Domino id of the project",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projects.api.ProjectStageAndStatus"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/projects/portfolio/updateStageName": {
      "post": {
        "operationId": "updateStageName",
        "tags": [
          "Projects"
        ],
        "summary": "Update stage name",
        "parameters": [],
        "requestBody": {
          "description": "JSON object with data to update the stage name",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.projects.web.UpdateStageName"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projects.api.ProjectStageAndStatus"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/projects/portfolio/getProjectPortfolioStats": {
      "get": {
        "operationId": "getProjectPortfolioStats",
        "tags": [
          "Projects"
        ],
        "summary": "Get project portfolio stats",
        "parameters": [
          {
            "schema": {
              "nullable": true,
              "type": "boolean"
            },
            "in": "query",
            "name": "includePmLinkedProjects",
            "description": "boolean to include project management linked projects",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projects.api.ProjectPortfolioStats"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/projects/portfolio/getProjectPortfolio": {
      "get": {
        "operationId": "getProjectPortfolio",
        "tags": [
          "Projects"
        ],
        "summary": "Get project portfolio stats",
        "parameters": [
          {
            "schema": {
              "nullable": true,
              "format": "int32",
              "type": "integer"
            },
            "in": "query",
            "name": "pageSize",
            "description": "number of projects to fetch",
            "required": false
          },
          {
            "schema": {
              "nullable": true,
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            },
            "in": "query",
            "name": "sortOrder",
            "description": "order of sort",
            "required": false
          },
          {
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "in": "query",
            "name": "sortBy",
            "description": "column to sort on",
            "required": false
          },
          {
            "schema": {
              "nullable": true,
              "format": "int32",
              "type": "integer"
            },
            "in": "query",
            "name": "pageNo",
            "description": "the page number to fetch",
            "required": false
          },
          {
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "in": "query",
            "name": "searchQuery",
            "description": "column to sort on",
            "required": false
          },
          {
            "schema": {
              "nullable": true,
              "type": "array",
              "items": {
                "pattern": "^[0-9a-f]{24}$",
                "type": "string"
              }
            },
            "in": "query",
            "name": "stageId",
            "description": "The stageId to filter",
            "required": false
          },
          {
            "schema": {
              "nullable": true,
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "in": "query",
            "name": "status",
            "description": "Status to filter",
            "required": false
          },
          {
            "schema": {
              "nullable": true,
              "type": "boolean"
            },
            "in": "query",
            "name": "isBlocked",
            "description": "boolean to filter blocked projects",
            "required": false
          },
          {
            "schema": {
              "nullable": true,
              "type": "boolean"
            },
            "in": "query",
            "name": "includePmLinkedProjects",
            "description": "boolean to include project management linked projects",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projects.api.ProjectPortfolioSet"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/projects/{projectId}/getProjectStages": {
      "get": {
        "operationId": "getProjectStagesForProject",
        "tags": [
          "Projects"
        ],
        "summary": "Get allowed project stages for a given project",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "projectId",
            "description": "Domino id of the project",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.projects.api.ProjectStage"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/projects/{projectId}/getCommentsOnBlockedProject": {
      "get": {
        "operationId": "getCommentsOnBlockedProject",
        "tags": [
          "Projects"
        ],
        "summary": "Get comment on blocked project",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "projectId",
            "description": "Domino id of the project",
            "required": true
          },
          {
            "schema": {
              "format": "int64",
              "type": "string"
            },
            "in": "query",
            "name": "blockedAt",
            "description": "The time in millis (instant) at which the project is blocked",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projects.api.CommentThread"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/projects/{projectId}/addCommentOnBlockedProject": {
      "post": {
        "operationId": "addCommentOnBlockedProject",
        "tags": [
          "Projects"
        ],
        "summary": "Add comment on blocked project",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "projectId",
            "description": "Domino id of the project",
            "required": true
          }
        ],
        "requestBody": {
          "description": "JSON object with data to add comment on blocked project",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.projects.web.AddBlockedAtComment"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projects.api.CommentThread"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/projects/{projectId}/archiveCommentOnBlockedProject": {
      "delete": {
        "operationId": "archiveCommentOnBlockedProject",
        "tags": [
          "Projects"
        ],
        "summary": "Archive comment on blocked project",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "projectId",
            "description": "Domino id of the project",
            "required": true
          }
        ],
        "requestBody": {
          "description": "JSON object with data to archive comment on blocked project",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.projects.web.ArchiveComment"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projects.api.Comment"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/projects/{projectId}/{goalId}/getCommentsOnGoal": {
      "get": {
        "operationId": "getCommentsOnGoal",
        "tags": [
          "Projects"
        ],
        "summary": "Get comments on a Goal",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "projectId",
            "description": "Domino id of the project",
            "required": true
          },
          {
            "in": "path",
            "name": "goalId",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projects.api.CommentThread"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/projects/{projectId}/{goalId}/addCommentOnGoal": {
      "post": {
        "operationId": "addCommentOnGoal",
        "tags": [
          "Projects"
        ],
        "summary": "Add comment on Goal",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "projectId",
            "description": "Domino id of the project",
            "required": true
          },
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "goalId",
            "description": "Domino id of the goal",
            "required": true
          }
        ],
        "requestBody": {
          "description": "JSON object with data to add comment on Goal",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.projects.web.AddComment"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projects.api.CommentThread"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/projects/{projectId}/{goalId}/comment": {
      "put": {
        "operationId": "updateCommentOnGoal",
        "tags": [
          "Projects"
        ],
        "summary": "Update comment on Goal",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "projectId",
            "description": "Domino id of the project",
            "required": true
          },
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "goalId",
            "description": "Domino id of the goal",
            "required": true
          }
        ],
        "requestBody": {
          "description": "JSON object with data to update comment on Goal",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.projects.web.UpdateCommentInfo"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projects.api.Comment"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/projects/projectGoals/archiveCommentOnGoal": {
      "delete": {
        "operationId": "archiveCommentOnGoal",
        "tags": [
          "Projects"
        ],
        "summary": "Archive comment on Goal",
        "parameters": [],
        "requestBody": {
          "description": "JSON object with data to archive comment on Goal",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.projects.web.ArchiveComment"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projects.api.Comment"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/projects/dontCall": {
      "get": {
        "operationId": "notFound",
        "tags": [
          "Projects"
        ],
        "summary": "Get all possible statuses (Dirty hack to send enums to frontend)",
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projects.api.ProjectPortfolioMetaData"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/projects/portfolio/getAssetPortfolioStats": {
      "get": {
        "operationId": "getAssetPortfolioStats",
        "tags": [
          "Projects"
        ],
        "summary": "Get assets portfolio stats",
        "parameters": [],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projects.api.AssetPortfolioStats"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/projects/portfolio/getAssetPortfolio": {
      "get": {
        "operationId": "getAssetPortfolio",
        "tags": [
          "Projects"
        ],
        "summary": "Get assets portfolio",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "enum": [
                "App",
                "ModelAPI",
                "Launcher",
                "Schedules"
              ]
            },
            "in": "query",
            "name": "assetType",
            "required": true
          },
          {
            "schema": {
              "nullable": true,
              "format": "int32",
              "type": "integer"
            },
            "in": "query",
            "name": "pageSize",
            "description": "number of projects to fetch",
            "required": false
          },
          {
            "schema": {
              "nullable": true,
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            },
            "in": "query",
            "name": "sortOrder",
            "description": "order of sort",
            "required": false
          },
          {
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "in": "query",
            "name": "sortBy",
            "description": "column to sort on",
            "required": false
          },
          {
            "schema": {
              "nullable": true,
              "format": "int32",
              "type": "integer"
            },
            "in": "query",
            "name": "pageNo",
            "description": "the page number to fetch",
            "required": false
          },
          {
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "in": "query",
            "name": "searchQuery",
            "description": "column to sort on",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projects.api.AssetPortfolioSet"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/projects/{projectId}/createGoal": {
      "post": {
        "operationId": "createProjectGoal",
        "tags": [
          "Projects"
        ],
        "summary": "Create project goal",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "projectId",
            "description": "Domino id of the project",
            "required": true
          }
        ],
        "requestBody": {
          "description": "JSON object with data to create a project goal",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.projects.web.CreateProjectGoal"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projects.api.ProjectGoal"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/projects/{projectId}/goal/{goalId}": {
      "delete": {
        "operationId": "deleteProjectGoal",
        "tags": [
          "Projects"
        ],
        "summary": "Delete a project goal",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "projectId",
            "description": "Domino id of the project",
            "required": true
          },
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "goalId",
            "description": "Domino id of the goal",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projects.api.ProjectGoal"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/projects/{projectId}/goal/{goalId}/markComplete": {
      "post": {
        "operationId": "markProjectGoalComplete",
        "tags": [
          "Projects"
        ],
        "summary": "Mark project goal complete",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "projectId",
            "description": "Domino id of the project",
            "required": true
          },
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "goalId",
            "description": "Domino id of the goal",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projects.api.ProjectGoal"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/projects/{projectId}/goal/{goalId}/markIncomplete": {
      "post": {
        "operationId": "markProjectGoalIncomplete",
        "tags": [
          "Projects"
        ],
        "summary": "Mark a project goal incomplete",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "projectId",
            "description": "Domino id of the project",
            "required": true
          },
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "goalId",
            "description": "Domino id of the goal",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projects.api.ProjectGoal"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/projects/{projectId}/goal/{goalId}/updateTitle": {
      "post": {
        "operationId": "updateProjectGoalTitle",
        "tags": [
          "Projects"
        ],
        "summary": "Update title of a project goal",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "projectId",
            "description": "Domino id of the project",
            "required": true
          },
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "goalId",
            "description": "Domino id of the goal",
            "required": true
          }
        ],
        "requestBody": {
          "description": "JSON object with title to be updated",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.projects.web.UpdateProjectGoalTitle"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projects.api.ProjectGoal"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/projects/{projectId}/goal/{goalId}/updateDescription": {
      "post": {
        "operationId": "updateProjectGoalDescription",
        "tags": [
          "Projects"
        ],
        "summary": "Update description of a project goal",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "projectId",
            "description": "Domino id of the project",
            "required": true
          },
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "goalId",
            "description": "Domino id of the goal",
            "required": true
          }
        ],
        "requestBody": {
          "description": "JSON object with description be updated",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.projects.web.UpdateProjectGoalDescription"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projects.api.ProjectGoal"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/projects/{projectId}/comments": {
      "get": {
        "operationId": "getCommentsOnProject",
        "tags": [
          "Projects"
        ],
        "summary": "Get comments on a Project",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "projectId",
            "description": "Domino id of the project",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projects.api.CommentThread"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/projects/{projectId}/comment": {
      "post": {
        "operationId": "addCommentOnProject",
        "tags": [
          "Projects"
        ],
        "summary": "Add comment on Project",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "projectId",
            "description": "Domino id of the project",
            "required": true
          }
        ],
        "requestBody": {
          "description": "JSON object with data to add comment on Project",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.projects.web.AddComment"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projects.api.CommentThread"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "delete": {
        "operationId": "archiveCommentOnProject",
        "tags": [
          "Projects"
        ],
        "summary": "Archive comment on Project",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "projectId",
            "description": "Domino id of the project",
            "required": true
          }
        ],
        "requestBody": {
          "description": "JSON object with data to archive comment on Project",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.projects.web.ArchiveComment"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projects.api.Comment"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "put": {
        "operationId": "updateCommentOnProject",
        "tags": [
          "Projects"
        ],
        "summary": "Update comment on Project",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "projectId",
            "description": "Domino id of the project",
            "required": true
          }
        ],
        "requestBody": {
          "description": "JSON object with data to update comment on Project",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.projects.web.UpdateCommentInfo"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projects.api.Comment"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/projects/{projectId}/useableEnvironments": {
      "get": {
        "operationId": "getUseableEnvironments",
        "tags": [
          "Projects"
        ],
        "summary": "gets the list of Environments that this Project can use",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "projectId",
            "description": "Id of the project",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projects.api.UseableProjectEnvironmentsDTO"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/projects/{projectId}/environment/{environmentId}": {
      "get": {
        "operationId": "getUseableEnvironmentDetails",
        "tags": [
          "Projects"
        ],
        "summary": "gets the details for an environment visible by this project and the requesting user",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "projectId",
            "description": "Id of the project",
            "required": true
          },
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "environmentId",
            "description": "Id of the environment",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projects.api.EnvironmentDetails"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/projects/{projectId}/dependenciesAndForks": {
      "get": {
        "operationId": "getDependenciesAndForks",
        "tags": [
          "Projects"
        ],
        "summary": "get project dependencies and fork info, request merge status to be sent via websocket",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "projectId",
            "description": "Id of the project",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projects.api.ProjectDependenciesAndForks"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/projects/{projectId}/repository/{repoId}/credentialMapping": {
      "get": {
        "operationId": "getCredentialId",
        "tags": [
          "Projects"
        ],
        "summary": "get credential id used for a specific user-project-repo combination",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "projectId",
            "description": "Id of the project",
            "required": true
          },
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "repoId",
            "description": "Id of the repository",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.common.DominoId"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "delete": {
        "operationId": "deleteCredentialMapping",
        "tags": [
          "Projects"
        ],
        "summary": "delete credential mapping for a specific user-project-repo combination",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "projectId",
            "description": "Id of the project",
            "required": true
          },
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "repoId",
            "description": "Id of the repository",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projects.api.repositories.CredentialMappingDTO"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "put": {
        "operationId": "setCredentialMapping",
        "tags": [
          "Projects"
        ],
        "summary": "set credential to use for a specific user-project-repo combination",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "projectId",
            "description": "Id of the project",
            "required": true
          },
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "repoId",
            "description": "Id of the repository",
            "required": true
          }
        ],
        "requestBody": {
          "description": "JSON object with credential ID to set",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.projects.web.SetCredentialMapping"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projects.api.repositories.CredentialMappingDTO"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/projects/{projectId}/credentialMapping": {
      "get": {
        "operationId": "getAllCredentialsForProject",
        "tags": [
          "Projects"
        ],
        "summary": "get list of credential mappings for a specific user-project combination",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "projectId",
            "description": "Id of the project",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.projects.api.repositories.CredentialMappingDTO"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/projects/credentialMapping/credential/{credentialId}": {
      "delete": {
        "operationId": "deleteCredentialMappingsByCredentialId",
        "tags": [
          "Projects"
        ],
        "summary": "delete credential mappings associated with a particular credential",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "credentialId",
            "description": "Id of the credential",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/projects/{projectId}/{repoId}/defaultTreeUri": {
      "get": {
        "operationId": "getDefaultTreeUri",
        "tags": [
          "Projects"
        ],
        "summary": "get uri for default tree of repository",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "projectId",
            "description": "Id of the project",
            "required": true
          },
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "repoId",
            "description": "Id of the repository",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/projects/{projectId}/{repoId}/uriForBlobAtBranch/{branch}/{fileName}": {
      "get": {
        "operationId": "getBlobAtBranch",
        "tags": [
          "Projects"
        ],
        "summary": "get repository uri for blob at a specific branch for a specific file",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "projectId",
            "description": "Id of the project",
            "required": true
          },
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "repoId",
            "description": "Id of the repository",
            "required": true
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "path",
            "name": "branch",
            "description": "Desired branch",
            "required": true
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "path",
            "name": "fileName",
            "description": "Name of file",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/projects/{projectId}/{repoId}/uriForBlobAtCommit/{commit}/{fileName}": {
      "get": {
        "operationId": "getBlobAtCommit",
        "tags": [
          "Projects"
        ],
        "summary": "get repository uri for blob at a specific commit for a specific file",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "projectId",
            "description": "Id of the project",
            "required": true
          },
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "repoId",
            "description": "Id of the repository",
            "required": true
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "path",
            "name": "commit",
            "description": "Desired commit",
            "required": true
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "path",
            "name": "fileName",
            "description": "Name of file",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/projects/{projectId}/{repoId}/uriForTreeAtCommit/{commit}": {
      "get": {
        "operationId": "getTreeAtCommit",
        "tags": [
          "Projects"
        ],
        "summary": "get repository uri for tree at a specific commit",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "projectId",
            "description": "Id of the project",
            "required": true
          },
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "repoId",
            "description": "Id of the repository",
            "required": true
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "path",
            "name": "commit",
            "description": "Desired commit",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/projects/actionableInsights/projects": {
      "get": {
        "operationId": "getProjectForActionableInsights",
        "tags": [
          "ActionableInsights"
        ],
        "summary": "retrieves the project to be used for Actionable Insights for a Model API",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "userEmail",
            "description": "Id of the user",
            "required": true
          },
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string",
              "$ref": "#/components/schemas/DominoId"
            },
            "in": "query",
            "name": "projectId",
            "description": "Id of the project",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projects.api.ProjectSummary"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/projects/transferOwnership": {
      "post": {
        "operationId": "transferProjectOwnership",
        "tags": [
          "Projects"
        ],
        "summary": "Transfer a project to another owner",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.projects.web.TransferProjectOwnership"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/projects/permissions/all": {
      "get": {
        "operationId": "getProjectPermissions",
        "tags": [
          "Projects"
        ],
        "summary": "Get the permissions for a user on projects",
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projects.api.ProjectPermissionsResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "parameters": [
          {
            "in": "query",
            "name": "projectId",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            }
          }
        ]
      }
    },
    "/projects/templates/projectHubTemplates": {
      "get": {
        "operationId": "getProjectHubTemplates",
        "tags": [
          "Projects",
          "Templates"
        ],
        "summary": "Get the project hub templates for a deployment",
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.projects.api.ProjectHubTemplatesResult"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/projects/templates/{templateId}": {
      "get": {
        "operationId": "getProjectHubTemplate",
        "tags": [
          "Projects",
          "Templates"
        ],
        "summary": "Get a single project hub template for a deployment",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "path",
            "name": "templateId",
            "description": "String of the template's id",
            "required": true
          },
          {
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "in": "query",
            "name": "revisionId",
            "description": "string of the template's revision id",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projects.api.ProjectHubTemplateResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/projects/{projectId}/environmentVariables": {
      "post": {
        "operationId": "upsertProjectEnvironmentVariable",
        "tags": [
          "Projects"
        ],
        "summary": "sets the specified project's environment variables",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "projectId",
            "description": "Id of the project to add environment variables",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.common.models.EnvironmentVariable"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.common.models.EnvironmentVariable"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "get": {
        "operationId": "getProjectEnvironmentVariables",
        "tags": [
          "Projects"
        ],
        "summary": "retrieves the specified project's environment variables",
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.common.models.EnvironmentVariable"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/projects/{projectId}/environmentVariables/{environmentVariableName}": {
      "delete": {
        "operationId": "deleteProjectEnvironmentVariable",
        "tags": [
          "Projects"
        ],
        "summary": "deletes the environment variable from the specified project",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "projectId",
            "description": "Id of the project to remove environment variables",
            "required": true
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "path",
            "name": "environmentVariableName",
            "description": "name of the environment variable to remove",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/projects/{projectId}/resultsBranchSetting": {
      "patch": {
        "operationId": "updateResultsBranchSetting",
        "tags": [
          "Projects"
        ],
        "summary": "Update project settings results branch",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "projectId",
            "description": "Id of the project",
            "required": true
          }
        ],
        "requestBody": {
          "description": "JSON object with isolatedOutputCommit Main or Isolated to update the results branch",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.projects.api.ProjectResultsBranchSettingChoices"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projects.api.ProjectResultsBranchSettingChoices"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "get": {
        "operationId": "getResultsBranchSetting",
        "tags": [
          "Projects"
        ],
        "summary": "Gets the project results branch setting",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "projectId",
            "description": "Id of the project",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projects.api.ProjectResultsBranchSettingChoices"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/projects/{projectId}/reviewRequests": {
      "post": {
        "operationId": "createReviewRequest",
        "tags": [
          "Projects"
        ],
        "summary": "Create a project review request",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "projectId",
            "description": "Id of the project",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.projects.api.CreateReviewRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "get": {
        "operationId": "getReviewRequests",
        "tags": [
          "Projects"
        ],
        "summary": "Gets the project review requests as a list",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "projectId",
            "description": "Id of the project",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/projects/{projectId}/reviewRequest/{reviewRequestNumber}": {
      "patch": {
        "operationId": "updateReviewRequest",
        "tags": [
          "Projects"
        ],
        "summary": "Update a project review request",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "projectId",
            "description": "Id of the project",
            "required": true
          },
          {
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "in": "path",
            "name": "reviewRequestNumber",
            "description": "Number of the review request",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.projects.api.UpdateReviewRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "get": {
        "operationId": "getReviewRequest",
        "tags": [
          "Projects"
        ],
        "summary": "Get one project review request",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "projectId",
            "description": "Id of the project",
            "required": true
          },
          {
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "in": "path",
            "name": "reviewRequestNumber",
            "description": "Number of the review request",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/projects/{projectId}/resolveRequest/{reviewRequestNumber}": {
      "patch": {
        "operationId": "resolveReviewRequest",
        "tags": [
          "Projects"
        ],
        "summary": "Resolve a project review request",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "projectId",
            "description": "Id of the project",
            "required": true
          },
          {
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "in": "path",
            "name": "reviewRequestNumber",
            "description": "Number of the review request",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.projects.api.ResolveReviewRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/projects/{projectId}/sparkConfig": {
      "patch": {
        "operationId": "updateProjectSparkConfig",
        "tags": [
          "Projects"
        ],
        "summary": "updates the specified project's spark config",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "projectId",
            "description": "Id of the project",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Project apachespark config",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.projects.api.ProjectSparkConfig"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projects.api.ProjectSparkConfig"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "get": {
        "operationId": "getProjectSparkConfig",
        "tags": [
          "Projects"
        ],
        "summary": "retrieves the specified project's spark config",
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projects.api.ProjectSparkConfig"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/projects/{projectId}/kerberosConfig": {
      "post": {
        "operationId": "updateProjectKerberosConfig",
        "tags": [
          "Projects"
        ],
        "summary": "update the specified project's kerberos config",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "projectId",
            "description": "Id of the project",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Project kerberos config",
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "upfile": {
                    "type": "string",
                    "format": "binary",
                    "description": "The file to upload"
                  },
                  "kerberosMode": {
                    "type": "string"
                  },
                  "principal": {
                    "type": "string"
                  },
                  "keytabFileName": {
                    "type": "string"
                  }
                },
                "required": [
                  "kerberosMode"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projects.api.ProjectKerberosConfig"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "get": {
        "operationId": "getProjectKerberosConfig",
        "tags": [
          "Projects"
        ],
        "summary": "retrieves the specified project's kerberos config",
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projects.api.ProjectKerberosConfig"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/projects/{projectId}/name": {
      "patch": {
        "operationId": "updateProjectName",
        "tags": [
          "Projects"
        ],
        "summary": "update project name for this given projectId",
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.projects.api.UpdateProjectName"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/projects/{projectId}/anonymousRunExecutionSettings": {
      "patch": {
        "operationId": "updateProjectAnonymousRunExecutionSettings",
        "tags": [
          "Projects"
        ],
        "summary": "update project anonymous run execution setting for the given project id",
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.projects.api.UpdateProjectAnonymousRunExecutionSettings"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "get": {
        "operationId": "getProjectAnonymousRunExecutionSettings",
        "tags": [
          "Projects"
        ],
        "summary": "get project anonymous run execution setting for the given project id",
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/projects/{projectId}/collaboratorRole": {
      "patch": {
        "operationId": "updateCollaboratorProjectRole",
        "tags": [
          "Projects"
        ],
        "summary": "update project collaborator role",
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.projects.api.CollaboratorDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/projects/{projectId}/notificationPreference": {
      "patch": {
        "operationId": "updateNotificationPreference",
        "tags": [
          "Projects"
        ],
        "summary": "update project notifications preference",
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.projects.api.UpdateProjectNotificationPreference"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/projects/{projectId}/addManyCollaborators": {
      "post": {
        "operationId": "addManyCollaborators",
        "tags": [
          "Projects"
        ],
        "summary": "add many project collaborators",
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.projects.api.AddManyCollaborators"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/projects/{projectId}/projectSettingsExport": {
      "patch": {
        "operationId": "updateProjectSettingsExport",
        "tags": [
          "Projects"
        ],
        "summary": "update project settings export",
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.projects.api.ProjectSettingsExport"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "get": {
        "operationId": "getProjectSettingsExport",
        "tags": [
          "Projects"
        ],
        "summary": "get project settings export",
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projects.api.ProjectSettingsExport"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/projects/{projectId}/projectSettingsCollaborators": {
      "get": {
        "operationId": "getProjectSettingsCollaborators",
        "tags": [
          "Projects"
        ],
        "summary": "get project settings collaborators and preferences",
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projects.api.ProjectSettingsCollaborators"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/projects/{projectId}/billingtag": {
      "post": {
        "operationId": "setProjectBillingTag",
        "tags": [
          "Projects"
        ],
        "summary": "assign a billing tag to a project",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "projectId",
            "description": "Id of the project",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.projects.api.BillingTag"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projects.api.ProjectSummary"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "get": {
        "operationId": "getProjectBillingTag",
        "tags": [
          "Projects"
        ],
        "summary": "get the billing assigned to a project",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "projectId",
            "description": "Id of the project",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "delete": {
        "operationId": "resetProjectBillingTag",
        "tags": [
          "Projects"
        ],
        "summary": "remove a billing tag from a project",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "projectId",
            "description": "Id of the project",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projects.api.ProjectSummary"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/projects/billingtags/projects": {
      "post": {
        "operationId": "setProjectsBillingTags",
        "tags": [
          "Projects"
        ],
        "summary": "assign a billing tag to a project",
        "parameters": [],
        "requestBody": {
          "description": "JSON object with projects and billingtag ids",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.projects.api.ProjectsBillingTags"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projects.api.ProjectSummaries"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "get": {
        "operationId": "getProjectsByBillingTag",
        "tags": [
          "Projects"
        ],
        "summary": "get list of projects that are assigned a particular tag",
        "parameters": [
          {
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "in": "query",
            "name": "billingTag",
            "description": "valid billingtag that maybe assined to projects",
            "required": false
          },
          {
            "schema": {
              "nullable": true,
              "format": "int32",
              "type": "number"
            },
            "default": 0,
            "in": "query",
            "name": "offset",
            "description": "The index of the start of the page, where checkpointProjectId is index 0",
            "required": false
          },
          {
            "schema": {
              "nullable": true,
              "format": "int32",
              "type": "number"
            },
            "default": 10,
            "in": "query",
            "name": "pageSize",
            "description": "The size of the page to return",
            "required": false
          },
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "query",
            "name": "checkpointProjectId",
            "description": "An optional projectID that marks the start",
            "required": false
          },
          {
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "in": "query",
            "name": "nameFilter",
            "description": "matches projects by name substring",
            "required": false
          },
          {
            "schema": {
              "nullable": true,
              "type": "string",
              "$ref": "#/components/schemas/domino.admin.interface.SortableColumns"
            },
            "default": "name",
            "in": "query",
            "name": "sortBy",
            "description": "A field to sort the projects on",
            "required": false
          },
          {
            "schema": {
              "nullable": true,
              "type": "string",
              "$ref": "#/components/schemas/domino.apiserverutils.pagination.SortOrder"
            },
            "default": "desc",
            "in": "query",
            "name": "sortOrder",
            "description": "Whether to sort in ascending or descending order",
            "required": false
          },
          {
            "schema": {
              "nullable": true,
              "type": "boolean"
            },
            "default": false,
            "in": "query",
            "name": "missingBillingTagOnly",
            "description": "determine whether to only return projects with missing tag",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projects.api.PaginatedProjectSummaryResults"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/projects/{projectId}/gitRepositories/{repositoryId}/git/branches": {
      "get": {
        "operationId": "getBranches",
        "tags": [
          "Projects",
          "Git"
        ],
        "summary": "retrieves list of a repository's branches",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "projectId",
            "description": "Id of the project to get the repository from.",
            "required": true
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "path",
            "name": "repositoryId",
            "description": "Id of the repository being queried. You can use \"_\" to refer to the project's mainRepository.",
            "required": true
          },
          {
            "schema": {
              "default": 1,
              "nullable": true,
              "format": "int32",
              "type": "number",
              "minimum": 1
            },
            "in": "query",
            "name": "startIndex",
            "description": "Index of the first result desired by the client (1-indexed)",
            "required": false
          },
          {
            "schema": {
              "default": 20,
              "nullable": true,
              "format": "int32",
              "type": "number",
              "minimum": 1
            },
            "in": "query",
            "name": "count",
            "description": "Desired number of results per page",
            "required": false
          },
          {
            "schema": {
              "default": "name",
              "nullable": true,
              "type": "string",
              "enum": [
                "name"
              ]
            },
            "in": "query",
            "name": "sort",
            "description": "Field name to sort results on.",
            "required": false
          },
          {
            "schema": {
              "nullable": true,
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            },
            "in": "query",
            "name": "sortDirection",
            "description": "Direction to sort results in. Default value depends on sort field. Ignored if 'sort' is empty.",
            "required": false
          },
          {
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "in": "query",
            "name": "searchPattern",
            "description": "Optional search parameter to filter by.",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projects.api.repositories.responses.GetBranchesApiResponse"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/projects/{projectId}/gitRepositories/{repositoryId}/git/branches/{newBranchName}": {
      "post": {
        "operationId": "createBranch",
        "tags": [
          "Projects",
          "Git"
        ],
        "summary": "Creates a new branch on the repository",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "projectId",
            "description": "Id of the project to get the repository from.",
            "required": true
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "path",
            "name": "repositoryId",
            "description": "Id of the repository to create the branch in.",
            "required": true
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "path",
            "name": "newBranchName",
            "description": "The name of the new branch to create",
            "required": true
          },
          {
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "in": "query",
            "name": "fromBranchName",
            "description": "Optional parent branch. Uses default branch if empty.",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projects.api.repositories.responses.CreateBranchApiResponse"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/projects/{projectId}/gitRepositories/{repositoryId}/git/commits": {
      "get": {
        "operationId": "getCommits",
        "tags": [
          "Projects",
          "Git"
        ],
        "summary": "retrieves list of a repository's commits",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "projectId",
            "description": "Id of the project to get the repository from.",
            "required": true
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "path",
            "name": "repositoryId",
            "description": "Id of the repository being queried. You can use \"_\" to refer to the project's mainRepository.",
            "required": true
          },
          {
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "in": "query",
            "name": "branch",
            "description": "Optional Name of a branch to start the history from.",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projects.api.repositories.responses.GetCommitsApiResponse"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/projects/{projectId}/gitRepositories/{repositoryId}/git/browse": {
      "get": {
        "operationId": "getBrowseFiles",
        "tags": [
          "Projects",
          "Git"
        ],
        "summary": "gets a list of a repository's files and directories",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "projectId",
            "description": "Id of the project to get the repository from.",
            "required": true
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "path",
            "name": "repositoryId",
            "description": "Id of the repository being queried. You can use \"_\" to refer to the project's mainRepository.",
            "required": true
          },
          {
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "in": "query",
            "name": "directory",
            "description": "The path to browse the repository at.",
            "required": false
          },
          {
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "in": "query",
            "name": "branchName",
            "description": "A branch name to browse the repository at. Defaults to the default set by the domino project, or if one doesn't exist, the repository's default. This parameter will be ignored if `commit` is provided.\n",
            "required": false
          },
          {
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "in": "query",
            "name": "commit",
            "description": "A commit SHA to browse the repository at. This parameter will take priority over `branchName`.\n",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projects.api.repositories.responses.GetRepoBrowseApiResponse"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/projects/{projectId}/gitRepositories/{repositoryId}/git/files": {
      "get": {
        "operationId": "getRepoFiles",
        "tags": [
          "Projects",
          "Git"
        ],
        "deprecated": true,
        "summary": "gets a list of a repository's files",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "projectId",
            "description": "Id of the project to get the repository from.",
            "required": true
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "path",
            "name": "repositoryId",
            "description": "Id of the repository being queried. You can use \"_\" to refer to the project's mainRepository.",
            "required": true
          },
          {
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "in": "query",
            "name": "branchName",
            "description": "A branch name to browse the repository at. Defaults to the default set by the domino project, or if one doesn't exist, the repository's default. This parameter will be ignored if `commit` is provided.\n",
            "required": false
          },
          {
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "in": "query",
            "name": "commit",
            "description": "A commit SHA to browse the repository at. This parameter will take priority over `branchName`.\n",
            "required": false
          },
          {
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "in": "query",
            "name": "searchPattern",
            "description": "File search parameter to filter by.",
            "required": false
          },
          {
            "schema": {
              "nullable": true,
              "format": "int32",
              "type": "integer"
            },
            "in": "query",
            "name": "maxResults",
            "description": "Maximum number of results to return.",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projects.api.repositories.responses.GitApiResponseWrapper[domino.projects.api.repositories.responses.GetRepoFilesApiResponse]"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/projects/{projectId}/gitRepositories/{repositoryId}/git/filesV2": {
      "post": {
        "operationId": "getRepoFilesV2",
        "tags": [
          "Projects",
          "Git"
        ],
        "summary": "gets a list of a repository's files",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "projectId",
            "description": "Id of the project to get the repository from.",
            "required": true
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "path",
            "name": "repositoryId",
            "description": "Id of the repository being queried. You can use \"_\" to refer to the project's mainRepository.",
            "required": true
          },
          {
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "in": "query",
            "name": "searchPattern",
            "description": "File search parameter to filter by.",
            "required": false
          },
          {
            "schema": {
              "nullable": true,
              "format": "int32",
              "type": "integer"
            },
            "in": "query",
            "name": "maxResults",
            "description": "Maximum number of results to return.",
            "required": false
          }
        ],
        "requestBody": {
          "description": "Git reference object that contains a reference type and an optional reference value",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.projects.api.repositories.ReferenceDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projects.api.repositories.responses.GitApiResponseWrapper[domino.projects.api.repositories.responses.GetRepoFilesApiResponse]"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/projects/{projectId}/gitRepositories/{repositoryId}/git/raw": {
      "get": {
        "operationId": "getRepoFile",
        "tags": [
          "Projects",
          "Git"
        ],
        "summary": "gets a file from a repository",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "projectId",
            "description": "Id of the project to get the file from",
            "required": true
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "path",
            "name": "repositoryId",
            "description": "Id of the repository being queried. You can use \"_\" to refer to the project's mainRepository.",
            "required": true
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "fileName",
            "description": "The full path to the file to retrieve",
            "required": true
          },
          {
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "in": "query",
            "name": "branchName",
            "description": "A branch name to retrieve the file for. Defaults to the default set by the domino project, or if one doesn't exist, the repository's default. This parameter will be ignored if `commit` is provided.\n",
            "required": false
          },
          {
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "in": "query",
            "name": "commit",
            "description": "A commit SHA to retrieve the file for. This parameter will take priority over `branchName`.\n",
            "required": false
          },
          {
            "schema": {
              "nullable": true,
              "type": "boolean"
            },
            "in": "query",
            "name": "isDownload",
            "description": "A boolean value for whether the file that was found is for download\n",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "success"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/projects/{projectId}/gitRepositories/{repositoryId}/git/fileMetadata": {
      "get": {
        "operationId": "getRepoFileMetadata",
        "tags": [
          "Projects",
          "Git"
        ],
        "summary": "gets metadata about the file from a repository",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "projectId",
            "description": "Id of the project to get the file from",
            "required": true
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "path",
            "name": "repositoryId",
            "description": "Id of the repository being queried. You can use \"_\" to refer to the project's mainRepository.",
            "required": true
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "fileName",
            "description": "The full path to the file to retrieve",
            "required": true
          },
          {
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "in": "query",
            "name": "branchName",
            "description": "A branch name to retrieve the file for. Defaults to the default set by the domino project, or if one doesn't exist, the repository's default. This parameter will be ignored if `commit` is provided.\n",
            "required": false
          },
          {
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "in": "query",
            "name": "commit",
            "description": "A commit SHA to retrieve the file for. This parameter will take priority over `branchName`.\n",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "success"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/projects/{projectId}/gitRepositories/{repositoryId}/git/render": {
      "get": {
        "operationId": "renderRepoFile",
        "tags": [
          "Projects",
          "Git"
        ],
        "summary": "returns html to render the file contents",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "projectId",
            "description": "Id of the project to get the file from",
            "required": true
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "path",
            "name": "repositoryId",
            "description": "Id of the repository being queried. You can use \"_\" to refer to the project's mainRepository.",
            "required": true
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "fileName",
            "description": "The full path to the file to retrieve",
            "required": true
          },
          {
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "in": "query",
            "name": "branchName",
            "description": "A branch name to retrieve the file for. Defaults to the default set by the domino project, or if one doesn't exist, the repository's default. This parameter will be ignored if `commit` is provided.\n",
            "required": false
          },
          {
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "in": "query",
            "name": "commit",
            "description": "A commit SHA to retrieve the file for. This parameter will take priority over `branchName`.\n",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "success"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/projects/{projectId}/gitRepositories/{repositoryId}/ref": {
      "put": {
        "operationId": "updateGitRepositoryDefaultRef",
        "tags": [
          "Projects",
          "Git"
        ],
        "summary": "update the default ref for a repository",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "projectId",
            "description": "Id of the project",
            "required": true
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "path",
            "name": "repositoryId",
            "description": "Id of the repository being queried. You can use \"_\" to refer to the project's mainRepository.",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.projects.api.repositories.ReferenceDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/projects/{projectId}/gitRepositories/{repositoryId}/git/readme": {
      "get": {
        "operationId": "getGBPReadmeFileName",
        "tags": [
          "Projects",
          "Git"
        ],
        "summary": "gets a repository's default readme filename",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "projectId",
            "description": "Id of the project to get the repository from.",
            "required": true
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "path",
            "name": "repositoryId",
            "description": "Id of the repository being queried. You can use \"_\" to refer to the project's mainRepository.",
            "required": true
          },
          {
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "in": "query",
            "name": "directory",
            "description": "The path to browse the repository at.",
            "required": false
          },
          {
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "in": "query",
            "name": "branchName",
            "description": "A branch name to browse the repository at. Defaults to the default set by the domino project, or if one doesn't exist, the repository's default. This parameter will be ignored if `commit` is provided.\n",
            "required": false
          },
          {
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "in": "query",
            "name": "commit",
            "description": "A commit SHA to browse the repository at. This parameter will take priority over `branchName`.\n",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/projects/{projectId}/scheduledjobs": {
      "post": {
        "operationId": "createScheduledJob",
        "tags": [
          "Scheduled Jobs"
        ],
        "summary": "creates a new scheduled job",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "projectId",
            "description": "Id of the project",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.scheduledjob.api.NewScheduledJobDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.scheduledjob.api.ScheduledJobDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "get": {
        "operationId": "listScheduledJobs",
        "tags": [
          "Scheduled Jobs"
        ],
        "summary": "retrieves list of scheduled job definitions for a given project",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "projectId",
            "description": "Id of the project",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.scheduledjob.api.ScheduledJobDto"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/projects/{projectId}/scheduledjobs/forRequestingUser": {
      "get": {
        "operationId": "listScheduledJobsForRequestingUser",
        "tags": [
          "Scheduled Jobs"
        ],
        "summary": "retrieves list of scheduled job definitions for a given project with metadata specific to requesting user",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "projectId",
            "description": "Id of the project",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.scheduledjob.api.ScheduledJobForRequestingUserDto"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/projects/{projectId}/scheduledjobs/{scheduledJobKey}": {
      "get": {
        "operationId": "getScheduledJob",
        "tags": [
          "Scheduled Jobs"
        ],
        "summary": "retrieves a scheduled job by Id",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "projectId",
            "description": "Id of the project",
            "required": true
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "path",
            "name": "scheduledJobKey",
            "description": "Id of the scheduled job to be retrieved",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.scheduledjob.api.ScheduledJobDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "delete": {
        "operationId": "unscheduleJob",
        "tags": [
          "Scheduled Jobs"
        ],
        "summary": "deletes a scheduled job",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "projectId",
            "description": "Id of the project",
            "required": true
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "path",
            "name": "scheduledJobKey",
            "description": "Id of the scheduled job to be deleted",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "put": {
        "operationId": "updateScheduledJob",
        "tags": [
          "Scheduled Jobs"
        ],
        "summary": "updates a scheduled job",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "projectId",
            "description": "Id of the project",
            "required": true
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "path",
            "name": "scheduledJobKey",
            "description": "Id of the scheduled job to be updated",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.scheduledjob.api.UpdatedScheduledJobDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.scheduledjob.api.ScheduledJobDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/projects/{projectId}/launcherJob/{launcherId}": {
      "post": {
        "operationId": "startLauncherJob",
        "tags": [
          "Launchers"
        ],
        "summary": "starts an existing launcher job",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "projectId",
            "description": "Id of the project",
            "required": true
          },
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "launcherId",
            "description": "Id of the existing launcher",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Information required to start a Job for an existing Launcher. Note that the object in uploadedFiles must contain the Base64 encoded text version of the file",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.launcherjob.api.LauncherJobStartDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.common.DominoId"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/project-goals": {
      "get": {
        "operationId": "getGoals",
        "tags": [
          "Project Goals"
        ],
        "summary": "Get goals across all projects, sorted by most recently updated.",
        "parameters": [
          {
            "schema": {
              "default": 10,
              "format": "int32",
              "type": "integer"
            },
            "in": "query",
            "name": "pageSize",
            "description": "length of items in page",
            "required": false
          },
          {
            "schema": {
              "default": 1,
              "format": "int32",
              "type": "integer"
            },
            "in": "query",
            "name": "pageNumber",
            "description": "page number",
            "required": false
          },
          {
            "schema": {
              "default": "lastUpdatedAt",
              "nullable": true,
              "type": "string",
              "enum": [
                "lastUpdatedAt",
                "createdAt"
              ]
            },
            "in": "query",
            "name": "sortField",
            "description": "The field to sort the collection by (in the given sortOrder).",
            "required": false
          },
          {
            "schema": {
              "default": "desc",
              "nullable": true,
              "type": "string",
              "items": {
                "type": "string"
              },
              "enum": [
                "asc",
                "desc"
              ]
            },
            "in": "query",
            "name": "sortOrder",
            "description": "The direction to sort the collection by. The direction is 'desc' by default in all cases.",
            "required": false
          },
          {
            "schema": {
              "nullable": true,
              "type": "boolean"
            },
            "in": "query",
            "name": "isComplete",
            "description": "filter by completed or uncompleted goals",
            "required": false
          },
          {
            "schema": {
              "nullable": true,
              "type": "array",
              "items": {
                "pattern": "^[0-9a-f]{24}$",
                "type": "string"
              }
            },
            "in": "query",
            "name": "assigneeId",
            "description": "filter by the id of the user the goal is assigned to",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projects.api.model.goals.ProjectGoalCollectionDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "409": {
            "$ref": "#/components/responses/ProjectManagementErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/quota/quota": {
      "get": {
        "operationId": "getQuota",
        "tags": [
          "Quota"
        ],
        "summary": "get quota",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            },
            "in": "query",
            "name": "targetId",
            "description": "id of user the quota applies to",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "required": false,
                "schema": {
                  "$ref": "#/components/schemas/domino.quota.api.QuotaDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "delete": {
        "operationId": "deleteQuota",
        "tags": [
          "Quota"
        ],
        "summary": "delete a quota",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            },
            "in": "query",
            "name": "targetId",
            "description": "id of user in quota override",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "success"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "put": {
        "operationId": "updateQuota",
        "tags": [
          "Quota"
        ],
        "summary": "update a quota",
        "parameters": [],
        "requestBody": {
          "description": "fields with which to update a quota",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.quota.web.UpdateQuotaRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.quota.api.QuotaDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/quota/quotas": {
      "get": {
        "operationId": "getQuotaOverrides",
        "tags": [
          "Quota"
        ],
        "summary": "get quota overrides",
        "parameters": [],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.quota.api.QuotaDto"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/quota/quota-action": {
      "put": {
        "operationId": "recordQuotaAction",
        "tags": [
          "Quota"
        ],
        "summary": "record when a quotaAction is taken",
        "parameters": [],
        "requestBody": {
          "description": "fields for quotaAction",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.quota.web.RecordQuotaActionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.quota.api.QuotaActionDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/quota/quota-overrides": {
      "post": {
        "operationId": "createQuotaOverrides",
        "tags": [
          "Quota"
        ],
        "summary": "create quota overrides",
        "parameters": [],
        "requestBody": {
          "description": "quota overrides to create",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.quota.web.CreateQuotaOverridesRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.quota.api.QuotaDto"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/environments": {
      "post": {
        "operationId": "createEnvironment",
        "tags": [
          "Environments"
        ],
        "summary": "Create environment",
        "parameters": [],
        "requestBody": {
          "description": "JSON object with environment data to create a new environment",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.environments.api.CreateNewEnvironment"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.environments.api.EnvironmentDetails"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/environments/rebuildrevision": {
      "post": {
        "operationId": "rebuildEnvironmentRevision",
        "tags": [
          "Environments"
        ],
        "summary": "Rebuild environment",
        "parameters": [],
        "requestBody": {
          "description": "JSON object with environment data to rebuild the environment",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.environments.api.RebuildEnvironmentRevision"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.environments.api.EnvironmentDetails"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/environments/defaultEnvironment": {
      "get": {
        "operationId": "getDefaultEnvironment",
        "tags": [
          "Environments"
        ],
        "summary": "Get default environment",
        "parameters": [],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.environments.api.EnvironmentDetails"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/environments/setDefaultEnvironment": {
      "post": {
        "operationId": "setDefaultEnvironment",
        "tags": [
          "Environments"
        ],
        "summary": "Set default environment",
        "parameters": [],
        "requestBody": {
          "description": "The ID of the environment to set as the deployment default",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.environments.api.SetDeployDefaultEnvRequest"
              }
            }
          }
        },
        "responses": {
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/environments/self": {
      "get": {
        "operationId": "getCurrentUserEnvironments",
        "tags": [
          "Environments"
        ],
        "summary": "retrieves the current user's Environments",
        "parameters": [
          {
            "schema": {
              "nullable": true,
              "type": "boolean"
            },
            "in": "query",
            "name": "isRestricted",
            "description": "Whether to only get restricted environments or not",
            "required": false
          },
          {
            "schema": {
              "nullable": true,
              "type": "boolean"
            },
            "in": "query",
            "name": "getOnlyActiveRevisions",
            "description": "Whether to only get environments with an active revision",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.environments.api.EnvironmentDetails"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/environments/{environmentId}": {
      "get": {
        "operationId": "getEnvironmentById",
        "tags": [
          "Environments"
        ],
        "summary": "retrieves an Environment by id",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "environmentId",
            "description": "Id of the environment",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.environments.api.EnvironmentDetails"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "delete": {
        "operationId": "archiveEnvironment",
        "tags": [
          "Environments"
        ],
        "summary": "Archive an Environment, removing it from the list of visible environments.",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "environmentId",
            "description": "Domino id of the environment to archive",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.environments.api.EnvironmentDetails"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "success"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/environments/{environmentId}/availableTools": {
      "get": {
        "operationId": "getAvailableToolsForEnvironment",
        "tags": [
          "Environments"
        ],
        "summary": "Get the list of available Workspace tools for the given Environment",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "environmentId",
            "description": "ID of the Environment",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.environments.api.EnvironmentWorkspaceToolDefinition"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/environments/{environmentId}/page/{page}/pageSize/{pageSize}/revisions": {
      "get": {
        "operationId": "getBuiltEnvironmentRevisions",
        "tags": [
          "Environments"
        ],
        "summary": "Get environment revision summaries",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "environmentId",
            "description": "ID of the Environment",
            "required": true
          },
          {
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "in": "path",
            "name": "page",
            "description": "page number, indexed from 0",
            "required": true
          },
          {
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "in": "path",
            "name": "pageSize",
            "description": "page size",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "$ref": "#/components/schemas/domino.environments.api.PaginatedRevisionData"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/environments/{environmentId}/environmentRevision": {
      "post": {
        "operationId": "createEnvironmentRevision",
        "tags": [
          "Environments"
        ],
        "summary": "Create environment revision",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "environmentId",
            "description": "Domino id of the environment to create revision",
            "required": true
          }
        ],
        "requestBody": {
          "description": "JSON object with environmentrevision data to create a new environment revision",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.environments.api.NewEnvironmentRevision"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.environments.api.EnvironmentRevisionDetails"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/environments/environmentRevision/{environmentRevisionId}": {
      "get": {
        "operationId": "getEnvironmentRevisionDetailsViewModel",
        "tags": [
          "Environments"
        ],
        "summary": "Get environment revision",
        "parameters": [
          {
            "in": "path",
            "name": "environmentRevisionId",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.environments.api.EnvironmentRevisionDetails"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/environments/{environmentId}/environmentRevision/{environmentRevisionId}": {
      "patch": {
        "operationId": "updateEnvironmentRevisionIsRestricted",
        "tags": [
          "Environments"
        ],
        "summary": "Update isRestricted for environments if user has EnvironmentClassifier role",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "environmentId",
            "description": "Domino id of the environment",
            "required": true
          },
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "environmentRevisionId",
            "description": "Domino id of the environment revision",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.environments.api.SetRestrictedEnvRevisionRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "success"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "get": {
        "operationId": "getEnvironmentRevisionOverview",
        "tags": [
          "Environments"
        ],
        "summary": "Get an environment revision's overview",
        "parameters": [
          {
            "in": "path",
            "name": "environmentId",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            }
          },
          {
            "in": "path",
            "name": "environmentRevisionId",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.environments.api.RevisionOverview"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/environments/{environmentId}/projectUsageSummaries/page/{pageNumber}/pageSize/{pageSize}": {
      "get": {
        "operationId": "getProjectSummariesByEnvironment",
        "tags": [
          "Environments"
        ],
        "summary": "Get project usage summaries for an environment",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "environmentId",
            "description": "ID of the Environment",
            "required": true
          },
          {
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "in": "path",
            "name": "pageNumber",
            "description": "page number, indexed from 0",
            "required": true
          },
          {
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "in": "path",
            "name": "pageSize",
            "description": "requested page size",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.environments.api.EnvironmentProjectUsageSummariesSet"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/environments/permissions/all": {
      "get": {
        "operationId": "getEnvironmentPermissions",
        "tags": [
          "Environments"
        ],
        "summary": "Get permissions for environments for the requesting user",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "query",
            "name": "environmentId",
            "description": "Domino id of the environment",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.environments.api.EnvironmentPermissionsResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/environments/{environmentId}/environmentRevision/{environmentRevisionId}/cancel": {
      "post": {
        "operationId": "killRevisionBuild",
        "tags": [
          "Environments"
        ],
        "summary": "Cancel build for environment revision",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "environmentId",
            "description": "Domino id of the environment",
            "required": true
          },
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "environmentRevisionId",
            "description": "Domino id of the environment revision",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "success"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/environments/{environmentId}/visibility": {
      "post": {
        "operationId": "updateEnvironmentVisibility",
        "tags": [
          "Environments"
        ],
        "summary": "Update the visibility of an environment",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "environmentId",
            "description": "Domino id of the environment",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.environments.api.VisibilityUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "success"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/environments/{environmentId}/setactive": {
      "post": {
        "operationId": "setActiveRevision",
        "tags": [
          "Environments"
        ],
        "summary": "Set the active revision for an environment. If no revision Id is specified, active revision is set to the latest successfully built revision",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "environmentId",
            "description": "Domino id of the environment",
            "required": true
          },
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "query",
            "name": "revisionId",
            "description": "Domino id of the environment revision",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "success"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/environments/{environmentId}/duplicate": {
      "post": {
        "operationId": "duplicateEnvironment",
        "tags": [
          "Environments"
        ],
        "summary": "Duplicate environment",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "environmentId",
            "description": "Id of the environment to duplicate",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.environments.api.EnvironmentDetails"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/environments/customImage/dominoCompatibleTools": {
      "get": {
        "operationId": "getDominoCompatibleTools",
        "tags": [
          "Environments"
        ],
        "summary": "Get make compatible with domino tools and instructions for environment",
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.environments.api.DominoCompatibleTools"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/controlCenter/utilization/hardwareTiers": {
      "get": {
        "operationId": "getHardwareTiers",
        "tags": [
          "Control Center"
        ],
        "summary": "retrieves utilization and cost summary by hardware tier",
        "parameters": [
          {
            "in": "query",
            "name": "startDate",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Start of the date range in YYYYMMDD format"
          },
          {
            "in": "query",
            "name": "endDate",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "End of the date range in YYYYMMDD format"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.server.controlcenter.HardwareTiersUtilizationDTO"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/controlCenter/utilization/kubecostDeployed": {
      "get": {
        "operationId": "getKubecostLiveness",
        "tags": [
          "controlcenter"
        ],
        "summary": "this endpoint will be temporarily used to discover if Kubecost is installed and will be removed if we retire the current cost& compute page"
      }
    },
    "/controlCenter/utilization/runs": {
      "get": {
        "operationId": "getRuns",
        "tags": [
          "Control Center"
        ],
        "summary": "retrieves run usage and cost details",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "projectId",
            "description": "Optional filter by project",
            "required": false
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "startingUserId",
            "description": "Optional filter by starting user",
            "required": false
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "organizationId",
            "description": "Optional filter by organization id",
            "required": false
          },
          {
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "in": "query",
            "name": "hardwareTierId",
            "description": "Optional filter by hardware tier",
            "required": false
          },
          {
            "in": "query",
            "name": "startDate",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Start of the date range in YYYYMMDD format"
          },
          {
            "in": "query",
            "name": "endDate",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "End of the date range in YYYYMMDD format"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RunUtilization"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/controlCenter/utilization/runsPerDay": {
      "get": {
        "operationId": "getRunsPerDay",
        "tags": [
          "Control Center"
        ],
        "summary": "retrieves run usage and cost details per day",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "projectId",
            "description": "Optional filter by project",
            "required": false
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "startingUserId",
            "description": "Optional filter by starting user",
            "required": false
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "organizationId",
            "description": "Optional filter by organization id",
            "required": false
          },
          {
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "in": "query",
            "name": "hardwareTierId",
            "description": "Optional filter by hardware tier",
            "required": false
          },
          {
            "in": "query",
            "name": "startDate",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Start of the date range in YYYYMMDD format"
          },
          {
            "in": "query",
            "name": "endDate",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "End of the date range in YYYYMMDD format"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "runs": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RunUtilization"
                      }
                    },
                    "maxLoadPeriodInMonths": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/controlCenter/utilization/topRunTypesByComputeHours": {
      "get": {
        "operationId": "topRunTypesByComputeHours",
        "tags": [
          "Control Center"
        ],
        "summary": "retrieves top run types by compute hours utilized",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "startingUserId",
            "description": "id of user who started runs in project",
            "required": false
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "organizationId",
            "description": "Optional filter by organization id",
            "required": false
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "projectId",
            "description": "id of the project that owns runs examined",
            "required": false
          },
          {
            "in": "query",
            "name": "startDate",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Start of the date range in YYYYMMDD format"
          },
          {
            "in": "query",
            "name": "endDate",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "End of the date range in YYYYMMDD format (inclusive)"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.server.controlcenter.TopItemDTO"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/controlCenter/utilization/getTopHardwareTiersByEstimatedCost": {
      "get": {
        "operationId": "getTopHardwareTiersByEstimatedCost",
        "tags": [
          "Control Center"
        ],
        "summary": "retrieves top hardware tiers by compute spend",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "startingUserId",
            "description": "id of user who started runs in project",
            "required": false
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "projectId",
            "description": "id of the project that owns runs examined",
            "required": false
          },
          {
            "in": "query",
            "name": "startDate",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Start of the date range in YYYYMMDD format"
          },
          {
            "in": "query",
            "name": "endDate",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "End of the date range in YYYYMMDD format (inclusive)"
          },
          {
            "in": "query",
            "name": "organizationId",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Optional filter by organization id"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.server.controlcenter.TopItemDTO"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/controlCenter/utilization/topProjectsByComputeHours": {
      "get": {
        "operationId": "getTopProjectsByComputeHours",
        "tags": [
          "Control Center"
        ],
        "summary": "retrieves top projects by compute hours utilized",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "startingUserId",
            "description": "id of user who started runs in project",
            "required": false
          },
          {
            "in": "query",
            "name": "startDate",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Start of the date range in YYYYMMDD format"
          },
          {
            "in": "query",
            "name": "endDate",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "End of the date range in YYYYMMDD format (inclusive)"
          },
          {
            "in": "query",
            "name": "organizationId",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Optional filter by organization id"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.server.controlcenter.TopItemDTO"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/controlCenter/utilization/topProjectsByComputeCost": {
      "get": {
        "operationId": "getTopProjectsByComputeCost",
        "tags": [
          "Control Center"
        ],
        "summary": "retrieves top projects by compute spend",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "startingUserId",
            "description": "id of user who started runs in project",
            "required": false
          },
          {
            "in": "query",
            "name": "startDate",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Start of the date range in YYYYMMDD format"
          },
          {
            "in": "query",
            "name": "endDate",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "End of the date range in YYYYMMDD format (inclusive)"
          },
          {
            "in": "query",
            "name": "organizationId",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Optional filter by organization id"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.server.controlcenter.TopItemDTO"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/controlCenter/utilization/topUsersByComputeHours": {
      "get": {
        "operationId": "getTopUsersByComputeHours",
        "tags": [
          "Control Center"
        ],
        "summary": "retrieves top users by compute hours utilized",
        "parameters": [
          {
            "in": "query",
            "name": "startDate",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Start of the date range in YYYYMMDD format"
          },
          {
            "in": "query",
            "name": "endDate",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "End of the date range in YYYYMMDD format (inclusive)"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.server.controlcenter.TopItemDTO"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/controlCenter/utilization/topUsersByComputeCost": {
      "get": {
        "operationId": "getTopUsersByComputeCost",
        "tags": [
          "Control Center"
        ],
        "summary": "retrieves top users by compute spend",
        "parameters": [
          {
            "in": "query",
            "name": "startDate",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Start of the date range in YYYYMMDD format"
          },
          {
            "in": "query",
            "name": "endDate",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "End of the date range in YYYYMMDD format (inclusive)"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.server.controlcenter.TopItemDTO"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/controlCenter/utilization/topOrganizationsByComputeHours": {
      "get": {
        "operationId": "getTopOrganizationsByComputeHours",
        "tags": [
          "Control Center"
        ],
        "summary": "retrieves top organizations by compute hours utilized",
        "parameters": [
          {
            "in": "query",
            "name": "startDate",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Start of the date range in YYYYMMDD format"
          },
          {
            "in": "query",
            "name": "endDate",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "End of the date range in YYYYMMDD format (inclusive)"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.server.controlcenter.TopItemDTO"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/controlCenter/utilization/topOrganizationsByComputeCost": {
      "get": {
        "operationId": "getTopOrganizationsByComputeCost",
        "tags": [
          "Control Center"
        ],
        "summary": "retrieves top organizations by compute spend",
        "parameters": [
          {
            "in": "query",
            "name": "startDate",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Start of the date range in YYYYMMDD format"
          },
          {
            "in": "query",
            "name": "endDate",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "End of the date range in YYYYMMDD format (inclusive)"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.server.controlcenter.TopItemDTO"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/controlCenter/utilization/statsForAllUsers": {
      "get": {
        "operationId": "getStatsForAllUsers",
        "tags": [
          "Control Center"
        ],
        "summary": "retrieves statistics for all users",
        "parameters": [
          {
            "in": "query",
            "name": "startDate",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Start of the date range in YYYYMMDD format"
          },
          {
            "in": "query",
            "name": "endDate",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "End of the date range in YYYYMMDD format (inclusive)"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.server.controlcenter.UserStatsDTO"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/controlCenter/utilization/statsForAllOrganizations": {
      "get": {
        "operationId": "getStatsForAllOrganizations",
        "tags": [
          "Control Center"
        ],
        "summary": "retrieves statistics for all organizations",
        "parameters": [
          {
            "in": "query",
            "name": "startDate",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Start of the date range in YYYYMMDD format"
          },
          {
            "in": "query",
            "name": "endDate",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "End of the date range in YYYYMMDD format (inclusive)"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.server.controlcenter.OrganizationStatsDTO"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/modelProducts": {
      "post": {
        "operationId": "createModelProduct",
        "tags": [
          "Model Products"
        ],
        "summary": "creates a new ModelProduct",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.nucleus.modelproduct.models.ModelProduct"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.nucleus.modelproduct.models.ModelProduct"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "get": {
        "operationId": "listProjectModelProducts",
        "tags": [
          "Model Products"
        ],
        "summary": "Retrieves Model Products the current publisher can access",
        "parameters": [
          {
            "in": "query",
            "name": "projectId",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "type",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.nucleus.modelproduct.models.ModelProduct"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/modelProducts/consumer": {
      "get": {
        "operationId": "listModelProducts",
        "tags": [
          "Model Products"
        ],
        "summary": "retrieves Model Products the current consumer can access",
        "parameters": [
          {
            "in": "query",
            "name": "type",
            "schema": {
              "type": "string"
            },
            "description": "the type of model product"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.nucleus.modelproduct.models.ConsumerModelProduct"
                  }
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/modelProducts/{modelProductId}": {
      "get": {
        "operationId": "getModelProduct",
        "tags": [
          "Model Products"
        ],
        "summary": "retrieves a Model Product by id",
        "parameters": [
          {
            "in": "path",
            "name": "modelProductId",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.nucleus.modelproduct.models.ModelProduct"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/modelProducts/{modelProductId}/start": {
      "post": {
        "operationId": "start",
        "tags": [
          "Model Products"
        ],
        "summary": "starts a runnable ModelProduct",
        "parameters": [
          {
            "in": "path",
            "name": "modelProductId",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.nucleus.modelproduct.models.StartParams"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DominoId"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/modelProducts/restartAll": {
      "post": {
        "operationId": "restartAll",
        "tags": [
          "Model Products"
        ],
        "summary": "restarts all active apps",
        "parameters": [],
        "responses": {
          "200": {
            "description": "success"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/modelProducts/{modelProductId}/requestAccess": {
      "post": {
        "operationId": "requestAccess",
        "tags": [
          "Model Products"
        ],
        "summary": "requests access to a ModelProduct",
        "parameters": [
          {
            "in": "path",
            "name": "modelProductId",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DominoId"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/modelProducts/{modelProductId}/grantAccess": {
      "post": {
        "operationId": "grantAccess",
        "tags": [
          "Model Products"
        ],
        "summary": "grants access to a ModelProduct to a user",
        "parameters": [
          {
            "in": "path",
            "name": "modelProductId",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.nucleus.modelproduct.models.AccessRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DominoId"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/modelProducts/{modelProductId}/denyAccess": {
      "post": {
        "operationId": "denyAccess",
        "tags": [
          "Model Products"
        ],
        "summary": "denies access to a ModelProduct to a user",
        "parameters": [
          {
            "in": "path",
            "name": "modelProductId",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.nucleus.modelproduct.models.AccessRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DominoId"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/modelProducts/{modelProductId}/invite": {
      "post": {
        "operationId": "bulkGrantAccess",
        "tags": [
          "Model Products"
        ],
        "summary": "grants access to a ModelProduct to multiple users",
        "parameters": [
          {
            "in": "path",
            "name": "modelProductId",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.nucleus.modelproduct.models.GranteeList"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.nucleus.modelproduct.models.EmailInvitationResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/modelProducts/{modelProductId}/uninvite": {
      "post": {
        "operationId": "uninvite",
        "tags": [
          "Model Products"
        ],
        "summary": "uninvite a user",
        "parameters": [
          {
            "in": "path",
            "name": "modelProductId",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.nucleus.modelproduct.models.UninviteRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DominoId"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/modelProducts/{modelProductId}/visibility": {
      "post": {
        "operationId": "updateVisibility",
        "tags": [
          "Model Products"
        ],
        "summary": "sets visibility for a ModelProduct",
        "parameters": [
          {
            "in": "path",
            "name": "modelProductId",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.nucleus.modelproduct.models.VisibilityPatch"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DominoId"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/modelProducts/{modelProductId}/stop": {
      "post": {
        "operationId": "stop",
        "tags": [
          "Model Products"
        ],
        "summary": "stops a runnable ModelProduct",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "modelProductId",
            "description": "Domino id of the model product (app)",
            "required": true
          },
          {
            "schema": {
              "nullable": true,
              "type": "boolean"
            },
            "in": "query",
            "name": "force",
            "description": "Stop an app regardless of its status",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DominoId"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/modelProducts/{runId}/view": {
      "post": {
        "operationId": "record",
        "tags": [
          "Model Products"
        ],
        "summary": "record a view on a model product",
        "parameters": [
          {
            "in": "path",
            "name": "runId",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.nucleus.modelproduct.models.UsageStatisticsRecorded"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/schemas/domino.nucleus.modelproduct.models.ModelProductError"
          },
          "500": {
            "$ref": "#/components/schemas/domino.nucleus.modelproduct.models.ModelProductError"
          }
        }
      }
    },
    "/modelProducts/top": {
      "get": {
        "operationId": "getTopN",
        "tags": [
          "Model Products"
        ],
        "summary": "list top model product views for a given time range",
        "parameters": [
          {
            "in": "query",
            "name": "startMillis",
            "schema": {
              "format": "int64",
              "type": "integer"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "endMillis",
            "schema": {
              "format": "int64",
              "type": "integer"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "count",
            "schema": {
              "default": 20,
              "format": "int32",
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.nucleus.modelproduct.models.UsageStatisticsTopNResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/schemas/domino.nucleus.modelproduct.models.ModelProductError"
          },
          "500": {
            "$ref": "#/components/schemas/domino.nucleus.modelproduct.models.ModelProductError"
          }
        }
      }
    },
    "/modelProducts/{modelProductId}/totals": {
      "get": {
        "operationId": "getTotal",
        "tags": [
          "Model Products"
        ],
        "summary": "get count of views on one model product for a given time range",
        "parameters": [
          {
            "in": "path",
            "name": "modelProductId",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            }
          },
          {
            "in": "query",
            "name": "startMillis",
            "schema": {
              "format": "int64",
              "type": "integer"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "endMillis",
            "schema": {
              "format": "int64",
              "type": "integer"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.nucleus.modelproduct.models.UsageStatisticsTotalResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/schemas/domino.nucleus.modelproduct.models.ModelProductError"
          },
          "500": {
            "$ref": "#/components/schemas/domino.nucleus.modelproduct.models.ModelProductError"
          }
        }
      }
    },
    "/modelProducts/{modelProductId}/timeseries": {
      "get": {
        "operationId": "getTimeseries",
        "tags": [
          "Model Products"
        ],
        "summary": "get count of views on one model product for a given time range",
        "parameters": [
          {
            "in": "path",
            "name": "modelProductId",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            }
          },
          {
            "in": "query",
            "name": "startMillis",
            "schema": {
              "format": "int64",
              "type": "integer"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "endMillis",
            "schema": {
              "format": "int64",
              "type": "integer"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "granularityMillis",
            "schema": {
              "default": 3600000,
              "format": "int64",
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.nucleus.modelproduct.models.UsageStatisticsTimeseriesResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/schemas/domino.nucleus.modelproduct.models.ModelProductError"
          },
          "500": {
            "$ref": "#/components/schemas/domino.nucleus.modelproduct.models.ModelProductError"
          }
        }
      }
    },
    "/modelProducts/isRunnable": {
      "get": {
        "operationId": "isRunnable",
        "tags": [
          "Model Products"
        ],
        "summary": "retrieves whether this project can be run as the model product type",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "query",
            "name": "projectId",
            "required": true
          },
          {
            "schema": {
              "type": "string",
              "enum": [
                "APP",
                "BATCH",
                "REPORT",
                "SCORER"
              ]
            },
            "in": "query",
            "name": "type",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.nucleus.modelproduct.models.IsRunnable"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/modelProducts/consumer/{modelProductId}": {
      "get": {
        "operationId": "consumerSummary",
        "tags": [
          "Model Products"
        ],
        "summary": "retrieves a Model Product by id",
        "parameters": [
          {
            "in": "path",
            "name": "modelProductId",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.nucleus.modelproduct.models.ConsumerModelProduct"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "description": "Current user does not have access to this model product but may request it.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.nucleus.modelproduct.models.GrantAccessRequired"
                }
              }
            }
          },
          "403": {
            "description": "Access to this model product is forbidden for the current user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.nucleus.modelproduct.models.LoginRequired"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/modelProducts/consumer/{modelProductId}/access": {
      "get": {
        "operationId": "canAccess",
        "tags": [
          "Model Products"
        ],
        "summary": "Checks if the consumer can access the model product",
        "parameters": [
          {
            "in": "path",
            "name": "modelProductId",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.nucleus.modelproduct.models.ConsumerModelProduct"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "description": "Current user does not have access to this model product but may request it.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.nucleus.modelproduct.models.GrantAccessRequired"
                }
              }
            }
          },
          "403": {
            "description": "Access to this model product is forbidden for the current user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.nucleus.modelproduct.models.LoginRequired"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/modelProducts/apps/versions/{appVersionId}/logs": {
      "get": {
        "operationId": "getAppVersionLogs",
        "tags": [
          "Model Products"
        ],
        "summary": "Get the logs of an App Version",
        "parameters": [
          {
            "in": "path",
            "name": "appVersionId",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            }
          },
          {
            "in": "query",
            "name": "logType",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "console",
                "stdout",
                "stderr",
                "stdoutstderr",
                "prepareoutput"
              ],
              "example": "console  |  stdout  |  stderr  |  stdoutstderr  |  prepareoutput",
              "default": "console"
            },
            "description": "Types of logs:\n * `console` - This is the default if the value is not provided. All logs lines displayed in the app instance's runtime environment.\n * `stdout` - Log lines displayed in the stdout of the app instance's runtime environment.\n * `stderr` - Log lines displayed in the stderr of the app instance's runtime environment.\n * `stdoutstderr` - Interleaved stdout and stderr.\n * `prepareoutput` - Log lines generated by the environment preparing the app instance.\n"
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "number",
              "default": 10000
            },
            "description": "Max number of log lines to fetch. Will be overridden by the configuration's limit if this value exceeds the configuration's limit, or if this value is not provided."
          },
          {
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "type": "number",
              "default": 0
            },
            "description": "The index of the current body of logs to start fetching from. 0 by default and typically won't be used for a timestamp-based offset log fetching strategy."
          },
          {
            "in": "query",
            "name": "latestTimeNano",
            "required": false,
            "schema": {
              "type": "string",
              "example": "1543538813745986325",
              "default": "0"
            },
            "description": "The epoch time in nanoseconds to start fetching from, such as \"1543538813745986325\". \"0\" by default and will typically be used for a timestamp-based offset log fetching strategy."
          }
        ],
        "responses": {
          "200": {
            "description": "Scenarios:<br>\nIf the log retriever got NO logs, then the client should expect\n  * an empty `logContent` array\n\nfrom the returned LogSet.<br><br>\nIf the log retriever was done fetching ALL of the logs, then the client should expect\n  * `isComplete = true`\n  * `paginationFilter.limit = 0`\n\nfrom the returned LogSet.<br><br>\nIf the log retriever was NOT done fetching all of the logs, then the client should expect\n  * `isComplete = false`\n  * `paginationFilter` encoding the next `offset` or `latestTimeNano` of the last log line fetched by the retriever.\n\nfrom the returned LogSet.<br><br>\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.common.modelproduct.LogSet"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/modelProducts/apps/versions/{appVersionId}/realTimeLogs": {
      "get": {
        "operationId": "getRealTimeAppVersionLogs",
        "tags": [
          "Model Products"
        ],
        "summary": "Get the logs of an App Version without going to s3",
        "parameters": [
          {
            "in": "path",
            "name": "appVersionId",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            }
          },
          {
            "in": "query",
            "name": "logType",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "console",
                "stdout",
                "stderr",
                "stdoutstderr",
                "prepareoutput"
              ],
              "example": "console  |  stdout  |  stderr  |  stdoutstderr  |  prepareoutput",
              "default": "console"
            },
            "description": "Types of logs:\n * `console` - This is the default if the value is not provided. All logs lines displayed in the app instance's runtime environment.\n * `stdout` - Log lines displayed in the stdout of the app instance's runtime environment.\n * `stderr` - Log lines displayed in the stderr of the app instance's runtime environment.\n * `stdoutstderr` - Interleaved stdout and stderr.\n * `prepareoutput` - Log lines generated by the environment preparing the app instance.\n"
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "number",
              "default": 10000
            },
            "description": "Max number of log lines to fetch. Will be overridden by the configuration's limit if this value exceeds the configuration's limit, or if this value is not provided."
          },
          {
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "type": "number",
              "default": 0
            },
            "description": "The index of the current body of logs to start fetching from. 0 by default and typically won't be used for a timestamp-based offset log fetching strategy."
          },
          {
            "in": "query",
            "name": "latestTimeNano",
            "required": false,
            "schema": {
              "type": "string",
              "example": "1543538813745986325",
              "default": "0"
            },
            "description": "The epoch time in nanoseconds to start fetching from, such as \"1543538813745986325\". \"0\" by default and will typically be used for a timestamp-based offset log fetching strategy."
          }
        ],
        "responses": {
          "200": {
            "description": "Scenarios:<br>\nIf the log retriever got NO logs, then the client should expect\n  * an empty `logContent` array\n\nfrom the returned LogSet.<br><br>\nIf the log retriever was done fetching ALL of the logs, then the client should expect\n  * `isComplete = true`\n  * `paginationFilter.limit = 0`\n\nfrom the returned LogSet.<br><br>\nIf the log retriever was NOT done fetching all of the logs, then the client should expect\n  * `isComplete = false`\n  * `paginationFilter` encoding the next `offset` or `latestTimeNano` of the last log line fetched by the retriever.\n\nfrom the returned LogSet.<br><br>\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.common.modelproduct.LogSet"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/modelProducts/apps/versions/{appVersionId}": {
      "get": {
        "operationId": "getAppVersionDetails",
        "tags": [
          "Model Products"
        ],
        "summary": "Get the details of a particular App Version",
        "parameters": [
          {
            "in": "path",
            "name": "appVersionId",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.common.modelproduct.AppVersionDetails"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/modelProducts/{modelProductId}/versions": {
      "get": {
        "operationId": "getAllAppVersions",
        "tags": [
          "Model Products"
        ],
        "summary": "Get all Versions of an App",
        "parameters": [
          {
            "in": "path",
            "name": "modelProductId",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/domino.common.modelproduct.AppVersionOverview"
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/modelProducts/linkToGoal": {
      "post": {
        "operationId": "linkAppToGoal",
        "tags": [
          "Model Products"
        ],
        "summary": "Link a app to a goal",
        "parameters": [],
        "requestBody": {
          "description": "JSON object with information to link app to goal",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.nucleus.modelproduct.models.LinkAppToGoal"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.common.modelproduct.AppGoal"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/modelProducts/unlinkFromGoal": {
      "post": {
        "operationId": "unlinkAppFromGoal",
        "tags": [
          "Model Products"
        ],
        "summary": "Unlink a app from a goal",
        "parameters": [],
        "requestBody": {
          "description": "JSON object with information to unlink app from goal",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.nucleus.modelproduct.models.UnlinkAppFromGoal"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.common.modelproduct.AppGoal"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datasetUi/{snapshotId}": {
      "post": {
        "operationId": "updateSnapshotStatus",
        "tags": [
          "dataset"
        ],
        "summary": "update a dataset snapshot's status",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "path",
            "name": "snapshotId",
            "description": "Id of the dataset snapshot to be updated",
            "required": true
          }
        ],
        "requestBody": {
          "description": "JSON object with information describing the new status",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.nucleus.dataset.ui.UpdateSnapshotStatusInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.dataset.api.DatasetSnapshotDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "get": {
        "operationId": "getSnapshot",
        "tags": [
          "dataset"
        ],
        "summary": "retrieves the specified snapshot",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "path",
            "name": "snapshotId",
            "description": "Id of the snapshot",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.dataset.api.DatasetSnapshotSummaryDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datasetUi/collections/{datasetId}/snapshots": {
      "get": {
        "operationId": "getSnapshots",
        "tags": [
          "dataset"
        ],
        "summary": "retrieves all snapshots for a dataset",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "path",
            "name": "datasetId",
            "description": "Id of the collection of datasets",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.dataset.api.DatasetSnapshotDto"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datasetUi/collections/{datasetId}/versionSummaries": {
      "get": {
        "operationId": "getSnapshotSummaries",
        "tags": [
          "dataset"
        ],
        "summary": "retrieves data set summaries of all the data set verisions for a specified data set collection",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "path",
            "name": "datasetId",
            "description": "Id of the collection of datasets",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.dataset.api.DatasetSnapshotSummaryDto"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datasetUi/collections/{datasetId}/tags": {
      "post": {
        "operationId": "addTag",
        "tags": [
          "dataset"
        ],
        "summary": "adds a tag to a dataset",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "path",
            "name": "datasetId",
            "description": "Id of the collection of datasets",
            "required": true
          }
        ],
        "requestBody": {
          "description": "JSON object with information for new dataset tag",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.nucleus.dataset.ui.AddDataSetTagInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.nucleus.dataset.ui.DatasetViewModel"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datasetUi/collections/{datasetId}/tags/{tagName}": {
      "delete": {
        "operationId": "removeTag",
        "tags": [
          "dataset"
        ],
        "summary": "removes a tag from a dataset by updating the dataset's collection tags map",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "path",
            "name": "datasetId",
            "description": "Id of the collection of datasets",
            "required": true
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "path",
            "name": "tagName",
            "description": "Name of the tag to be removed",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.nucleus.dataset.ui.DatasetViewModel"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datasetUi/collections/mountable": {
      "get": {
        "operationId": "getMountableDatasets",
        "tags": [
          "dataset"
        ],
        "summary": "gets mountable dataset collections",
        "parameters": [
          {
            "schema": {
              "nullable": true,
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "in": "query",
            "name": "ignoreProjects",
            "description": "Ids of projects that should have their datasets excluded from being returned",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.nucleus.dataset.ui.DatasetViewModel"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datasetUi/collections": {
      "post": {
        "operationId": "createDataset",
        "tags": [
          "dataset"
        ],
        "summary": "create a new dataset collection",
        "parameters": [],
        "requestBody": {
          "description": "JSON object with information for new dataset collection creation",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.nucleus.dataset.ui.CreateDatasetInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.nucleus.dataset.ui.DatasetViewModel"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datasetUi/collections/byProject": {
      "get": {
        "operationId": "lookupDatasetByName",
        "tags": [
          "dataset"
        ],
        "summary": "lookup dataset by project and name",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "projectOwner",
            "description": "project owner",
            "required": true
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "projectName",
            "description": "project name",
            "required": true
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "collectionName",
            "description": "dataset collection name",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.dataset.api.DatasetDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datasetUi/collections/{datasetId}/snapshot/file": {
      "post": {
        "operationId": "uploadSnapshotFile",
        "tags": [
          "dataset"
        ],
        "summary": "Sends file upload chunks",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "path",
            "name": "datasetId",
            "required": true
          },
          {
            "in": "query",
            "name": "resumableChunkNumber",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "resumableTotalChunks",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "resumableIdentifier",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "key",
            "schema": {
              "type": "string"
            },
            "description": "unique identifier for this upload session"
          },
          {
            "in": "query",
            "name": "resumableRelativePath",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "resumableChunkSize",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "a unique key which identifies this upload session"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datasetUi/collections/{datasetId}/snapshot/file/test": {
      "get": {
        "operationId": "uploadSnapshotFileTest",
        "tags": [
          "dataset"
        ],
        "summary": "Tests whether or not this chunk has already been sent",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "path",
            "name": "datasetId",
            "required": true
          },
          {
            "in": "query",
            "name": "resumableChunkNumber",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "resumableTotalChunks",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "resumableIdentifier",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "resumableRelativePath",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datasetUi/collections/{datasetId}/snapshot/file/end/{uploadKey}": {
      "get": {
        "operationId": "endSnapshotUpload",
        "tags": [
          "dataset"
        ],
        "summary": "Indicates the successful completion of the files upload in the UI",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "path",
            "name": "datasetId",
            "required": true
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "path",
            "name": "uploadKey",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/domino.dataset.api.DatasetSnapshotDto",
            "description": "the new snapshot"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datasetUi/collections/{datasetId}/snapshot/file/start": {
      "get": {
        "operationId": "startSnapshotUpload",
        "tags": [
          "dataset"
        ],
        "summary": "initializes chunked file uploads for a dataset collection snapshot",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "path",
            "name": "datasetId",
            "description": "Id of the collection of datasets",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datasetUi/collections/{datasetId}/snapshot/file/session/{uploadKey}": {
      "get": {
        "operationId": "getSnapshotUploadSession",
        "tags": [
          "dataset"
        ],
        "summary": "Tests whether or not an upload session exists",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "path",
            "name": "datasetId",
            "required": true
          },
          {
            "in": "path",
            "name": "uploadKey",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "resumableChunkNumber",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "resumableTotalChunks",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "resumableIdentifier",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "resumableRelativePath",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datasetUi/collections/{datasetId}/snapshot/file/cancel/{uploadKey}": {
      "get": {
        "operationId": "cancelSnapshotUpload",
        "tags": [
          "dataset"
        ],
        "summary": "indicates the cancellation of the chunked file uploads",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "path",
            "name": "datasetId",
            "description": "Id of the collection of datasets",
            "required": true
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "path",
            "name": "uploadKey",
            "description": "Unique identifier for upload session",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datasetUi/collections/{datasetId}": {
      "post": {
        "operationId": "updateDataset",
        "tags": [
          "dataset"
        ],
        "summary": "updates a dataset",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "path",
            "name": "datasetId",
            "description": "Id of the collection of datasets",
            "required": true
          }
        ],
        "requestBody": {
          "description": "JSON object with information for new dataset tag",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.nucleus.dataset.ui.UpdateDatasetInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.dataset.api.DatasetDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datasetUi/collections/{datasetId}/archive": {
      "delete": {
        "operationId": "archiveDataset",
        "tags": [
          "dataset"
        ],
        "summary": "archive a dataset",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "path",
            "name": "datasetId",
            "description": "Id of the collection of datasets",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.dataset.api.DatasetDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datasetUi/{snapshotId}/files/{path}": {
      "get": {
        "operationId": "getSnapshotFiles",
        "tags": [
          "dataset"
        ],
        "summary": "retrieves the files in a specified data set at the specified directory",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "path",
            "name": "snapshotId",
            "description": "snapshot id",
            "required": true
          },
          {
            "in": "path",
            "name": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Directory path"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.nucleus.dataset.ui.DataSetFileBrowserViewModel"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datasetUi/{dataSetId}/files": {
      "get": {
        "operationId": "getSnapshotFilesAtRoot",
        "tags": [
          "dataset"
        ],
        "summary": "retrieves the files in a specified data set at the root directory",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "path",
            "name": "dataSetId",
            "description": "Id of the dataset",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.nucleus.dataset.ui.DataSetFileBrowserViewModel"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datasetUi/{dataSetId}": {
      "delete": {
        "operationId": "deleteSnapshot",
        "tags": [
          "dataset"
        ],
        "summary": "deletes the specified data set snapshot",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "path",
            "name": "dataSetId",
            "description": "Id of the dataset snapshot",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.dataset.api.DatasetSnapshotDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datasetUi": {
      "delete": {
        "operationId": "deleteMarkedSnapshots",
        "tags": [
          "dataset"
        ],
        "summary": "deletes all marked for deletion snapshots for a dataset",
        "parameters": [],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.dataset.api.DatasetSnapshotDto"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datasetUi/mounts/{projectId}/imported": {
      "post": {
        "operationId": "addImportedProjectMount",
        "tags": [
          "dataset"
        ],
        "summary": "add project mount",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "path",
            "name": "projectId",
            "description": "the project id",
            "required": true
          }
        ],
        "requestBody": {
          "description": "JSON object with information for new dataset tag",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.nucleus.dataset.ui.AddMountInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.nucleus.dataset.ui.MountConfigViewModel"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "get": {
        "operationId": "getProjectImportedMountSummary",
        "tags": [
          "dataset"
        ],
        "summary": "gets imported project mounts",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "path",
            "name": "projectId",
            "description": "the project id",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.nucleus.dataset.ui.DatasetProjectMountSummaryViewModel"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datasetUi/mounts/{projectId}/imported/{mountPath}": {
      "delete": {
        "operationId": "deleteProjectMount",
        "tags": [
          "dataset"
        ],
        "summary": "delete project mount",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "path",
            "name": "projectId",
            "description": "the project id",
            "required": true
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "path",
            "name": "mountPath",
            "description": "the location at which the data set mounts",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.nucleus.dataset.ui.DatasetProjectMountSummaryViewModel"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datasetUi/mounts/{projectId}/local": {
      "get": {
        "operationId": "getProjectLocalMounts",
        "tags": [
          "dataset"
        ],
        "summary": "gets local project mounts",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "path",
            "name": "projectId",
            "description": "the project id",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.nucleus.dataset.ui.DatasetProjectMountSummaryViewModel"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datasetUi/run/{collectionId}": {
      "post": {
        "operationId": "createSnapshotWithRun",
        "tags": [
          "dataset"
        ],
        "summary": "starts a run to create a new dataset",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "path",
            "name": "collectionId",
            "description": "the collectionId id",
            "required": true
          }
        ],
        "requestBody": {
          "description": "JSON object with information for run",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.nucleus.dataset.ui.CreateSnapshotWithRunInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.nucleus.dataset.ui.DataSetRun"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datasetUi/workspace/{collectionId}": {
      "post": {
        "operationId": "createSnapshotWithWorkspace",
        "tags": [
          "dataset"
        ],
        "summary": "launches a workspace to create a new dataset",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "path",
            "name": "collectionId",
            "description": "the collectionId id",
            "required": true
          }
        ],
        "requestBody": {
          "description": "JSON object with information for run",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.nucleus.dataset.ui.CreateSnapshotWithWorkspaceInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.nucleus.dataset.ui.DatasetWorkspace"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datasetUi/configs/advanced/{projectId}": {
      "get": {
        "operationId": "getAdvancedDatasetConfigYamls",
        "tags": [
          "Datasets"
        ],
        "summary": "get advanced data set configs yaml files and names available to the current user",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "path",
            "name": "projectId",
            "description": "DominoId of the project",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.nucleus.dataset.ui.AdvancedDatasetConfigurationViewModels"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datasetUi/limits/{projectId}": {
      "post": {
        "operationId": "setLimitOverride",
        "tags": [
          "dataset"
        ],
        "summary": "add or update a dataset limit override for a project",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "path",
            "name": "projectId",
            "description": "project to override dataset limits for",
            "required": true
          }
        ],
        "requestBody": {
          "description": "JSON object with information describing the override",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.nucleus.dataset.ui.SetLimitOverrideInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.dataset.api.DatasetSnapshotDto"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datasetUi/consumption/snapshot/{snapshotId}": {
      "get": {
        "operationId": "getMostRecentConsumedSnapshotResource",
        "tags": [
          "dataset"
        ],
        "summary": "retrieve the most recent consumption information for a snapshot",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "path",
            "name": "snapshotId",
            "description": "Id of the snapshot to get consumption data for",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.dataset.api.ConsumedSnapshotDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datasetUi/collections/{datasetId}/project/{projectId}/snapshot": {
      "post": {
        "operationId": "createSnapshotFromScratchSpace",
        "tags": [
          "dataset"
        ],
        "summary": "Promotes a scratch space into a dataset snapshot",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "path",
            "name": "datasetId",
            "required": true
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "path",
            "name": "projectId",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.dataset.api.DatasetSnapshotDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datasetUi/project/{projectId}/scratchSpace": {
      "get": {
        "operationId": "getScratchSpaceOrDefault",
        "tags": [
          "dataset"
        ],
        "summary": "Promotes a scratch space into a dataset snapshot",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "path",
            "name": "projectId",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.dataset.api.DatasetScratchSpaceDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datasetUi/scratchspace/{projectId}/files/{path}": {
      "get": {
        "operationId": "getScratchSpaceFiles",
        "tags": [
          "dataset"
        ],
        "summary": "Gets files in a subdirectory of a project's scratch space",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "path",
            "name": "projectId",
            "required": true
          },
          {
            "in": "path",
            "name": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Directory path"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.nucleus.dataset.ui.DataSetFileBrowserRow"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datasetUi/scratchspace/{projectId}/files": {
      "get": {
        "operationId": "getScratchSpaceFilesAtRoot",
        "tags": [
          "dataset"
        ],
        "summary": "Gets files in a subdirectory of a project's scratch space",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "path",
            "name": "projectId",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.nucleus.dataset.ui.DataSetFileBrowserRow"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datasetUi/scratchSpace/{scratchSpaceId}": {
      "delete": {
        "operationId": "deleteScratchSpace",
        "tags": [
          "dataset"
        ],
        "summary": "Deletes a scratch space",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "path",
            "name": "scratchSpaceId",
            "description": "Id of the scratch space",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.dataset.api.DatasetScratchSpaceDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datasetUi/project/{projectId}/canAddDataset": {
      "get": {
        "operationId": "canAddDataset",
        "tags": [
          "dataset"
        ],
        "summary": "Determine if a dataset can be added to a project",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "path",
            "name": "projectId",
            "description": "Project identifier",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datasetrw/{projectId}/shared/{datasetId}": {
      "post": {
        "operationId": "addSharedDatasetRwEntry",
        "tags": [
          "DatasetRw"
        ],
        "summary": "Add shared dataset to project",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            },
            "in": "path",
            "name": "projectId",
            "description": "Project ID",
            "required": true
          },
          {
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            },
            "in": "path",
            "name": "datasetId",
            "description": "Dataset ID",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.datasetrw.api.SharedDatasetRwEntryDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "delete": {
        "operationId": "removeSharedDatasetRwEntry",
        "tags": [
          "DatasetRw"
        ],
        "summary": "Removes shared dataset from project",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            },
            "in": "path",
            "name": "projectId",
            "description": "Project ID",
            "required": true
          },
          {
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            },
            "in": "path",
            "name": "datasetId",
            "description": "Dataset ID",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.datasetrw.api.SharedDatasetRwEntryDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datasetrw/dataset/{datasetId}/tag": {
      "post": {
        "operationId": "addTag",
        "tags": [
          "DatasetRw"
        ],
        "summary": "Add tag to Snapshot",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            },
            "in": "path",
            "name": "datasetId",
            "description": "Dataset ID",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Snapshot ID and tag name",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.datasetrw.web.AddTagRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.datasetrw.api.DatasetRwViewDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datasetrw/filetask/callback": {
      "post": {
        "operationId": "callbackFromFiletask",
        "tags": [
          "DatasetRw"
        ],
        "summary": "Filetask callback with task status change",
        "parameters": [],
        "requestBody": {
          "description": "filetask update details",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.datasetrw.web.FiletaskUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datasetrw/canAddDataset/{projectId}": {
      "get": {
        "operationId": "canAddDataset",
        "tags": [
          "DatasetRw"
        ],
        "summary": "Determines if dataset can be added to project",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "projectId",
            "description": "project ID",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datasetrw/dataset/{datasetId}/grants": {
      "get": {
        "operationId": "getDatasetGrants",
        "tags": [
          "DatasetRw"
        ],
        "summary": "gets dataset's current dataset's grants details",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            },
            "in": "path",
            "name": "datasetId",
            "description": "Dataset ID",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.datasetrw.api.DatasetRwGrantDetails"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "put": {
        "operationId": "updateDatasetGrants",
        "tags": [
          "DatasetRw"
        ],
        "summary": "updates a dataset's rwGrants",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            },
            "in": "path",
            "name": "datasetId",
            "description": "Dataset ID",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Request body with updated set of RwGrants",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.datasetrw.web.UpdateDatasetGrantsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.datasetrw.api.DatasetRwGrant"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datasetrw/dataset/{datasetId}/permissions": {
      "get": {
        "operationId": "getDatasetPermissions",
        "tags": [
          "DatasetRw"
        ],
        "summary": "gets datasetRw's current Permissions",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            },
            "in": "path",
            "name": "datasetId",
            "description": "Dataset ID",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.datasetrw.api.DatasetRwPermission"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datasetrw/dataset/{datasetId}/cancel-request-to-copy": {
      "delete": {
        "operationId": "cancelRequestToCopyDataset",
        "tags": [
          "DatasetRw"
        ],
        "summary": "Cancel Request to Copy Dataset",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            },
            "in": "path",
            "name": "datasetId",
            "description": "Dataset ID",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.datasetrw.api.DatasetRwSnapshotDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datasetrw/snapshot/{snapshotId}/cancel-request-to-copy": {
      "delete": {
        "operationId": "cancelRequestToCopySnapshot",
        "tags": [
          "DatasetRw"
        ],
        "summary": "Cancel Request to Copy Snapshot",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            },
            "in": "path",
            "name": "snapshotId",
            "description": "Snapshot ID",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.datasetrw.api.DatasetRwSnapshotDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datasetrw/dataset/{datasetId}/cancel-request-to-delete": {
      "delete": {
        "operationId": "cancelRequestToDeleteDataset",
        "tags": [
          "DatasetRw"
        ],
        "summary": "Cancel Request to Delete Dataset",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            },
            "in": "path",
            "name": "datasetId",
            "description": "Dataset ID",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.datasetrw.api.DatasetRwDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datasetrw/snapshot/{snapshotId}/cancel-request-to-delete": {
      "delete": {
        "operationId": "cancelRequestToDeleteSnapshot",
        "tags": [
          "DatasetRw"
        ],
        "summary": "Cancel Request to Delete Snapshot",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            },
            "in": "path",
            "name": "snapshotId",
            "description": "Snapshot ID",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.datasetrw.api.DatasetRwSnapshotDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datasetrw/datasets/{datasetId}/snapshot/file/cancel/{uploadKey}": {
      "get": {
        "operationId": "cancelSnapshotUpload",
        "tags": [
          "DatasetRw"
        ],
        "summary": "Indicates the cancellation of the chunked file uploads",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "datasetId",
            "description": "Id of the collection of datasets",
            "required": true
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "path",
            "name": "uploadKey",
            "description": "Unique identifier for upload session",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datasetrw": {
      "post": {
        "operationId": "createDataset",
        "tags": [
          "DatasetRw"
        ],
        "summary": "Deprecated - Use the /layout/complete endpoint with the workFlowID \"CreateDataset\" or use the public create endpoint. Create dataset",
        "parameters": [],
        "requestBody": {
          "description": "dataset spec to persist",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.datasetrw.web.CreateDatasetRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.datasetrw.api.DatasetRwViewDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datasetrw/dataset/{snapshotId}/create": {
      "post": {
        "operationId": "createDatasetFromSnapshot",
        "tags": [
          "DatasetRw"
        ],
        "summary": "Create dataset from snapshot",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "snapshotId",
            "description": "snapshot ID to create dataset from",
            "required": true
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "name",
            "description": "name of dataset",
            "required": true
          },
          {
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "in": "query",
            "name": "description",
            "description": "description of dataset",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.datasetrw.api.DatasetRwViewDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datasetrw/snapshot": {
      "post": {
        "operationId": "createSnapshot",
        "tags": [
          "DatasetRw"
        ],
        "summary": "Create snapshot",
        "parameters": [],
        "requestBody": {
          "description": "dataset snapshot spec to persist",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.datasetrw.web.CreateSnapshotRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.datasetrw.api.DatasetRwSnapshotDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datasetrw/snapshotFromExecution": {
      "post": {
        "operationId": "createSnapshotFromExecution",
        "tags": [
          "DatasetRw"
        ],
        "summary": "Create snapshot from an Execution. Requires Domino SuperUser",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.datasetrw.web.CreateSnapshotFromExecutionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.datasetrw.api.DatasetRwSnapshotDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datasetrw/marked-datasets": {
      "delete": {
        "operationId": "deleteMarkedDatasets",
        "tags": [
          "DatasetRw"
        ],
        "summary": "Delete Marked Datasets",
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.datasetrw.api.DatasetRwDto"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datasetrw/dataset/{datasetId}": {
      "delete": {
        "operationId": "deleteDataset",
        "tags": [
          "DatasetRw"
        ],
        "summary": "Delete Dataset",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            },
            "in": "path",
            "name": "datasetId",
            "description": "Dataset ID",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.datasetrw.api.DatasetRwDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "put": {
        "operationId": "updateDataset",
        "tags": [
          "DatasetRw"
        ],
        "summary": "Update Dataset metadata",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            },
            "in": "path",
            "name": "datasetId",
            "description": "Dataset ID",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Fields to update",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.datasetrw.web.UpdateDatasetRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.datasetrw.api.DatasetRwDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datasetrw/snapshot/{snapshotId}/files": {
      "delete": {
        "operationId": "deleteFiles",
        "tags": [
          "DatasetRw"
        ],
        "summary": "Deletes files from snapshot",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            },
            "in": "path",
            "name": "snapshotId",
            "description": "Snapshot ID",
            "required": true
          }
        ],
        "requestBody": {
          "description": "JSON object with information describing the new status",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.datasetrw.web.FilesToDeleteRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datasetrw/marked-snapshots": {
      "delete": {
        "operationId": "deleteMarkedSnapshots",
        "tags": [
          "DatasetRw"
        ],
        "summary": "Delete Marked Snapshots",
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.datasetrw.api.DatasetRwSnapshotDto"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datasetrw/snapshot/{snapshotId}": {
      "get": {
        "operationId": "getSnapshot",
        "tags": [
          "DatasetRw"
        ],
        "summary": "Retrieves the specified snapshot",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "snapshotId",
            "description": "Id of the snapshot",
            "required": true
          },
          {
            "schema": {
              "nullable": true,
              "type": "boolean"
            },
            "in": "query",
            "name": "includeStorageInfo",
            "description": "boolean to request storage level info",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.datasetrw.api.DatasetRwSnapshotSummaryDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "delete": {
        "operationId": "deleteSnapshot",
        "tags": [
          "DatasetRw"
        ],
        "summary": "Delete Snapshot",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            },
            "in": "path",
            "name": "snapshotId",
            "description": "Snapshot ID",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.datasetrw.api.DatasetRwSnapshotDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "put": {
        "operationId": "updateSnapshotStatus",
        "tags": [
          "DatasetRw"
        ],
        "summary": "Update a dataset snapshot's status",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "snapshotId",
            "description": "Id of the dataset snapshot to be updated",
            "required": true
          }
        ],
        "requestBody": {
          "description": "JSON object with information describing the new status",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.datasetrw.web.UpdateSnapshotStatusRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.datasetrw.api.DatasetRwSnapshotDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datasetrw/datasets/{datasetId}/snapshot/file/end/{uploadKey}": {
      "get": {
        "operationId": "endSnapshotUpload",
        "tags": [
          "DatasetRw"
        ],
        "summary": "Checks for destination consistency and if consistent, moves uploaded files to specified dataset directory.",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "datasetId",
            "description": "Dataset ID",
            "required": true
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "path",
            "name": "uploadKey",
            "description": "identifier for upload directory",
            "required": true
          },
          {
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "in": "query",
            "name": "targetRelativePath",
            "description": "target path of files to upload relative to root of dataset",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "the source path of the file tree was traversed to upload files",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datasetrw/snapshot/active/number": {
      "get": {
        "operationId": "getActiveSnapshotByNumber",
        "tags": [
          "DatasetRw"
        ],
        "summary": "Get active snapshot by snapshot number",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "query",
            "name": "datasetId",
            "description": "Dataset ID",
            "required": true
          },
          {
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "in": "query",
            "name": "snapshotNumber",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.datasetrw.api.DatasetRwSnapshotDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datasetrw/snapshot/{snapshotId}/copy-estimate": {
      "get": {
        "operationId": "getCopyEstimate",
        "tags": [
          "DatasetRw"
        ],
        "summary": "Get time estimate of copy task",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "snapshotId",
            "description": "Snapshot ID",
            "required": true
          },
          {
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "in": "query",
            "name": "relativeFilePaths",
            "description": "the file names/folder names that are selected to be copied",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.datasetrw.api.DatasetRwCopyTimeEstimateDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datasetrw/snapshot/{snapshotId}/copy-progress": {
      "get": {
        "operationId": "getCopyProgress",
        "tags": [
          "DatasetRw"
        ],
        "summary": "Get progress of copy task",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "snapshotId",
            "description": "Snapshot ID",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.datasetrw.api.DatasetRwFiletaskCopyUpdateDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datasetrw/datasets/{datasetId}": {
      "get": {
        "operationId": "getDataset",
        "tags": [
          "DatasetRw"
        ],
        "summary": "Lookup dataset by id",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "datasetId",
            "description": "Dataset ID",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.datasetrw.api.DatasetRwDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datasetrw/datasets/name/{datasetName}": {
      "get": {
        "operationId": "getActiveDatasetByName",
        "tags": [
          "DatasetRw"
        ],
        "summary": "Lookup dataset by project and name",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "projectOwner",
            "description": "project owner",
            "required": true
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "projectName",
            "description": "project name",
            "required": true
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "path",
            "name": "datasetName",
            "description": "dataset name",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.datasetrw.api.DatasetRwDetailsDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datasetrw/datasets/fromRun/{runId}": {
      "get": {
        "operationId": "getDatasetDetailsByRun",
        "tags": [
          "DatasetRw"
        ],
        "summary": "Retrieve datasets from run",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "query",
            "name": "projectId",
            "description": "project Id",
            "required": true
          },
          {
            "in": "path",
            "name": "runId",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.datasetrw.api.DatasetRwDto"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datasetrw/datasets-v2": {
      "get": {
        "operationId": "getDatasetsV2",
        "tags": [
          "DatasetRw"
        ],
        "summary": "Get Datasets",
        "parameters": [
          {
            "schema": {
              "nullable": true,
              "type": "boolean"
            },
            "in": "query",
            "name": "includeProjectInfo",
            "description": "boolean to request project level info",
            "required": false
          },
          {
            "schema": {
              "nullable": true,
              "type": "boolean"
            },
            "in": "query",
            "name": "includeHasProjectAccess",
            "description": "boolean to request whether principal has access within a project",
            "required": false
          },
          {
            "schema": {
              "nullable": true,
              "type": "boolean"
            },
            "in": "query",
            "name": "includeStorageInfo",
            "description": "boolean to request storage level info",
            "required": false
          },
          {
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "in": "query",
            "name": "minimumPermission",
            "description": "minimum dataset rw permission to check for",
            "required": false
          },
          {
            "schema": {
              "nullable": true,
              "type": "array",
              "items": {
                "pattern": "^[0-9a-f]{24}$",
                "type": "string"
              }
            },
            "in": "query",
            "name": "projectIdsToExclude",
            "description": "project IDs to exclude datasets from",
            "required": false
          },
          {
            "schema": {
              "nullable": true,
              "type": "array",
              "items": {
                "pattern": "^[0-9a-f]{24}$",
                "type": "string"
              }
            },
            "in": "query",
            "name": "projectIdsToInclude",
            "description": "project IDs to search datasets from",
            "required": false
          },
          {
            "schema": {
              "nullable": true,
              "type": "array",
              "items": {
                "pattern": "^[0-9a-f]{24}$",
                "type": "string"
              }
            },
            "in": "query",
            "name": "datasetIds",
            "description": "dataset IDs to search datasets from",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.datasetrw.api.DatasetRwInfoDto"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datasetrw/dataset/{datasetId}/role": {
      "get": {
        "operationId": "getDatasetRwRole",
        "tags": [
          "DatasetRw"
        ],
        "summary": "Gets a principal's role in a specfic dataset",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            },
            "in": "path",
            "name": "datasetId",
            "description": "Dataset ID",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.datasetrw.api.DatasetRwRole"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datasetrw/datasets/summary/all": {
      "get": {
        "operationId": "getDatasetSummaries",
        "tags": [
          "DatasetRw"
        ],
        "summary": "Get dataset summaries",
        "parameters": [],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.datasetrw.api.DatasetRwSummaryDto"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datasetrw/snapshots/{datasetId}": {
      "get": {
        "operationId": "getSnapshots",
        "tags": [
          "DatasetRw"
        ],
        "summary": "Get snapshots in dataset",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "datasetId",
            "description": "Dataset ID",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.datasetrw.api.DatasetRwSnapshotDto"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datasetrw/snapshot/size/{snapshotId}": {
      "get": {
        "operationId": "getSnapshotSize",
        "tags": [
          "DatasetRw"
        ],
        "summary": "Updates and retrieves the size of the snapshot",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "snapshotId",
            "description": "Id of the snapshot",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datasetrw/snapshots/summary/{datasetId}": {
      "get": {
        "operationId": "getSnapshotSummaries",
        "tags": [
          "DatasetRw"
        ],
        "summary": "Get snapshot summaries",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "datasetId",
            "description": "Dataset ID",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.datasetrw.api.DatasetRwSnapshotSummaryDto"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datasetrw/snapshot/admin/summary": {
      "get": {
        "operationId": "getSnapshotAdminSummaries",
        "tags": [
          "DatasetRw"
        ],
        "summary": "Get snapshot admin summaries",
        "parameters": [],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.datasetrw.api.DatasetRwSnapshotAdminSummaryDto"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datasetrw/snapshots/project/{projectId}": {
      "get": {
        "operationId": "getSnapshotsByProject",
        "tags": [
          "DatasetRw"
        ],
        "summary": "Get all snapshots by project",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "projectId",
            "description": "project ID",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.datasetrw.api.DatasetRwSnapshotDto"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datasetrw/run/{runId}": {
      "get": {
        "operationId": "getSnapshotUsageByRun",
        "tags": [
          "DatasetRw"
        ],
        "summary": "Get snapshots used by run",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "query",
            "name": "projectId",
            "description": "project ID",
            "required": true
          },
          {
            "in": "path",
            "name": "runId",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.datasetrw.api.DatasetRwSnapshotDto"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datasetrw/files/{snapshotId}": {
      "get": {
        "operationId": "getFilesInSnapshot",
        "tags": [
          "DatasetRw"
        ],
        "summary": "Get snapshot files at specified path",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "snapshotId",
            "description": "snapshot ID",
            "required": true
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "path",
            "description": "subPath to get files at",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.datasetrw.api.DatasetRwSnapshotFilesViewDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datasetrw/snapshot/{snapshotId}/file/meta": {
      "get": {
        "operationId": "getFileMetadata",
        "tags": [
          "DatasetRw"
        ],
        "summary": "Get snapshot file metadata at specified path",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "snapshotId",
            "description": "snapshot ID",
            "required": true
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "path",
            "description": "path of file to get metadata for",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.datasetrw.api.DatasetRwSnapshotFileMetadataDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datasetrw/snapshot/{snapshotId}/file/raw": {
      "get": {
        "operationId": "getFileRaw",
        "tags": [
          "DatasetRw"
        ],
        "summary": "Get snapshot file raw content at specified path",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "snapshotId",
            "description": "snapshot ID",
            "required": true
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "path",
            "description": "path of file to get raw content for",
            "required": true
          },
          {
            "schema": {
              "nullable": true,
              "type": "boolean"
            },
            "in": "query",
            "name": "download",
            "description": "whether endpoint is used for download",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datasetrw/snapshot/{snapshotId}/file/preview": {
      "get": {
        "operationId": "getFilePreview",
        "tags": [
          "DatasetRw"
        ],
        "summary": "Get snapshot file preview at specified path",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "snapshotId",
            "description": "snapshot ID",
            "required": true
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "path",
            "description": "path of file to HTML preview code for",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datasetrw/snapshot/upload/{uploadKey}": {
      "get": {
        "operationId": "getSnapshotUploadSession",
        "tags": [
          "DatasetRw"
        ],
        "summary": "Get snapshot upload session",
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.datasetrw.api.DatasetRwUploadSessionDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "uploadKey",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ]
      }
    },
    "/datasetrw/mounts-v2/{projectId}/shared": {
      "get": {
        "operationId": "getSharedDatasetProjectMountsV2",
        "tags": [
          "DatasetRw"
        ],
        "summary": "Get shared mounts in a project",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "projectId",
            "description": "Project ID",
            "required": true
          },
          {
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "in": "query",
            "name": "minimumPermission",
            "description": "minimum dataset rw permission to check for",
            "required": false
          },
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "in": "query",
            "name": "dataPlaneId",
            "description": "data plane IDs to look for mounts in",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.datasetrw.api.DatasetRwProjectMountDto"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datasetrw/mounts-v2/{projectId}/local": {
      "get": {
        "operationId": "getLocalDatasetProjectMountsV2",
        "tags": [
          "DatasetRw"
        ],
        "summary": "Get local mounts in a project",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "projectId",
            "description": "Project ID",
            "required": true
          },
          {
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "in": "query",
            "name": "minimumPermission",
            "description": "minimum dataset rw permission to check for",
            "required": false
          },
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "in": "query",
            "name": "dataPlaneId",
            "description": "dataplane id to look for mounts in",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.datasetrw.api.DatasetRwProjectMountDto"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datasetrw/dataset/snapshot/limit": {
      "get": {
        "operationId": "getMaxNumberOfSnapshotsPerDataset",
        "tags": [
          "DatasetRw"
        ],
        "summary": "Get max number of snapshots per dataset",
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datasetrw/datasets/{datasetId}/snapshot/active-readonly-count": {
      "get": {
        "operationId": "getNumberOfActiveReadOnlySnapshots",
        "tags": [
          "DatasetRw"
        ],
        "summary": "Get number of active snapshots",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "datasetId",
            "description": "Dataset ID",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datasetrw/dataset/{datasetId}/can-cancel-delete": {
      "get": {
        "operationId": "isAllowedToCancelDeleteDataset",
        "tags": [
          "DatasetRw"
        ],
        "summary": "Determines if request to delete a dataset can be cancelled",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "datasetId",
            "description": "Dataset ID",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datasetrw/snapshot/{snapshotId}/can-cancel-delete": {
      "get": {
        "operationId": "isAllowedToCancelDeleteSnapshot",
        "tags": [
          "DatasetRw"
        ],
        "summary": "Determines if request to delete a snapshot can be cancelled",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "snapshotId",
            "description": "Snapshot ID",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datasetrw/principal/{projectId}/manage": {
      "get": {
        "operationId": "isAllowedToManageDatasetRw",
        "tags": [
          "DatasetRw"
        ],
        "summary": "Determines if principal is authorized to manage dataset rw",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "projectId",
            "description": "Project ID",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datasetrw/datasets/{datasetId}/snapshot/file/test": {
      "get": {
        "operationId": "isChunkAvailable",
        "tags": [
          "DatasetRw"
        ],
        "summary": "Returns whether or not this chunk has already been sent",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "datasetId",
            "required": true
          },
          {
            "in": "query",
            "name": "resumableChunkNumber",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "resumableTotalChunks",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "resumableIdentifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "checksum",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datasetrw/dataset/file/normalized": {
      "post": {
        "operationId": "getNormalizedFileNames",
        "tags": [
          "DatasetRw"
        ],
        "summary": "Returns file names that are normalized",
        "parameters": [],
        "requestBody": {
          "description": "dataset snapshot spec to persist",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.datasetrw.web.FilesNormalizedRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datasetrw/dataset/limit/{projectId}": {
      "get": {
        "operationId": "isOverDatasetLimit",
        "tags": [
          "DatasetRw"
        ],
        "summary": "Determines if dataset limit per project has been surpassed",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "projectId",
            "description": "Project ID",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datasetrw/dataset/enforce-limit/{projectId}": {
      "get": {
        "operationId": "shouldEnforceLimits",
        "tags": [
          "DatasetRw"
        ],
        "summary": "Get whether a project should enforce dataset limits",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            },
            "in": "path",
            "name": "projectId",
            "description": "Project ID",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datasetrw/snapshot/limit/{projectId}/{datasetId}": {
      "get": {
        "operationId": "isAtSnapshotLimit",
        "tags": [
          "DatasetRw"
        ],
        "summary": "Determines if snapshot limit per dataset has been surpassed",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "projectId",
            "description": "Project ID",
            "required": true
          },
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "datasetId",
            "description": "Dataset ID",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datasetrw/dataset/{datasetId}/tag/{tagName}": {
      "delete": {
        "operationId": "removeTag",
        "tags": [
          "DatasetRw"
        ],
        "summary": "Remove a tag from Snapshot",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            },
            "in": "path",
            "name": "datasetId",
            "description": "Dataset ID",
            "required": true
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "path",
            "name": "tagName",
            "description": "Name of tag",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.datasetrw.api.DatasetRwViewDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datasetrw/datasets/limit/{projectId}": {
      "post": {
        "operationId": "setLimitOverride",
        "tags": [
          "DatasetRw"
        ],
        "summary": "Set project-level dataset limit override",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "projectId",
            "description": "Id of the project",
            "required": true
          },
          {
            "in": "query",
            "name": "ignoreLimit",
            "schema": {
              "type": "boolean"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "ignoreLimits",
            "schema": {
              "type": "boolean"
            },
            "description": "boolean for ignore limit option"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datasetrw/datasets/{datasetId}/snapshot/file/start": {
      "post": {
        "operationId": "startSnapshotUpload",
        "tags": [
          "DatasetRw"
        ],
        "summary": "Initializes chunked file uploads for a dataset collection snapshot",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "datasetId",
            "description": "Id of the collection of datasets",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.datasetrw.web.FileCollisionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datasetrw/dataset/{datasetId}/status": {
      "put": {
        "operationId": "updateDatasetStatus",
        "tags": [
          "DatasetRw"
        ],
        "summary": "Update a dataset's status",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "datasetId",
            "description": "Dataset ID",
            "required": true
          }
        ],
        "requestBody": {
          "description": "JSON object with information describing the new status",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.datasetrw.web.UpdateDatasetStatusRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.datasetrw.api.DatasetRwDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datasetrw/datasets/{datasetId}/snapshot/file": {
      "post": {
        "operationId": "uploadSnapshotFile",
        "tags": [
          "DatasetRw"
        ],
        "summary": "Sends file upload chunks",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "datasetId",
            "required": true
          },
          {
            "in": "query",
            "name": "resumableChunkNumber",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "resumableTotalChunks",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "resumableIdentifier",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "key",
            "schema": {
              "type": "string"
            },
            "description": "unique identifier for this upload session"
          },
          {
            "in": "query",
            "name": "resumableRelativePath",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "resumableChunkSize",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "resumableCurrentChunkSize",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "checksum",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "a unique key which identifies this upload session"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datasetrw/dataset/{datasetId}/rename-file": {
      "put": {
        "operationId": "renameFileOrDirectory",
        "tags": [
          "DatasetRw"
        ],
        "summary": "Attempts to rename file or directory",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "datasetId",
            "description": "Dataset ID",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Request body with path to file/directory and intended new name",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.datasetrw.web.RenameFileOrDirectoryRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datasetrw/snapshot/{snapshotId}/sizing": {
      "post": {
        "operationId": "calculateSnapshotSize",
        "tags": [
          "DatasetRw"
        ],
        "summary": "Create sizing task for given snapshot",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "snapshotId",
            "description": "Id of the dataset snapshot to size",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Request body with flag whether to override deduplication check. Defaults to false",
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.datasetrw.web.CalculateSnapshotSizeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.datasetrw.api.DatasetRwFiletaskTaskDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datasetrw/snapshot/{snapshotId}/download": {
      "post": {
        "operationId": "createDownloadArchive",
        "tags": [
          "DatasetRw"
        ],
        "summary": "Create download task",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "snapshotId",
            "description": "Id of the dataset snapshot where files are downloaded from",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Request body with relative paths of the files/directories to be downloaded from",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.datasetrw.web.CreateDownloadArchiveRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.datasetrw.api.DatasetRwFiletaskTaskDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datasetrw/snapshot/{snapshotId}/download/{taskId}": {
      "get": {
        "operationId": "getDownloadTaskStatus",
        "tags": [
          "DatasetRw"
        ],
        "summary": "Get the status of download task",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "snapshotId",
            "description": "Id of the dataset snapshot where files are downloaded from",
            "required": true
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "path",
            "name": "taskId",
            "description": "Id of the download task to be polled",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.datasetrw.api.DatasetRwFiletaskTaskDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datasetrw/snapshot/{snapshotId}/download-local/{taskKey}": {
      "get": {
        "operationId": "downloadArchiveToLocal",
        "tags": [
          "DatasetRw"
        ],
        "summary": "Download archive file from Domino to local",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "snapshotId",
            "description": "Id of the dataset snapshot where files are downloaded from",
            "required": true
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "path",
            "name": "taskKey",
            "description": "Key of the download task to be polled",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datasetrw/dataset-cost": {
      "get": {
        "operationId": "getDatasetUnitCost",
        "tags": [
          "DatasetRw"
        ],
        "summary": "Gets the unit cost of a Dataset (in dollars per Gb per month)",
        "parameters": [],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "required": false,
                "schema": {
                  "type": "number"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datasetrw/storage": {
      "post": {
        "operationId": "createDatasetStorage",
        "tags": [
          "DatasetRw"
        ],
        "summary": "Create DatasetRwStorage",
        "parameters": [],
        "requestBody": {
          "description": "Dataset storage spec to persist",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.datasetrw.web.CreateDatasetRwStorageRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.datasetrw.api.DatasetRwStorageDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "get": {
        "operationId": "getDatasetStorages",
        "tags": [
          "DatasetRw"
        ],
        "summary": "Get DatasetRwStorages by IDs",
        "parameters": [
          {
            "schema": {
              "nullable": true,
              "type": "array",
              "items": {
                "pattern": "^[0-9a-f]{24}$",
                "type": "string"
              }
            },
            "in": "query",
            "name": "datasetStorageIds",
            "description": "the IDs of the storages to get",
            "required": false
          },
          {
            "schema": {
              "nullable": true,
              "type": "array",
              "items": {
                "pattern": "^[0-9a-f]{24}$",
                "type": "string"
              }
            },
            "in": "query",
            "name": "dataPlaneIds",
            "description": "the IDs of the dataplanes to get storages from",
            "required": false
          },
          {
            "schema": {
              "nullable": true,
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "in": "query",
            "name": "names",
            "description": "the names of storages to get",
            "required": false
          },
          {
            "schema": {
              "nullable": true,
              "type": "boolean"
            },
            "in": "query",
            "name": "isRegistered",
            "description": "whether to get registered or unregistered storages",
            "required": false
          },
          {
            "schema": {
              "nullable": true,
              "type": "boolean"
            },
            "in": "query",
            "name": "includeNumberOfActiveDatasets",
            "description": "whether to include the number of active datasets",
            "required": false
          },
          {
            "schema": {
              "nullable": true,
              "type": "boolean"
            },
            "in": "query",
            "name": "includeHardwareTiers",
            "description": "whether to get hardware tier names",
            "required": false
          },
          {
            "schema": {
              "nullable": true,
              "type": "boolean"
            },
            "in": "query",
            "name": "includeHostname",
            "description": "whether to get the dataplane hostname",
            "required": false
          },
          {
            "schema": {
              "nullable": true,
              "type": "boolean"
            },
            "in": "query",
            "name": "includeMountInfo",
            "description": "whether to get the mount information",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "required": true,
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.datasetrw.api.DatasetRwStorageDto"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datasetrw/storage/rpc/get-available-for-project/{projectId}": {
      "get": {
        "operationId": "getAvailableDatasetStoragesForProject",
        "tags": [
          "DatasetRw"
        ],
        "summary": "Get available storages by project ID",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "projectId",
            "description": "the ID of the project to get storages from",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "required": true,
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.datasetrw.api.DatasetRwStorageDto"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datasetrw/storage/rpc/get-available-volumes": {
      "get": {
        "operationId": "getAvailableVolumesForDatasetStorage",
        "tags": [
          "DatasetRw"
        ],
        "summary": "Get available volumes for dataset storage",
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "required": true,
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.datasetrw.api.DatasetStorageVolumeInfoDto"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datasetrw/storage/{datasetStorageId}": {
      "delete": {
        "operationId": "unregisterDatasetStorage",
        "tags": [
          "DatasetRw"
        ],
        "summary": "Unregister dataset storage",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            },
            "in": "path",
            "name": "datasetStorageId",
            "description": "dataset storage ID",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.datasetrw.api.DatasetRwStorageDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "put": {
        "operationId": "updateDatasetStorage",
        "tags": [
          "DatasetRw"
        ],
        "summary": "Update dataset storage metadata",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            },
            "in": "path",
            "name": "datasetStorageId",
            "description": "dataset storage ID",
            "required": true
          }
        ],
        "requestBody": {
          "description": "fields to update",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.datasetrw.web.UpdateDatasetRwStorageRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.datasetrw.api.DatasetRwStorageDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datasetrw/storages/set-up": {
      "get": {
        "operationId": "areMultipleStoragesRegistered",
        "tags": [
          "DatasetRw"
        ],
        "summary": "Get whether or not there is more than one Dataset storage set up",
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "required": true,
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datasetrw/storage-usage": {
      "get": {
        "operationId": "getDatasetStorageUsage",
        "tags": [
          "DatasetRw"
        ],
        "summary": "Checks if users have reached the threshold of their dataset usage with respect to their quota",
        "parameters": [
          {
            "schema": {
              "type": "array",
              "items": {
                "pattern": "^[0-9a-f]{24}$",
                "type": "string"
              }
            },
            "in": "query",
            "name": "userIds",
            "description": "the userIds to get dataset storage usage for",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "required": true,
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.datasetrw.api.DatasetStorageUsageDto"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datasetrw/storage-usage/{username}": {
      "get": {
        "operationId": "getDatasetStorageUsageByUsername",
        "tags": [
          "DatasetRw"
        ],
        "summary": "Gets the storage usage for a specific username",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "path",
            "name": "username",
            "description": "the username to find storage info for",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "required": false,
                "schema": {
                  "$ref": "#/components/schemas/domino.datasetrw.api.DatasetStorageUsageDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datasetrw/download-usage-report": {
      "get": {
        "operationId": "downloadUsageReport",
        "tags": [
          "DatasetRw"
        ],
        "summary": "Download Dataset Usage Report",
        "parameters": [],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datamount": {
      "post": {
        "operationId": "registerDataMount",
        "tags": [
          "DataMount"
        ],
        "summary": "Register data mount",
        "parameters": [],
        "requestBody": {
          "description": "data mount spec to persist",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.datamount.web.CreateDataMountRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.datamount.api.DataMountDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datamount/isMountPathValid": {
      "get": {
        "operationId": "isMountPathValid",
        "tags": [
          "DataMount"
        ],
        "summary": "Determine if mount path contains unique and non reserved words",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "mountPath",
            "description": "mount path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datamount/status": {
      "post": {
        "operationId": "checkAndUpdateDataMountStatus",
        "tags": [
          "DataMount"
        ],
        "summary": "Check and update external data volume status",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.datamount.web.UpdateDataMountStatusRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.datamount.api.DataMountDto"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "408": {
            "$ref": "#/components/responses/Timeout"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datamount/all": {
      "get": {
        "operationId": "getAllRegisteredDataMounts",
        "tags": [
          "DataMount"
        ],
        "summary": "Get all registered datamounts",
        "parameters": [
          {
            "schema": {
              "nullable": true,
              "type": "boolean"
            },
            "in": "query",
            "name": "updateStatuses",
            "description": "boolean to update statuses of all outdated datmaounts",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.datamount.api.DataMountDto"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datamount/pvcs/names": {
      "post": {
        "operationId": "findDataMountsByPvcNames",
        "tags": [
          "DataMount"
        ],
        "summary": "Find data mounts by pvc names",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.datamount.web.FindByPvcNamesRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.datamount.api.DataMountDto"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datamount/{datamountId}": {
      "post": {
        "operationId": "updateDataMount",
        "tags": [
          "DataMount"
        ],
        "summary": "Update data mount",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "datamountId",
            "description": "registered data mount id",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.datamount.web.UpdateDataMountRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.datamount.api.DataMountDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "get": {
        "operationId": "getDataMountForUser",
        "tags": [
          "DataMount"
        ],
        "summary": "Get data mount",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "datamountId",
            "description": "registered data mount id",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.datamount.api.DataMountDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "delete": {
        "operationId": "unregisterDataMount",
        "tags": [
          "DataMount"
        ],
        "summary": "Unregister data mount",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "datamountId",
            "description": "data mount id",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.datamount.api.DataMountDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datamount/projects/{projectId}": {
      "post": {
        "operationId": "addProject",
        "tags": [
          "DataMount"
        ],
        "summary": "Add project to data mounts",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "projectId",
            "description": "project id to add to data mounts",
            "required": true
          },
          {
            "schema": {
              "type": "array",
              "items": {
                "pattern": "^[0-9a-f]{24}$",
                "type": "string"
              }
            },
            "in": "query",
            "name": "datamountIds",
            "description": "data mount id's to add to the project",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.datamount.api.DataMountDto"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "get": {
        "operationId": "findDataMountsByProject",
        "tags": [
          "DataMount"
        ],
        "summary": "Find data mounts by project",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "projectId",
            "description": "project id",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.datamount.api.DataMountDto"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "delete": {
        "operationId": "removeProject",
        "tags": [
          "DataMount"
        ],
        "summary": "Remove project",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "projectId",
            "description": "Project id to remove from data mount",
            "required": true
          },
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "query",
            "name": "datamountId",
            "description": "data mount id from which to remove the project",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.datamount.api.DataMountDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datamount/users/{userId}": {
      "get": {
        "operationId": "findDataMountsByUser",
        "tags": [
          "DataMount"
        ],
        "summary": "Find data mounts by user",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "userId",
            "description": "user id",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.datamount.api.DataMountDto"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datamount/projects/inaccessible/{projectId}": {
      "get": {
        "operationId": "getInaccessibleDataMountsByUser",
        "tags": [
          "DataMount"
        ],
        "summary": "Find inaccessible data mounts to user for given project",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "projectId",
            "description": "project id",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.datamount.api.DataMountDto"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datamount/paths/{projectId}": {
      "get": {
        "operationId": "getRootPathForProject",
        "tags": [
          "DataMount"
        ],
        "summary": "Get data mount root path",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "projectId",
            "description": "project id for the datamount",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datamount/pvcs/all": {
      "get": {
        "operationId": "getAllPvcsByType",
        "tags": [
          "DataMount"
        ],
        "summary": "Get all pvcs information as wrapped in dummy datamount dtos",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "enum": [
                "Nfs",
                "Smb",
                "Efs",
                "Generic"
              ]
            },
            "in": "query",
            "name": "volumeType",
            "description": "flag to specify volumeType",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.datamount.api.DataMountDto"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datamount/pvcs/available": {
      "get": {
        "operationId": "getAvailablePvcsByType",
        "tags": [
          "DataMount"
        ],
        "summary": "Get available pvcs information as wrapped in dummy datamount dtos",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "enum": [
                "Nfs",
                "Smb",
                "Efs",
                "Generic"
              ]
            },
            "in": "query",
            "name": "volumeType",
            "description": "flag to specify volumeType",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.datamount.api.DataMountDto"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datasource/full": {
      "get": {
        "operationId": "getFullCredentials",
        "tags": [
          "DataSource"
        ],
        "summary": "Get all credentials that match filter",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "query",
            "name": "dataSourceId",
            "description": "registered data source id",
            "required": true
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "userName",
            "description": "name of owner or user credential has been shared with",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.credential.api.FullDataSourceCredentialDto"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datasource/fullbyname": {
      "get": {
        "operationId": "getFullCredentialsByName",
        "tags": [
          "DataSource"
        ],
        "summary": "Get all credentials by data source name and user name",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "dataSourceName",
            "description": "registered data source name",
            "required": true
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "userName",
            "description": "name of owner or user credential has been shared with",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.credential.api.FullDataSourceCredentialDto"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datasource/audit/download": {
      "get": {
        "operationId": "downloadDataSourceAuditData",
        "tags": [
          "DataSource"
        ],
        "summary": "Download DataSource Audit Data for past 6 months",
        "parameters": [
          {
            "schema": {
              "nullable": true,
              "type": "boolean"
            },
            "in": "query",
            "name": "jsonFile",
            "description": "if true output will be json file, else txt",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datasource/{dataSourceId}/access": {
      "post": {
        "operationId": "recordDataSourceAccess",
        "tags": [
          "DataSource"
        ],
        "summary": "Record access to datasource from an execution",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "dataSourceId",
            "description": "accessed data source id",
            "required": true
          }
        ],
        "requestBody": {
          "description": "body with username and runid of access to record",
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.datasource.web.RecordDataSourceAccessRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datasource/audit/download/runs": {
      "get": {
        "operationId": "downloadDataSourceAuditDataInRuns",
        "tags": [
          "DataSource"
        ],
        "summary": "Download DataSource Audit Data accessed in Domino runs",
        "parameters": [
          {
            "schema": {
              "type": "array",
              "items": {
                "pattern": "^[0-9a-f]{24}$",
                "type": "string"
              }
            },
            "in": "query",
            "name": "runIds",
            "description": "the ids of the runs to query datasources from",
            "required": true
          },
          {
            "schema": {
              "nullable": true,
              "type": "boolean"
            },
            "in": "query",
            "name": "jsonFile",
            "description": "if true output will be json file, else txt",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/jsonl": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datasource/audit": {
      "get": {
        "operationId": "getDataSourcesAccessedInRuns",
        "tags": [
          "DataSource"
        ],
        "summary": "Get datasources accessed in runs",
        "parameters": [
          {
            "schema": {
              "type": "array",
              "items": {
                "pattern": "^[0-9a-f]{24}$",
                "type": "string"
              }
            },
            "in": "query",
            "name": "runIds",
            "description": "the ids of the runs to query datasources from",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.datasource.web.DataSourcesAccessedInRunResponse"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datasource/starburst/status": {
      "get": {
        "operationId": "fetchStarburstStatus",
        "tags": [
          "DataSource"
        ],
        "summary": "Fetch Starburst Status",
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datasource/starburst/restart": {
      "get": {
        "operationId": "restartStarburst",
        "tags": [
          "DataSource"
        ],
        "summary": "Restart Starburst",
        "parameters": [
          {
            "schema": {
              "nullable": true,
              "type": "boolean"
            },
            "in": "query",
            "name": "force",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datasource/starburst/shouldRestart": {
      "get": {
        "operationId": "shouldRestartStarburst",
        "tags": [
          "DataSource"
        ],
        "summary": "Return whether config map is in sync with data source mongo",
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datasource": {
      "post": {
        "operationId": "create",
        "tags": [
          "DataSource"
        ],
        "summary": "Deprecated - Use the private /layout/complete endpoint with workFlowID \"CreateDatasource\" or use the public create endpoint. Create data source",
        "parameters": [],
        "requestBody": {
          "description": "data source spec to persist",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.datasource.web.CreateDataSourceRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.datasource.api.DataSourceDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "get": {
        "operationId": "isAllowedToAccessDataSourceAdminPage",
        "tags": [
          "DataSource"
        ],
        "summary": "Get whether user is allowed to see the Data Source Admin page",
        "parameters": [],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datasource/{dataSourceId}/users": {
      "post": {
        "operationId": "addUsers",
        "tags": [
          "DataSource"
        ],
        "summary": "Add users to data source",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "dataSourceId",
            "description": "Data source Id",
            "required": true
          },
          {
            "schema": {
              "type": "array",
              "items": {
                "pattern": "^[0-9a-f]{24}$",
                "type": "string"
              }
            },
            "in": "query",
            "name": "userIds",
            "description": "the ids of the users to be added",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.datasource.api.DataSourceDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "delete": {
        "operationId": "removeUsers",
        "tags": [
          "DataSource"
        ],
        "summary": "Remove users from data source",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "dataSourceId",
            "description": "Data source Id",
            "required": true
          },
          {
            "schema": {
              "type": "array",
              "items": {
                "pattern": "^[0-9a-f]{24}$",
                "type": "string"
              }
            },
            "in": "query",
            "name": "userIds",
            "description": "the ids of the users to be removed",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.datasource.api.DataSourceDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "put": {
        "operationId": "updateUsers",
        "tags": [
          "DataSource"
        ],
        "summary": "Update data source users",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "dataSourceId",
            "description": "data source id",
            "required": true
          }
        ],
        "requestBody": {
          "description": "updated data source users spec to persist",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.datasource.web.UpdateUsersRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.datasource.api.DataSourceDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datasource/{dataSourceId}/projects/{projectId}": {
      "post": {
        "operationId": "addProject",
        "tags": [
          "DataSource"
        ],
        "summary": "Add project to data source",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "dataSourceId",
            "description": "Data source Id",
            "required": true
          },
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "projectId",
            "description": "Project Id",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.datasource.api.DataSourceDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "delete": {
        "operationId": "removeProject",
        "tags": [
          "DataSource"
        ],
        "summary": "Remove project from data source",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "dataSourceId",
            "description": "Data source Id",
            "required": true
          },
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "projectId",
            "description": "Project Id",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.datasource.api.DataSourceDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datasource/name/check/{name}": {
      "get": {
        "operationId": "checkValidDataSourceName",
        "tags": [
          "DataSource"
        ],
        "summary": "Check whether name is valid and unique",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "path",
            "name": "name",
            "description": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datasource/{dataSourceId}": {
      "get": {
        "operationId": "getDataSource",
        "tags": [
          "DataSource"
        ],
        "summary": "Get data source",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            },
            "in": "path",
            "name": "dataSourceId",
            "description": "Data source ID",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.datasource.api.DataSourceDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "delete": {
        "operationId": "deleteDataSource",
        "tags": [
          "DataSource"
        ],
        "summary": "Delete data source",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            },
            "in": "path",
            "name": "dataSourceId",
            "description": "Data source ID",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.datasource.api.DataSourceDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datasource/projects/{projectId}": {
      "get": {
        "operationId": "getDataSourcesByProject",
        "tags": [
          "DataSource"
        ],
        "summary": "Get data sources by project",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            },
            "in": "path",
            "name": "projectId",
            "description": "Project ID",
            "required": true
          },
          {
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            },
            "in": "query",
            "name": "dataPlaneId",
            "description": "DataPlane ID",
            "required": false
          },
          {
            "schema": {
              "nullable": true,
              "type": "boolean"
            },
            "in": "query",
            "name": "authenticatedOnly",
            "description": "indicating if only returns the authenticated data sources",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.datasource.api.DataSourceDto"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datasource/name/{name}": {
      "get": {
        "operationId": "getDataSourceByName",
        "tags": [
          "DataSource"
        ],
        "summary": "Get data source by name",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "path",
            "name": "name",
            "description": "name of data source",
            "required": true
          },
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "query",
            "name": "runId",
            "description": "id of run in which the data source is being retrieved",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.datasource.api.DataSourceDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datasource/engineType/{engineType}": {
      "get": {
        "operationId": "getDataSourcesByEngineType",
        "tags": [
          "DataSource"
        ],
        "summary": "Get data sources by engine type. Filters deleted data sources",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "path",
            "name": "engineType",
            "description": "Engine Type",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.datasource.api.DataSourceDto"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datasource/user/{userId}": {
      "get": {
        "operationId": "getDataSourcesByUser",
        "tags": [
          "DataSource"
        ],
        "summary": "Get data sources by user",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            },
            "in": "path",
            "name": "userId",
            "description": "User ID",
            "required": true
          },
          {
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            },
            "in": "query",
            "name": "dataPlaneId",
            "description": "DataPlane ID",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.datasource.api.DataSourceDto"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datasource/dataSources/all": {
      "get": {
        "operationId": "getAllDataSources",
        "tags": [
          "DataSource"
        ],
        "summary": "Get all active data sources",
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.datasource.api.DataSourceDto"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datasource/{dataSourceId}/credential": {
      "get": {
        "operationId": "getVisibleCredentials",
        "tags": [
          "DataSource"
        ],
        "summary": "Get visible credentials",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            },
            "in": "path",
            "name": "dataSourceId",
            "description": "Data source Id",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datasource/config/all/fields": {
      "get": {
        "operationId": "getDataSourceConfigsNew",
        "tags": [
          "DataSource"
        ],
        "summary": "Get config metadata for all data source types",
        "parameters": [
          {
            "schema": {
              "nullable": true,
              "type": "boolean"
            },
            "in": "query",
            "name": "hideStarburst",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.datasource.model.DatasourceConfig"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datasource/type/{dataSourceType}/config": {
      "get": {
        "operationId": "getDataSourceConfigByType",
        "tags": [
          "DataSource"
        ],
        "summary": "Get config metadata for a datasource type",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "path",
            "name": "dataSourceType",
            "description": "Datasource Type",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.datasource.model.DatasourceConfig"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datasource/auths/all": {
      "get": {
        "operationId": "getAuthConfigs",
        "tags": [
          "DataSource"
        ],
        "summary": "Get auth metadata for all data source types",
        "parameters": [],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.datasource.model.AuthConfig"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datasource/type/{authType}/auth": {
      "get": {
        "operationId": "getAuthConfigByType",
        "tags": [
          "DataSource"
        ],
        "summary": "Get auth metadata for a datasource type",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "path",
            "name": "authType",
            "description": "Auth Type",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.datasource.model.AuthConfig"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datasource/{dataSourceId}/user/{username}/config/proxy": {
      "get": {
        "operationId": "getDataSourceConfigForProxy",
        "tags": [
          "DataSource"
        ],
        "summary": "Get data source config object for proxy service",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "path",
            "name": "dataSourceId",
            "description": "Data source ID as string",
            "required": true
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "path",
            "name": "username",
            "description": "username of user",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.datasource.api.DataSourceProxyConfigDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datasource/name/{dataSourceName}/user/{username}/config/proxy": {
      "get": {
        "operationId": "getDataSourceConfigByNameForProxy",
        "tags": [
          "DataSource"
        ],
        "summary": "Get data source config object by name for proxy service",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "path",
            "name": "dataSourceName",
            "description": "Data source name",
            "required": true
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "path",
            "name": "username",
            "description": "username of user",
            "required": true
          },
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "query",
            "name": "runId",
            "description": "id of run in which the data source is being retrieved",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.datasource.api.DataSourceProxyConfigDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datasource/{dataSourceId}/authentication-status": {
      "get": {
        "operationId": "getAuthenticationStatus",
        "tags": [
          "DataSource"
        ],
        "summary": "Get authentication status for data source",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            },
            "in": "path",
            "name": "dataSourceId",
            "description": "Data source ID",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datasource/authentication-status": {
      "post": {
        "operationId": "getAuthenticationStatuses",
        "tags": [
          "DataSource"
        ],
        "summary": "Get authentication status for data sources",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.datasource.web.GetAuthenticationStatusesRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "boolean"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datasource/{dataSourceId}/connection/string": {
      "get": {
        "operationId": "getConnectionSnippet",
        "tags": [
          "DataSource"
        ],
        "summary": "Get code snippet/connection string",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            },
            "in": "path",
            "name": "dataSourceId",
            "description": "Data source ID",
            "required": true
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "dataSourceName",
            "description": "The name of the data source",
            "required": true
          },
          {
            "schema": {
              "type": "string",
              "enum": [
                "Python",
                "Sas",
                "R"
              ]
            },
            "in": "query",
            "name": "dataSourceLanguage",
            "description": "The language of the desired snippet",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datasource/{dataSourceId}/connection/string/all": {
      "get": {
        "operationId": "getAllConnectionSnippets",
        "tags": [
          "DataSource"
        ],
        "summary": "Get code snippet/connection string for all supported languages",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            },
            "in": "path",
            "name": "dataSourceId",
            "description": "Data source ID",
            "required": true
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "dataSourceName",
            "description": "The name of the data source",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.datasource.api.DataSourceCodeSnippetsDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datasource/users/admin": {
      "post": {
        "operationId": "getAdminUsers",
        "tags": [
          "DataSource"
        ],
        "summary": "Get list of users that are admins (for transfer ownership list)",
        "parameters": [],
        "requestBody": {
          "description": "spec with users to filter out non-admins",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.datasource.web.GetAdminUsersRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.common.user.Person"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datasource/project/{projectId}/datasource-project-data": {
      "get": {
        "operationId": "isAllowedToGetProjectSpecificDataSourceData",
        "tags": [
          "DataSource"
        ],
        "summary": "Get whether the user is allowed to see project-specific datasource information",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            },
            "in": "path",
            "name": "projectId",
            "description": "Project ID",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datasource/{dataSourceId}/project/{projectId}/datasource-and-project-data": {
      "get": {
        "operationId": "isAllowedToManageDataSourceProjectData",
        "tags": [
          "DataSource"
        ],
        "summary": "Get whether the user is allowed to see project-specific and datasource-specific data",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            },
            "in": "path",
            "name": "dataSourceId",
            "description": "Data source ID",
            "required": true
          },
          {
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            },
            "in": "path",
            "name": "projectId",
            "description": "Project ID",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datasource/project/{projectId}/datasource-project-only-data": {
      "get": {
        "operationId": "isAllowedToManageDataSourceProjectOnlyData",
        "tags": [
          "DataSource"
        ],
        "summary": "Get whether the user is allowed to see project-specific and datasource-involved data but only with project context",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            },
            "in": "path",
            "name": "projectId",
            "description": "Project ID",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datasource/connection": {
      "post": {
        "operationId": "checkDataSourceConnection",
        "tags": [
          "DataSource"
        ],
        "summary": "Check for valid authenticated connection to data source",
        "parameters": [],
        "requestBody": {
          "description": "data source spec to check for connection",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.datasource.web.CheckDataSourceConnectionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datasource/{dataSourceId}/transfer/{newOwner}": {
      "post": {
        "operationId": "transferOwnership",
        "tags": [
          "DataSource"
        ],
        "summary": "Transfer data source ownership",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            },
            "in": "path",
            "name": "dataSourceId",
            "description": "Data source Id",
            "required": true
          },
          {
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            },
            "in": "path",
            "name": "newOwner",
            "description": "new owner Id",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.datasource.api.DataSourceDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datasource/{dataSourceId}/metadata": {
      "put": {
        "operationId": "updateDataSourceMetadata",
        "tags": [
          "DataSource"
        ],
        "summary": "Update data source metadata",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "dataSourceId",
            "description": "active dataSource id",
            "required": true
          }
        ],
        "requestBody": {
          "description": "updated data source metadata spec to persist",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.datasource.web.UpdateDataSourceMetadataRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.datasource.api.DataSourceDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datasource/{dataSourceId}/credentials": {
      "put": {
        "operationId": "updateDataSourceCredentials",
        "tags": [
          "DataSource"
        ],
        "summary": "Add/update data source credentials",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "dataSourceId",
            "description": "active dataSource id",
            "required": true
          }
        ],
        "requestBody": {
          "description": "added data source credentials to persist",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.datasource.web.UpdateDataSourceCredentialRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.credential.api.VisibleDataSourceCredentialDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datasource/{dataSourceId}/dataPlanes": {
      "put": {
        "operationId": "updateDataSourceDataPlanes",
        "tags": [
          "DataSource"
        ],
        "summary": "Update the data planes from which a data source is accessible from",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "dataSourceId",
            "description": "active dataSource id",
            "required": true
          }
        ],
        "requestBody": {
          "description": "updated list of data planes the data source is accessible from",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.datasource.web.UpdateDataSourceDataPlanesRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.datasource.api.DataSourceDataPlaneInfo"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datasource/{dataSourceId}/config": {
      "put": {
        "operationId": "updateDataSourceConfig",
        "tags": [
          "DataSource"
        ],
        "summary": "Update data source config",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "dataSourceId",
            "description": "active dataSource id",
            "required": true
          }
        ],
        "requestBody": {
          "description": "updated data source spec with config info to persist",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.datasource.web.UpdateDataSourceConfigRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.datasource.api.DataSourceDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datasource/{dataSourceId}/lastUsed": {
      "put": {
        "operationId": "updateLastUpdatedInfo",
        "tags": [
          "DataSource"
        ],
        "summary": "Update last updated info - when data source was last used in run",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            },
            "in": "path",
            "name": "dataSourceId",
            "description": "Data source Id",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.datasource.api.DataSourceDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/layout/complete": {
      "post": {
        "operationId": "completeWorkflow",
        "tags": [
          "Layout"
        ],
        "summary": "Complete a workflow",
        "requestBody": {
          "description": "spec with object to validate",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.layout.web.CompleteWorkflowRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.layout.web.CompleteWorkflowResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/layout/validate": {
      "post": {
        "operationId": "validateStep",
        "tags": [
          "Layout"
        ],
        "summary": "Validate a step in a workflow",
        "requestBody": {
          "description": "spec with object to validate",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.layout.web.ValidateStepRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.layout.web.ValidateStepResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/dataplanes/dataplanes/{dataPlaneId}": {
      "get": {
        "operationId": "getDataPlane",
        "tags": [
          "DataPlane"
        ],
        "summary": "Get Data Plane",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "path",
            "name": "dataPlaneId",
            "description": "Id of the Data Plane",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.dataplane.DataPlaneDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "put": {
        "operationId": "updateDataPlane",
        "tags": [
          "DataPlane"
        ],
        "summary": "Update Data Plane",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "dataPlaneId",
            "description": "Id of the Data Plane",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Update data plane request",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.dataplane.DataPlaneFormDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.dataplane.DataPlaneDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/dataplanes/dataplanes": {
      "post": {
        "operationId": "createDataPlane",
        "tags": [
          "DataPlane"
        ],
        "summary": "Create Data Plane",
        "parameters": [],
        "requestBody": {
          "description": "Create data plane request",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.dataplane.DataPlaneFormDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.dataplane.DataPlaneDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "get": {
        "operationId": "listDataPlanes",
        "tags": [
          "DataPlane"
        ],
        "summary": "List Data Planes",
        "parameters": [
          {
            "schema": {
              "nullable": true,
              "type": "boolean"
            },
            "in": "query",
            "name": "showArchived",
            "description": "Flag to declare if archived data planes are included in the response.",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.dataplane.DataPlaneDto"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/dataplanes/dataplanes/{dataPlaneId}/installCommand": {
      "get": {
        "operationId": "dataPlaneInstallCommand",
        "tags": [
          "DataPlane"
        ],
        "summary": "Get Data Plane Install Command",
        "parameters": [
          {
            "in": "path",
            "name": "dataPlaneId",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/dataplanes/dataplanes/{dataPlaneId}/archive": {
      "patch": {
        "operationId": "archiveDataPlane",
        "tags": [
          "DataPlane"
        ],
        "summary": "Archive Data Plane",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "dataPlaneId",
            "description": "Id of the Data Plane",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.dataplane.DataPlane"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/dataplanes/dataplanes/{dataPlaneId}/restart": {
      "patch": {
        "operationId": "restartAgent",
        "tags": [
          "DataPlane"
        ],
        "summary": "Restart Data Plane Agent",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "dataPlaneId",
            "description": "Id of the Data Plane",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.dataplane.DataPlane"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/dataplanes/dataplanes/{dataPlaneId}/upgrade": {
      "patch": {
        "operationId": "upgradeAgent",
        "tags": [
          "DataPlane"
        ],
        "summary": "Upgrade Data Plane Agent",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "dataPlaneId",
            "description": "Id of the Data Plane",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.dataplane.DataPlane"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/dataplanes/targetVersion": {
      "get": {
        "operationId": "getTargetDataPlaneVersion",
        "tags": [
          "DataPlane"
        ],
        "summary": "Get target Data Plane version",
        "parameters": null,
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.dataplane.TargetDataPlaneVersionDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/credential/full": {
      "get": {
        "operationId": "getFullCredentials",
        "tags": [
          "DataSourceCredential"
        ],
        "summary": "Get all credentials that match filter",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "query",
            "name": "dataSourceId",
            "description": "registered data source id",
            "required": false
          },
          {
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "in": "query",
            "name": "userName",
            "description": "name of owner or user credential has been shared with",
            "required": false
          },
          {
            "schema": {
              "nullable": true,
              "type": "string",
              "enum": [
                "Individual",
                "Shared"
              ]
            },
            "in": "query",
            "name": "credentialType",
            "description": "credential type",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.credential.api.FullDataSourceCredentialDto"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/tags": {
      "get": {
        "operationId": "list",
        "tags": [
          "Tags"
        ],
        "summary": "Retrieves Tags",
        "parameters": [
          {
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "in": "query",
            "name": "query",
            "description": "Optional filter for a tag by name",
            "required": false
          },
          {
            "schema": {
              "nullable": true,
              "format": "int32",
              "type": "integer"
            },
            "in": "query",
            "name": "limit",
            "description": "Query to request more or less tags",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.projects.api.ProjectTagDTO"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/featurestore/featureview/{featureViewId}/project/{projectId}": {
      "put": {
        "operationId": "addFeatureViewToProject",
        "tags": [
          "FeatureStore"
        ],
        "summary": "Add feature view to a project",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            },
            "in": "path",
            "name": "featureViewId",
            "description": "Feature view Id",
            "required": true
          },
          {
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            },
            "in": "path",
            "name": "projectId",
            "description": "Project Id",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.featurestore.api.FeatureViewDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/featurestore": {
      "get": {
        "operationId": "getFeatureStore",
        "tags": [
          "FeatureStore"
        ],
        "summary": "Get feature store",
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.featurestore.api.FeatureStoreDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/featurestore/featureview/{featureViewId}": {
      "get": {
        "operationId": "getFeatureView",
        "tags": [
          "FeatureStore"
        ],
        "summary": "Get feature view",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            },
            "in": "path",
            "name": "featureViewId",
            "description": "Feature view Id",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.featurestore.api.FeatureViewDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/featurestore/featureview/{featureViewId}/comments": {
      "get": {
        "operationId": "getFeatureViewCommentThreads",
        "tags": [
          "FeatureStore"
        ],
        "summary": "Get feature view comment threads",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            },
            "in": "path",
            "name": "featureViewId",
            "description": "Feature view Id",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.featurestore.api.FeatureViewCommentThreadDto"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/featurestore/{featureStoreId}": {
      "delete": {
        "operationId": "deleteFeatureStore",
        "tags": [
          "FeatureStore"
        ],
        "summary": "Delete feature store",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            },
            "in": "path",
            "name": "featureStoreId",
            "description": "Feature Store ID",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.featurestore.api.FeatureStoreDto"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/featurestore/comment/{commentId}": {
      "delete": {
        "operationId": "deleteFeatureViewComment",
        "tags": [
          "FeatureStore"
        ],
        "summary": "Delete feature view comment",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            },
            "in": "path",
            "name": "commentId",
            "description": "Comment ID",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.featurestore.api.FeatureViewCommentDto"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/featurestore/all": {
      "get": {
        "operationId": "getAllFeatureStores",
        "tags": [
          "FeatureStore"
        ],
        "summary": "Get all feature stores",
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.featurestore.api.FeatureStoreDto"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/featurestore/{featureStoreId}/config": {
      "put": {
        "operationId": "updateFeatureStoreConfig",
        "tags": [
          "FeatureStore"
        ],
        "summary": "Update feature store config",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "featureStoreId",
            "description": "featureStore id",
            "required": true
          }
        ],
        "requestBody": {
          "description": "updated feature store spec with config info to persist",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.featurestore.web.UpdateFeatureStoreConfigRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.featurestore.api.FeatureStoreDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/featurestore/featureView/comment": {
      "put": {
        "operationId": "updateFeatureViewComment",
        "tags": [
          "FeatureStore"
        ],
        "summary": "Update feature view comment",
        "parameters": [],
        "requestBody": {
          "description": "updated feature view comment info",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.featurestore.web.UpdateFeatureViewCommentRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.featurestore.api.FeatureViewCommentDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/featurestore/{featureStoreId}/projects/{projectId}": {
      "post": {
        "operationId": "enableFeatureStoreForProject",
        "tags": [
          "FeatureStore"
        ],
        "summary": "Enable feature store for a given project",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "featureStoreId",
            "description": "Feature store Id",
            "required": true
          },
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "projectId",
            "description": "Project Id",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.featurestore.api.FeatureStoreDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "delete": {
        "operationId": "disableFeatureStoreForProject",
        "tags": [
          "FeatureStore"
        ],
        "summary": "Disable feature store for a given project",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "featureStoreId",
            "description": "Feature store Id",
            "required": true
          },
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "projectId",
            "description": "Project Id",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.featurestore.api.FeatureStoreDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/featurestore/featureviews": {
      "get": {
        "operationId": "getFeatureViews",
        "tags": [
          "FeatureStore"
        ],
        "summary": "Get all feature views in feature store",
        "parameters": [],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.featurestore.api.FeatureViewDto"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/featurestore/featureviews/project/{projectId}": {
      "get": {
        "operationId": "getFeatureViewsByProjectAndUser",
        "tags": [
          "FeatureStore"
        ],
        "summary": "Get feature views by project and user",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            },
            "in": "path",
            "name": "projectId",
            "description": "Project Id",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.featurestore.api.FeatureViewDto"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/featurestore/featureview/{featureViewId}/code": {
      "get": {
        "operationId": "getCodeSnippet",
        "tags": [
          "FeatureStore"
        ],
        "summary": "Get code snippet for feature view",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            },
            "in": "path",
            "name": "featureViewId",
            "description": "Feature view Id",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.featurestore.api.FeatureStoreCodeSnippetDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/featurestore/config": {
      "get": {
        "operationId": "getOfflineStoreConfigs",
        "tags": [
          "FeatureStore"
        ],
        "summary": "Get config metadata for all offline store types",
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.featurestore.model.OfflineStoreConfig"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/featurestore/config/{offlineStoreType}": {
      "get": {
        "operationId": "getOfflineStoreConfigByType",
        "tags": [
          "FeatureStore"
        ],
        "summary": "Get config metadata for an offline store type",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "path",
            "name": "offlineStoreType",
            "description": "FeatureStore Type",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.featurestore.model.OfflineStoreConfig"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/featurestore/onlinestoreconfig": {
      "get": {
        "operationId": "getOnlineStoreConfigs",
        "tags": [
          "FeatureStore"
        ],
        "summary": "Get config metadata for all online store types",
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.featurestore.model.OnlineStoreConfig"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/featurestore/onlinestoreconfig/{onlineStoreType}": {
      "get": {
        "operationId": "getOnlineStoreConfigByType",
        "tags": [
          "FeatureStore"
        ],
        "summary": "Get config metadata for an online store type",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "path",
            "name": "onlineStoreType",
            "description": "FeatureStore Type",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.featurestore.model.OnlineStoreConfig"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/featurestore/featureviews/{featureViewId}/projects": {
      "get": {
        "operationId": "getProjectsForFeatureView",
        "tags": [
          "FeatureStore"
        ],
        "summary": "Get available projects for given feature view to be added to",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            },
            "in": "path",
            "name": "featureViewId",
            "description": "Feature View Id",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.featurestore.api.FeatureViewAddProjectDto"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/featurestore/syncstatus": {
      "put": {
        "operationId": "updateFeatureStoreSyncResult",
        "tags": [
          "FeatureStore"
        ],
        "summary": "update the feature store sync result",
        "parameters": [],
        "requestBody": {
          "description": "the feature store sync result",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.featurestore.web.UpdateFeatureStoreSyncResultRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/featurestore/{featureStoreId}/credentialconfigs": {
      "get": {
        "operationId": "getCredentialConfigs",
        "tags": [
          "FeatureStore"
        ],
        "summary": "Get the required credential configs for specified feature store",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            },
            "in": "path",
            "name": "featureStoreId",
            "description": "Feature store Id",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.featurestore.api.CredentialConfigs"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/frontend/snippets": {
      "get": {
        "operationId": "list",
        "tags": [
          "Frontend"
        ],
        "summary": "Retrieves snippets for the frontend",
        "parameters": [],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/frontend/config": {
      "get": {
        "operationId": "frontendConfig",
        "tags": [
          "Frontend"
        ],
        "summary": "Retrieves frontend configuration",
        "parameters": [],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.nucleus.lib.frontend.FrontendConfigDto"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/modelManager/{modelVersionId}/logs": {
      "get": {
        "operationId": "downloadLogs",
        "tags": [
          "ModelManager"
        ],
        "summary": "download logs for a model for a given time range",
        "parameters": [
          {
            "in": "path",
            "name": "modelVersionId",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            }
          },
          {
            "in": "query",
            "name": "startMillis",
            "schema": {
              "format": "int64",
              "type": "integer"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "endMillis",
            "schema": {
              "format": "int64",
              "type": "integer"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/x-ndjson": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/modelManager/recordInvocation": {
      "post": {
        "operationId": "recordInvocation",
        "tags": [
          "ModelManager"
        ],
        "summary": "Record invocation",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "invocation recording request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.modelmanager.web.RecordInvocation"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success"
          }
        }
      }
    },
    "/modelManager/{modelVersionId}/getTimeSeries": {
      "get": {
        "operationId": "getTimeSeriesForModelApiInvocations",
        "tags": [
          "ModelManager"
        ],
        "summary": "Get timeseries of data for model API invocation",
        "parameters": [
          {
            "in": "path",
            "name": "modelVersionId",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            }
          },
          {
            "in": "query",
            "name": "startTime",
            "schema": {
              "type": "number"
            },
            "required": true,
            "description": "start time to get the timeseries"
          },
          {
            "in": "query",
            "name": "endTime",
            "schema": {
              "type": "number"
            },
            "required": true,
            "description": "end time to get the timeseries"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.modelmanager.api.ModelApiAggregatedUsageStatistics"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/modelManager/{modelVersionId}/getLast24HoursInvocationCounts": {
      "get": {
        "operationId": "getLast24HoursInvocationCount",
        "tags": [
          "ModelManager"
        ],
        "summary": "Get last 24 hour invocation counts for model APIs",
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.modelmanager.api.ModelApiLast24HourInvocationCount"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "modelVersionId",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            }
          }
        ]
      }
    },
    "/modelManager/{modelVersionId}/linkModeltoGoal": {
      "post": {
        "operationId": "linkModelToGoal",
        "tags": [
          "ModelManager"
        ],
        "summary": "Link model API to a goal",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "modelVersionId",
            "description": "Domino id of the model API version",
            "required": true
          }
        ],
        "requestBody": {
          "description": "JSON object with information for linking model API to a goal",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.modelmanager.web.LinkmodelToGoal"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.modelmanager.api.ModelGoal"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/modelManager/{modelVersionId}/unlinkModelFromGoal": {
      "post": {
        "operationId": "unlinkModelFromGoal",
        "tags": [
          "ModelManager"
        ],
        "summary": "Unlink model API from a goal",
        "parameters": [
          {
            "in": "path",
            "name": "modelVersionId",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            }
          }
        ],
        "requestBody": {
          "description": "JSON object with information for unlinking model API from a goal",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.modelmanager.web.UnlinkmodelFromGoal"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.modelmanager.api.ModelGoal"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/modelManager/{modelId}/getModelReproductionDetails": {
      "get": {
        "operationId": "getModelReproductionDetails",
        "tags": [
          "ModelManager"
        ],
        "summary": "Get model API's all model API versions reproduce in workspace details",
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.modelmanager.api.ModelVersionReproduceInWorkspaceDetails"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "modelId",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            }
          }
        ]
      }
    },
    "/modelManager/getModels": {
      "get": {
        "operationId": "getModelsByProject",
        "tags": [
          "ModelManager"
        ],
        "summary": "Get all models APIs in a project",
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.modelmanager.api.Model"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "parameters": [
          {
            "in": "query",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            }
          }
        ]
      }
    },
    "/modelManager/getModels/environment/{environmentId}": {
      "get": {
        "operationId": "getModelsByEnvironment",
        "tags": [
          "ModelManager"
        ],
        "summary": "Get all models APIs that use a certain domino environment",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "environmentId",
            "description": "ID of the Environment",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.modelmanager.api.Model"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/modelManager/buildModelImage": {
      "post": {
        "operationId": "buildModelImage",
        "tags": [
          "ModelManager"
        ],
        "summary": "Build a Model API Image",
        "parameters": [],
        "requestBody": {
          "description": "JSON object with information for building a model API image",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.modelmanager.web.BuildModelImageApiRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Request accepted, building of model API image continues offline",
            "schema": {
              "$ref": "#/components/schemas/domino.modelmanager.api.ModelBuild"
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/modelManager/getBuildLogs/{modelId}/{modelVersionId}": {
      "get": {
        "operationId": "getBuildLogs",
        "tags": [
          "ModelManager"
        ],
        "summary": "Get model API image build logs. Returns logs as String",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "modelId",
            "description": "Id of model API to return build logs for.",
            "required": true
          },
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "modelVersionId",
            "description": "Id of the version of the model API to return build logs for.",
            "required": true
          },
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "query",
            "name": "buildId",
            "description": "build Id of the model API to return build logs for.",
            "required": false
          },
          {
            "schema": {
              "nullable": true,
              "format": "int64",
              "type": "number"
            },
            "in": "query",
            "name": "sinceTimeNano",
            "description": "The epoch time in nanoseconds to start fetching from, such as \"1543538813745986325\". \"0\" by default and will typically be used for a timestamp-based offset log fetching strategy.",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.modelmanager.api.ModelBuildLogs"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/modelManager/getBuildLogsV2/{modelId}/{modelVersionId}": {
      "get": {
        "operationId": "getBuildLogsV2",
        "tags": [
          "ModelManager"
        ],
        "summary": "Get model API image build logs version 2. Returns logs as LogLine - JSON formatted and detailed metadata",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "modelId",
            "description": "Id of model API to return build logs for.",
            "required": true
          },
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "modelVersionId",
            "description": "Id of the version of the model API to return build logs for.",
            "required": true
          },
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "query",
            "name": "buildId",
            "description": "build Id of the model API to return build logs for.",
            "required": false
          },
          {
            "schema": {
              "nullable": true,
              "format": "int64",
              "type": "number"
            },
            "in": "query",
            "name": "sinceTimeNano",
            "description": "The epoch time in nanoseconds to start fetching from, such as \"1543538813745986325\". \"0\" by default and will typically be used for a timestamp-based offset log fetching strategy.",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.modelmanager.api.ModelBuildLogsV2"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/modelManager/getExportLogs/{modelId}/{modelVersionId}": {
      "get": {
        "operationId": "getExportLogs",
        "tags": [
          "ModelManager"
        ],
        "summary": "Get model API image export logs",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "modelId",
            "description": "Id of model API to return build logs for.",
            "required": true
          },
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "modelVersionId",
            "description": "Id of the version of the model API to return build logs for.",
            "required": true
          },
          {
            "schema": {
              "nullable": true,
              "format": "int64",
              "type": "number"
            },
            "in": "query",
            "name": "sinceTimeNano",
            "description": "The epoch time in nanoseconds to start fetching from, such as \"1543538813745986325\". \"0\" by default and will typically be used for a timestamp-based offset log fetching strategy.",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.modelmanager.api.ModelExportLogs"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/modelManager/getInstanceLogs/{modelId}/{modelVersionId}": {
      "get": {
        "operationId": "getInstanceLogs",
        "tags": [
          "ModelManager"
        ],
        "summary": "Get model API image instance logs",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "modelId",
            "description": "Id of model API to return build logs for.",
            "required": true
          },
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "modelVersionId",
            "description": "Id of the version of the model API to return build logs for.",
            "required": true
          },
          {
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "in": "query",
            "name": "podName",
            "description": "The pod name of the model API instance.",
            "required": false
          },
          {
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "in": "query",
            "name": "containerName",
            "description": "The container name of the model API instance.",
            "required": false
          },
          {
            "schema": {
              "nullable": true,
              "format": "int64",
              "type": "number"
            },
            "in": "query",
            "name": "sinceTimeNano",
            "description": "The epoch time in nanoseconds to start fetching from, such as \"1543538813745986325\". \"0\" by default and will typically be used for a timestamp-based offset log fetching strategy.",
            "required": false
          },
          {
            "schema": {
              "nullable": true,
              "type": "boolean"
            },
            "in": "query",
            "name": "tail",
            "description": "Whether to fetch from tail or not.",
            "required": false
          },
          {
            "in": "query",
            "name": "maxResults",
            "schema": {
              "type": "number"
            },
            "required": false,
            "description": "The maximum number of logs to retrieve."
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.modelmanager.api.ModelInstanceLogs"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/modelManager/getModelDeploymentLabels/{modelId}/{modelVersionId}": {
      "get": {
        "operationId": "getModelDeploymentLabels",
        "tags": [
          "ModelManager"
        ],
        "summary": "Get deployment labels for a model API",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "modelId",
            "description": "Id of model API to return deployment labels for.",
            "required": true
          },
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "modelVersionId",
            "description": "Id of the version of the model API to return deployment labels for.",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.modelmanager.api.DeploymentLabels"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/modelManager/getModelExportVersions/{exportId}": {
      "get": {
        "operationId": "getModelExportVersions",
        "tags": [
          "ModelManager"
        ],
        "summary": "Gets all model API export versions for a given export id.",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "exportId",
            "description": "Id of the export to get model API export versions for.",
            "required": true
          },
          {
            "schema": {
              "nullable": true,
              "format": "int32",
              "type": "number",
              "minimum": 0
            },
            "in": "query",
            "name": "startIndex",
            "description": "Index of the first result desired by the client.",
            "required": false
          },
          {
            "schema": {
              "nullable": true,
              "format": "int32",
              "type": "number",
              "minimum": 1
            },
            "in": "query",
            "name": "count",
            "description": "Desired number of results per page.",
            "required": false
          },
          {
            "schema": {
              "nullable": true,
              "type": "string",
              "enum": [
                "created"
              ]
            },
            "in": "query",
            "name": "sort",
            "description": "Field name to sort results on.",
            "required": false
          },
          {
            "schema": {
              "nullable": true,
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            },
            "in": "query",
            "name": "sortDirection",
            "description": "Direction to sort results in. Default value depends on sort field.",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.modelmanager.api.responses.ModelExportVersionsApiResponse"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/modelManager/getModelExport/{exportId}": {
      "get": {
        "operationId": "getModelExport",
        "tags": [
          "ModelManager"
        ],
        "summary": "Gets model API export for a given export id",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "exportId",
            "description": "Id of the export to retrieve",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.modelmanager.api.ModelExport"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/modelManager/getModelExports/{projectId}": {
      "get": {
        "operationId": "getModelExportsByProjectId",
        "tags": [
          "ModelManager"
        ],
        "summary": "Gets all model API exports for a given project id.",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "projectId",
            "description": "Id of the project to get model API exports for.",
            "required": true
          },
          {
            "schema": {
              "nullable": true,
              "format": "int32",
              "type": "number",
              "minimum": 0
            },
            "in": "query",
            "name": "startIndex",
            "description": "Index of the first result desired by the client.",
            "required": false
          },
          {
            "schema": {
              "nullable": true,
              "format": "int32",
              "type": "number",
              "minimum": 1
            },
            "in": "query",
            "name": "count",
            "description": "Desired number of results per page.",
            "required": false
          },
          {
            "schema": {
              "nullable": true,
              "type": "string",
              "enum": [
                "created",
                "modelName",
                "target"
              ]
            },
            "in": "query",
            "name": "sort",
            "description": "Field name to sort results on.",
            "required": false
          },
          {
            "schema": {
              "nullable": true,
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            },
            "in": "query",
            "name": "sortDirection",
            "description": "Direction to sort results in. Default value depends on sort field.",
            "required": false
          },
          {
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "in": "query",
            "name": "searchPattern",
            "description": "Optional search term to filter by (filters on modelName field)",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.modelmanager.api.responses.ModelExportsApiResponse"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/modelManager/archiveModelExport/{exportId}": {
      "delete": {
        "operationId": "archiveModelExport",
        "tags": [
          "ModelManager"
        ],
        "summary": "Archives model API export for a given export id",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "exportId",
            "description": "Id of the export to archive",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/modelManager/getExportVersionLogs/{exportVersionId}": {
      "get": {
        "operationId": "getExportVersionLogs",
        "tags": [
          "ModelManager"
        ],
        "summary": "Get model API image export version logs",
        "parameters": [
          {
            "in": "path",
            "name": "exportVersionId",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.modelmanager.api.ModelExportVersionLogs"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/modelManager/exportImageForSagemakerWithoutModel": {
      "post": {
        "operationId": "exportImageForSagemakerWithoutModel",
        "tags": [
          "ModelManager"
        ],
        "summary": "Export an image to Sagemaker wtihout a Model Dependency",
        "parameters": [],
        "requestBody": {
          "description": "JSON object with information for exporting an image into Sagemaker",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.modelmanager.web.ExportImageForSagemakerWithoutModelRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Request accepted, exporting of image continues offline",
            "schema": {
              "$ref": "#/components/schemas/domino.modelmanager.web.ExportVersionStatusWithoutModelResponse"
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/modelManager/exportImageForSnowflake/{modelId}/{modelVersionId}": {
      "post": {
        "operationId": "exportImageForSnowflake",
        "tags": [
          "ModelManager"
        ],
        "summary": "Export a Model API to Snowflake",
        "parameters": [
          {
            "in": "path",
            "name": "modelId",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            }
          },
          {
            "in": "path",
            "name": "modelVersionId",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            }
          }
        ],
        "requestBody": {
          "description": "JSON object with information for exporting a model API into the Snowflake API",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.modelmanager.api.SnowflakeExport"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Request accepted, exporting of model API image continues offline",
            "schema": {
              "$ref": "#/components/schemas/domino.modelmanager.api.ModelExportVersionStatus"
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/modelManager/ui/models": {
      "get": {
        "operationId": "getModelsForUI",
        "tags": [
          "ModelManager"
        ],
        "summary": "Get model APIs for display in the UI",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            },
            "in": "query",
            "name": "projectId",
            "description": "Project ID filter",
            "required": false
          },
          {
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            },
            "in": "query",
            "name": "environmentId",
            "description": "Environment ID filter",
            "required": false
          },
          {
            "schema": {
              "nullable": true,
              "format": "int32",
              "type": "number",
              "minimum": 1
            },
            "in": "query",
            "name": "pageNumber",
            "description": "Page number of the desired results.",
            "required": false
          },
          {
            "schema": {
              "nullable": true,
              "format": "int32",
              "type": "number",
              "minimum": 1
            },
            "in": "query",
            "name": "pageSize",
            "description": "Desired number of results per page.",
            "required": false
          },
          {
            "schema": {
              "nullable": true,
              "type": "string",
              "enum": [
                "name",
                "project",
                "modified"
              ]
            },
            "in": "query",
            "name": "sortBy",
            "description": "Field name to sort results on.",
            "required": false
          },
          {
            "schema": {
              "nullable": true,
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            },
            "in": "query",
            "name": "sortDirection",
            "description": "Direction to sort results in.",
            "required": false
          },
          {
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "in": "query",
            "name": "searchPattern",
            "description": "Optional search term to filter by (filters on modelName field).",
            "required": false
          },
          {
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "in": "query",
            "name": "registeredModelName",
            "description": "Optional search term to filter by",
            "required": false
          },
          {
            "schema": {
              "nullable": true,
              "format": "int32",
              "type": "number"
            },
            "in": "query",
            "name": "registeredModelVersion",
            "description": "Optional search term to filter by (must be accompanied with registeredModelName).",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/components/schemas/domino.modelmanager.api.ModelsForUIApiResponse"
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/modelManager/ui/permissions": {
      "get": {
        "operationId": "getModelPermissionsForProject",
        "tags": [
          "ModelManager"
        ],
        "summary": "Get current user's permissions to inform behavior in the UI",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            },
            "in": "query",
            "name": "projectId",
            "description": "Project ID. canCreateModel is scoped to the project level.",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/components/schemas/domino.modelmanager.api.responses.ModelPermissionsForUIApiResponse"
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/modelManager/monitoring/permissions": {
      "post": {
        "operationId": "getModelPermissionsForMonitoring",
        "tags": [
          "ModelManager"
        ],
        "summary": "Get current user's permissions to inform behavior for monitoring. This is a POST instead of a GET to allow modelIds to go into the request body rather than query params, which can lead to an error for URI length.",
        "parameters": [],
        "requestBody": {
          "description": "JSON object with information about what permissions to return to inform behavior for monitoring",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.modelmanager.web.ModelPermissionsForMonitoringRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/domino.modelmanager.api.responses.ModelPermissionForMonitoringApiResponse"
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/runs/recent": {
      "get": {
        "operationId": "listRecentRuns",
        "tags": [
          "Runs"
        ],
        "summary": "retrieves list of active and recently completed runs",
        "parameters": [],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.common.run.interfaces.RunMonolithDTO"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/runs/recentlyStarted": {
      "get": {
        "operationId": "listRecentlyStartedRunsWithLimit",
        "tags": [
          "Runs"
        ],
        "summary": "retrieves list of recently started runs",
        "parameters": [
          {
            "schema": {
              "default": 15,
              "nullable": true,
              "format": "int32",
              "type": "integer"
            },
            "in": "query",
            "name": "limit",
            "description": "Max number of runs to fetch. Defaults to 15.",
            "required": false
          },
          {
            "schema": {
              "nullable": true,
              "type": "string",
              "enum": [
                "job",
                "workspace",
                "other"
              ]
            },
            "in": "query",
            "name": "workloadType",
            "description": "The type of workload to filter on (optional). If not set, no filter will be used.",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.common.run.interfaces.RunMonolithDTO"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/runs": {
      "post": {
        "operationId": "v4Start",
        "tags": [
          "Runs"
        ],
        "summary": "Starts a new Run",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.common.run.interfaces.NewRunDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.common.run.interfaces.RunDTO"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/scheduledruns": {
      "get": {
        "operationId": "listScheduledRuns",
        "tags": [
          "Scheduled Runs"
        ],
        "summary": "retrieves list of scheduled run definitions for a given user id",
        "parameters": [
          {
            "in": "query",
            "name": "userId",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.scheduledjob.api.LegacyScheduledRunDTO"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/scheduledruns/publishedModelApis/{modelApiId}/count": {
      "get": {
        "operationId": "getModelApiScheduledRunCount",
        "tags": [
          "Scheduled Runs"
        ],
        "summary": "retrieves a count of scheduled runs which publish a specific Model API",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "modelApiId",
            "description": "Id of the Model API to check is being published",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/v4/models/buildModelImage": {
      "post": {
        "operationId": "buildModelImage",
        "tags": [
          "ModelManager"
        ],
        "summary": "Build a Model API Image",
        "parameters": [],
        "requestBody": {
          "description": "JSON object with information for building a model API image",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.modelmanager.web.BuildModelImageApiRequest"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Request accepted, building of model API image continues offline",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/domino.modelmanager.web.BuildModelImageApiResponse"
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/v4/models/{modelId}/{modelVersionId}/getBuildStatus": {
      "get": {
        "operationId": "getBuildStatus",
        "tags": [
          "ModelManager"
        ],
        "summary": "Get model API image build status",
        "parameters": [
          {
            "in": "path",
            "name": "modelId",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            }
          },
          {
            "in": "path",
            "name": "modelVersionId",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.modelmanager.web.ModelBuildStatusApiResponse"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/v4/models/{modelId}/{modelVersionId}/exportImageToRegistry": {
      "post": {
        "operationId": "exportImageToRegistry",
        "tags": [
          "ModelManager"
        ],
        "summary": "Export a Model API Image",
        "parameters": [
          {
            "in": "path",
            "name": "modelId",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            }
          },
          {
            "in": "path",
            "name": "modelVersionId",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            }
          }
        ],
        "requestBody": {
          "description": "JSON object with information for exporting a model API image",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.modelmanager.web.ExportModelImageApiRequest"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Request accepted, exporting of model API image continues offline",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/domino.modelmanager.web.ModelExportVersionStatusApiResponse"
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/v4/models/{exportId}/getExportImageStatus": {
      "get": {
        "operationId": "getExportImageStatus",
        "tags": [
          "ModelManager"
        ],
        "summary": "Get model API image export status",
        "parameters": [
          {
            "in": "path",
            "name": "exportId",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.modelmanager.web.ModelExportVersionStatusApiResponse"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/v4/models/{modelId}/{modelVersionId}/getBuildLogs": {
      "get": {
        "operationId": "getBuildLogs",
        "tags": [
          "ModelManager"
        ],
        "summary": "Get model API image build logs",
        "parameters": [
          {
            "in": "path",
            "name": "modelId",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            }
          },
          {
            "in": "path",
            "name": "modelVersionId",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.modelmanager.web.ModelBuildLogsApiResponse"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/v4/models/{exportId}/getExportLogs": {
      "get": {
        "operationId": "getExportVersionLogs",
        "tags": [
          "ModelManager"
        ],
        "summary": "Get model API image export logs",
        "parameters": [
          {
            "in": "path",
            "name": "exportId",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.modelmanager.web.ModelExportLogsApiResponse"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/v4/models/{modelId}/{modelVersionId}/startModelDeployment": {
      "post": {
        "operationId": "startDeployment",
        "tags": [
          "ModelManager"
        ],
        "summary": "Start a deployment of model API version",
        "parameters": [
          {
            "in": "path",
            "name": "modelId",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            }
          },
          {
            "in": "path",
            "name": "modelVersionId",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.modelmanager.web.ModelDeploymentStatusApiResponse"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/v4/models/{modelId}/{modelVersionId}/stopModelDeployment": {
      "post": {
        "operationId": "stopDeployment",
        "tags": [
          "ModelManager"
        ],
        "summary": "Stop the deployment of model API version",
        "parameters": [
          {
            "in": "path",
            "name": "modelId",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            }
          },
          {
            "in": "path",
            "name": "modelVersionId",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.modelmanager.web.ModelDeploymentStatusApiResponse"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/v4/models/{modelId}/{modelVersionId}/getModelDeploymentStatus": {
      "get": {
        "operationId": "getDeploymentStatus",
        "tags": [
          "ModelManager"
        ],
        "summary": "Get deployment status for a model API version",
        "parameters": [
          {
            "in": "path",
            "name": "modelId",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            }
          },
          {
            "in": "path",
            "name": "modelVersionId",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.modelmanager.web.ModelDeploymentStatusApiResponse"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/v4/models/{modelId}/{modelVersionId}/modelDeploymentLogs": {
      "get": {
        "operationId": "getDeploymentLogs",
        "tags": [
          "ModelManager"
        ],
        "summary": "Get deployment logs for a model API version",
        "parameters": [
          {
            "in": "path",
            "name": "modelId",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            }
          },
          {
            "in": "path",
            "name": "modelVersionId",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.modelmanager.web.ModelDeploymentLogsApiResponse"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/v4/models/{modelId}/{modelVersionId}/exportImageForSagemaker": {
      "post": {
        "operationId": "exportImageForSagemaker",
        "tags": [
          "ModelManager"
        ],
        "summary": "Export a Model API Image",
        "parameters": [
          {
            "in": "path",
            "name": "modelId",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            }
          },
          {
            "in": "path",
            "name": "modelVersionId",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            }
          }
        ],
        "requestBody": {
          "description": "JSON object with information for exporting a model API image",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.modelmanager.web.ExportImageForSagemakerApiRequest"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Request accepted, exporting of model API image continues offline",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/domino.modelmanager.web.ModelExportVersionStatusApiResponse"
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/v4/models/{modelId}/{modelVersionId}/exportImageForNvidia": {
      "post": {
        "operationId": "exportImageForNvidia",
        "tags": [
          "ModelManager"
        ],
        "summary": "Export a Model API Image to NVIDIA Fleet command [BETA]",
        "parameters": [
          {
            "in": "path",
            "name": "modelId",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            }
          },
          {
            "in": "path",
            "name": "modelVersionId",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            }
          }
        ],
        "requestBody": {
          "description": "JSON object with information for exporting a model API image",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.modelmanager.web.ExportImageForNvidiaApiRequest"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Request accepted, exporting of model API image continues offline",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/domino.modelmanager.web.ModelExportVersionStatusApiResponse"
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/v4/models/{modelId}/{modelVersionId}/exportImageForSnowflake": {
      "post": {
        "operationId": "exportImageForSnowflake",
        "tags": [
          "ModelManager"
        ],
        "summary": "Export a Model API to Snowflake",
        "parameters": [
          {
            "in": "path",
            "name": "modelId",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            }
          },
          {
            "in": "path",
            "name": "modelVersionId",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            }
          }
        ],
        "requestBody": {
          "description": "JSON object with information for exporting a model API into the Snowflake Api",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.modelmanager.web.ExportImageForSnowflakeApiRequest"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Request accepted, exporting of model API image continues offline",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/domino.modelmanager.web.ModelExportVersionStatusApiResponse"
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/executions/{executionId}/events": {
      "get": {
        "operationId": "getExecutionEvents",
        "tags": [
          "Execution Events"
        ],
        "summary": "Retrieves a list of execution events for a given execution id",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "executionId",
            "description": "Execution Id",
            "required": true
          },
          {
            "schema": {
              "nullable": true,
              "format": "int32",
              "type": "number"
            },
            "in": "query",
            "name": "pageSize",
            "description": "Number of events to fetch",
            "required": false
          },
          {
            "schema": {
              "nullable": true,
              "format": "int32",
              "type": "number"
            },
            "in": "query",
            "name": "pageNumber",
            "description": "Page number to fetch",
            "required": false
          },
          {
            "schema": {
              "nullable": true,
              "format": "int32",
              "type": "number"
            },
            "in": "query",
            "name": "sortOrder",
            "description": "Sort order (1 for ascending, -1 for descending)",
            "required": false
          },
          {
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "in": "query",
            "name": "sortBy",
            "description": "Field to sort by",
            "required": false
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "required": false
          },
          {
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "in": "query",
            "name": "excludeIgnoredEvents",
            "description": "If true, do not return events with Ignored status",
            "required": false
          },
          {
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "in": "query",
            "name": "excludeIgnoredHeartbeats",
            "description": "If true, do not return heartbeats with Ignored status",
            "required": false
          },
          {
            "schema": {
              "default": true,
              "nullable": true,
              "type": "string"
            },
            "in": "query",
            "name": "inline",
            "description": "If true, open the execution event history JSON payload in the browser, else download a file called `domino_event_log_[execution id].json`.",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.computegrid.ExecutionEventDto"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/executions/{executionId}/events.csv": {
      "get": {
        "operationId": "getExecutionEventsCsv",
        "tags": [
          "Execution Events"
        ],
        "summary": "Retrieves a list of execution events for a given execution id in csv format",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "executionId",
            "description": "Execution Id",
            "required": true
          },
          {
            "schema": {
              "nullable": true,
              "format": "int32",
              "type": "number"
            },
            "in": "query",
            "name": "pageSize",
            "description": "Number of events to fetch",
            "required": false
          },
          {
            "schema": {
              "nullable": true,
              "format": "int32",
              "type": "number"
            },
            "in": "query",
            "name": "pageNumber",
            "description": "Page number to fetch",
            "required": false
          },
          {
            "schema": {
              "nullable": true,
              "format": "int32",
              "type": "number"
            },
            "in": "query",
            "name": "sortOrder",
            "description": "Sort order (1 for ascending, -1 for descending)",
            "required": false
          },
          {
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "in": "query",
            "name": "sortBy",
            "description": "Field to sort by",
            "required": false
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "required": false
          },
          {
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "in": "query",
            "name": "excludeIgnoredEvents",
            "description": "If true, do not return events with Ignored status",
            "required": false
          },
          {
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "in": "query",
            "name": "excludeIgnoredHeartbeats",
            "description": "If true, do not return heartbeats with Ignored status",
            "required": false
          },
          {
            "schema": {
              "default": true,
              "nullable": true,
              "type": "string"
            },
            "in": "query",
            "name": "inline",
            "description": "If true, open the file in the browser, else download a file called `domino_event_log_[execution id].csv`.",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/executions/{executionId}/metrics/{metricName}/trace": {
      "post": {
        "operationId": "traceExecution",
        "tags": [
          "Execution Events"
        ],
        "summary": "Starts (or ends) an execution trace event for a given execution id",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "executionId",
            "description": "Execution Id",
            "required": true
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "path",
            "name": "metricName",
            "description": "Metric name",
            "required": true
          },
          {
            "schema": {
              "default": 0,
              "format": "int64",
              "type": "integer"
            },
            "in": "query",
            "name": "epochMillisOrZero",
            "description": "time in milliseconds from epoch (UNIX timestamp) or 0 to use server current time",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "success"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/executions/{executionId}/metrics/{metricName}/increment": {
      "post": {
        "operationId": "incrementExecutionCounter",
        "tags": [
          "Execution Events"
        ],
        "summary": "Increments an execution counter event for a given execution id (creates if missing) by 1",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "executionId",
            "description": "Execution Id",
            "required": true
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "path",
            "name": "metricName",
            "description": "Metric name",
            "required": true
          },
          {
            "schema": {
              "default": 0,
              "format": "int64",
              "type": "integer"
            },
            "in": "query",
            "name": "epochMillisOrZero",
            "description": "time in milliseconds from epoch (UNIX timestamp) or 0 to use server current time",
            "required": false
          },
          {
            "schema": {
              "default": 1,
              "format": "int32",
              "type": "integer"
            },
            "in": "query",
            "name": "count",
            "description": "count to increase counter by (defaults to 1)",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "success"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/files/search/{projectId}": {
      "post": {
        "operationId": "fileSearch",
        "tags": [
          "Files"
        ],
        "summary": "Search for files in a project by matching on path with string queries",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "path",
            "name": "projectId",
            "description": "Project in which to look for files",
            "required": true
          },
          {
            "in": "query",
            "name": "maxResults",
            "schema": {
              "nullable": true,
              "format": "int32",
              "type": "integer"
            },
            "required": false
          }
        ],
        "requestBody": {
          "description": "JSON object with the search query",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.files.interface.FileSearchQuery"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.files.interface.FileMatchesDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/files/comment": {
      "post": {
        "operationId": "addFileComment",
        "tags": [
          "Files"
        ],
        "summary": "Create a File Comment",
        "parameters": [],
        "requestBody": {
          "description": "JSON object with information to comment on the file",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.files.web.CreateFileComment"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.files.interface.CommentThread"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "get": {
        "operationId": "getFileCommentThread",
        "tags": [
          "Files"
        ],
        "summary": "Get file comments",
        "parameters": [
          {
            "in": "query",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project Id to which the file belongs"
          },
          {
            "in": "query",
            "name": "fileName",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "file name to add the comment to"
          },
          {
            "in": "query",
            "name": "commitId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "commit id of the file"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.files.interface.CommentThread"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/files/comment/archive": {
      "post": {
        "operationId": "archiveFileComment",
        "tags": [
          "Files"
        ],
        "summary": "Archive a File Comment",
        "parameters": [],
        "requestBody": {
          "description": "JSON object with information to comment on the file",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.files.web.ArchiveFileComment"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.files.interface.Comment"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/files/linkToGoal": {
      "post": {
        "operationId": "linkFileToGoal",
        "tags": [
          "Files"
        ],
        "summary": "Link a file to a goal",
        "parameters": [],
        "requestBody": {
          "description": "JSON object with information to link file to a goal",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.files.web.LinkFileToGoal"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.files.interface.FileGoal"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/files/unlinkFromGoal": {
      "post": {
        "operationId": "unlinkFileFromGoal",
        "tags": [
          "Files"
        ],
        "summary": "Unlink a file from a goal",
        "parameters": [],
        "requestBody": {
          "description": "JSON object with information to unlink file from a goal",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.files.web.UnlinkFileFromGoal"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.files.interface.FileGoal"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/files/fullDelete": {
      "post": {
        "operationId": "fullDelete",
        "tags": [
          "Files"
        ],
        "summary": "Full delete a file in a project starting at a commit",
        "parameters": [],
        "requestBody": {
          "description": "JSON object with information to delete a file permanently",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.files.web.FullDeleteSpecification"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.files.interface.DeletePropsDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/files/fullyDeleted": {
      "get": {
        "operationId": "fullyDeleted",
        "tags": [
          "Files"
        ],
        "summary": "Check permanent deletion status of a file in a project starting at a commit",
        "parameters": [
          {
            "in": "query",
            "name": "filePath",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "path to file"
          },
          {
            "in": "query",
            "name": "projectId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of the project the file is in"
          },
          {
            "in": "query",
            "name": "commitId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of the commit for this file"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/domino.files.interface.DeletePropsDto"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/files/removeFile": {
      "post": {
        "operationId": "removeFile",
        "tags": [
          "Files"
        ],
        "summary": "Git remove single file or directory",
        "parameters": [],
        "requestBody": {
          "description": "JSON object with information to remove this file or directory",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.files.web.FileOrFolderToRemove"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/files/removeFiles": {
      "post": {
        "operationId": "removeFiles",
        "tags": [
          "Files"
        ],
        "summary": "Remove many files and/or directories",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.files.web.FilesAndFoldersToRemove"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/files/moveFileOrFolder": {
      "post": {
        "operationId": "moveFileOrFolder",
        "tags": [
          "Files"
        ],
        "summary": "Move a file or a folder from one path to another",
        "parameters": [],
        "requestBody": {
          "description": "What to move and what it is",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.files.web.FileOrFolderToMove"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/files/{projectId}/readme": {
      "get": {
        "operationId": "getProjectReadme",
        "tags": [
          "Files"
        ],
        "summary": "Get project readme file",
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.files.interface.ProjectReadmeFile"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/files/{projectId}/branches": {
      "get": {
        "operationId": "listBranchesForProject",
        "tags": [
          "Files"
        ],
        "summary": "List branches for a project",
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            }
          },
          {
            "in": "query",
            "name": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "search query for branch name"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.files.interface.BranchInfo"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/files/{projectId}/commits": {
      "get": {
        "operationId": "getCommitsForProject",
        "tags": [
          "Files"
        ],
        "summary": "Get all commits for a branch for a Project",
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            }
          },
          {
            "in": "query",
            "name": "branchName",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "branch to list commits for"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.files.interface.CommitInfo"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/files/browseDirectories": {
      "get": {
        "operationId": "listDirectoriesAtPath",
        "tags": [
          "Files"
        ],
        "summary": "Get all directories for a commit at a path in a project",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "ownerUsername",
            "description": "username of project owner",
            "required": true
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "projectName",
            "description": "name of project",
            "required": true
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "filePath",
            "description": "file path to query",
            "required": true
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "commitId",
            "description": "branch to list commits for",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.files.interface.ProjectDirectoryForTable"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/files/browseFiles": {
      "get": {
        "operationId": "listFilesAtPath",
        "tags": [
          "Files"
        ],
        "summary": "Get all files for a commit at a path in a project",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "ownerUsername",
            "description": "username of project owner",
            "required": true
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "projectName",
            "description": "name of project",
            "required": true
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "filePath",
            "description": "file path to query",
            "required": true
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "commitId",
            "description": "branch to list commits for",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.files.interface.ProjectFileForTable"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/files/createCode": {
      "get": {
        "operationId": "getCreateInfo",
        "tags": [
          "Code"
        ],
        "summary": "Get values to build FE for create file",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "ownerUsername",
            "description": "Name of project owner",
            "required": true
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "projectName",
            "description": "Name of project",
            "required": true
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "pathString",
            "description": "Path to file from root",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.files.interface.ProjectCodeCreateEditDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/files/editCode": {
      "get": {
        "operationId": "getEditInfo",
        "tags": [
          "Code"
        ],
        "summary": "Get values to build FE for edit file",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "ownerUsername",
            "description": "Name of project owner",
            "required": true
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "projectName",
            "description": "Name of project",
            "required": true
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "pathString",
            "description": "Path to file from root",
            "required": true
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "commitIdHolder",
            "description": "Commit id of file",
            "required": false
          },
          {
            "schema": {
              "nullable": true,
              "type": "boolean"
            },
            "in": "query",
            "name": "defaultTemplate",
            "description": "Default page",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.files.interface.ProjectCodeCreateEditDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/code/viewCode": {
      "get": {
        "operationId": "viewCode",
        "tags": [
          "Code"
        ],
        "summary": "Retrieves file to view",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "ownerUsername",
            "description": "Name of project owner",
            "required": true
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "projectName",
            "description": "Name of project",
            "required": true
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "pathString",
            "description": "Path to file from root",
            "required": true
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "commitIdHolder",
            "description": "CommitId of file",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.files.interface.ProjectCodeViewDto"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/code/browseCode": {
      "get": {
        "operationId": "browseCode",
        "tags": [
          "Code"
        ],
        "summary": "Retrieves directory for browse files table",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "ownerUsername",
            "description": "Name of project owner",
            "required": true
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "projectName",
            "description": "Name of project",
            "required": true
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "pathString",
            "description": "Path to file from root",
            "required": true
          },
          {
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "in": "query",
            "name": "commitIdStr",
            "description": "CommitId of directory",
            "required": false
          },
          {
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "in": "query",
            "name": "branchName",
            "description": "Current branch that's not main",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.files.interface.ProjectCodeBrowseDto"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/code/gitBrowse": {
      "get": {
        "operationId": "gitBrowse",
        "tags": [
          "Code"
        ],
        "summary": "Retrieves directory for browse files table",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "ownerUsername",
            "description": "Name of project owner",
            "required": true
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "projectName",
            "description": "Name of project",
            "required": true
          },
          {
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "in": "query",
            "name": "commitIdStr",
            "description": "CommitId of directory",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.files.interface.ProjectGitBrowseDto"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/code/sharedViewCode": {
      "get": {
        "operationId": "sharedViewCode",
        "tags": [
          "Code"
        ],
        "summary": "Retrieves file to view",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "ownerUsername",
            "description": "Name of project owner",
            "required": true
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "projectName",
            "description": "Name of project",
            "required": true
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "pathString",
            "description": "Path to file from root",
            "required": true
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "commitIdHolder",
            "description": "CommitId of file",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.files.interface.ProjectCodeSharedViewDto"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/code/saveCode": {
      "post": {
        "operationId": "saveCode",
        "tags": [
          "Code"
        ],
        "summary": "Save and save or run file",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "ownerUsername",
            "description": "Name of project owner",
            "required": true
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "projectName",
            "description": "Name of project",
            "required": true
          }
        ],
        "requestBody": {
          "description": "What file to save",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.files.web.SaveFile"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/metricsTesting/generateMetrics": {
      "post": {
        "operationId": "generateMetrics",
        "tags": [
          "Metrics"
        ],
        "summary": "generate application metrics for testing",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "metricType",
            "description": "The type of metric to generate",
            "required": true
          },
          {
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "in": "query",
            "name": "count",
            "description": "The number of this metric to generate",
            "required": true
          },
          {
            "schema": {
              "type": "boolean"
            },
            "in": "query",
            "name": "unique",
            "description": "Whether to make each instance of this metric unique",
            "required": true
          },
          {
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "in": "query",
            "name": "dataPoints",
            "description": "How many data points to store in this metric (e.g. a histogram of $dataPoints values)",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/metricsTesting/countMetrics": {
      "get": {
        "operationId": "countMetrics",
        "tags": [
          "Metrics"
        ],
        "summary": "check how many metrics are in the application",
        "parameters": [
          {
            "schema": {
              "nullable": true,
              "type": "string",
              "enum": [
                "Gauge",
                "Counter",
                "Timer",
                "Histogram"
              ]
            },
            "in": "query",
            "name": "metricType",
            "description": "The type of metric you want to count",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/metricsTesting/clearRegistry": {
      "post": {
        "operationId": "clearRegistry",
        "tags": [
          "Metrics"
        ],
        "summary": "Remove metrics from the application",
        "parameters": [
          {
            "schema": {
              "nullable": true,
              "type": "string",
              "enum": [
                "Gauge",
                "Counter",
                "Timer",
                "Histogram"
              ]
            },
            "in": "query",
            "name": "metricType",
            "description": "The type of metric you want to count",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "success"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/gitProviders/metadata/capabilities": {
      "get": {
        "operationId": "getRepoTypeCapabilities",
        "tags": [
          "Git",
          "Metadata"
        ],
        "summary": "retrieves repository capabilities",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "$ref": "#/components/schemas/domino.repoman.domain.GitProviderName",
              "enum": [
                "github",
                "gitlab",
                "githubEnterprise",
                "unknown",
                "gitlabEnterprise",
                "bitbucket",
                "bitbucketServer"
              ]
            },
            "in": "query",
            "name": "serviceProvider",
            "description": "git service provider to retrieve capabilities for",
            "required": true
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "repoUri",
            "description": "uri of repository to retrieve capabilities for",
            "required": true
          },
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "query",
            "name": "credentialId",
            "description": "id of credential being used to access the repository or none if not using credentials",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.gitproviders.api.GetRepoTypeCapabilitiesApiResponse"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/gitProviders/metadata/owners": {
      "get": {
        "operationId": "getPotentialRepoOwners",
        "tags": [
          "Git",
          "Metadata"
        ],
        "summary": "retrieves potential owners for a given git service provider and credential id",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "$ref": "#/components/schemas/domino.repoman.domain.GitProviderName",
              "enum": [
                "github",
                "gitlab",
                "githubEnterprise",
                "unknown",
                "gitlabEnterprise",
                "bitbucket",
                "bitbucketServer"
              ]
            },
            "in": "query",
            "name": "serviceProvider",
            "description": "git service provider to retrieve owners for",
            "required": true
          },
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string",
              "$ref": "#/components/schemas/DominoId"
            },
            "in": "query",
            "name": "credentialId",
            "description": "id of credential to retrieve owners for",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projects.api.repositories.responses.GitApiResponseWrapper[domino.gitproviders.api.GetOwnersApiResponse]"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/gitProviders/metadata/repositories": {
      "get": {
        "operationId": "getPotentialReposForOwner",
        "tags": [
          "Git",
          "Metadata"
        ],
        "summary": "retrieves potential repos for a given git service provider, credential id, owner, and name query",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "$ref": "#/components/schemas/domino.repoman.domain.GitProviderName",
              "enum": [
                "github",
                "gitlab",
                "githubEnterprise",
                "unknown",
                "gitlabEnterprise",
                "bitbucket",
                "bitbucketServer"
              ]
            },
            "in": "query",
            "name": "serviceProvider",
            "description": "git service provider to retrieve repos for",
            "required": true
          },
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string",
              "$ref": "#/components/schemas/DominoId"
            },
            "in": "query",
            "name": "credentialId",
            "description": "id of credential to retrieve repos for",
            "required": true
          },
          {
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "in": "query",
            "name": "userOwner",
            "description": "user to retrieve repos for",
            "required": false
          },
          {
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "in": "query",
            "name": "orgOwner",
            "description": "organization to retrieve repos for",
            "required": false
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "nameQuery",
            "description": "search query to retrieve repos for",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.gitproviders.api.GetReposApiResponse"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/users/notifications/unreadStatus": {
      "get": {
        "operationId": "hasUserNotifications",
        "tags": [
          "Notifications"
        ],
        "summary": "Checks whether the current user has unread notifications.",
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.notifications.HasNotifications"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/users/notifications": {
      "get": {
        "operationId": "displayUserNotifications",
        "tags": [
          "Notifications"
        ],
        "summary": "Display all notifications for the current user.",
        "parameters": [
          {
            "schema": {
              "nullable": true,
              "type": "string",
              "enum": [
                "Critical",
                "Default"
              ]
            },
            "in": "query",
            "name": "priority",
            "description": "Filter by Priority (optional)",
            "required": false
          },
          {
            "schema": {
              "nullable": true,
              "format": "int32",
              "type": "integer"
            },
            "in": "query",
            "name": "offset",
            "description": "Offset in Data (optional)",
            "required": false
          },
          {
            "schema": {
              "nullable": true,
              "format": "int32",
              "type": "integer"
            },
            "in": "query",
            "name": "limit",
            "description": "Maximum number of records to display (optional)",
            "required": false
          },
          {
            "schema": {
              "default": "created",
              "nullable": true,
              "type": "string",
              "enum": [
                "title",
                "message",
                "priority",
                "created",
                "start",
                "end"
              ]
            },
            "in": "query",
            "name": "sort",
            "description": "Specify sort criteria (optional, incompatible with defaultSort=true)",
            "required": false
          },
          {
            "schema": {
              "default": "desc",
              "nullable": true,
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            },
            "in": "query",
            "name": "dir",
            "description": "Specify sort direction (optional, incompatible with defaultSort=true)",
            "required": false
          },
          {
            "schema": {
              "default": false,
              "nullable": true,
              "type": "boolean"
            },
            "in": "query",
            "name": "defaultSort",
            "description": "If true, use the frontend's default sorting and return 400 if either 'sort' or 'dir' are set.",
            "required": false
          },
          {
            "schema": {
              "nullable": true,
              "type": "boolean"
            },
            "in": "query",
            "name": "expired",
            "description": "Limit to either expired or non-expired notifications (optional, defaults to all)",
            "required": false
          },
          {
            "in": "query",
            "name": "read",
            "schema": {
              "nullable": true,
              "type": "boolean"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.notifications.ListNotificationsResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/users/notifications/read": {
      "post": {
        "operationId": "markUserNotificationsRead",
        "tags": [
          "Notifications"
        ],
        "summary": "Mark one or more notifications as read.",
        "requestBody": {
          "description": "Mark read request",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.notifications.MarkReadRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/admin/notifications": {
      "post": {
        "operationId": "createAdminNotification",
        "tags": [
          "Notifications"
        ],
        "summary": "Creates a new notification.",
        "requestBody": {
          "description": "Create Notification Request",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.notifications.CreateNotificationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.notifications.AdminNotification"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "get": {
        "operationId": "displayAdminNotifications",
        "tags": [
          "Notifications"
        ],
        "summary": "Lists all current notificatons with paging.",
        "parameters": [
          {
            "schema": {
              "nullable": true,
              "type": "string",
              "enum": [
                "Critical",
                "Default"
              ]
            },
            "in": "query",
            "name": "priority",
            "description": "Filter by Priority (optional, defaults to all)",
            "required": false
          },
          {
            "schema": {
              "nullable": true,
              "type": "boolean"
            },
            "in": "query",
            "name": "expired",
            "description": "Filter by expired status (optional, defaults to all)",
            "required": false
          },
          {
            "schema": {
              "nullable": true,
              "type": "string",
              "enum": [
                "title",
                "message",
                "priority",
                "created",
                "start",
                "end"
              ]
            },
            "in": "query",
            "name": "sort",
            "description": "Specify sort criteria (optional, defaults to created)",
            "required": false
          },
          {
            "schema": {
              "nullable": true,
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            },
            "in": "query",
            "name": "dir",
            "description": "Specify sort direction (optional, defaults to desc)",
            "required": false
          },
          {
            "schema": {
              "nullable": true,
              "format": "int32",
              "type": "integer"
            },
            "in": "query",
            "name": "offset",
            "description": "Offset of record in Data (optional)",
            "required": false
          },
          {
            "schema": {
              "nullable": true,
              "format": "int32",
              "type": "integer"
            },
            "in": "query",
            "name": "limit",
            "description": "Maximum number of records to display (optional)",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.notifications.ListAdminNotificationsResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/admin/notifications/admin": {
      "post": {
        "operationId": "createNotificationSuperUser",
        "tags": [
          "Adminnotifications"
        ],
        "summary": "Creates a new notification from service.",
        "requestBody": {
          "description": "Create Notification Request",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.notifications.CreateNotificationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.notifications.AdminNotification"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/admin/notifications/{id}/expired": {
      "put": {
        "operationId": "updateAdminNotifications",
        "tags": [
          "Notifications"
        ],
        "summary": "Updates an existing notification.",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "path",
            "name": "id",
            "description": "Notification ID",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Update Notification Request",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.notifications.UpdateNotificationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/admin/notifications/{id}": {
      "delete": {
        "operationId": "deleteAdminNotification",
        "tags": [
          "Notifications"
        ],
        "summary": "Deletes an existing notification.",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "path",
            "name": "id",
            "description": "Notification ID",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/mlflow/previewFileConfig": {
      "get": {
        "operationId": "getPreviewFileConfig",
        "tags": [
          "MLFlow"
        ],
        "summary": "Get the mlflow preview file config (e.g. max preview file size)",
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.mlflow.api.PreviewFileConfigDTO"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/mlflow/execution/{executionId}/mlflowData": {
      "get": {
        "operationId": "getMlflowData",
        "tags": [
          "MLFlow"
        ],
        "summary": "Get metadata related to an execution. For use by the mlflow-proxy",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "executionId",
            "description": "Id of execution to retrieve metadata for",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.mlflow.api.MlflowData"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/mlflow/project/{projectId}": {
      "get": {
        "operationId": "getProjectForMlflow",
        "tags": [
          "MLFlow"
        ],
        "summary": "Get project info for use by the mlflow-proxy",
        "description": "Gets information about a project. Flattens collaborating orgs in the project into list of org members",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "projectId",
            "description": "Id of project to retrieve info about",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.mlflow.api.MlflowProjectInfo"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/mlflow/projectIds": {
      "get": {
        "operationId": "getCollaboratingProjectIds",
        "tags": [
          "MLFlow"
        ],
        "summary": "Get ids of projects a user can access for use by the mlflow proxy",
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.common.DominoId"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/mlflow/execution/{executionId}/provenanceCheckpoints": {
      "get": {
        "operationId": "getProvenanceCheckpointsForExecution",
        "tags": [
          "MLFlow"
        ],
        "summary": "Get provenance checkpoints created by an execution. Used to link mlflow runs to the source commit that created them",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "executionId",
            "description": "Id of execution to retrieve checkpoints for for",
            "required": true
          },
          {
            "schema": {
              "default": 0,
              "nullable": true,
              "format": "int32",
              "type": "integer"
            },
            "in": "query",
            "name": "offset",
            "description": "The number of items to skip.  Can not be negative.\n",
            "required": false
          },
          {
            "schema": {
              "default": 50,
              "nullable": true,
              "format": "int32",
              "type": "integer"
            },
            "in": "query",
            "name": "limit",
            "description": "The size of the page to return.",
            "required": false
          },
          {
            "schema": {
              "nullable": true,
              "type": "string",
              "$ref": "#/components/schemas/domino.provenance.api.SortableFields.Value",
              "enum": [
                "createdAt",
                "dfsBranch",
                "executionStart",
                "mainGitBranch"
              ]
            },
            "in": "query",
            "name": "sortBy",
            "description": "A column name to sort over - createdAt, dfsBranch, executionStart, mainGitBranch - default is 'createdAt'.",
            "required": false
          },
          {
            "schema": {
              "nullable": true,
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            },
            "in": "query",
            "name": "sortOrder",
            "description": "order of sort.  default is 'desc'.",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.provenance.api.ProvenanceCheckpointDto"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/develop/v1/project-templates": {
      "get": {
        "operationId": "getProjectTemplatesCollection",
        "tags": [
          "DevelopV1ProjectTemplates"
        ],
        "summary": "Get the collection of project templates",
        "parameters": [
          {
            "schema": {
              "default": 1,
              "format": "int32",
              "type": "integer",
              "minimum": 1
            },
            "in": "query",
            "name": "page",
            "description": "The page number of the collection to return. If not provided, the first page will be returned.",
            "required": false
          },
          {
            "schema": {
              "default": 10,
              "format": "int32",
              "maximum": 100,
              "type": "integer",
              "minimum": 1
            },
            "in": "query",
            "name": "size",
            "description": "The number of items to return per page. If not provided, 10 items will be returned per page.",
            "required": false
          },
          {
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "in": "query",
            "name": "hub",
            "description": "The hub to filter on. To retrieve your own templates, pass your user ID as a string. To retrieve templates shared with you, pass in \"shared\".",
            "required": false
          },
          {
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "in": "query",
            "name": "category",
            "description": "The category to filter on",
            "required": false
          },
          {
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "in": "query",
            "name": "owner",
            "description": "The owner/author to filter on.",
            "required": false
          },
          {
            "schema": {
              "nullable": true,
              "type": "boolean"
            },
            "in": "query",
            "name": "isCompanyOfficial",
            "description": "To filter on company official templates.",
            "required": false
          },
          {
            "schema": {
              "default": "updated",
              "nullable": true,
              "type": "string",
              "enum": [
                "updated",
                "recommended",
                "name"
              ]
            },
            "in": "query",
            "name": "orderBy",
            "description": "The field to sort the collection by (in the given order).",
            "required": false
          },
          {
            "schema": {
              "default": "desc",
              "nullable": true,
              "type": "string",
              "items": {
                "type": "string"
              },
              "enum": [
                "asc",
                "desc"
              ]
            },
            "in": "query",
            "name": "sortOrder",
            "description": "The direction to sort the collection by. The direction is 'desc' by default in all cases.",
            "required": false
          },
          {
            "schema": {
              "default": "",
              "nullable": true,
              "type": "string"
            },
            "in": "query",
            "name": "q",
            "description": "The search query to match on a template's name or description.",
            "required": false
          },
          {
            "schema": {
              "default": "",
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "query",
            "name": "customTemplateTagId",
            "description": "The custom template tag to search for.",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projects.templates.api.models.BaseTemplatesCollectionDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/develop/v1/customer-project-templates": {
      "post": {
        "operationId": "createCustomerProjectTemplate",
        "tags": [
          "DevelopV1ProjectTemplates"
        ],
        "summary": "Create a new customer project template",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.projects.templates.api.models.NewCustomerTemplateDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projects.templates.api.models.CustomerTemplateDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/develop/v1/customer-project-templates/{id}": {
      "patch": {
        "operationId": "updateCustomerProjectTemplate",
        "tags": [
          "DevelopV1ProjectTemplates"
        ],
        "summary": "Update customer template",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.projects.templates.api.models.UpdateCustomerTemplateDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projects.templates.api.models.CustomerTemplateDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            }
          }
        ]
      },
      "get": {
        "operationId": "getCustomerProjectTemplate",
        "tags": [
          "DevelopV1ProjectTemplates"
        ],
        "summary": "Get a customer project template by id.",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "id",
            "description": "The id of the project template to return.",
            "required": true
          },
          {
            "schema": {
              "default": false,
              "type": "boolean"
            },
            "in": "query",
            "name": "includeArchived",
            "description": "If the template is archived and this parameter is set to true, the template will be returned instead of a 404.",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projects.templates.api.models.CustomerTemplateDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "delete": {
        "operationId": "archiveCustomerProjectTemplate",
        "tags": [
          "DevelopV1ProjectTemplates"
        ],
        "summary": "Delete a customer project template by id.",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            },
            "in": "path",
            "name": "id",
            "description": "The id of the project template to delete.",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "success"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/develop/v1/project-template-hubs": {
      "get": {
        "operationId": "getProjectTemplateHubsCollection",
        "tags": [
          "DevelopV1ProjectTemplates"
        ],
        "summary": "Get the collection of project template hubs",
        "parameters": [
          {
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "in": "query",
            "name": "q",
            "description": "The search query to filter the collection by.",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projects.templates.api.models.TemplateHubsCollectionDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/develop/v1/project-template-categories": {
      "get": {
        "operationId": "getProjectTemplateCategoriesCollection",
        "tags": [
          "DevelopV1ProjectTemplates"
        ],
        "summary": "Get the collection of project template categories",
        "parameters": [
          {
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "in": "query",
            "name": "q",
            "description": "Query to filter down the categories returned by this endpoint",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projects.templates.api.models.StringCollectionDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/develop/v1/project-template-owners": {
      "get": {
        "operationId": "getProjectTemplateOwnersCollection",
        "tags": [
          "DevelopV1ProjectTemplates"
        ],
        "summary": "Get the collection of project template authors",
        "parameters": [
          {
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "in": "query",
            "name": "q",
            "description": "Query to filter down the owners returned by this endpoint",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projects.templates.api.models.StringCollectionDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/develop/v1/customer-project-template-tag": {
      "get": {
        "operationId": "getCustomerProjectTemplateTags",
        "tags": [
          "DevelopV1ProjectTemplates"
        ],
        "summary": "Get customer template tags",
        "parameters": [
          {
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "in": "query",
            "name": "q",
            "description": "Query to filter down the tags",
            "required": false
          },
          {
            "schema": {
              "nullable": true,
              "format": "int32",
              "type": "string"
            },
            "in": "query",
            "name": "limit",
            "description": "Query to request more or less tags",
            "required": false
          }
        ],
        "responses": {
          "201": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projects.templates.api.models.CustomerTemplateTagCollectionDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/develop/v1/projects/{projectId}/supported-actions": {
      "get": {
        "operationId": "getSupportedActions",
        "tags": [
          "DevelopV1Projects"
        ],
        "summary": "Get copy support status for this project",
        "parameters": [
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string",
              "$ref": "#/components/schemas/DominoId"
            },
            "in": "path",
            "name": "projectId",
            "description": "Domino id of the project",
            "required": true
          },
          {
            "schema": {
              "nullable": true,
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "CreateTemplate",
                  "ProjectCopy",
                  "ProjectFork",
                  "AuthOnly"
                ]
              }
            },
            "in": "query",
            "name": "q",
            "description": "The supported actions that you want to check. If not provided, all supported actions will be returned. Provide auth only to get only authz information.",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projects.api.SupportedActionsResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/gateway/projects": {
      "get": {
        "operationId": "list",
        "tags": [
          "Gateway",
          "Projects"
        ],
        "summary": "Retrieves projects for the Project List UI, ordered from most to least recently updated",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "enum": [
                "Collaborating",
                "Popular",
                "OwnedAndCollaborating",
                "Suggested",
                "Owned"
              ]
            },
            "in": "query",
            "name": "relationship",
            "description": "The relationship between the current user and the projects to be returned",
            "required": true
          },
          {
            "schema": {
              "default": true,
              "type": "boolean"
            },
            "in": "query",
            "name": "showCompleted",
            "description": "include projects that are completed",
            "required": false
          },
          {
            "schema": {
              "nullable": true,
              "format": "int32",
              "type": "integer"
            },
            "in": "query",
            "name": "limit",
            "description": "limit the number of projects returned",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.server.projects.api.ProjectGatewaySummary"
                  }
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/gateway/projects/executingResources/{ownerName}/{projectName}": {
      "get": {
        "operationId": "getExecutingRunsForProject",
        "tags": [
          "Gateway",
          "Projects"
        ],
        "summary": "Gets the executing runs grouped by type for this project",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "path",
            "name": "projectName",
            "description": "the project's name",
            "required": true
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "path",
            "name": "ownerName",
            "description": "the project owner's name",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.server.projects.api.ProjectGatewayExecutingRunsByType"
                  }
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/gateway/projects/findProjectByOwnerAndName": {
      "get": {
        "operationId": "findProjectByOwnerAndName",
        "tags": [
          "Gateway"
        ],
        "summary": "Retrieves a project for the Project Overview UI",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "ownerName",
            "description": "Username of the Owner",
            "required": true
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "projectName",
            "description": "Name of the Project",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.server.projects.api.ProjectGatewayOverview"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/gateway/search": {
      "get": {
        "operationId": "search",
        "tags": [
          "Gateway",
          "Search"
        ],
        "summary": "searches for the specified terms in the relevant areas with a limit on the number of results",
        "parameters": [
          {
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "in": "query",
            "name": "query",
            "description": "Search term.",
            "required": true
          },
          {
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "in": "query",
            "name": "area",
            "required": false
          },
          {
            "schema": {
              "nullable": true,
              "format": "int32",
              "type": "number"
            },
            "in": "query",
            "name": "page",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.common.gateway.search.SearchResultGatewayDTO"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/gateway/search-page": {
      "get": {
        "operationId": "searchForPage",
        "tags": [
          "Gateway",
          "Search"
        ],
        "summary": "provides search results for search page. has the same functionality as /search but returns more details for the selected area",
        "parameters": [
          {
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "in": "query",
            "name": "query",
            "description": "Search term.",
            "required": true
          },
          {
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "in": "query",
            "name": "area",
            "required": false
          },
          {
            "schema": {
              "nullable": true,
              "format": "int32",
              "type": "number"
            },
            "in": "query",
            "name": "page",
            "required": false
          },
          {
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "in": "query",
            "name": "timestampFormat",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.common.gateway.search.SearchPageGatewayDTO"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/gateway/runs/getByBatchId": {
      "get": {
        "operationId": "listToJson",
        "tags": [
          "Gateway",
          "Runs"
        ],
        "summary": "API to batch extract Runs data for import into a 3rd party tool",
        "parameters": [
          {
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "in": "query",
            "name": "batchId",
            "description": "Starting id of the batch query",
            "required": true
          },
          {
            "schema": {
              "nullable": true,
              "format": "int32",
              "type": "integer"
            },
            "in": "query",
            "name": "limit",
            "description": "The desired size of the batch to be returned",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.common.gateway.runs.RunsGatewaySequence"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/gateway/users/projectsDependencyGraph": {
      "get": {
        "operationId": "projectsDependencyGraph",
        "tags": [
          "Gateway",
          "Users"
        ],
        "summary": "Retrieves projects dependency graph for a user, and optionally for a specific project",
        "parameters": [
          {
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "in": "query",
            "name": "ownerUsername",
            "description": "Owner username of the project, if dependency graph is being requested for a specific project.",
            "required": false
          },
          {
            "schema": {
              "nullable": true,
              "type": "string"
            },
            "in": "query",
            "name": "projectName",
            "description": "Project name for which a dependency graph is being requested. When not provided, the dependency graph is for all projects for the current user.",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.nucleus.gateway.users.models.ProjectsDependencyGraph"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    }
  },
  "openapi": "3.0.0",
  "info": {
    "description": "This API is going to provide access to all the Domino functions available in the user interface.\nTo authenticate your requests, include your API Key (which you can find on your account page) with the header X-Domino-Api-Key.\n",
    "title": "Domino Data Lab API v4",
    "version": "4.0.0"
  },
  "components": {
    "schemas": {
      "domino.common.user.UpdateUserUIUXStateDTO": {
        "properties": {
          "stateMap": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "replace": {
            "type": "boolean",
            "nullable": true
          }
        },
        "required": [
          "stateMap"
        ]
      },
      "domino.scheduledjob.api.ComputeClusterConfigSpecDto": {
        "properties": {
          "clusterType": {
            "$ref": "#/components/schemas/ComputeClusterType"
          },
          "computeEnvironmentId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "computeEnvironmentRevisionSpec": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "enum": [
                  "ActiveRevision",
                  "LatestRevision",
                  "RestrictedRevision"
                ]
              },
              {
                "type": "object",
                "required": [
                  "revisionId"
                ],
                "properties": {
                  "revisionId": {
                    "type": "string"
                  }
                }
              }
            ]
          },
          "masterHardwareTierId": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.hardwaretier.api.HardwareTierIdentifier"
          },
          "workerCount": {
            "type": "integer",
            "format": "int32"
          },
          "maxWorkerCount": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "workerHardwareTierId": {
            "$ref": "#/components/schemas/domino.hardwaretier.api.HardwareTierIdentifier"
          },
          "workerStorage": {
            "nullable": true,
            "$ref": "#/components/schemas/Information"
          },
          "extraConfigs": {
            "nullable": true,
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "required": [
          "clusterType",
          "computeEnvironmentId",
          "workerCount",
          "workerHardwareTierId"
        ]
      },
      "domino.activity.api.ProjectGoalModelLinkActivityMetadata": {
        "properties": {
          "action": {
            "type": "string",
            "enum": [
              "added",
              "removed"
            ]
          },
          "modelId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "modelVersion": {
            "type": "integer",
            "format": "int32"
          },
          "modelVersionId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "projectGoalTitle": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "action",
          "modelId",
          "modelVersion",
          "modelVersionId",
          "projectGoalTitle",
          "name"
        ]
      },
      "domino.workspace.api.WorkspaceGlobalSettingsDto": {
        "properties": {
          "stopToDeleteDelaySeconds": {
            "type": "integer",
            "format": "int32"
          },
          "perUserQuota": {
            "type": "integer",
            "format": "int32"
          },
          "highDiskUsageThresholdPercent": {
            "type": "integer",
            "format": "int32"
          }
        },
        "required": [
          "stopToDeleteDelaySeconds",
          "perUserQuota",
          "highDiskUsageThresholdPercent"
        ]
      },
      "domino.workspace.web.StopClassicWorkspaceRequest": {
        "properties": {
          "workspaceId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "commitMessage": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "workspaceId"
        ]
      },
      "domino.projects.web.MarkProjectActive": {
        "properties": {
          "projectId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          }
        },
        "required": [
          "projectId"
        ]
      },
      "domino.projects.api.repositories.responses.browse.CommitAuthorDTO": {
        "properties": {
          "name": {
            "type": "string"
          },
          "date": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "date"
        ]
      },
      "domino.nucleus.dataset.ui.CreateDatasetInput": {
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "projectId": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "name"
        ]
      },
      "domino.computegrid.ExecutionUnitOverview": {
        "properties": {
          "deployableObjectType": {
            "type": "string",
            "enum": [
              "Container",
              "Pod"
            ]
          },
          "deployableObjectId": {
            "type": "string"
          },
          "computeNodeId": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "string"
          }
        },
        "required": [
          "deployableObjectType",
          "deployableObjectId",
          "status"
        ]
      },
      "domino.files.web.UnlinkFileFromGoal": {
        "properties": {
          "fileName": {
            "type": "string"
          },
          "commitId": {
            "type": "string"
          },
          "projectId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "goalId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          }
        },
        "required": [
          "fileName",
          "commitId",
          "projectId",
          "goalId"
        ]
      },
      "domino.workspaces.web.ArchiveCommentInput": {
        "properties": {
          "commentId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          }
        },
        "required": [
          "commentId"
        ]
      },
      "domino.admin.web.MenuItemDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "text": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "allowed": {
            "type": "boolean"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.admin.web.MenuItemDto"
            }
          }
        }
      },
      "domino.admin.interface.ComputeClusterPodOverview": {
        "properties": {
          "deployableObjectType": {
            "type": "string",
            "enum": [
              "Container",
              "Pod"
            ]
          },
          "deployableObjectId": {
            "type": "string"
          },
          "computeNodeId": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "string"
          },
          "role": {
            "type": "string"
          },
          "isMaster": {
            "type": "boolean"
          }
        },
        "required": [
          "deployableObjectType",
          "deployableObjectId",
          "status",
          "role",
          "isMaster"
        ]
      },
      "domino.gruz.web.RunImportRequest": {
        "properties": {
          "runs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.gruz.api.RawRun"
            }
          }
        },
        "required": [
          "runs"
        ]
      },
      "domino.scheduledjob.api.DataConfigDto": {
        "properties": {
          "datasetConfig": {
            "type": "string",
            "nullable": true
          },
          "snapshotDatasetsOnCompletion": {
            "type": "boolean"
          },
          "externalVolumeMounts": {
            "type": "array",
            "nullable": true,
            "items": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            }
          }
        },
        "required": [
          "snapshotDatasetsOnCompletion"
        ]
      },
      "domino.jobs.interface.JobResourcesStatus": {
        "properties": {
          "repositories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.jobs.interface.JobRepositoryStatus"
            }
          }
        },
        "required": [
          "repositories"
        ]
      },
      "domino.jobs.web.JobStatusChangeSocketEvent": {
        "properties": {
          "correlationId": {
            "type": "string"
          },
          "jobId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "projectId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "room": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "timestamp": {
            "type": "integer",
            "format": "epoch"
          },
          "startedBy": {
            "nullable": true,
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          }
        },
        "required": [
          "correlationId",
          "jobId",
          "projectId",
          "room",
          "status",
          "timestamp"
        ]
      },
      "domino.notifications.MarkReadRequest": {
        "type": "object",
        "required": [
          "ids"
        ],
        "properties": {
          "ids": {
            "type": "array",
            "description": "IDs of notifications to be marked as read",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "domino.common.models.DiagnosticStatistics": {
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.common.models.DiagnosticStatistic"
            }
          },
          "isError": {
            "type": "boolean"
          }
        },
        "required": [
          "data",
          "isError"
        ]
      },
      "domino.common.gateway.search.FuzzyHighlightInfo": {
        "properties": {
          "maybeHighlightedFeatureViewName": {
            "type": "string"
          },
          "maybeHighlightedDescription": {
            "type": "string"
          },
          "highlightedEntities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.common.gateway.search.EntityHighlight"
            }
          },
          "highlightedFeatures": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.common.gateway.search.FeatureHighlight"
            }
          },
          "highlightedTagKeys": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.common.gateway.search.TagKeyHighlight"
            }
          },
          "highlightedTagValues": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.common.gateway.search.TagValueHighlight"
            }
          },
          "maybeHighlightedModelAuthor": {
            "type": "string"
          }
        },
        "required": [
          "maybeHighlightedFeatureViewName",
          "maybeHighlightedDescription",
          "highlightedEntities",
          "highlightedFeatures",
          "highlightedTagKeys",
          "highlightedTagValues",
          "maybeHighlightedModelAuthor"
        ]
      },
      "domino.workspace.api.git.CommitRepo": {
        "properties": {
          "repoId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "filePaths": {
            "type": "array",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "commitMessage": {
            "type": "string"
          }
        },
        "required": [
          "repoId",
          "commitMessage"
        ]
      },
      "domino.projects.api.ProjectStage": {
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "stage": {
            "type": "string"
          },
          "createdAt": {
            "type": "integer",
            "format": "epoch"
          },
          "createdBy": {
            "nullable": true,
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "isArchived": {
            "type": "boolean"
          },
          "stageCreationSource": {
            "type": "string",
            "enum": [
              "Domino",
              "Jira"
            ]
          }
        },
        "required": [
          "id",
          "stage",
          "createdAt",
          "isArchived",
          "stageCreationSource"
        ]
      },
      "domino.computecluster.api.ComputeClusterDetails": {
        "properties": {
          "clusterConfig": {
            "$ref": "#/components/schemas/domino.computecluster.api.ComputeClusterConfigResponseDto"
          },
          "webUiPath": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "clusterConfig"
        ]
      },
      "domino.gruz.api.RunOutput": {
        "properties": {
          "outputCommitId": {
            "type": "string",
            "nullable": true
          },
          "commitMessage": {
            "type": "string",
            "nullable": true
          },
          "diagnosticStatistics": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.common.models.DiagnosticStatistics"
          }
        }
      },
      "domino.datasource.api.DataSourceAccessedInfo": {
        "properties": {
          "dataSourceId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "dataSourceName": {
            "type": "string"
          },
          "dataSourceType": {
            "type": "string",
            "enum": [
              "ADLSConfig",
              "AzureBlobStorageConfig",
              "BigQueryConfig",
              "ClickHouseConfig",
              "DatabricksConfig",
              "DB2Config",
              "DruidConfig",
              "GCSConfig",
              "GenericJDBCConfig",
              "GenericS3Config",
              "GreenplumConfig",
              "IgniteConfig",
              "MariaDBConfig",
              "MongoDBConfig",
              "MySQLConfig",
              "NetezzaConfig",
              "OracleConfig",
              "PalantirConfig",
              "PineconeConfig",
              "PostgreSQLConfig",
              "QdrantConfig",
              "RedshiftConfig",
              "S3Config",
              "SAPHanaConfig",
              "SingleStoreConfig",
              "SQLServerConfig",
              "SnowflakeConfig",
              "SynapseConfig",
              "TabularS3GlueConfig",
              "TeradataConfig",
              "TrinoConfig",
              "VerticaConfig"
            ]
          },
          "ownerName": {
            "type": "string"
          }
        },
        "required": [
          "dataSourceId",
          "dataSourceName",
          "dataSourceType",
          "ownerName"
        ]
      },
      "domino.dataplane.DataPlaneConfiguration": {
        "properties": {
          "storageClass": {
            "type": "string",
            "nullable": true
          },
          "address": {
            "type": "string",
            "nullable": true
          },
          "fileSyncDisabled": {
            "type": "boolean",
            "nullable": true
          },
          "dominoApiHostname": {
            "type": "string",
            "nullable": true
          },
          "dockerRegistryHostname": {
            "type": "string",
            "nullable": true
          },
          "rabbitMqHostname": {
            "type": "string",
            "nullable": true
          },
          "rabbitMqAmqpPort": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "rabbitMqStreamPort": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "istioEnabled": {
            "type": "boolean",
            "nullable": true
          },
          "s3EndpointUrl": {
            "type": "string",
            "nullable": true
          },
          "additionalStorageClass": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "domino.activity.api.ProjectGoalBulkDeleteActivityMetadata": {
        "properties": {
          "goalIds": {
            "type": "array",
            "items": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            }
          },
          "goalNames": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "toStatus": {
            "type": "string",
            "enum": [
              "complete",
              "incomplete",
              "delete"
            ]
          }
        },
        "required": [
          "goalIds",
          "goalNames",
          "toStatus"
        ]
      },
      "domino.projects.api.CreateReviewRequest": {
        "properties": {
          "authorId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "title": {
            "type": "string"
          },
          "summary": {
            "type": "string"
          },
          "intoProjectId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "fromProjectId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          }
        },
        "required": [
          "authorId",
          "title",
          "summary",
          "intoProjectId",
          "fromProjectId"
        ]
      },
      "domino.common.modelproduct.NotificationRecipient": {
        "properties": {
          "name": {
            "type": "string"
          },
          "email": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "email"
        ]
      },
      "domino.admin.interface.ComputeNodeMemUtilization": {
        "properties": {
          "total": {
            "type": "number",
            "format": "double"
          },
          "requested": {
            "type": "number",
            "format": "double"
          },
          "available": {
            "type": "number",
            "format": "double"
          }
        },
        "required": [
          "total",
          "requested",
          "available"
        ]
      },
      "domino.jobs.interface.JobStatuses": {
        "properties": {
          "isCompleted": {
            "type": "boolean"
          },
          "isArchived": {
            "type": "boolean"
          },
          "isScheduled": {
            "type": "boolean"
          },
          "executionStatus": {
            "type": "string"
          }
        },
        "required": [
          "isCompleted",
          "isArchived",
          "isScheduled",
          "executionStatus"
        ]
      },
      "domino.modelmanager.api.ModelExportVersionStatus": {
        "properties": {
          "modelId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "modelVersionId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "exportId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "exportVersionId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "status": {
            "type": "string",
            "enum": [
              "exporting",
              "preparing",
              "complete",
              "not_triggered",
              "failed"
            ]
          },
          "errorMessage": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "modelId",
          "modelVersionId",
          "exportId",
          "exportVersionId",
          "status"
        ]
      },
      "domino.provenance.api.ProvenanceCheckpointDto": {
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "projectId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "executionId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "executionName": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "executionStart": {
            "type": "string",
            "format": "date-time"
          },
          "environmentDetails": {
            "$ref": "#/components/schemas/domino.provenance.api.ProvenanceEnvironmentDetails"
          },
          "commitMessage": {
            "type": "string"
          },
          "dfsCommit": {
            "$ref": "#/components/schemas/domino.provenance.api.ProvenanceCommit"
          },
          "dfsBranch": {
            "type": "string"
          },
          "gitRepoCommits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.provenance.api.ProvenanceGitRepoDto"
            }
          },
          "mainGitBranch": {
            "type": "string",
            "nullable": true
          },
          "importedProjects": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.provenance.api.ProvenanceImportedProject"
            }
          },
          "hardwareTierId": {
            "$ref": "#/components/schemas/domino.hardwaretier.api.HardwareTierIdentifier"
          },
          "hardwareTierName": {
            "type": "string"
          },
          "volumeSize": {
            "$ref": "#/components/schemas/Information"
          },
          "computeClusterConfig": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.computecluster.api.ComputeClusterConfig"
          },
          "environmentVariables": {
            "$ref": "#/components/schemas/domino.provenance.api.ProvenanceEnvironmentVariablesMap"
          },
          "isolateOutputCommits": {
            "type": "boolean"
          },
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "required": [
          "id",
          "projectId",
          "executionId",
          "executionName",
          "createdAt",
          "executionStart",
          "environmentDetails",
          "commitMessage",
          "dfsCommit",
          "dfsBranch",
          "gitRepoCommits",
          "importedProjects",
          "hardwareTierId",
          "hardwareTierName",
          "volumeSize",
          "environmentVariables",
          "isolateOutputCommits",
          "attributes"
        ]
      },
      "domino.jobs.interface.JobProblemSuggestion": {
        "properties": {
          "problem": {
            "type": "string"
          },
          "helpLink": {
            "type": "string"
          }
        },
        "required": [
          "problem",
          "helpLink"
        ]
      },
      "domino.gruz.api.RunPostProcessing": {
        "properties": {
          "postProcessingControl": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.gruz.api.RunPostProcessingControl"
          },
          "postProcessedTimestamp": {
            "nullable": true,
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "domino.environments.api.EnvironmentDetails": {
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "description": {
            "type": "string"
          },
          "archived": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "visibility": {
            "type": "string",
            "enum": [
              "Global",
              "Private",
              "Organization"
            ]
          },
          "owner": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.environments.api.EnvironmentOwner"
          },
          "supportedClusters": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "Dask",
                "Spark",
                "Ray",
                "MPI"
              ]
            }
          },
          "latestRevision": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.environments.api.RevisionOverview"
          },
          "selectedRevision": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.environments.api.RevisionOverview"
          },
          "restrictedRevision": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.environments.api.RevisionOverview"
          },
          "baseDependenciesInitImage": {
            "type": "string",
            "nullable": true
          },
          "isCurated": {
            "type": "boolean",
            "nullable": true
          },
          "activeRevisionTags": {
            "type": "array",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "internalTags": {
            "type": "array",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "projectsCount": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "lastUpdated": {
            "nullable": true,
            "type": "string",
            "format": "date-time"
          },
          "latestRevisionDetails": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.environments.api.EnvironmentRevision"
          },
          "base": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.environments.api.EnvironmentRevision"
          },
          "templateMetadata": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.environments.api.EnvironmentTemplateMetadata"
          }
        },
        "required": [
          "id",
          "description",
          "archived",
          "name",
          "visibility",
          "supportedClusters"
        ]
      },
      "domino.nucleus.modelproduct.models.LinkAppToGoal": {
        "properties": {
          "projectId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "goalId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "appVersionId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          }
        },
        "required": [
          "projectId",
          "goalId",
          "appVersionId"
        ]
      },
      "domino.modelmanager.web.BuildModelImageApiResponse": {
        "properties": {
          "modelId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "environmentId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "projectId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "projectName": {
            "type": "string"
          },
          "buildStatus": {
            "type": "string"
          },
          "modelVersionId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "modelVersionNumber": {
            "type": "integer",
            "format": "int32"
          }
        },
        "required": [
          "modelId",
          "name",
          "environmentId",
          "projectId",
          "projectName",
          "buildStatus",
          "modelVersionId",
          "modelVersionNumber"
        ]
      },
      "domino.projects.api.UpdateProjectNotificationPreference": {
        "properties": {
          "collaboratorId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "notificationPreference": {
            "type": "string"
          }
        },
        "required": [
          "collaboratorId",
          "notificationPreference"
        ]
      },
      "domino.nucleus.dataset.ui.AdvancedDatasetConfigurationViewModel": {
        "properties": {
          "name": {
            "type": "string"
          },
          "yaml": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "yaml"
        ]
      },
      "domino.admin.interface.HardwareTierOverview": {
        "properties": {
          "id": {
            "type": "string"
          },
          "cores": {
            "type": "number",
            "format": "double"
          },
          "memoryInGiB": {
            "type": "number",
            "format": "double"
          },
          "isArchived": {
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "cores",
          "memoryInGiB",
          "isArchived"
        ]
      },
      "domino.activity.api.FileChangeActivityMetaData": {
        "type": "object",
        "properties": {
          "commitMessage": {
            "nullable": true,
            "type": "string"
          },
          "filesChanged": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "action": {
            "type": "string",
            "enum": [
              "Moved File/Folder",
              "File Fully Deleted",
              "Folder Renamed",
              "Folder Created/Modified",
              "File Renamed",
              "Removed Files/Folders",
              "File Changed",
              "Removed File/Folder",
              "File Created/Modified",
              "Moved Files/Folders"
            ]
          },
          "commitId": {
            "type": "string"
          },
          "fileChangedDueToId": {
            "pattern": "^[0-9a-f]{24}$",
            "type": "string"
          },
          "fileChangedDueTo": {
            "type": "string",
            "enum": [
              "workspace",
              "user"
            ]
          }
        },
        "required": [
          "filesChanged",
          "commitId",
          "action",
          "fileChangedDueTo",
          "fileChangedDueToId"
        ]
      },
      "domino.gruz.api.PortsRange": {
        "properties": {
          "from": {
            "type": "integer",
            "format": "int32"
          },
          "to": {
            "type": "integer",
            "format": "int32"
          }
        },
        "required": [
          "from",
          "to"
        ]
      },
      "domino.projects.templates.api.models.DatasourceDto": {
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "name": {
            "type": "string"
          },
          "ownername": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "ownername"
        ]
      },
      "domino.jobs.interface.Commenter": {
        "properties": {
          "commenterId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "username": {
            "type": "string"
          },
          "fullName": {
            "type": "string"
          }
        },
        "required": [
          "commenterId",
          "username",
          "fullName"
        ]
      },
      "domino.jobs.interface.ArtifactsInfoDto": {
        "properties": {
          "startState": {
            "$ref": "#/components/schemas/domino.jobs.interface.ArtifactsStartStateDto"
          },
          "endState": {
            "$ref": "#/components/schemas/domino.jobs.interface.ArtifactsObjectDto"
          },
          "changes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "startState",
          "endState",
          "changes"
        ]
      },
      "domino.dataset.api.DatasetScratchSpaceDto": {
        "properties": {
          "userId": {
            "type": "string"
          },
          "projectId": {
            "type": "string"
          },
          "lastUpdatedDateMillis": {
            "type": "integer",
            "format": "int64"
          },
          "lastSnapshotDateMillis": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "scratchSpaceSize": {
            "type": "integer",
            "format": "int64"
          },
          "isPartialSize": {
            "type": "boolean"
          },
          "id": {
            "type": "string"
          },
          "daysSinceLastSnapshot": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "promotionWarningStatus": {
            "type": "string",
            "enum": [
              "none",
              "low",
              "medium",
              "high"
            ]
          }
        },
        "required": [
          "userId",
          "projectId",
          "lastUpdatedDateMillis",
          "scratchSpaceSize",
          "isPartialSize",
          "id",
          "promotionWarningStatus"
        ]
      },
      "domino.hardwaretier.api.NewHardwareTierDto": {
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "hwtResources": {
            "$ref": "#/components/schemas/domino.hardwaretier.api.HwtResources"
          },
          "hwtFlags": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.hardwaretier.api.NewHwtFlags"
          },
          "clusterType": {
            "type": "string",
            "nullable": true,
            "enum": [
              "ClassicOnPremises",
              "ClassicAWS",
              "Kubernetes"
            ]
          },
          "gpuConfiguration": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.hardwaretier.api.HardwareTierGpuConfigurationDto"
          },
          "centsPerMinute": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "nodePool": {
            "type": "string"
          },
          "computeClusterRestrictions": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.hardwaretier.api.HardwareTierComputeClusterRestrictionsDto"
          },
          "maxSimultaneousExecutions": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "overprovisioning": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.hardwaretier.api.HardwareTierOverprovisioningDto"
          },
          "podCustomization": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.hardwaretier.api.HardwareTierPodCustomizationDto"
          },
          "dataPlaneId": {
            "nullable": true,
            "type": "string"
          },
          "tags": {
            "type": "array",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "availabilityZones": {
            "type": "array",
            "nullable": true,
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "id",
          "name",
          "hwtResources",
          "nodePool"
        ]
      },
      "domino.datasetrw.api.DatasetRwRole": {
        "properties": {}
      },
      "domino.modelmanager.web.ExportImageForSagemakerApiRequest": {
        "properties": {
          "registryUrl": {
            "type": "string"
          },
          "repository": {
            "type": "string"
          },
          "tag": {
            "type": "string",
            "nullable": true
          },
          "username": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "registryUrl",
          "repository"
        ]
      },
      "domino.workspace.web.FetchCheckpointForCommitsRequest": {
        "properties": {
          "dfsCommitId": {
            "type": "string"
          },
          "gitRepoCommits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.provenance.api.ProvenanceGitRepoCommit"
            }
          }
        },
        "required": [
          "dfsCommitId",
          "gitRepoCommits"
        ]
      },
      "domino.jobs.interface.WorkflowConfig": {
        "properties": {
          "workflowOrchestrator": {
            "type": "string"
          },
          "executionMetadata": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.jobs.interface.OrchestratorExecutionMetadata"
          },
          "inputInterface": {
            "type": "string",
            "nullable": true
          },
          "inputOutputInterface": {
            "type": "string",
            "nullable": true
          },
          "inputMetadataPrefix": {
            "type": "string",
            "nullable": true
          },
          "outputMetadataPrefix": {
            "type": "string",
            "nullable": true
          },
          "rawOutputPrefix": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "workflowOrchestrator"
        ]
      },
      "domino.workspaces.api.CommentThread": {
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "comments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.workspaces.api.Comment"
            }
          },
          "context": {
            "$ref": "#/components/schemas/domino.workspaces.api.CommentContext"
          }
        },
        "required": [
          "id",
          "comments",
          "context"
        ]
      },
      "domino.projects.templates.api.models.GitRepositoryDto": {
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "uri": {
            "type": "string"
          },
          "providerName": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "uri",
          "providerName"
        ]
      },
      "domino.activity.api.ActivityMetaData": {
        "properties": {}
      },
      "domino.featurestore.api.CredentialConfigs": {
        "properties": {
          "offlineStoreCredentials": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.featurestore.api.CredentialConfigItem"
            }
          },
          "onlineStoreCredentials": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.featurestore.api.CredentialConfigItem"
            }
          }
        },
        "required": [
          "offlineStoreCredentials",
          "onlineStoreCredentials"
        ]
      },
      "domino.projects.web.UpdateProjectGoalDescription": {
        "properties": {
          "description": {
            "type": "string"
          }
        },
        "required": [
          "description"
        ]
      },
      "domino.projects.api.repositories.GitProviderDto": {
        "properties": {
          "value": {
            "type": "string"
          },
          "label": {
            "type": "string"
          },
          "requiresDomain": {
            "type": "boolean"
          },
          "accessTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.projects.api.repositories.AccessTypeDto"
            }
          }
        },
        "required": [
          "value",
          "label",
          "requiresDomain",
          "accessTypes"
        ]
      },
      "domino.projects.web.CreateProjectGoal": {
        "properties": {
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "stageId": {
            "nullable": true,
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "assigneeId": {
            "nullable": true,
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          }
        },
        "required": [
          "title"
        ]
      },
      "domino.modelmanager.api.DeploymentLabels": {
        "properties": {
          "podNames": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "containerNames": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "podNames",
          "containerNames"
        ]
      },
      "domino.hardwaretier.api.HardwareTierWithCapacityDto": {
        "properties": {
          "hardwareTier": {
            "$ref": "#/components/schemas/domino.hardwaretier.api.HardwareTierDto"
          },
          "capacity": {
            "$ref": "#/components/schemas/domino.hardwaretier.api.HardwareTierCapacity"
          },
          "dataPlane": {
            "$ref": "#/components/schemas/domino.dataplane.DataPlaneDto"
          }
        },
        "required": [
          "hardwareTier",
          "capacity",
          "dataPlane"
        ]
      },
      "domino.jobs.interface.ComputeClusterConfigSpecWithSpecificRevisionDto": {
        "properties": {
          "clusterType": {
            "$ref": "#/components/schemas/ComputeClusterType"
          },
          "computeEnvironmentId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "computeEnvironmentRevisionSpec": {
            "$ref": "#/components/schemas/domino.environments.api.SpecificRevision"
          },
          "masterHardwareTierId": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.hardwaretier.api.HardwareTierIdentifier"
          },
          "workerCount": {
            "type": "integer",
            "format": "int32"
          },
          "maxWorkerCount": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "workerHardwareTierId": {
            "$ref": "#/components/schemas/domino.hardwaretier.api.HardwareTierIdentifier"
          },
          "workerStorage": {
            "nullable": true,
            "$ref": "#/components/schemas/Information"
          },
          "extraConfigs": {
            "nullable": true,
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "required": [
          "clusterType",
          "computeEnvironmentId",
          "computeEnvironmentRevisionSpec",
          "workerCount",
          "workerHardwareTierId"
        ]
      },
      "domino.admin.interface.ExecutionOverviewsWithTotalCount": {
        "properties": {
          "overviews": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.admin.interface.ExecutionOverview"
            }
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          }
        },
        "required": [
          "overviews",
          "totalCount"
        ]
      },
      "domino.modelmanager.api.ModelApiAggregatedUsageStatistics": {
        "properties": {
          "modelVersionId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32"
          },
          "timestamp": {
            "type": "integer",
            "format": "epoch"
          },
          "invocationCount": {
            "type": "integer",
            "format": "int64"
          }
        },
        "required": [
          "modelVersionId",
          "statusCode",
          "timestamp",
          "invocationCount"
        ]
      },
      "domino.gitproviders.api.RepoDTO": {
        "properties": {
          "repoName": {
            "type": "string"
          },
          "defaultBranch": {
            "type": "string",
            "nullable": true
          },
          "externalUrl": {
            "type": "string"
          }
        },
        "required": [
          "repoName",
          "externalUrl"
        ]
      },
      "domino.environments.api.Environment": {
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "description": {
            "type": "string"
          },
          "archived": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "visibility": {
            "type": "string",
            "enum": [
              "Global",
              "Private",
              "Organization"
            ]
          },
          "owner": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.environments.api.EnvironmentOwner"
          },
          "supportedClusters": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "Dask",
                "Spark",
                "Ray",
                "MPI"
              ]
            }
          },
          "isCurated": {
            "type": "boolean"
          },
          "activeRevisionTags": {
            "type": "array",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "internalTags": {
            "type": "array",
            "nullable": true,
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "id",
          "description",
          "archived",
          "name",
          "visibility",
          "supportedClusters",
          "isCurated"
        ]
      },
      "domino.projects.templates.api.models.HardwareTierDto": {
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "domino.modelmanager.api.responses.ModelPermissionsForUIApiResponse": {
        "properties": {
          "canCreateModelApi": {
            "type": "boolean"
          }
        },
        "required": [
          "canCreateModelApi"
        ]
      },
      "domino.workspaces.api.LogContent": {
        "properties": {
          "timestamp": {
            "type": "integer",
            "format": "epoch"
          },
          "logType": {
            "type": "string",
            "enum": [
              "stdout",
              "stderr",
              "prepareoutput",
              "complete"
            ]
          },
          "log": {
            "type": "string"
          },
          "size": {
            "type": "integer",
            "format": "int64"
          }
        },
        "required": [
          "timestamp",
          "logType",
          "log",
          "size"
        ]
      },
      "domino.workspaces.api.ExecutionCheckpointStatus": {
        "properties": {
          "checkpoint": {
            "type": "string",
            "enum": [
              "UserFilesSaved",
              "ResourcesCreated",
              "NodeAssigned",
              "VolumesMounted",
              "ResourcesDeleted",
              "QuotaChecked",
              "ExecutionAvailable",
              "VolumesReleased",
              "UserCodeLaunched",
              "FilesPrepared",
              "Acknowledged",
              "ImagesPulled"
            ]
          },
          "status": {
            "type": "string",
            "enum": [
              "Pending",
              "Completed",
              "Error"
            ]
          },
          "message": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "checkpoint",
          "status"
        ]
      },
      "domino.activity.api.ProjectGoalJobLinkActivityMetadata": {
        "properties": {
          "action": {
            "type": "string",
            "enum": [
              "added",
              "removed"
            ]
          },
          "jobNumber": {
            "type": "integer",
            "format": "int32"
          },
          "jobId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "projectGoalTitle": {
            "type": "string"
          }
        },
        "required": [
          "action",
          "jobNumber",
          "jobId",
          "projectGoalTitle"
        ]
      },
      "domino.projects.api.UseableProjectEnvironmentsDTO": {
        "properties": {
          "currentlySelectedEnvironment": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.projects.api.SelectedEnvironmentDTO"
          },
          "environments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.projects.api.ProjectEnvironmentDTO"
            }
          }
        },
        "required": [
          "environments"
        ]
      },
      "domino.quota.web.UpdateQuotaRequest": {
        "type": "object",
        "properties": {
          "targetId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$",
            "description": "Id of user for quota"
          },
          "quotaLimit": {
            "type": "integer",
            "format": "int64",
            "description": "quota limit"
          },
          "actionMetadata": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/domino.quota.api.QuotaActionMetadata"
            }
          }
        }
      },
      "domino.mlflow.api.MlflowData": {
        "properties": {
          "projectId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "executionId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "projectName": {
            "type": "string"
          },
          "environmentId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "environmentRevisionId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "hardwareTierId": {
            "type": "string"
          },
          "mlflowSourceType": {
            "type": "string",
            "enum": [
              "JOB",
              "NOTEBOOK",
              "LOCAL",
              "UNKNOWN",
              "PIPELINE",
              "PROJECT"
            ]
          },
          "runNumber": {
            "type": "integer",
            "format": "int32"
          },
          "datasetInfo": {
            "type": "string"
          },
          "dataSources": {
            "type": "string"
          },
          "accessedDataSources": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.datasource.api.DataSourceAccessedInfo"
            }
          },
          "latestCheckpoint": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.provenance.api.ProvenanceCheckpointDto"
          }
        },
        "required": [
          "projectId",
          "executionId",
          "projectName",
          "environmentId",
          "environmentRevisionId",
          "hardwareTierId",
          "mlflowSourceType",
          "runNumber",
          "datasetInfo",
          "dataSources",
          "accessedDataSources"
        ]
      },
      "domino.projects.api.EntityLink": {
        "properties": {
          "entityLinkType": {
            "type": "string",
            "enum": [
              "job",
              "model_api",
              "workspace",
              "app",
              "file"
            ]
          },
          "metadata": {
            "$ref": "#/components/schemas/domino.projects.api.EntityLinkMetadata"
          },
          "timestamp": {
            "type": "integer",
            "format": "epoch"
          },
          "createdBy": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          }
        },
        "required": [
          "entityLinkType",
          "metadata",
          "timestamp",
          "createdBy"
        ]
      },
      "domino.common.gateway.search.EntityHighlight": {
        "properties": {
          "entityName": {
            "type": "string"
          },
          "highlightedEntityName": {
            "type": "string"
          }
        },
        "required": [
          "entityName",
          "highlightedEntityName"
        ]
      },
      "domino.projects.api.SupportedActionDetails": {
        "properties": {
          "kind": {
            "type": "string",
            "enum": [
              "CreateTemplate",
              "ProjectCopy",
              "ProjectFork",
              "AuthOnly"
            ]
          },
          "supported": {
            "type": "boolean",
            "nullable": true
          },
          "authorized": {
            "type": "boolean"
          },
          "reason": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "kind",
          "authorized"
        ]
      },
      "domino.common.gateway.search.SearchProjectDTO": {
        "properties": {
          "snippet": {
            "type": "string"
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.common.gateway.search.SearchProjectTag"
            }
          },
          "isRestricted": {
            "type": "boolean",
            "nullable": true
          },
          "blockerReason": {
            "type": "string",
            "nullable": true
          },
          "goal": {
            "type": "string",
            "nullable": true
          },
          "goalLink": {
            "type": "string"
          }
        },
        "required": [
          "snippet",
          "tags",
          "goalLink"
        ]
      },
      "domino.datamount.web.FindByPvcNamesRequest": {
        "properties": {
          "pvcNames": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "pvcNames"
        ]
      },
      "domino.common.user.PersonDTO": {
        "properties": {
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "fullName": {
            "type": "string"
          },
          "userName": {
            "type": "string"
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "companyName": {
            "type": "string",
            "nullable": true
          },
          "phoneNumber": {
            "type": "string",
            "nullable": true
          },
          "avatarUrl": {
            "type": "string"
          },
          "id": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "idpId": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "firstName",
          "lastName",
          "fullName",
          "userName",
          "avatarUrl",
          "id"
        ]
      },
      "domino.projectManagement.api.PmTicketType": {
        "properties": {
          "id": {
            "$ref": "#/components/schemas/domino.projectManagement.api.PmId"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "domino.projects.api.ProjectPortfolioPaginationFilter": {
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/domino.apiserverutils.pagination.PaginationFilter"
          },
          "sortBy": {
            "type": "string",
            "enum": [
              "duration",
              "status",
              "collaborators",
              "centsPerMinute",
              "lastActivity",
              "projectName",
              "createdOn"
            ]
          },
          "searchQuery": {
            "type": "string",
            "nullable": true
          },
          "stageId": {
            "type": "array",
            "items": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            }
          },
          "status": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "active",
                "complete"
              ]
            }
          },
          "isBlocked": {
            "type": "boolean",
            "nullable": true
          }
        },
        "required": [
          "pagination",
          "sortBy",
          "stageId",
          "status"
        ]
      },
      "domino.activity.api.ProjectStatusChangeActivityMetaData": {
        "properties": {
          "projectName": {
            "type": "string"
          },
          "fromStatus": {
            "$ref": "#/components/schemas/domino.activity.api.ProjectStatus"
          },
          "toStatus": {
            "$ref": "#/components/schemas/domino.activity.api.ProjectStatus"
          }
        },
        "required": [
          "projectName",
          "fromStatus",
          "toStatus"
        ]
      },
      "domino.projects.templates.api.models.EnvironmentDto": {
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "domino.admin.usermanagement.api.UsersResponse": {
        "properties": {
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.admin.usermanagement.api.AdminUserManagementUser"
            }
          },
          "metadata": {
            "$ref": "#/components/schemas/domino.admin.usermanagement.api.UsersMetadata"
          }
        },
        "required": [
          "users",
          "metadata"
        ]
      },
      "domino.scheduledjob.api.EditCronScheduleDTO": {
        "properties": {
          "cronString": {
            "type": "string"
          },
          "isCustom": {
            "type": "boolean"
          }
        },
        "required": [
          "cronString",
          "isCustom"
        ]
      },
      "domino.datasetrw.api.DatasetRwCopyTimeEstimateDto": {
        "properties": {
          "isLessThanMinutesEstimate": {
            "type": "boolean"
          },
          "minutesEstimate": {
            "type": "integer",
            "format": "int64"
          }
        },
        "required": [
          "isLessThanMinutesEstimate",
          "minutesEstimate"
        ]
      },
      "domino.datasetrw.api.DatasetRwFileDetailsRowDto": {
        "properties": {
          "name": {
            "$ref": "#/components/schemas/domino.datasetrw.api.DatasetRwFileDetailsDto"
          },
          "size": {
            "$ref": "#/components/schemas/domino.datasetrw.api.DatasetRwFileDetailsDto"
          },
          "lastModified": {
            "type": "integer",
            "format": "int64"
          }
        },
        "required": [
          "name",
          "size",
          "lastModified"
        ]
      },
      "domino.nucleus.modelproduct.models.ModelProductError": {
        "properties": {
          "message": {
            "type": "string"
          },
          "correlationId": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "message"
        ]
      },
      "domino.admin.usermanagement.api.UsersWithUsageResponse": {
        "properties": {
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.admin.usermanagement.api.AdminUserManagementUserWithUsage"
            }
          },
          "metadata": {
            "$ref": "#/components/schemas/domino.admin.usermanagement.api.UsersWithUsageMetadata"
          }
        },
        "required": [
          "users",
          "metadata"
        ]
      },
      "domino.workspace.api.WorkspaceRepositoryState": {
        "properties": {
          "name": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "Unpushed",
              "UnpushedDirty",
              "Clean",
              "Unknown",
              "Modified"
            ]
          },
          "changes": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.workspace.api.RepositoryChanges"
          }
        },
        "required": [
          "name",
          "status"
        ]
      },
      "domino.admin.interface.ProjectSearchResultsDto": {
        "properties": {
          "page": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.admin.interface.UserProjectEntry"
            }
          },
          "totalMatches": {
            "type": "integer",
            "format": "int64"
          }
        },
        "required": [
          "page",
          "totalMatches"
        ]
      },
      "domino.environments.api.RevisionSummary": {
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "number": {
            "type": "integer",
            "format": "int32"
          },
          "created": {
            "type": "integer",
            "format": "epoch"
          }
        },
        "required": [
          "id",
          "number",
          "created"
        ]
      },
      "domino.datasource.model.DatasourceType": {
        "type": "string",
        "enum": [
          "ADLSConfig",
          "AzureBlobStorageConfig",
          "BigQueryConfig",
          "ClickHouseConfig",
          "DatabricksConfig",
          "DB2Config",
          "DruidConfig",
          "GCSConfig",
          "GenericJDBCConfig",
          "GenericS3Config",
          "GreenplumConfig",
          "IgniteConfig",
          "MariaDBConfig",
          "MongoDBConfig",
          "MySQLConfig",
          "NetezzaConfig",
          "OracleConfig",
          "PalantirConfig",
          "PineconeConfig",
          "PostgreSQLConfig",
          "QdrantConfig",
          "RedshiftConfig",
          "S3Config",
          "SAPHanaConfig",
          "SingleStoreConfig",
          "SQLServerConfig",
          "SnowflakeConfig",
          "SynapseConfig",
          "TabularS3GlueConfig",
          "TeradataConfig",
          "TrinoConfig",
          "VerticaConfig"
        ]
      },
      "domino.datasource.web.CheckDataSourceConnectionRequest": {
        "properties": {
          "authType": {
            "type": "string",
            "enum": [
              "AzureBasic",
              "Basic",
              "GCPBasic",
              "AWSIAMBasic",
              "AWSIAMBasicNoOverride",
              "AWSIAMRole",
              "AWSIAMRoleWithUsername",
              "OAuth",
              "PersonalToken",
              "UserOnly",
              "BasicOptional",
              "NoAuth",
              "ClientIdSecret",
              "OAuthToken",
              "APIKey"
            ]
          },
          "credentialType": {
            "type": "string",
            "enum": [
              "Individual",
              "Shared"
            ]
          },
          "dataSourceType": {
            "type": "string",
            "enum": [
              "ADLSConfig",
              "AzureBlobStorageConfig",
              "BigQueryConfig",
              "ClickHouseConfig",
              "DatabricksConfig",
              "DB2Config",
              "DruidConfig",
              "GCSConfig",
              "GenericJDBCConfig",
              "GenericS3Config",
              "GreenplumConfig",
              "IgniteConfig",
              "MariaDBConfig",
              "MongoDBConfig",
              "MySQLConfig",
              "NetezzaConfig",
              "OracleConfig",
              "PalantirConfig",
              "PineconeConfig",
              "PostgreSQLConfig",
              "QdrantConfig",
              "RedshiftConfig",
              "S3Config",
              "SAPHanaConfig",
              "SingleStoreConfig",
              "SQLServerConfig",
              "SnowflakeConfig",
              "SynapseConfig",
              "TabularS3GlueConfig",
              "TeradataConfig",
              "TrinoConfig",
              "VerticaConfig"
            ]
          },
          "config": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "secretCredential": {
            "type": "string",
            "nullable": true
          },
          "visibleCredential": {
            "type": "string",
            "nullable": true
          },
          "dataPlanes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.datasource.api.DataSourceDataPlaneInfo"
            }
          },
          "useAllDataPlanes": {
            "type": "boolean"
          }
        },
        "required": [
          "authType",
          "credentialType",
          "dataSourceType",
          "config",
          "dataPlanes",
          "useAllDataPlanes"
        ]
      },
      "domino.files.interface.FilesPermissionsDto": {
        "properties": {
          "globalUseFileStorage": {
            "type": "boolean"
          },
          "canRun": {
            "type": "boolean"
          },
          "canEdit": {
            "type": "boolean"
          },
          "canBrowseReadFiles": {
            "type": "boolean"
          },
          "canListProject": {
            "type": "boolean"
          },
          "canFullDelete": {
            "type": "boolean"
          },
          "canChangeProjectSettings": {
            "type": "boolean"
          }
        },
        "required": [
          "globalUseFileStorage",
          "canRun",
          "canEdit",
          "canBrowseReadFiles",
          "canListProject",
          "canFullDelete",
          "canChangeProjectSettings"
        ]
      },
      "domino.modelmanager.web.ModelExportLogsApiResponse": {
        "properties": {
          "modelId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "modelVersionId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "exportId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "status": {
            "type": "string"
          },
          "logs": {
            "type": "string"
          }
        },
        "required": [
          "modelId",
          "modelVersionId",
          "exportId",
          "status",
          "logs"
        ]
      },
      "domino.computegrid.ComputeClusterFileSyncStatusResponse": {
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "NoSync",
              "Syncing",
              "Synced",
              "Failed"
            ]
          },
          "reason": {
            "type": "string",
            "enum": [
              "Synced",
              "NoSyncDetected",
              "StillSyncing",
              "ClusterNotReady",
              "WorkerSyncFailure",
              "Unknown",
              "Timeout"
            ]
          },
          "message": {
            "type": "string"
          },
          "lastSyncedStartedAt": {
            "nullable": true,
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "status",
          "reason",
          "message"
        ]
      },
      "domino.datasource.web.UpdateDataSourceDataPlanesRequest": {
        "properties": {
          "dataPlanes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.datasource.api.DataSourceDataPlaneInfo"
            }
          }
        },
        "required": [
          "dataPlanes"
        ]
      },
      "domino.common.models.DiagnosticStatistic": {
        "properties": {
          "key": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "required": [
          "key",
          "value"
        ]
      },
      "domino.projects.api.ProjectPortfolioMetaData": {
        "properties": {
          "projectStatusType": {
            "type": "string",
            "enum": [
              "active",
              "complete"
            ]
          }
        },
        "required": [
          "projectStatusType"
        ]
      },
      "domino.server.account.api.GitCredentialDto": {
        "properties": {}
      },
      "domino.jobs.interface.DependentDatasetMount": {
        "properties": {
          "datasetId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "snapshotId": {
            "nullable": true,
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "snapshotVersion": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "datasetName": {
            "type": "string"
          },
          "projectId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "isInput": {
            "type": "boolean"
          },
          "containerPath": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "datasetId",
          "datasetName",
          "projectId",
          "isInput"
        ]
      },
      "domino.projects.api.CopiedGitRepoMetadata": {
        "properties": {
          "repoName": {
            "type": "string"
          },
          "ownerName": {
            "type": "string"
          },
          "visibility": {
            "type": "string",
            "enum": [
              "Public",
              "Private",
              "Internal"
            ]
          }
        },
        "required": [
          "repoName",
          "ownerName",
          "visibility"
        ]
      },
      "domino.modelmanager.api.responses.ModelExportVersionsApiResponse": {
        "properties": {
          "currentItemCount": {
            "type": "integer",
            "format": "int32"
          },
          "itemsPerPage": {
            "type": "integer",
            "format": "int32"
          },
          "startIndex": {
            "type": "integer",
            "format": "int32"
          },
          "totalItems": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.modelmanager.api.ModelExportVersion"
            }
          }
        },
        "required": [
          "currentItemCount",
          "itemsPerPage",
          "startIndex",
          "totalItems",
          "items"
        ]
      },
      "domino.projectManagement.web.LinkWorkspaceToGoalRequest": {
        "properties": {
          "projectId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "goalId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          }
        },
        "required": [
          "projectId",
          "goalId"
        ]
      },
      "domino.workspace.web.UpdateWorkspaceTitleRequest": {
        "properties": {
          "title": {
            "type": "string"
          }
        },
        "required": [
          "title"
        ]
      },
      "domino.modelmanager.api.Model": {
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "activeVersionNumber": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "activeModelVersionId": {
            "nullable": true,
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "activeVersionDataPlaneId": {
            "nullable": true,
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "activeVersionStatus": {
            "type": "string",
            "nullable": true,
            "enum": [
              "Starting",
              "Ready to run",
              "Unreachable",
              "Running",
              "Preparing to build",
              "Failed",
              "Building",
              "Stalled",
              "Stopped"
            ]
          },
          "lastModified": {
            "type": "integer",
            "format": "epoch"
          },
          "projectId": {
            "nullable": true,
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "projectName": {
            "type": "string",
            "nullable": true
          },
          "projectOwnerUsername": {
            "type": "string",
            "nullable": true
          },
          "owners": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.modelmanager.api.ModelOwner"
            }
          },
          "isAsync": {
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "name",
          "description",
          "lastModified",
          "owners",
          "isAsync"
        ]
      },
      "InnerMap": {
        "type": "object",
        "additionalProperties": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "domino.workspace.api.RestartableWorkspaceChangeEvent": {
        "properties": {
          "correlationId": {
            "type": "string"
          },
          "room": {
            "type": "string"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "workspace": {
            "$ref": "#/components/schemas/domino.workspace.api.WorkspaceDto"
          }
        },
        "required": [
          "correlationId",
          "room",
          "timestamp",
          "workspace"
        ]
      },
      "domino.computegrid.GpuUsageSnapshot": {
        "properties": {
          "timestamp": {
            "type": "integer",
            "format": "epoch"
          },
          "gpu": {
            "type": "number",
            "format": "double"
          },
          "memory": {
            "type": "number",
            "format": "double"
          },
          "number": {
            "type": "integer",
            "format": "int32"
          },
          "driverVersion": {
            "type": "string"
          },
          "device": {
            "type": "string"
          },
          "modelName": {
            "type": "string"
          },
          "pod": {
            "type": "string"
          }
        },
        "required": [
          "timestamp",
          "gpu",
          "memory",
          "number",
          "driverVersion",
          "device",
          "modelName",
          "pod"
        ]
      },
      "domino.nucleus.project.models.UpdateProjectVisibility": {
        "properties": {
          "visibility": {
            "type": "string",
            "enum": [
              "Public",
              "Searchable",
              "Private"
            ]
          }
        },
        "required": [
          "visibility"
        ]
      },
      "domino.computegrid.MonitoredResourceExecutionCheckpoint": {
        "properties": {
          "checkpointName": {
            "type": "string",
            "enum": [
              "UserFilesSaved",
              "ResourcesCreated",
              "NodeAssigned",
              "VolumesMounted",
              "ResourcesDeleted",
              "QuotaChecked",
              "ExecutionAvailable",
              "VolumesReleased",
              "UserCodeLaunched",
              "FilesPrepared",
              "Acknowledged",
              "ImagesPulled"
            ]
          },
          "status": {
            "type": "string",
            "enum": [
              "Pending",
              "Completed",
              "Error"
            ]
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "completedTimestamp": {
            "nullable": true,
            "type": "string",
            "format": "date-time"
          },
          "timeSpentMillis": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "combinedResourceStatus": {
            "type": "string",
            "nullable": true,
            "enum": [
              "READY",
              "IN_PROGRESS",
              "WARNING",
              "UNKNOWN"
            ]
          },
          "startupTip": {
            "type": "string",
            "nullable": true
          },
          "resources": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/domino.computegrid.MonitoredExecutionResourceList"
            }
          }
        },
        "required": [
          "checkpointName",
          "status"
        ]
      },
      "domino.workspaces.web.WorkspaceRelaunchOperationRequest": {
        "properties": {
          "projectId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "workspaceId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "useOriginalInputCommit": {
            "type": "boolean"
          }
        },
        "required": [
          "projectId",
          "workspaceId",
          "useOriginalInputCommit"
        ]
      },
      "domino.nucleus.modelproduct.models.ModelProduct": {
        "properties": {
          "modelProductType": {
            "type": "string",
            "enum": [
              "APP",
              "BATCH",
              "REPORT",
              "SCORER"
            ]
          },
          "projectId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "publisher": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.common.user.Person"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "lastUpdated": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "type": "string"
          },
          "media": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "openUrl": {
            "type": "string",
            "nullable": true
          },
          "projectUrl": {
            "type": "string",
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "stats": {
            "$ref": "#/components/schemas/domino.nucleus.modelproduct.models.Stats"
          },
          "appExtension": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.nucleus.modelproduct.models.App"
          },
          "id": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "latestAppVersionId": {
            "nullable": true,
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "runningAppUrl": {
            "type": "string",
            "nullable": true
          },
          "runningCommitId": {
            "type": "string",
            "nullable": true
          },
          "environmentId": {
            "nullable": true,
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "hardwareTierId": {
            "type": "string",
            "nullable": true
          },
          "permissionsData": {
            "$ref": "#/components/schemas/domino.nucleus.modelproduct.models.PermissionsData"
          },
          "runDescribeUrl": {
            "type": "string",
            "nullable": true
          },
          "goalIds": {
            "type": "array",
            "nullable": true,
            "items": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            }
          }
        },
        "required": [
          "modelProductType",
          "projectId",
          "name",
          "created",
          "lastUpdated",
          "status",
          "media",
          "tags",
          "stats",
          "id",
          "permissionsData"
        ]
      },
      "domino.datasetrw.web.UpdateDatasetStatusRequest": {
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "Pending",
              "Deleted",
              "DeletionInProgress",
              "Failed",
              "Active",
              "MarkedForDeletion"
            ]
          }
        },
        "required": [
          "status"
        ]
      },
      "domino.guardrails.web.CreateCommentRequest": {
        "type": "object",
        "required": [
          "deliverableId",
          "projectId",
          "comment"
        ],
        "properties": {
          "deliverableId": {
            "type": "string"
          },
          "projectId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "artifactId": {
            "type": "string"
          },
          "approvalId": {
            "type": "string"
          },
          "comment": {
            "type": "string"
          }
        }
      },
      "domino.projects.templates.api.models.UpdateCustomerTemplateDto": {
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "visibility": {
            "type": "string",
            "nullable": true,
            "enum": [
              "private",
              "all_non_anonymous_users"
            ]
          },
          "collaborators": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/domino.projects.templates.api.models.TemplateCollaboratorDto"
            }
          },
          "tags": {
            "type": "array",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "isCompanyOfficial": {
            "type": "boolean",
            "nullable": true
          }
        }
      },
      "domino.common.user.UserCreationContext": {
        "properties": {
          "assignableRoles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.common.user.UserRole"
            }
          }
        },
        "required": [
          "assignableRoles"
        ]
      },
      "domino.projects.api.ProjectStatus": {
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "active",
              "complete"
            ]
          },
          "isBlocked": {
            "type": "boolean"
          },
          "blockedReason": {
            "type": "string",
            "nullable": true
          },
          "completedMessage": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "status",
          "isBlocked"
        ]
      },
      "domino.nucleus.modelproduct.models.StartParams": {
        "properties": {
          "environmentId": {
            "nullable": true,
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "hardwareTierId": {
            "type": "string",
            "nullable": true
          },
          "datasetConfigName": {
            "type": "string",
            "nullable": true
          },
          "externalVolumeMountIds": {
            "type": "array",
            "nullable": true,
            "items": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            }
          }
        }
      },
      "domino.datasetrw.api.DatasetRwStorageInfoDto": {
        "properties": {
          "name": {
            "type": "string"
          },
          "dataPlaneName": {
            "type": "string",
            "nullable": true
          },
          "pvcName": {
            "type": "string",
            "nullable": true
          },
          "isAccessible": {
            "type": "boolean",
            "nullable": true
          },
          "mountPath": {
            "type": "string",
            "nullable": true
          },
          "subDir": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "name"
        ]
      },
      "domino.projects.web.CreateProjectStage": {
        "properties": {
          "stage": {
            "type": "string"
          }
        },
        "required": [
          "stage"
        ]
      },
      "domino.nucleus.dataset.ui.MountConfigViewModel": {
        "properties": {
          "datasetId": {
            "type": "string"
          },
          "useLatest": {
            "type": "boolean"
          },
          "useTag": {
            "type": "string",
            "nullable": true
          },
          "useId": {
            "nullable": true,
            "type": "string"
          },
          "path": {
            "type": "string"
          }
        },
        "required": [
          "datasetId",
          "useLatest",
          "path"
        ]
      },
      "domino.projects.api.AssetUsageValues": {
        "properties": {
          "timestamp": {
            "type": "integer",
            "format": "epoch"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32"
          },
          "usageCount": {
            "type": "integer",
            "format": "int64"
          }
        },
        "required": [
          "timestamp",
          "statusCode",
          "usageCount"
        ]
      },
      "domino.workspace.api.WorkspaceSessionStatsDto": {
        "properties": {
          "lastStartTime": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "lastEndTime": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "runTimeSec": {
            "type": "integer",
            "format": "int64"
          }
        },
        "required": [
          "runTimeSec"
        ]
      },
      "domino.projects.api.ProjectHubTemplateResult": {
        "properties": {
          "templateId": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "base64Logo": {
            "type": "string",
            "nullable": true
          },
          "categories": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "mainRepository": {
            "$ref": "#/components/schemas/domino.projects.api.repositories.responses.ProjectTemplateRepositoryDTO"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "format": "date-time"
          },
          "owner": {
            "$ref": "#/components/schemas/domino.projects.templates.api.models.NamedLink"
          },
          "models": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.projects.templates.api.models.ProjectHubModelDto"
            }
          },
          "license": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.projects.templates.api.models.NamedLink"
          },
          "data": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.projects.templates.api.models.NamedOptionalLink"
          },
          "dataFormat": {
            "type": "string",
            "nullable": true
          },
          "recommended": {
            "type": "boolean",
            "nullable": true
          },
          "prerequisites": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/domino.projects.api.ProjectTemplatePrerequisites"
            }
          },
          "goals": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/domino.projects.templates.api.models.ProjectTemplateGoalsDto"
            }
          },
          "hardwareTier": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.projects.templates.api.models.ValueOptionalLink"
          },
          "environmentReqs": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.projects.templates.api.models.ValueOptionalLink"
          },
          "environment": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.projects.templates.api.models.ProjectTemplateEnvironmentDto"
          },
          "revisionId": {
            "type": "string"
          },
          "importedRepositories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.projects.templates.api.models.ProjectTemplateImportedRepositoryDto"
            }
          },
          "projectSettings": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.projects.templates.api.models.ProjectTemplateProjectSettingsDto"
          },
          "dependencies": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/domino.projects.templates.api.models.DependencyTemplateDto"
            }
          },
          "supportedDominoVersions": {
            "type": "array",
            "nullable": true,
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "templateId",
          "title",
          "categories",
          "mainRepository",
          "created",
          "updated",
          "owner",
          "models",
          "revisionId",
          "importedRepositories"
        ]
      },
      "domino.workspace.api.WorkspaceAdminPageClusterInfo": {
        "properties": {
          "clusterType": {
            "$ref": "#/components/schemas/ComputeClusterType"
          },
          "minWorkers": {
            "type": "integer",
            "format": "int32"
          },
          "maxWorkers": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "required": [
          "clusterType",
          "minWorkers"
        ]
      },
      "domino.jobs.interface.Job": {
        "properties": {
          "number": {
            "type": "integer",
            "format": "int32"
          },
          "id": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "queuedJobHistoryDetails": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.jobs.interface.QueuedJobHistoryDetails"
          },
          "stageTime": {
            "$ref": "#/components/schemas/domino.jobs.interface.StageTime"
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.jobs.interface.TagApplication"
            }
          },
          "jobRunCommand": {
            "type": "string"
          },
          "usage": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.jobs.interface.JobUsageInJob"
          },
          "startedBy": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.jobs.interface.JobStartedBy"
          },
          "commentsCount": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "projectId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "commitDetails": {
            "$ref": "#/components/schemas/domino.jobs.interface.CommitDetails"
          },
          "dominoStats": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.jobs.interface.DominoStats"
            }
          },
          "statuses": {
            "$ref": "#/components/schemas/domino.jobs.interface.JobStatuses"
          },
          "mainRepoGitRef": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.projects.api.repositories.ReferenceDTO"
          },
          "dependentRepositories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.jobs.interface.DependentRepository"
            }
          },
          "dependentDatasetMounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.jobs.interface.DependentDatasetMount"
            }
          },
          "dependentProjects": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.jobs.interface.DependentProject"
            }
          },
          "suggestDatasets": {
            "type": "boolean"
          },
          "goalIds": {
            "type": "array",
            "items": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            }
          },
          "runLauncherId": {
            "nullable": true,
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "dependentExternalVolumeMounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.jobs.interface.DependentExternalVolumeMount"
            }
          },
          "computeCluster": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.jobs.interface.ComputeClusterConfigSpecDto"
          },
          "dataPlane": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.dataplane.DataPlaneDto"
          },
          "snapshotDatasetsOnCompletion": {
            "type": "boolean"
          },
          "workflowDetails": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.jobs.interface.WorkflowDetails"
          },
          "abnormalStatus": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.jobs.interface.AbnormalStatus"
          }
        },
        "required": [
          "number",
          "id",
          "stageTime",
          "tags",
          "jobRunCommand",
          "commentsCount",
          "projectId",
          "commitDetails",
          "dominoStats",
          "statuses",
          "dependentRepositories",
          "dependentDatasetMounts",
          "dependentProjects",
          "suggestDatasets",
          "goalIds",
          "dependentExternalVolumeMounts",
          "snapshotDatasetsOnCompletion"
        ]
      },
      "domino.projects.api.repositories.responses.GetBranchesApiResponse": {
        "properties": {
          "currentItemCount": {
            "type": "integer",
            "format": "int32"
          },
          "itemsPerPage": {
            "type": "integer",
            "format": "int32"
          },
          "startIndex": {
            "type": "integer",
            "format": "int32"
          },
          "totalItems": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.projects.api.repositories.responses.BranchEntryDTO"
            }
          }
        },
        "required": [
          "currentItemCount",
          "itemsPerPage",
          "startIndex",
          "totalItems",
          "items"
        ]
      },
      "domino.admin.interface.ConfigSettingDto": {
        "properties": {
          "namespace": {
            "type": "string"
          },
          "nameMaybe": {
            "type": "string",
            "nullable": true
          },
          "key": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "required": [
          "namespace",
          "key",
          "value"
        ]
      },
      "domino.nucleus.project.models.Collaborator": {
        "properties": {
          "collaboratorId": {
            "type": "string"
          },
          "projectRole": {
            "type": "string",
            "enum": [
              "ProjectImporter",
              "Contributor",
              "ResultsConsumer",
              "LauncherUser",
              "Owner"
            ]
          }
        },
        "required": [
          "collaboratorId",
          "projectRole"
        ]
      },
      "domino.workspaces.api.ExecutorInfo": {
        "properties": {
          "executorInstanceId": {
            "type": "string"
          },
          "region": {
            "type": "string"
          },
          "humanName": {
            "type": "string",
            "nullable": true
          },
          "publicAddress": {
            "type": "string",
            "nullable": true
          },
          "privateAddress": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "executorInstanceId",
          "region"
        ]
      },
      "domino.jobs.web.UnlinkJobfromGoalRequest": {
        "properties": {
          "goalId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          }
        },
        "required": [
          "goalId"
        ]
      },
      "domino.datasource.api.DataSourceDto": {
        "type": "object",
        "properties": {
          "lastUpdatedBy": {
            "pattern": "^[0-9a-f]{24}$",
            "type": "string"
          },
          "addedBy": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          },
          "displayName": {
            "type": "string"
          },
          "dataPlanes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.datasource.api.DataSourceDataPlaneInfo"
            }
          },
          "description": {
            "nullable": true,
            "type": "string"
          },
          "ownerInfo": {
            "$ref": "#/components/schemas/domino.datasource.api.DataSourceOwnerInfoDto"
          },
          "projectIds": {
            "type": "array",
            "items": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            }
          },
          "ownerId": {
            "pattern": "^[0-9a-f]{24}$",
            "type": "string"
          },
          "lastUpdated": {
            "format": "int64",
            "type": "integer"
          },
          "adminInfo": {
            "$ref": "#/components/schemas/domino.datasource.api.DataSourceAdminInfoDto"
          },
          "addedToProjectTimeMap": {
            "additionalProperties": {
              "type": "integer",
              "format": "int64"
            },
            "type": "object"
          },
          "dataSourcePermissions": {
            "$ref": "#/components/schemas/domino.datasource.api.DataSourcePermissionsDto"
          },
          "name": {
            "type": "string"
          },
          "lastAccessed": {
            "additionalProperties": {
              "type": "integer",
              "format": "int64"
            },
            "type": "object"
          },
          "id": {
            "pattern": "^[0-9a-f]{24}$",
            "type": "string"
          },
          "authType": {
            "type": "string",
            "enum": [
              "AzureBasic",
              "Basic",
              "GCPBasic",
              "AWSIAMBasic",
              "AWSIAMBasicNoOverride",
              "AWSIAMRole",
              "AWSIAMRoleWithUsername",
              "OAuth",
              "PersonalToken",
              "UserOnly",
              "BasicOptional",
              "NoAuth",
              "ClientIdSecret",
              "OAuthToken",
              "APIKey"
            ]
          },
          "config": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          },
          "dataSourceType": {
            "type": "string",
            "enum": [
              "ADLSConfig",
              "AzureBlobStorageConfig",
              "BigQueryConfig",
              "ClickHouseConfig",
              "DatabricksConfig",
              "DB2Config",
              "DruidConfig",
              "GCSConfig",
              "GenericJDBCConfig",
              "GenericS3Config",
              "GreenplumConfig",
              "IgniteConfig",
              "MariaDBConfig",
              "MongoDBConfig",
              "MySQLConfig",
              "NetezzaConfig",
              "OracleConfig",
              "PalantirConfig",
              "PineconeConfig",
              "PostgreSQLConfig",
              "QdrantConfig",
              "RedshiftConfig",
              "S3Config",
              "SAPHanaConfig",
              "SingleStoreConfig",
              "SQLServerConfig",
              "SnowflakeConfig",
              "SynapseConfig",
              "TabularS3GlueConfig",
              "TeradataConfig",
              "TrinoConfig",
              "VerticaConfig"
            ]
          },
          "useAllDataPlanes": {
            "type": "boolean"
          },
          "status": {
            "type": "string",
            "enum": [
              "Pending",
              "Active",
              "Deleted"
            ]
          },
          "engineInfo": {
            "$ref": "#/components/schemas/domino.datasource.api.EngineInfoDto"
          }
        },
        "required": [
          "id",
          "name",
          "ownerId",
          "ownerInfo",
          "addedBy",
          "dataSourceType",
          "config",
          "dataSourcePermissions",
          "lastUpdated",
          "lastUpdatedBy",
          "lastAccessed",
          "addedToProjectTimeMap",
          "projectIds",
          "adminInfo",
          "status"
        ]
      },
      "domino.jobs.interface.JobsTimelineSet": {
        "properties": {
          "jobsTimeline": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.jobs.interface.JobsTimelineRecord"
            }
          },
          "dominoStatColumns": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "jobsTimeline",
          "dominoStatColumns"
        ]
      },
      "domino.activity.api.ModelReviewActivityWithNotesMetadata": {
        "properties": {
          "modelVersion": {
            "type": "integer",
            "format": "int32"
          },
          "initialStage": {
            "type": "string"
          },
          "targetStage": {
            "type": "string"
          },
          "reviewId": {
            "type": "string"
          },
          "notes": {
            "type": "string"
          }
        },
        "required": [
          "modelVersion",
          "initialStage",
          "targetStage",
          "reviewId",
          "notes"
        ]
      },
      "domino.nucleus.dataset.ui.AdvancedDatasetConfigurationViewModels": {
        "properties": {
          "models": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.nucleus.dataset.ui.AdvancedDatasetConfigurationViewModel"
            }
          }
        },
        "required": [
          "models"
        ]
      },
      "domino.projects.api.repositories.requests.CreateRepoRequest": {
        "properties": {
          "serviceProvider": {
            "type": "string",
            "enum": [
              "github",
              "gitlab",
              "githubEnterprise",
              "unknown",
              "gitlabEnterprise",
              "bitbucket",
              "bitbucketServer"
            ]
          },
          "credentialId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "repositoryToCreateName": {
            "type": "string"
          },
          "owner": {
            "type": "string"
          },
          "visibility": {
            "type": "string",
            "enum": [
              "Public",
              "Private",
              "Internal"
            ]
          }
        },
        "required": [
          "serviceProvider",
          "credentialId",
          "repositoryToCreateName",
          "owner",
          "visibility"
        ]
      },
      "domino.workspace.api.WorkspaceAdminPageSummaryDto": {
        "properties": {
          "totalNumWorkspaces": {
            "type": "integer",
            "format": "int64"
          },
          "maxAllowedNumWorkspaces": {
            "type": "integer",
            "format": "int64"
          },
          "totalAllocatedVolumeSize": {
            "$ref": "#/components/schemas/Information"
          },
          "maxAllowedAllocatedVolumeSize": {
            "nullable": true,
            "$ref": "#/components/schemas/Information"
          },
          "totalStartedWorkspaces": {
            "type": "integer",
            "format": "int64"
          }
        },
        "required": [
          "totalNumWorkspaces",
          "maxAllowedNumWorkspaces",
          "totalAllocatedVolumeSize",
          "totalStartedWorkspaces"
        ]
      },
      "domino.workspace.api.git.MergeConflictRepository": {
        "properties": {
          "repoId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "repoName": {
            "type": "string"
          }
        },
        "required": [
          "repoId",
          "repoName"
        ]
      },
      "domino.workspaces.api.DependentRepository": {
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "name": {
            "type": "string"
          },
          "uri": {
            "type": "string"
          },
          "ref": {
            "type": "string"
          },
          "serviceProvider": {
            "type": "string"
          },
          "startingCommitId": {
            "nullable": true,
            "type": "string"
          },
          "finishedCommitId": {
            "nullable": true,
            "type": "string"
          },
          "startingBranch": {
            "type": "string",
            "nullable": true
          },
          "finishedBranch": {
            "type": "string",
            "nullable": true
          },
          "isFeatureStore": {
            "type": "boolean",
            "nullable": true
          }
        },
        "required": [
          "id",
          "name",
          "uri",
          "ref",
          "serviceProvider"
        ]
      },
      "domino.environments.api.SetRestrictedEnvRevisionRequest": {
        "properties": {
          "isRestricted": {
            "type": "boolean"
          }
        },
        "required": [
          "isRestricted"
        ]
      },
      "domino.projects.api.ProjectTemplateDetails": {
        "properties": {
          "name": {
            "type": "string"
          },
          "templateType": {
            "type": "string",
            "nullable": true,
            "enum": [
              "customer",
              "ecosystem"
            ]
          },
          "templateId": {
            "type": "string"
          },
          "templateRevisionId": {
            "type": "string",
            "nullable": true
          },
          "importToMainRepo": {
            "type": "boolean",
            "nullable": true
          },
          "forceImport": {
            "type": "boolean",
            "nullable": true
          }
        },
        "required": [
          "name",
          "templateId"
        ]
      },
      "domino.mlflow.api.PreviewFileConfigDTO": {
        "properties": {
          "maxPreviewFileSizeMB": {
            "type": "integer",
            "format": "int32"
          }
        },
        "required": [
          "maxPreviewFileSizeMB"
        ]
      },
      "domino.environments.api.ProxyConfig": {
        "properties": {
          "internalPath": {
            "type": "string"
          },
          "port": {
            "type": "integer",
            "format": "int32"
          },
          "rewrite": {
            "type": "boolean"
          },
          "requireSubdomain": {
            "type": "boolean"
          }
        },
        "required": [
          "internalPath",
          "port",
          "rewrite",
          "requireSubdomain"
        ]
      },
      "domino.environments.api.PaginatedRevisionInfo": {
        "properties": {
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "currentPage": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          }
        },
        "required": [
          "totalPages",
          "currentPage",
          "pageSize"
        ]
      },
      "domino.workspaces.api.StageTime": {
        "properties": {
          "submissionTime": {
            "type": "integer",
            "format": "epoch"
          },
          "startTime": {
            "type": "integer",
            "format": "epoch",
            "nullable": true
          },
          "completedTime": {
            "type": "integer",
            "format": "epoch",
            "nullable": true
          }
        },
        "required": [
          "submissionTime"
        ]
      },
      "domino.nucleus.dataset.ui.DataSetFileBrowserEntry": {
        "properties": {
          "isDir": {
            "type": "boolean",
            "nullable": true
          },
          "label": {
            "type": "string"
          },
          "sortableName": {
            "type": "string",
            "nullable": true
          },
          "fileName": {
            "type": "string",
            "nullable": true
          },
          "url": {
            "type": "string",
            "nullable": true
          },
          "inBytes": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          }
        },
        "required": [
          "label"
        ]
      },
      "domino.files.interface.ProjectCodeViewDto": {
        "properties": {
          "projectId": {
            "type": "string"
          },
          "projectVisibility": {
            "type": "string"
          },
          "fileViewTemplate": {
            "$ref": "#/components/schemas/domino.files.interface.FileViewTemplateDto"
          },
          "filename": {
            "type": "string"
          },
          "relativeBreadCrumbs": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          },
          "revertFileEndpoint": {
            "type": "string"
          },
          "isFileRunnableAsApp": {
            "type": "boolean"
          },
          "isFileRunnableFromView": {
            "type": "boolean"
          },
          "headRevisionDirectoryLink": {
            "type": "string"
          },
          "isCommentPreviewEnabled": {
            "type": "boolean"
          },
          "action": {
            "type": "string"
          },
          "runNumberForCommit": {
            "type": "string"
          },
          "commitsRunLink": {
            "type": "string"
          },
          "selectedRevision": {
            "$ref": "#/components/schemas/domino.files.interface.RevisionShape"
          },
          "availableRevisions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.files.interface.RevisionShape"
            }
          },
          "csrfToken": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "projectId",
          "projectVisibility",
          "fileViewTemplate",
          "filename",
          "relativeBreadCrumbs",
          "revertFileEndpoint",
          "isFileRunnableAsApp",
          "isFileRunnableFromView",
          "headRevisionDirectoryLink",
          "isCommentPreviewEnabled",
          "action",
          "runNumberForCommit",
          "commitsRunLink",
          "selectedRevision",
          "availableRevisions"
        ]
      },
      "domino.datasource.web.GetAdminUsersRequest": {
        "properties": {
          "userIds": {
            "type": "array",
            "items": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            }
          }
        },
        "required": [
          "userIds"
        ]
      },
      "domino.nucleus.project.models.ForkOrCopyProject": {
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "visibility": {
            "type": "string",
            "nullable": true,
            "enum": [
              "Public",
              "Searchable",
              "Private"
            ]
          },
          "ownerId": {
            "nullable": true,
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "collaborators": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/domino.projects.api.CollaboratorDTO"
            }
          },
          "tags": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.projects.api.NewTagsDTO"
          },
          "copyGitRequest": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.projects.api.CopyGitRequest"
          },
          "billingTag": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.projects.api.BillingTag"
          }
        }
      },
      "domino.workspaces.web.LinkWorkspaceToGoal": {
        "properties": {
          "projectId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "goalId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          }
        },
        "required": [
          "projectId",
          "goalId"
        ]
      },
      "domino.activity.api.ProjectGoalCreateActivityMetadata": {
        "properties": {
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "title"
        ]
      },
      "domino.workspace.api.WorkspaceSortableColumns.Value": {
        "properties": {}
      },
      "Organization": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Organization identifier"
          },
          "organizationUserId": {
            "type": "string",
            "description": "User id of Organization user"
          },
          "name": {
            "type": "string",
            "description": "Organization name"
          },
          "members": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.nucleus.organization.models.OrganizationMember"
            },
            "description": "List of the organization members"
          },
          "defaultEnvironment": {
            "type": "string",
            "description": "Default environment used in the organization"
          },
          "legacyDefaultEnvironment": {
            "type": "string",
            "description": "Legacy default environment used in the organization"
          }
        },
        "required": [
          "id",
          "name",
          "organizationUserId",
          "members"
        ]
      },
      "domino.nucleus.organization.models.OrganizationMember": {
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "role": {
            "type": "string",
            "enum": [
              "Member",
              "Admin"
            ]
          }
        },
        "required": [
          "id",
          "role"
        ]
      },
      "domino.projectManagement.web.CreateProjectGoalStage": {
        "properties": {
          "stageName": {
            "type": "string"
          }
        },
        "required": [
          "stageName"
        ]
      },
      "domino.admin.interface.UserProjectSizeInKB": {
        "properties": {
          "dominoFileSystem": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "lastUpdated": {
            "type": "string",
            "format": "date-time"
          },
          "unit": {
            "type": "string"
          }
        },
        "required": [
          "lastUpdated",
          "unit"
        ]
      },
      "domino.datasource.api.EngineConfig": {
        "properties": {
          "catalogEntryName": {
            "type": "string"
          }
        },
        "required": [
          "catalogEntryName"
        ]
      },
      "domino.projects.web.RaiseBlockerToProject": {
        "properties": {
          "projectId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "blockerReason": {
            "type": "string"
          }
        },
        "required": [
          "projectId",
          "blockerReason"
        ]
      },
      "DominoId": {
        "type": "string",
        "pattern": "^[0-9a-f]{24}$"
      },
      "domino.gruz.api.DatasetMount": {
        "properties": {
          "containerPath": {
            "type": "string"
          },
          "datasetId": {
            "nullable": true,
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "snapshotId": {
            "nullable": true,
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "isReadOnly": {
            "type": "boolean"
          },
          "storageMode": {
            "type": "string",
            "nullable": true
          },
          "claimName": {
            "type": "string",
            "nullable": true
          },
          "resourceId": {
            "type": "string",
            "nullable": true
          },
          "subDir": {
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "containerPath",
          "isReadOnly"
        ]
      },
      "domino.projects.api.DefaultOnDemandSparkClusterPropertiesSpec": {
        "properties": {
          "computeEnvironmentId": {
            "nullable": true,
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "computeEnvironmentRevisionSpec": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "enum": [
                  "ActiveRevision",
                  "LatestRevision",
                  "RestrictedRevision"
                ]
              },
              {
                "type": "object",
                "required": [
                  "revisionId"
                ],
                "properties": {
                  "revisionId": {
                    "type": "string"
                  }
                }
              }
            ]
          },
          "executorCount": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "executorHardwareTierId": {
            "type": "string",
            "nullable": true
          },
          "executorStorage": {
            "nullable": true,
            "$ref": "#/components/schemas/Information"
          },
          "masterHardwareTierId": {
            "type": "string",
            "nullable": true
          },
          "maximumExecutionSlotsPerUser": {
            "type": "integer",
            "format": "int32"
          }
        },
        "required": [
          "maximumExecutionSlotsPerUser"
        ]
      },
      "domino.datasetrw.web.UpdateDatasetRwStorageRequest": {
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "dataPlaneId": {
            "nullable": true,
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "isDataPlaneDefault": {
            "type": "boolean",
            "nullable": true
          },
          "pvcName": {
            "type": "string",
            "nullable": true
          },
          "mountPath": {
            "nullable": true,
            "type": "string"
          }
        }
      },
      "domino.files.interface.ProjectGitBrowseDto": {
        "properties": {
          "areReferencesCustomizable": {
            "type": "boolean"
          },
          "repositories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.files.interface.RepositoryViewModelDto"
            }
          },
          "projectId": {
            "type": "string"
          },
          "noRepos": {
            "type": "boolean"
          },
          "projectType": {
            "type": "string"
          },
          "projectMainRepositoryId": {
            "type": "string",
            "nullable": true
          },
          "projectMainRepositoryUri": {
            "type": "string",
            "nullable": true
          },
          "projectMainRepositoryDefaultRefType": {
            "type": "string",
            "nullable": true
          },
          "projectMainRepositoryDefaultRefValue": {
            "type": "string",
            "nullable": true
          },
          "projectMainRepositoryServiceProvider": {
            "type": "string",
            "nullable": true
          },
          "gitCredentials": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.files.interface.GitCredentials"
            }
          },
          "allCredentialMappings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.files.interface.CredentialMappings"
            }
          },
          "permissions": {
            "$ref": "#/components/schemas/domino.files.interface.FilesPermissionsDto"
          },
          "csrfToken": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "areReferencesCustomizable",
          "repositories",
          "projectId",
          "noRepos",
          "projectType",
          "gitCredentials",
          "allCredentialMappings",
          "permissions"
        ]
      },
      "domino.files.interface.CommentContext": {
        "properties": {}
      },
      "SyncOperationType": {
        "type": "string",
        "description": "Type of sync operation taking place",
        "enum": [
          "onlyDfs",
          "onlyGit",
          "gitAndDfs"
        ]
      },
      "domino.nucleus.user.UpdatePinnedProjects": {
        "properties": {
          "projectId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "isPinned": {
            "type": "boolean"
          }
        },
        "required": [
          "projectId",
          "isPinned"
        ]
      },
      "domino.projectManagement.api.DominoEntity": {
        "properties": {
          "entityId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "entityType": {
            "type": "string",
            "enum": [
              "DominoProject",
              "DominoGoal",
              "DominoStage",
              "DominoComment"
            ]
          }
        },
        "required": [
          "entityId",
          "entityType"
        ]
      },
      "domino.environments.api.VisibilityUpdateRequest": {
        "properties": {
          "visibility": {
            "type": "string",
            "enum": [
              "Global",
              "Private",
              "Organization"
            ]
          },
          "ownerId": {
            "nullable": true,
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          }
        },
        "required": [
          "visibility"
        ]
      },
      "domino.activity.api.ProjectLinkChangeActivityMetadata": {
        "properties": {
          "ticketKey": {
            "type": "string"
          },
          "ticketUrl": {
            "type": "string"
          },
          "projectLinkAction": {
            "type": "string",
            "enum": [
              "Link",
              "Unlink"
            ]
          },
          "keepExistingGoals": {
            "type": "boolean"
          }
        },
        "required": [
          "ticketKey",
          "ticketUrl",
          "projectLinkAction",
          "keepExistingGoals"
        ]
      },
      "domino.admin.usermanagement.api.AdminUserManagementUserMetadata": {
        "properties": {
          "isManagableByViewer": {
            "type": "boolean"
          }
        },
        "required": [
          "isManagableByViewer"
        ]
      },
      "domino.projects.api.model.ref.UserRefDto": {
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "userName": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "userName"
        ]
      },
      "domino.nucleus.dataset.ui.SetLimitOverrideInput": {
        "properties": {
          "ignoreLimits": {
            "type": "boolean"
          }
        },
        "required": [
          "ignoreLimits"
        ]
      },
      "Commenter": {
        "type": "object",
        "required": [
          "commenterId",
          "username",
          "fullName"
        ],
        "properties": {
          "commenterId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "username": {
            "type": "string"
          },
          "fullName": {
            "type": "string"
          }
        }
      },
      "domino.dataplane.DataPlane": {
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "name": {
            "$ref": "#/components/schemas/domino.dataplane.DataPlaneName"
          },
          "namespace": {
            "type": "string"
          },
          "configuration": {
            "$ref": "#/components/schemas/domino.dataplane.DataPlaneConfiguration"
          },
          "entityId": {
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/domino.dataplane.DataPlaneStatus"
          },
          "isArchived": {
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "name",
          "namespace",
          "configuration",
          "entityId",
          "status",
          "isArchived"
        ]
      },
      "domino.files.web.CreateFileComment": {
        "properties": {
          "comment": {
            "type": "string"
          },
          "fileName": {
            "type": "string"
          },
          "commitId": {
            "type": "string"
          },
          "projectId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          }
        },
        "required": [
          "comment",
          "fileName",
          "commitId",
          "projectId"
        ]
      },
      "domino.modelmanager.web.ExportImageForSnowflakeApiRequest": {
        "properties": {
          "snowflakeUdfName": {
            "type": "string"
          },
          "snowflakeUrl": {
            "type": "string"
          },
          "snowflakeUsername": {
            "type": "string"
          },
          "snowflakePassword": {
            "type": "string"
          },
          "snowflakeUserRole": {
            "type": "string"
          },
          "snowflakeWarehouseName": {
            "type": "string"
          },
          "snowflakeDatabaseName": {
            "type": "string"
          },
          "snowflakeSchemaName": {
            "type": "string"
          },
          "snowflakeStageName": {
            "type": "string"
          }
        },
        "required": [
          "snowflakeUdfName",
          "snowflakeUrl",
          "snowflakeUsername",
          "snowflakePassword",
          "snowflakeUserRole",
          "snowflakeWarehouseName",
          "snowflakeDatabaseName",
          "snowflakeSchemaName",
          "snowflakeStageName"
        ]
      },
      "domino.guardrails.web.GetCommentCountsRequest": {
        "type": "object",
        "required": [
          "deliverableIds"
        ],
        "properties": {
          "deliverableIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "domino.environments.api.EnvironmentProjectUsageSummariesSet": {
        "properties": {
          "summaries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.environments.api.EnvironmentProjectUsageSummary"
            }
          },
          "totalCount": {
            "type": "integer",
            "format": "int64"
          },
          "pagination": {
            "$ref": "#/components/schemas/domino.environments.api.EnvProjectPagination"
          }
        },
        "required": [
          "summaries",
          "totalCount",
          "pagination"
        ]
      },
      "domino.workspace.api.git.StageLocalCommitFileRequest": {
        "properties": {
          "repoId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "filePath": {
            "type": "string"
          }
        },
        "required": [
          "repoId",
          "filePath"
        ]
      },
      "domino.modelmanager.web.ModelBuildStatusApiResponse": {
        "properties": {
          "modelId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "modelVersionId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "status": {
            "type": "string"
          }
        },
        "required": [
          "modelId",
          "modelVersionId",
          "status"
        ]
      },
      "domino.jobs.web.ArchiveJobRequest": {
        "properties": {
          "jobId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          }
        },
        "required": [
          "jobId"
        ]
      },
      "domino.server.projects.api.Owner": {
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "userName": {
            "type": "string"
          }
        },
        "required": [
          "userName"
        ]
      },
      "domino.common.run.interfaces.RunDTO": {
        "properties": {
          "runId": {
            "type": "string"
          }
        },
        "required": [
          "runId"
        ]
      },
      "domino.nucleus.project.ProjectSettingsUpdateDto": {
        "properties": {
          "defaultEnvironmentId": {
            "nullable": true,
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "defaultEnvironmentRevisionSpec": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "enum": [
                  "ActiveRevision",
                  "LatestRevision",
                  "RestrictedRevision"
                ]
              },
              {
                "type": "object",
                "required": [
                  "revisionId"
                ],
                "properties": {
                  "revisionId": {
                    "type": "string"
                  }
                }
              }
            ]
          },
          "defaultHardwareTierId": {
            "type": "string",
            "nullable": true
          },
          "defaultVolumeSizeGiB": {
            "type": "number",
            "format": "double",
            "nullable": true
          }
        }
      },
      "domino.files.interface.FileSearchQuery": {
        "properties": {
          "value": {
            "type": "string"
          }
        },
        "required": [
          "value"
        ]
      },
      "domino.datasetrw.api.DatasetRwProjectDetailsDto": {
        "properties": {
          "sourceProjectName": {
            "type": "string"
          },
          "sourceProjectId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "sourceProjectOwnerUsername": {
            "type": "string"
          },
          "sharedProjectNames": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "sharedProjectIds": {
            "type": "array",
            "items": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            }
          },
          "sharedProjectOwnerUsernames": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "sourceProjectName",
          "sourceProjectId",
          "sourceProjectOwnerUsername",
          "sharedProjectNames",
          "sharedProjectIds",
          "sharedProjectOwnerUsernames"
        ]
      },
      "domino.workspaces.api.CommentContext": {
        "properties": {
          "commentType": {
            "type": "string",
            "enum": [
              "WorkspaceCommentThread",
              "WorkspaceResultFileCommentThread"
            ]
          },
          "workspaceId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "fileName": {
            "type": "string",
            "nullable": true
          },
          "commitId": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "commentType",
          "workspaceId"
        ]
      },
      "domino.modelmanager.web.ExportVersionStatusWithoutModelResponse": {
        "properties": {
          "exportId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "exportVersionId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "status": {
            "type": "string"
          },
          "errorMessage": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "exportId",
          "exportVersionId",
          "status"
        ]
      },
      "domino.projects.templates.api.models.ProjectHubModelDto": {
        "properties": {
          "name": {
            "type": "string"
          },
          "link": {
            "type": "string"
          },
          "size": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.projects.templates.api.models.ProjectTemplateSizeDto"
          },
          "source": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.projects.templates.api.models.NamedLink"
          }
        },
        "required": [
          "name",
          "link"
        ]
      },
      "domino.datasource.web.DataSourcesAccessedInRunResponse": {
        "properties": {
          "runId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "accessedDataSources": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.datasource.api.DataSourceAccessedInfo"
            }
          }
        },
        "required": [
          "runId",
          "accessedDataSources"
        ]
      },
      "domino.hardwaretier.api.HardwareTierIdentifier": {
        "properties": {
          "value": {
            "type": "string"
          }
        },
        "required": [
          "value"
        ]
      },
      "domino.projects.templates.api.models.ProjectOwnerDto": {
        "properties": {
          "username": {
            "type": "string"
          }
        },
        "required": [
          "username"
        ]
      },
      "domino.computegrid.GpuResourceUsage": {
        "properties": {
          "snapshots": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.computegrid.GpuUsageSnapshot"
            }
          }
        },
        "required": [
          "snapshots"
        ]
      },
      "domino.common.gateway.search.TagKeyHighlight": {
        "properties": {
          "tagKey": {
            "type": "string"
          },
          "highlightedTagKey": {
            "type": "string"
          }
        },
        "required": [
          "tagKey",
          "highlightedTagKey"
        ]
      },
      "domino.common.modelproduct.AppVersionDetails": {
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "started": {
            "type": "integer",
            "format": "epoch"
          },
          "inputCommitId": {
            "type": "string"
          },
          "outputCommitId": {
            "type": "string",
            "nullable": true
          },
          "resourceUsage": {
            "$ref": "#/components/schemas/domino.common.modelproduct.AppResourceUsage"
          },
          "hardwareTierName": {
            "type": "string"
          },
          "executorDetails": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.common.modelproduct.ExecutorDetails"
          },
          "environmentDetails": {
            "$ref": "#/components/schemas/domino.common.modelproduct.EnvironmentDetails"
          },
          "appCodeInfo": {
            "$ref": "#/components/schemas/domino.common.modelproduct.AppCodeInfoDto"
          },
          "status": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "started",
          "inputCommitId",
          "resourceUsage",
          "hardwareTierName",
          "environmentDetails",
          "appCodeInfo",
          "status"
        ]
      },
      "domino.nucleus.project.models.NewTags": {
        "properties": {
          "tagNames": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "tagNames"
        ]
      },
      "domino.nucleus.modelproduct.models.UsageStatisticsTotalResponse": {
        "properties": {
          "stats": {
            "$ref": "#/components/schemas/domino.nucleus.modelproduct.models.UsageStatistics"
          }
        },
        "required": [
          "stats"
        ]
      },
      "domino.datasource.api.DataSourceProxyConfigDto": {
        "properties": {
          "config": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "dataSourceType": {
            "type": "string",
            "enum": [
              "ADLSConfig",
              "AzureBlobStorageConfig",
              "BigQueryConfig",
              "ClickHouseConfig",
              "DatabricksConfig",
              "DB2Config",
              "DruidConfig",
              "GCSConfig",
              "GenericJDBCConfig",
              "GenericS3Config",
              "GreenplumConfig",
              "IgniteConfig",
              "MariaDBConfig",
              "MongoDBConfig",
              "MySQLConfig",
              "NetezzaConfig",
              "OracleConfig",
              "PalantirConfig",
              "PineconeConfig",
              "PostgreSQLConfig",
              "QdrantConfig",
              "RedshiftConfig",
              "S3Config",
              "SAPHanaConfig",
              "SingleStoreConfig",
              "SQLServerConfig",
              "SnowflakeConfig",
              "SynapseConfig",
              "TabularS3GlueConfig",
              "TeradataConfig",
              "TrinoConfig",
              "VerticaConfig"
            ]
          },
          "engineConfig": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.datasource.api.EngineConfig"
          },
          "engineType": {
            "type": "string",
            "enum": [
              "Domino",
              "Starburst"
            ]
          },
          "dataPlaneIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "availableHardwareTiers": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "dataSourceName": {
            "type": "string"
          },
          "dataSourceId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          }
        },
        "required": [
          "config",
          "dataSourceType",
          "engineType",
          "dataPlaneIds",
          "availableHardwareTiers",
          "dataSourceName",
          "dataSourceId"
        ]
      },
      "domino.projects.api.repositories.AccessTypeDto": {
        "properties": {
          "accessType": {
            "type": "string"
          },
          "label": {
            "type": "string"
          }
        },
        "required": [
          "accessType",
          "label"
        ]
      },
      "domino.activity.api.ProjectGoalAppLinkActivityMetadata": {
        "properties": {
          "action": {
            "type": "string",
            "enum": [
              "added",
              "removed"
            ]
          },
          "modelProductId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "appVersionId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "projectGoalTitle": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "action",
          "modelProductId",
          "appVersionId",
          "projectGoalTitle",
          "name"
        ]
      },
      "domino.projects.api.OnDemandSparkClusterStatus": {
        "properties": {
          "clusterName": {
            "type": "string"
          },
          "clusterState": {
            "type": "string",
            "enum": [
              "Pending",
              "Stopping",
              "Starting",
              "Ready",
              "NotFound"
            ]
          },
          "exists": {
            "type": "boolean"
          },
          "isReady": {
            "type": "boolean"
          },
          "workerCount": {
            "type": "integer",
            "format": "int32"
          }
        },
        "required": [
          "clusterName",
          "clusterState",
          "exists",
          "isReady",
          "workerCount"
        ]
      },
      "domino.quota.api.QuotaActionType": {
        "type": "string",
        "description": "type of quota action",
        "enum": [
          "Email",
          "Notification"
        ]
      },
      "domino.jobs.web.JobRestartOperationRequest": {
        "properties": {
          "jobId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "shouldUseOriginalInputCommit": {
            "type": "boolean"
          }
        },
        "required": [
          "jobId",
          "shouldUseOriginalInputCommit"
        ]
      },
      "domino.activity.api.ProjectStageChangeActivityMetaData": {
        "properties": {
          "projectName": {
            "type": "string"
          },
          "fromStage": {
            "$ref": "#/components/schemas/domino.activity.api.ProjectStage"
          },
          "toStage": {
            "$ref": "#/components/schemas/domino.activity.api.ProjectStage"
          }
        },
        "required": [
          "projectName",
          "fromStage",
          "toStage"
        ]
      },
      "domino.datasetrw.web.FileCollisionRequest": {
        "properties": {
          "filePaths": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "fileCollisionSetting": {
            "type": "string",
            "nullable": true,
            "enum": [
              "Rename",
              "Ignore",
              "Overwrite"
            ]
          },
          "targetRelativePath": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "filePaths"
        ]
      },
      "domino.projects.web.AddComment": {
        "properties": {
          "comment": {
            "type": "string"
          }
        },
        "required": [
          "comment"
        ]
      },
      "domino.files.interface.ProjectReadmeFile": {
        "properties": {
          "path": {
            "type": "string"
          }
        },
        "required": [
          "path"
        ]
      },
      "domino.common.user.UserRole": {
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "description"
        ]
      },
      "domino.gruz.api.RunTrigger": {
        "properties": {
          "startingUserId": {
            "nullable": true,
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "startingScheduledRunId": {
            "type": "string",
            "nullable": true
          },
          "command": {
            "$ref": "#/components/schemas/domino.gruz.api.RawRunCommand"
          },
          "commitId": {
            "type": "string"
          },
          "environmentId": {
            "nullable": true,
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "environmentRevisionId": {
            "nullable": true,
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "runMemoryLimit": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.gruz.api.RunMemoryLimit"
          }
        },
        "required": [
          "command",
          "commitId"
        ]
      },
      "domino.activity.api.WorkspaceStatusActivityMetaData": {
        "properties": {
          "title": {
            "type": "string"
          },
          "number": {
            "type": "integer",
            "format": "int32"
          },
          "status": {
            "type": "string"
          },
          "currentStatus": {
            "type": "string"
          },
          "commentCount": {
            "type": "integer",
            "format": "int32"
          }
        },
        "required": [
          "title",
          "number",
          "status",
          "currentStatus",
          "commentCount"
        ]
      },
      "domino.nucleus.modelproduct.models.ConsumerModelProduct": {
        "properties": {
          "modelProductType": {
            "type": "string",
            "enum": [
              "APP",
              "BATCH",
              "REPORT",
              "SCORER"
            ]
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "publisher": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.common.user.Person"
          },
          "notificationRecipients": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.common.modelproduct.NotificationRecipient"
            }
          },
          "lastUpdated": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "type": "string"
          },
          "media": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "openUrl": {
            "type": "string",
            "nullable": true
          },
          "projectUrl": {
            "type": "string",
            "nullable": true
          },
          "projectId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "stats": {
            "$ref": "#/components/schemas/domino.nucleus.modelproduct.models.Stats"
          },
          "id": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "visibility": {
            "type": "string",
            "enum": [
              "PUBLIC",
              "AUTHENTICATED",
              "GRANT_BASED",
              "GRANT_BASED_STRICT"
            ]
          },
          "runningAppUrl": {
            "type": "string",
            "nullable": true
          },
          "runningCommitId": {
            "type": "string",
            "nullable": true
          },
          "appAccessStatus": {
            "type": "string",
            "enum": [
              "ALLOWED",
              "PENDING",
              "REQUESTABLE",
              "NOT_ALLOWED"
            ]
          }
        },
        "required": [
          "modelProductType",
          "name",
          "notificationRecipients",
          "lastUpdated",
          "status",
          "media",
          "projectId",
          "stats",
          "id",
          "visibility",
          "appAccessStatus"
        ]
      },
      "domino.projects.api.OnDemandSparkClusterDetailsView": {
        "properties": {
          "sparkClusterProperties": {
            "$ref": "#/components/schemas/domino.projects.api.OnDemandSparkClusterPropertiesSpec"
          },
          "sparkClusterUri": {
            "type": "string"
          }
        },
        "required": [
          "sparkClusterProperties",
          "sparkClusterUri"
        ]
      },
      "domino.projects.templates.api.models.NewSourceProjectDto": {
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "included": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "integrations",
                "external_data_volumes",
                "launchers",
                "artifacts",
                "mounted_datasets",
                "imported_projects",
                "tags",
                "datasets",
                "code",
                "feature_stores",
                "imported_repositories",
                "goals",
                "apps",
                "data_sources"
              ]
            }
          },
          "gitProviderCodeSpec": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.projects.templates.api.models.TemplateBackingGitCodeSpecDto"
          }
        },
        "required": [
          "id",
          "included"
        ]
      },
      "domino.notifications.Pagination": {
        "required": [
          "offset",
          "totalCount"
        ],
        "properties": {
          "offset": {
            "type": "integer",
            "format": "int32",
            "description": "offset in the underlying data"
          },
          "totalCount": {
            "type": "integer",
            "format": "int32",
            "description": "total number of matching records"
          }
        }
      },
      "domino.files.interface.ProjectReleaseDto": {
        "properties": {
          "releaseId": {
            "type": "string"
          },
          "runNumber": {
            "type": "integer",
            "format": "int32"
          },
          "runHeading": {
            "type": "string"
          },
          "createdAt": {
            "type": "string"
          },
          "isSelected": {
            "type": "boolean"
          }
        },
        "required": [
          "releaseId",
          "runNumber",
          "runHeading",
          "createdAt",
          "isSelected"
        ]
      },
      "domino.workspace.api.QueuedWorkspaceHistoryDetails": {
        "properties": {
          "expectedWait": {
            "type": "string"
          },
          "explanation": {
            "type": "string"
          },
          "helpText": {
            "type": "string"
          }
        },
        "required": [
          "expectedWait",
          "explanation",
          "helpText"
        ]
      },
      "domino.workspace.api.git.CommitAndPushReposResponseDto": {
        "properties": {
          "succeeded": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          }
        },
        "required": [
          "succeeded",
          "message"
        ]
      },
      "domino.modelmanager.web.ModelPermissionsForMonitoringRequest": {
        "properties": {
          "userIdToCheckPermissionsFor": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "modelIds": {
            "type": "array",
            "items": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            }
          }
        },
        "required": [
          "userIdToCheckPermissionsFor",
          "modelIds"
        ]
      },
      "domino.projects.api.ProjectGoal": {
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "assigneeId": {
            "nullable": true,
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "linkedEntities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.projects.api.EntityLink"
            }
          },
          "currentStage": {
            "$ref": "#/components/schemas/domino.projects.api.ProjectStage"
          },
          "isComplete": {
            "type": "boolean"
          },
          "isDeleted": {
            "type": "boolean"
          },
          "projectId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "createdAt": {
            "type": "integer",
            "format": "epoch"
          },
          "createdBy": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "lastTitleUpdatedAt": {
            "type": "integer",
            "format": "epoch",
            "nullable": true
          },
          "lastDescriptionUpdatedAt": {
            "type": "integer",
            "format": "epoch",
            "nullable": true
          },
          "lastUpdatedAt": {
            "type": "integer",
            "format": "epoch",
            "nullable": true
          },
          "project": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.projects.api.model.ref.ProjectRefDto"
          }
        },
        "required": [
          "id",
          "title",
          "linkedEntities",
          "currentStage",
          "isComplete",
          "isDeleted",
          "projectId",
          "createdAt",
          "createdBy"
        ]
      },
      "domino.environments.api.SpecificRevision": {
        "properties": {}
      },
      "domino.projects.api.PaginatedProjectSummaryResults": {
        "properties": {
          "page": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.projects.api.ProjectSummary"
            }
          },
          "totalMatches": {
            "type": "integer",
            "format": "int64"
          }
        },
        "required": [
          "page",
          "totalMatches"
        ]
      },
      "domino.featurestore.api.FeatureViewCommentDto": {
        "properties": {
          "commentId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "commenter": {
            "$ref": "#/components/schemas/domino.featurestore.api.FeatureViewCommenter"
          },
          "commentBody": {
            "$ref": "#/components/schemas/domino.featurestore.api.FeatureViewCommentContent"
          },
          "createdAt": {
            "type": "integer",
            "format": "int64"
          },
          "lastUpdated": {
            "type": "integer",
            "format": "int64"
          },
          "status": {
            "type": "string",
            "enum": [
              "Active",
              "Deleted"
            ]
          }
        },
        "required": [
          "commentId",
          "commenter",
          "commentBody",
          "createdAt",
          "lastUpdated",
          "status"
        ]
      },
      "domino.files.interface.CommentThread": {
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "comments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.files.interface.Comment"
            }
          },
          "context": {
            "$ref": "#/components/schemas/domino.files.interface.CommentContext"
          }
        },
        "required": [
          "id",
          "comments",
          "context"
        ]
      },
      "domino.featurestore.model.Field": {
        "type": "object",
        "properties": {
          "alias": {
            "type": "string"
          },
          "isOptional": {
            "type": "boolean"
          },
          "isOverridable": {
            "type": "boolean"
          },
          "isSecret": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "regexp": {
            "type": "string"
          },
          "regexpErrorMessage": {
            "type": "string"
          },
          "environmentVariableName": {
            "type": "string"
          }
        },
        "required": [
          "isOptional",
          "isOverridable",
          "name"
        ]
      },
      "domino.datasetrw.api.DatasetRwPermission": {
        "type": "string",
        "properties": {},
        "enum": [
          "DeleteDatasetRwV2",
          "EditSecurityDatasetRwV2",
          "ListDatasetRwV2",
          "PerformDatasetRwActionsInProjectV2",
          "PermanentDeleteDatasetRwV2",
          "ReadDatasetRwV2",
          "UpdateDatasetRwV2",
          "PerformDatasetRwActionsAsAdminV2"
        ]
      },
      "domino.admin.interface.ComputeNodeUtilization": {
        "properties": {
          "cpuUtilization": {
            "$ref": "#/components/schemas/domino.admin.interface.ComputeNodeCpuUtilization"
          },
          "memUtilization": {
            "$ref": "#/components/schemas/domino.admin.interface.ComputeNodeMemUtilization"
          },
          "diskUtilization": {
            "$ref": "#/components/schemas/domino.admin.interface.ComputeNodeDiskUtilization"
          }
        },
        "required": [
          "cpuUtilization",
          "memUtilization",
          "diskUtilization"
        ]
      },
      "domino.files.interface.ProjectCodeBrowseDto": {
        "properties": {
          "projectImportsIsEmpty": {
            "type": "boolean"
          },
          "importedProjects": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.files.interface.ProjectImportsDto"
            }
          },
          "runTaggingEnabled": {
            "type": "boolean"
          },
          "showUploadComponentOnStart": {
            "type": "boolean"
          },
          "suggestDatasets": {
            "type": "boolean"
          },
          "relativeBreadcrumbData": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          },
          "downloadCLIPageEndpoint": {
            "type": "string"
          },
          "areReferencesCustomizable": {
            "type": "boolean"
          },
          "allCredentialMappings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.files.interface.CredentialMappings"
            }
          },
          "gitCredentials": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.files.interface.GitCredentials"
            }
          },
          "enableReadWriteDatasets": {
            "type": "boolean"
          },
          "permissions": {
            "$ref": "#/components/schemas/domino.files.interface.FilesPermissionsDto"
          },
          "commitSettings": {
            "$ref": "#/components/schemas/domino.files.interface.ProjectCodeBrowseCommitDto"
          },
          "projectSettings": {
            "$ref": "#/components/schemas/domino.files.interface.ProjectCodeBrowseProjectDto"
          },
          "fileSettings": {
            "$ref": "#/components/schemas/domino.files.interface.FilesBrowseSettingsDto"
          },
          "previousDirectoryUrl": {
            "type": "string"
          },
          "csrfToken": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "projectImportsIsEmpty",
          "importedProjects",
          "runTaggingEnabled",
          "showUploadComponentOnStart",
          "suggestDatasets",
          "relativeBreadcrumbData",
          "downloadCLIPageEndpoint",
          "areReferencesCustomizable",
          "allCredentialMappings",
          "gitCredentials",
          "enableReadWriteDatasets",
          "permissions",
          "commitSettings",
          "projectSettings",
          "fileSettings",
          "previousDirectoryUrl"
        ]
      },
      "domino.workspace.api.git.PullReposRequest": {
        "properties": {
          "projectId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "repos": {
            "type": "array",
            "items": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            }
          }
        },
        "required": [
          "projectId",
          "repos"
        ]
      },
      "domino.datasetrw.api.DatasetRwMountInfoDto": {
        "properties": {
          "mountPath": {
            "type": "string"
          },
          "subDir": {
            "type": "string"
          },
          "volumeName": {
            "type": "string"
          },
          "driverType": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "mountPath",
          "subDir",
          "volumeName"
        ]
      },
      "domino.admin.interface.CreateServiceAccountTokenRequest": {
        "properties": {
          "name": {
            "type": "string"
          }
        },
        "required": [
          "name"
        ]
      },
      "domino.nucleus.project.models.UpdateProjectDescription": {
        "properties": {
          "description": {
            "type": "string"
          }
        },
        "required": [
          "description"
        ]
      },
      "domino.provenance.api.ProvenanceEnvironmentDetails": {
        "properties": {
          "environmentId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "environmentRevisionId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "environmentName": {
            "type": "string"
          },
          "environmentRevisionNumber": {
            "type": "integer",
            "format": "int32"
          }
        },
        "required": [
          "environmentId",
          "environmentRevisionId",
          "environmentName",
          "environmentRevisionNumber"
        ]
      },
      "domino.projects.templates.api.models.DependencyTemplateDto": {
        "properties": {
          "templateName": {
            "type": "string"
          },
          "templateId": {
            "type": "string"
          },
          "revisionId": {
            "type": "string"
          },
          "kind": {
            "type": "string",
            "enum": [
              "Project",
              "Environment"
            ]
          }
        },
        "required": [
          "templateName",
          "templateId",
          "revisionId",
          "kind"
        ]
      },
      "domino.workspaces.api.WorkspaceStartedBy": {
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "username": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "username"
        ]
      },
      "domino.nucleus.gateway.users.models.ProjectsDependencyGraph": {
        "properties": {
          "selectedProjectId": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.common.ProjectId"
          },
          "nodes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.nucleus.gateway.users.models.ProjectDependencyView"
            }
          }
        },
        "required": [
          "nodes"
        ]
      },
      "domino.workspaces.api.WorkspaceGoal": {
        "properties": {
          "goalId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "workspaceId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "workspaceNumber": {
            "type": "integer",
            "format": "int32"
          },
          "projectId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          }
        },
        "required": [
          "goalId",
          "workspaceId",
          "workspaceNumber",
          "projectId"
        ]
      },
      "domino.workspace.api.WorkspaceDto": {
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "deleted": {
            "type": "boolean"
          },
          "projectId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "ownerId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "ownerName": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "stateUpdatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "initConfig": {
            "$ref": "#/components/schemas/domino.workspace.api.WorkspaceInitConfigDto"
          },
          "configTemplate": {
            "$ref": "#/components/schemas/domino.workspace.api.WorkspaceConfigDto"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "importedProjects": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.workspace.api.WorkspaceImportedProject"
            }
          },
          "importedGitRepos": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.workspace.api.WorkspaceImportedGitRepo"
            }
          },
          "dataPlaneId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "mostRecentSession": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.workspace.api.WorkspaceSessionDto"
          },
          "sessionStats": {
            "$ref": "#/components/schemas/domino.workspace.api.WorkspaceSessionStatsDto"
          },
          "isLegacy": {
            "type": "boolean"
          },
          "isReproduced": {
            "type": "boolean"
          },
          "lastCommitTime": {
            "nullable": true,
            "type": "string",
            "format": "date-time"
          },
          "dfsBranchName": {
            "type": "string",
            "nullable": true
          },
          "codeBranchName": {
            "type": "string",
            "nullable": true
          },
          "markedForDeleteTime": {
            "nullable": true,
            "type": "string",
            "format": "date-time"
          },
          "project": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.workspace.api.ref.ProjectRefDto"
          }
        },
        "required": [
          "id",
          "deleted",
          "projectId",
          "ownerId",
          "ownerName",
          "name",
          "state",
          "stateUpdatedAt",
          "initConfig",
          "configTemplate",
          "createdAt",
          "importedProjects",
          "importedGitRepos",
          "dataPlaneId",
          "sessionStats",
          "isLegacy",
          "isReproduced"
        ]
      },
      "domino.common.modelproduct.LogSet": {
        "properties": {
          "logContent": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.common.modelproduct.LogContent"
            }
          },
          "isComplete": {
            "type": "boolean"
          },
          "pagination": {
            "$ref": "#/components/schemas/domino.common.modelproduct.PaginationFilter"
          }
        },
        "required": [
          "logContent",
          "isComplete",
          "pagination"
        ]
      },
      "domino.files.web.ArchiveFileComment": {
        "properties": {
          "projectId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "commentThreadId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "commentId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          }
        },
        "required": [
          "projectId",
          "commentThreadId",
          "commentId"
        ]
      },
      "domino.gruz.api.RawRunCommand": {
        "properties": {
          "runCommandType": {
            "type": "string",
            "enum": [
              "InteractiveSession",
              "Argv",
              "Launcher",
              "App",
              "Direct"
            ]
          },
          "argv": {
            "type": "array",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "commands": {
            "type": "array",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "initCommand": {
            "type": "array",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "networkingConfig": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.gruz.api.ContainerNetworkingConfig"
          },
          "httpProxy": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.gruz.api.HttpProxyConfig"
          },
          "isGitBased": {
            "type": "boolean",
            "nullable": true
          },
          "commandString": {
            "type": "string",
            "nullable": true
          },
          "launcherId": {
            "nullable": true,
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "values": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/domino.gruz.api.LauncherValue"
            }
          }
        },
        "required": [
          "runCommandType"
        ]
      },
      "domino.modelmanager.web.ModelBuildLogsApiResponse": {
        "properties": {
          "modelId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "modelVersionId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "status": {
            "type": "string"
          },
          "logs": {
            "type": "string"
          }
        },
        "required": [
          "modelId",
          "modelVersionId",
          "status",
          "logs"
        ]
      },
      "domino.projectManagement.api.PmCredentials": {
        "properties": {}
      },
      "domino.projects.api.repositories.responses.GetRepoBrowseApiResponse": {
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.projects.api.repositories.responses.browse.RepoBrowserEntryDTO"
            }
          },
          "summary": {
            "$ref": "#/components/schemas/domino.projects.api.repositories.responses.browse.RepoBrowserSummaryDTO"
          }
        },
        "required": [
          "items",
          "summary"
        ]
      },
      "domino.activity.api.CommentActivityMetaData": {
        "properties": {
          "commentedOn": {
            "type": "string",
            "enum": [
              "project",
              "deliverable",
              "job",
              "goal",
              "workspace",
              "file"
            ]
          },
          "commentedOnMetaData": {
            "$ref": "#/components/schemas/domino.activity.api.CommentedOnMetaData"
          },
          "operation": {
            "type": "string",
            "enum": [
              "Archived",
              "Updated",
              "Created"
            ]
          },
          "commentData": {
            "type": "string"
          }
        },
        "required": [
          "commentedOn",
          "commentedOnMetaData",
          "operation",
          "commentData"
        ]
      },
      "domino.hardwaretier.api.HwtFlags": {
        "properties": {
          "isDefault": {
            "type": "boolean"
          },
          "isVisible": {
            "type": "boolean"
          },
          "isGlobal": {
            "type": "boolean"
          },
          "isArchived": {
            "type": "boolean"
          },
          "isFree": {
            "type": "boolean"
          },
          "isDataAnalystTier": {
            "type": "boolean"
          },
          "isAllowedDuringTrial": {
            "type": "boolean"
          },
          "isModelApiTier": {
            "type": "boolean",
            "nullable": true
          },
          "isDefaultForModelApi": {
            "type": "boolean",
            "nullable": true
          }
        },
        "required": [
          "isDefault",
          "isVisible",
          "isGlobal",
          "isArchived",
          "isFree",
          "isDataAnalystTier",
          "isAllowedDuringTrial"
        ]
      },
      "domino.jobs.interface.RepositoryChanges": {
        "properties": {
          "created": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "modified": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "deleted": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "staged": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "created",
          "modified",
          "deleted",
          "staged"
        ]
      },
      "domino.jobs.interface.JobGpuResourceUsage": {
        "properties": {
          "timestamp": {
            "type": "integer",
            "format": "epoch"
          },
          "gpu": {
            "type": "number",
            "format": "double"
          },
          "memory": {
            "type": "number",
            "format": "double"
          },
          "number": {
            "type": "integer",
            "format": "int32"
          },
          "driverVersion": {
            "type": "string"
          },
          "device": {
            "type": "string"
          },
          "modelName": {
            "type": "string"
          },
          "pod": {
            "type": "string"
          }
        },
        "required": [
          "timestamp",
          "gpu",
          "memory",
          "number",
          "driverVersion",
          "device",
          "modelName",
          "pod"
        ]
      },
      "domino.workspace.api.WorkspaceImportedGitRepo": {
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "name": {
            "type": "string"
          },
          "ref": {
            "type": "string"
          },
          "startingBranch": {
            "type": "string",
            "nullable": true
          },
          "isFeatureStore": {
            "type": "boolean",
            "nullable": true
          }
        },
        "required": [
          "id",
          "name",
          "ref"
        ]
      },
      "domino.projectManagement.api.ResponseMessage": {
        "properties": {
          "message": {
            "type": "string"
          }
        },
        "required": [
          "message"
        ]
      },
      "domino.jobs.interface.ExecutorInfo": {
        "properties": {
          "executorInstanceId": {
            "type": "string"
          },
          "region": {
            "type": "string"
          },
          "humanName": {
            "type": "string",
            "nullable": true
          },
          "publicAddress": {
            "type": "string",
            "nullable": true
          },
          "privateAddress": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "executorInstanceId",
          "region"
        ]
      },
      "domino.layout.web.OwnerInfoDto": {
        "properties": {
          "ownerName": {
            "type": "string"
          },
          "ownerEmail": {
            "type": "string"
          },
          "isOwnerAdmin": {
            "type": "boolean"
          }
        },
        "required": [
          "ownerName",
          "ownerEmail",
          "isOwnerAdmin"
        ]
      },
      "domino.layout.web.CompleteWorkflowRequest": {
        "properties": {
          "workflowID": {
            "type": "string",
            "enum": [
              "CreateDataset",
              "CreateDatasource",
              "UpdateDataset",
              "CreateFeatureStore",
              "UpdateDatasource",
              "UpdateFeatureStore"
            ]
          },
          "data": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "required": [
          "workflowID",
          "data"
        ]
      },
      "domino.jobs.interface.JobStartedBy": {
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "username": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "username"
        ]
      },
      "domino.datasetrw.api.DatasetRwSizeStatus": {
        "type": "string",
        "properties": {},
        "enum": [
          "Active",
          "Pending"
        ]
      },
      "domino.projectManagement.api.PmProjectSummary": {
        "properties": {
          "id": {
            "$ref": "#/components/schemas/domino.projectManagement.api.PmId"
          },
          "key": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "link": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "key",
          "name",
          "link"
        ]
      },
      "domino.gruz.api.CustomHostnameMapping": {
        "properties": {
          "hostname": {
            "type": "string"
          },
          "targetIp": {
            "type": "string"
          }
        },
        "required": [
          "hostname",
          "targetIp"
        ]
      },
      "domino.datasetrw.api.DatasetRwGrantDetails": {
        "properties": {
          "targetId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "targetName": {
            "type": "string"
          },
          "targetRole": {
            "type": "string",
            "enum": [
              "DatasetRwOwner",
              "DatasetRwEditor",
              "DatasetRwReader"
            ]
          },
          "isOrganization": {
            "type": "boolean"
          }
        },
        "required": [
          "targetId",
          "targetName",
          "targetRole",
          "isOrganization"
        ]
      },
      "domino.quota.api.targetMetadata": {
        "type": "object",
        "required": [
          "username",
          "firstName",
          "lastName"
        ],
        "properties": {
          "username": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "email": {
            "type": "string"
          }
        }
      },
      "domino.datasetrw.web.FilesToDeleteRequest": {
        "properties": {
          "relativePaths": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "relativePaths"
        ]
      },
      "domino.datasetrw.web.FilesNormalizedRequest": {
        "properties": {
          "fileNames": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "fileNames"
        ]
      },
      "domino.common.user.UserUIUXStateDTO": {
        "properties": {
          "stateMap": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "required": [
          "stateMap"
        ]
      },
      "domino.datasetrw.api.DatasetStorageUsageDto": {
        "properties": {
          "quotaId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "targetId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "limit": {
            "type": "integer",
            "format": "int64"
          },
          "totalStorageUsed": {
            "type": "integer",
            "format": "int64"
          },
          "isAtWarningThreshold": {
            "type": "boolean"
          },
          "isAtEmailThreshold": {
            "type": "boolean"
          }
        },
        "required": [
          "quotaId",
          "targetId",
          "limit",
          "totalStorageUsed",
          "isAtWarningThreshold",
          "isAtEmailThreshold"
        ]
      },
      "domino.admin.usermanagement.api.UsersMetadata": {
        "properties": {
          "offset": {
            "type": "integer",
            "format": "int32"
          },
          "limit": {
            "type": "integer",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "allowedActions": {
            "$ref": "#/components/schemas/domino.admin.usermanagement.api.AllowedActions"
          }
        },
        "required": [
          "offset",
          "limit",
          "totalCount",
          "allowedActions"
        ]
      },
      "domino.environments.api.EnvironmentRunUsageSummary": {
        "properties": {
          "status": {
            "type": "string"
          }
        },
        "required": [
          "status"
        ]
      },
      "domino.jobs.interface.JobResultFiles": {
        "properties": {
          "commitId": {
            "type": "string"
          },
          "fileMetadata": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.jobs.interface.ResultFileMetadata"
            }
          }
        },
        "required": [
          "commitId",
          "fileMetadata"
        ]
      },
      "domino.nucleus.dataset.ui.DatasetProjectMountSummaryViewModel": {
        "properties": {
          "datasetId": {
            "type": "string"
          },
          "snapshotId": {
            "nullable": true,
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "ownerName": {
            "type": "string"
          },
          "projectName": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "storageSize": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "isPartialSize": {
            "type": "boolean"
          },
          "requestLatest": {
            "type": "boolean"
          },
          "requestedTag": {
            "type": "string",
            "nullable": true
          },
          "requestedVersionNumber": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "latestVersionNumber": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "totalAvailableVersions": {
            "type": "integer",
            "format": "int32"
          },
          "path": {
            "type": "string"
          }
        },
        "required": [
          "datasetId",
          "name",
          "ownerName",
          "projectName",
          "isPartialSize",
          "requestLatest",
          "totalAvailableVersions",
          "path"
        ]
      },
      "domino.modelmanager.web.ModelExportVersionStatusApiResponse": {
        "properties": {
          "modelId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "modelVersionId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "exportId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "status": {
            "type": "string"
          },
          "errorMessage": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "modelId",
          "modelVersionId",
          "exportId",
          "status"
        ]
      },
      "domino.featurestore.api.FeatureViewDto": {
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "name": {
            "type": "string"
          },
          "featureStoreId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "addedBy": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "createdAtMillis": {
            "type": "integer",
            "format": "int64"
          },
          "lastUpdatedMillis": {
            "type": "integer",
            "format": "int64"
          },
          "status": {
            "type": "string",
            "enum": [
              "Active",
              "Deleted"
            ]
          },
          "entities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.featurestore.api.EntityDto"
            }
          },
          "features": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.featurestore.api.FeatureDto"
            }
          },
          "ttl": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "tags": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "projectsInfo": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.featurestore.api.FeatureViewProjectInfoDto"
            }
          },
          "description": {
            "type": "string"
          },
          "author": {
            "nullable": true,
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          }
        },
        "required": [
          "id",
          "name",
          "featureStoreId",
          "addedBy",
          "createdAtMillis",
          "lastUpdatedMillis",
          "status",
          "entities",
          "features",
          "tags",
          "projectsInfo",
          "description"
        ]
      },
      "domino.nucleus.lib.auth.PrincipalWithFeatureFlags": {
        "properties": {
          "isAnonymous": {
            "type": "boolean"
          },
          "isAdmin": {
            "type": "boolean"
          },
          "canonicalId": {
            "nullable": true,
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "canonicalName": {
            "type": "string",
            "nullable": true
          },
          "allowedSystemOperations": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "UpdateUser",
                "ListAllProjects",
                "StopRuns",
                "ViewExecutors",
                "UseK8sDashboard",
                "EditEnvironmentsAsOwner",
                "StopServer",
                "ViewMetrics",
                "RunMongoDBCommands",
                "ManageEnvironments",
                "TriggerSearchIndexing",
                "ManageProjectTags",
                "ResetIndex",
                "ManageExecutors",
                "EditCentralConfig",
                "ManageOrganizations",
                "ViewUsage",
                "ViewProjectSizes",
                "GeneratePasswordResetLinks",
                "ViewRevenue",
                "ActAsProjectAdmin",
                "ExecuteRunsForFree",
                "ViewGlobalEnvironments",
                "ViewAdminMenu",
                "ViewUserList",
                "ManageBuilds",
                "CurateProjects",
                "ViewProjectList",
                "ViewEverythingInControlCenter",
                "RestartNucleus",
                "ManageHardwareTiers",
                "SetUserSystemRoles",
                "ManageFeatureFlags",
                "ViewAdminDashboard",
                "PreviewProjects",
                "ReadKubernetes",
                "ViewSearchIndex"
              ]
            }
          },
          "featureFlags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "booleanSettings": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "mixpanelSettings": {
            "$ref": "#/components/schemas/domino.nucleus.lib.auth.MixpanelSettings"
          },
          "globalBannerSettings": {
            "$ref": "#/components/schemas/domino.nucleus.lib.auth.GlobalBannerSettings"
          },
          "experimentRunsPageSize": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "uploadFileBatchSize": {
            "type": "integer",
            "format": "int32"
          }
        },
        "required": [
          "isAnonymous",
          "isAdmin",
          "allowedSystemOperations",
          "featureFlags",
          "booleanSettings",
          "mixpanelSettings",
          "globalBannerSettings",
          "uploadFileBatchSize"
        ]
      },
      "domino.projects.api.SupportedActionsResponse": {
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.projects.api.SupportedActionDetails"
            }
          },
          "paginationDetails": {
            "$ref": "#/components/schemas/domino.apiserverutils.pagination.PaginationFilter"
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          }
        },
        "required": [
          "items",
          "paginationDetails",
          "totalCount"
        ]
      },
      "domino.common.ProjectId": {
        "properties": {
          "ownerUsername": {
            "type": "string"
          },
          "projectName": {
            "type": "string"
          }
        },
        "required": [
          "ownerUsername",
          "projectName"
        ]
      },
      "domino.gruz.api.StopRequest": {
        "properties": {
          "saveChanges": {
            "type": "boolean"
          },
          "commitMessage": {
            "type": "string",
            "nullable": true
          },
          "saveDatasets": {
            "type": "boolean",
            "nullable": true
          },
          "stoppingUserId": {
            "nullable": true,
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          }
        },
        "required": [
          "saveChanges"
        ]
      },
      "domino.common.gateway.search.SearchProjectDetails": {
        "properties": {
          "id": {
            "type": "string"
          },
          "projectName": {
            "type": "string"
          },
          "projectLink": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "projectName",
          "projectLink"
        ]
      },
      "domino.common.modelproduct.AppCodeInfoDto": {
        "properties": {
          "mainRepo": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.common.modelproduct.AppCodeInfoRepositoryDto"
          },
          "importedGitRepos": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.common.modelproduct.AppCodeInfoRepositoryDto"
            }
          }
        },
        "required": [
          "importedGitRepos"
        ]
      },
      "domino.modelmanager.api.ModelBuildLogs": {
        "properties": {
          "modelId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "modelVersionId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "status": {
            "type": "string",
            "enum": [
              "preparing",
              "building",
              "complete",
              "failed"
            ]
          },
          "logs": {
            "type": "string"
          }
        },
        "required": [
          "modelId",
          "modelVersionId",
          "status",
          "logs"
        ]
      },
      "domino.common.user.LiteUserResponseDTO": {
        "properties": {
          "isLiteUser": {
            "type": "boolean"
          }
        },
        "required": [
          "isLiteUser"
        ]
      },
      "domino.launcherjob.api.PostParameter": {
        "properties": {
          "key": {
            "type": "string"
          },
          "value": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "key",
          "value"
        ]
      },
      "domino.nucleus.modelproduct.models.UsageStatisticsCount": {
        "properties": {
          "productId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "count": {
            "type": "integer",
            "format": "int64"
          }
        },
        "required": [
          "productId",
          "count"
        ]
      },
      "domino.jobs.interface.LogContent": {
        "properties": {
          "timestamp": {
            "type": "integer",
            "format": "epoch"
          },
          "logType": {
            "type": "string",
            "enum": [
              "stdout",
              "stderr",
              "prepareoutput",
              "complete"
            ]
          },
          "log": {
            "type": "string"
          },
          "size": {
            "type": "integer",
            "format": "int64"
          }
        },
        "required": [
          "timestamp",
          "logType",
          "log",
          "size"
        ]
      },
      "domino.server.projects.domain.entities.ProjectGitRepository": {
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "uriHost": {
            "type": "string"
          },
          "uriPort": {
            "type": "string",
            "nullable": true
          },
          "uriPath": {
            "type": "string"
          },
          "defaultRef": {
            "$ref": "#/components/schemas/domino.projects.api.repositories.ReferenceDTO"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "serviceProvider": {
            "type": "string",
            "enum": [
              "github",
              "gitlab",
              "githubEnterprise",
              "unknown",
              "gitlabEnterprise",
              "bitbucket",
              "bitbucketServer"
            ]
          }
        },
        "required": [
          "id",
          "uriHost",
          "uriPath",
          "defaultRef",
          "serviceProvider"
        ]
      },
      "domino.datasource.web.UpdateDataSourceMetadataRequest": {
        "properties": {
          "description": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "domino.projects.api.ProjectHubTemplatesResult": {
        "properties": {
          "templateId": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "base64Logo": {
            "type": "string",
            "nullable": true
          },
          "categories": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "format": "date-time"
          },
          "owner": {
            "$ref": "#/components/schemas/domino.projects.templates.api.models.NamedLink"
          },
          "license": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.projects.templates.api.models.NamedLink"
          },
          "dataFormat": {
            "type": "string",
            "nullable": true
          },
          "recommended": {
            "type": "boolean",
            "nullable": true
          },
          "revisionId": {
            "type": "string"
          },
          "supportedDominoVersions": {
            "type": "array",
            "nullable": true,
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "templateId",
          "title",
          "categories",
          "created",
          "updated",
          "owner",
          "revisionId"
        ]
      },
      "domino.workspaces.web.StopDiscardWorkspaceDetails": {
        "properties": {
          "workspaceId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          }
        },
        "required": [
          "workspaceId"
        ]
      },
      "domino.jobs.interface.QueuedJobHistoryDetails": {
        "properties": {
          "expectedWait": {
            "type": "string"
          },
          "explanation": {
            "type": "string"
          },
          "helpText": {
            "type": "string"
          }
        },
        "required": [
          "expectedWait",
          "explanation",
          "helpText"
        ]
      },
      "domino.files.interface.ProjectCodeBrowseProjectDto": {
        "properties": {
          "projectId": {
            "type": "string"
          },
          "projectVisibility": {
            "type": "string"
          },
          "projectType": {
            "type": "string"
          },
          "isGitBasedProject": {
            "type": "boolean"
          },
          "areDataProjectsEnabled": {
            "type": "boolean"
          },
          "isAnalyticProject": {
            "type": "boolean"
          },
          "noRepos": {
            "type": "boolean"
          },
          "repositories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.files.interface.GitRepo"
            }
          }
        },
        "required": [
          "projectId",
          "projectVisibility",
          "projectType",
          "isGitBasedProject",
          "areDataProjectsEnabled",
          "isAnalyticProject",
          "noRepos",
          "repositories"
        ]
      },
      "domino.projects.templates.api.models.NewHardwareTierDto": {
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "domino.modelmanager.web.UnlinkmodelFromGoal": {
        "properties": {
          "modelId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "modelVersion": {
            "type": "integer",
            "format": "int32"
          },
          "projectId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "goalId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          }
        },
        "required": [
          "modelId",
          "modelVersion",
          "projectId",
          "goalId"
        ]
      },
      "domino.workspaces.api.VolumeMount": {
        "properties": {
          "mountPath": {
            "type": "string"
          },
          "subPath": {
            "type": "string",
            "nullable": true
          },
          "readOnly": {
            "type": "boolean"
          }
        },
        "required": [
          "mountPath",
          "readOnly"
        ]
      },
      "domino.projectManagement.api.LinkedProjectDetails": {
        "properties": {
          "projectId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "projectName": {
            "type": "string"
          },
          "ticketId": {
            "$ref": "#/components/schemas/domino.projectManagement.api.PmId"
          },
          "ticketKey": {
            "type": "string"
          },
          "ticketLink": {
            "type": "string"
          }
        },
        "required": [
          "projectId",
          "projectName",
          "ticketId",
          "ticketKey",
          "ticketLink"
        ]
      },
      "domino.admin.interface.SortableColumns": {
        "properties": {}
      },
      "domino.datasetrw.api.DatasetRwSnapshotAdminSummaryDto": {
        "properties": {
          "snapshot": {
            "$ref": "#/components/schemas/domino.datasetrw.api.DatasetRwSnapshotDto"
          },
          "datasetName": {
            "type": "string"
          },
          "ownerUsername": {
            "type": "string",
            "nullable": true
          },
          "projectName": {
            "type": "string"
          },
          "storageName": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "snapshot",
          "datasetName",
          "projectName"
        ]
      },
      "domino.admin.interface.UserProjectEntry": {
        "properties": {
          "projectId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "ownerUsername": {
            "type": "string",
            "nullable": true
          },
          "ownerName": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "runs": {
            "type": "integer",
            "format": "int64"
          },
          "lastRunStart": {
            "nullable": true,
            "type": "string",
            "format": "date-time"
          },
          "totalRunTimeInHours": {
            "type": "number",
            "format": "double"
          },
          "archived": {
            "type": "boolean"
          },
          "size": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.admin.interface.UserProjectSizeInKB"
          }
        },
        "required": [
          "projectId",
          "name",
          "created",
          "runs",
          "totalRunTimeInHours",
          "archived"
        ]
      },
      "domino.projects.templates.api.models.BaseTemplateDto": {
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "customer",
              "ecosystem"
            ]
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "format": "date-time"
          },
          "categories": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "base64Logo": {
            "type": "string",
            "nullable": true
          },
          "owner": {
            "$ref": "#/components/schemas/domino.projects.templates.api.models.TemplateOwnerDto"
          },
          "license": {
            "type": "string",
            "nullable": true
          },
          "revisionId": {
            "type": "string",
            "nullable": true
          },
          "recommended": {
            "type": "boolean",
            "nullable": true
          },
          "access": {
            "$ref": "#/components/schemas/domino.projects.templates.api.models.TemplateAccessDto"
          },
          "isCompanyOfficial": {
            "type": "boolean",
            "nullable": true
          }
        },
        "required": [
          "type",
          "id",
          "name",
          "created",
          "updated",
          "categories",
          "owner",
          "access"
        ]
      },
      "domino.scheduledjob.api.CronScheduleDTO": {
        "properties": {
          "cronString": {
            "type": "string"
          },
          "isCustom": {
            "type": "boolean"
          },
          "humanReadableCronString": {
            "type": "string"
          }
        },
        "required": [
          "cronString",
          "isCustom",
          "humanReadableCronString"
        ]
      },
      "domino.files.web.LinkFileToGoal": {
        "properties": {
          "fileName": {
            "type": "string"
          },
          "commitId": {
            "type": "string"
          },
          "projectId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "goalId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          }
        },
        "required": [
          "fileName",
          "commitId",
          "projectId",
          "goalId"
        ]
      },
      "domino.datasource.model.AuthType": {
        "type": "string",
        "enum": [
          "AzureBasic",
          "Basic",
          "GCPBasic",
          "AWSIAMBasic",
          "AWSIAMBasicNoOverride",
          "AWSIAMRole",
          "AWSIAMRoleWithUsername",
          "OAuth",
          "PersonalToken",
          "BasicOptional",
          "UserOnly",
          "NoAuth",
          "ClientIdSecret",
          "APIKey",
          "OAuthToken"
        ]
      },
      "domino.projects.api.ProjectPermissionsResult": {
        "properties": {
          "canClassifyProjects": {
            "type": "boolean"
          },
          "canCreateProjects": {
            "type": "boolean"
          },
          "currentProjectPermissions": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.projects.api.SingleProjectPermissionResult"
          }
        },
        "required": [
          "canClassifyProjects",
          "canCreateProjects"
        ]
      },
      "domino.workspaces.api.AvailableWorkspaceTools": {
        "properties": {
          "workspaceTools": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.workspaces.api.WorkspaceDefinitionDto"
            }
          }
        },
        "required": [
          "workspaceTools"
        ]
      },
      "domino.workspace.api.git.ContinueMergeConflictResolutionResponseDto": {
        "properties": {
          "succeeded": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          }
        },
        "required": [
          "succeeded",
          "message"
        ]
      },
      "domino.gruz.api.RawRun": {
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "projectId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "status": {
            "type": "string"
          },
          "trigger": {
            "$ref": "#/components/schemas/domino.gruz.api.RunTrigger"
          },
          "meta": {
            "$ref": "#/components/schemas/domino.gruz.api.RunMeta"
          },
          "output": {
            "$ref": "#/components/schemas/domino.gruz.api.RunOutput"
          }
        },
        "required": [
          "id",
          "projectId",
          "status",
          "trigger",
          "meta",
          "output"
        ]
      },
      "domino.jobs.interface.DependentProject": {
        "properties": {
          "projectId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "commitId": {
            "type": "string"
          }
        },
        "required": [
          "projectId",
          "commitId"
        ]
      },
      "domino.quota.web.RecordQuotaActionRequest": {
        "type": "object",
        "required": [
          "quotaId",
          "userId",
          "timeOfAction",
          "actionType"
        ],
        "properties": {
          "quotaId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$",
            "description": "quota Id"
          },
          "userId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$",
            "description": "Id of user for quota"
          },
          "timeOfAction": {
            "type": "integer",
            "format": "int64",
            "description": "when the action was taken"
          },
          "actionType": {
            "$ref": "#/components/schemas/domino.quota.api.QuotaActionType"
          }
        }
      },
      "domino.computecluster.api.ComputeClusterConfigResponseDto": {
        "properties": {
          "clusterType": {
            "$ref": "#/components/schemas/ComputeClusterType"
          },
          "computeEnvironment": {
            "$ref": "#/components/schemas/domino.environments.api.EnvironmentRevisionSummary"
          },
          "masterHardwareTierId": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.hardwaretier.api.HardwareTierIdentifier"
          },
          "masterHardwareTierName": {
            "type": "string",
            "nullable": true
          },
          "workerCount": {
            "type": "integer",
            "format": "int32"
          },
          "maxWorkerCount": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "workerHardwareTierId": {
            "$ref": "#/components/schemas/domino.hardwaretier.api.HardwareTierIdentifier"
          },
          "workerHardwareTierName": {
            "type": "string"
          },
          "workerStorage": {
            "nullable": true,
            "$ref": "#/components/schemas/Information"
          },
          "extraConfigs": {
            "nullable": true,
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "required": [
          "clusterType",
          "computeEnvironment",
          "workerCount",
          "workerHardwareTierId",
          "workerHardwareTierName"
        ]
      },
      "domino.featurestore.model.OfflineStoreConfig": {
        "type": "object",
        "properties": {
          "fields": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/domino.featurestore.model.Field"
            }
          },
          "offlineStoreType": {
            "$ref": "#/components/schemas/domino.featurestore.model.OfflineStoreType"
          },
          "supportedOnlineStores": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.featurestore.model.OnlineStoreType"
            }
          }
        },
        "required": [
          "offlineStoreType",
          "fields",
          "supportedOnlineStores"
        ]
      },
      "domino.credential.api.VisibleCredentialDto": {
        "properties": {
          "visibleCredentials": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "credentialType": {
            "type": "string",
            "enum": [
              "Individual",
              "Shared"
            ]
          }
        },
        "required": [
          "visibleCredentials",
          "credentialType"
        ]
      },
      "domino.admin.interface.ConfigSettingEntityDto": {
        "properties": {
          "id": {
            "type": "string"
          },
          "setting": {
            "$ref": "#/components/schemas/domino.admin.interface.ConfigSettingDto"
          }
        },
        "required": [
          "id",
          "setting"
        ]
      },
      "domino.common.gateway.search.SearchEnvironmentDTO": {
        "properties": {
          "description": {
            "type": "string"
          },
          "visibility": {
            "type": "string"
          },
          "dockerfile": {
            "type": "string"
          }
        },
        "required": [
          "description",
          "visibility",
          "dockerfile"
        ]
      },
      "domino.modelmanager.api.responses.ModelPermissionForMonitoringApiResponse": {
        "properties": {
          "modelId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "canListModelApi": {
            "type": "boolean"
          }
        },
        "required": [
          "modelId",
          "canListModelApi"
        ]
      },
      "domino.environments.api.EnvironmentTemplateMetadata": {
        "properties": {
          "title": {
            "type": "string"
          },
          "templateId": {
            "type": "string"
          },
          "revisionId": {
            "type": "string"
          }
        },
        "required": [
          "title",
          "templateId",
          "revisionId"
        ]
      },
      "domino.workspaces.api.QueuedWorkspaceHistoryDetails": {
        "properties": {
          "expectedWait": {
            "type": "string"
          },
          "explanation": {
            "type": "string"
          },
          "helpText": {
            "type": "string"
          }
        },
        "required": [
          "expectedWait",
          "explanation",
          "helpText"
        ]
      },
      "domino.files.interface.FileViewTemplateDto": {
        "properties": {
          "commitSummaryForFilepath": {
            "$ref": "#/components/schemas/domino.files.interface.CommitSummaryForFilepath"
          },
          "externalDataVolumesEnabled": {
            "type": "boolean"
          },
          "enableReadWriteDatasets": {
            "type": "boolean"
          },
          "enableSparkClusters": {
            "type": "boolean"
          },
          "enableRayClusters": {
            "type": "boolean"
          },
          "enableDaskClusters": {
            "type": "boolean"
          },
          "canStartRun": {
            "type": "boolean"
          },
          "canEdit": {
            "type": "boolean"
          }
        },
        "required": [
          "commitSummaryForFilepath",
          "externalDataVolumesEnabled",
          "enableReadWriteDatasets",
          "enableSparkClusters",
          "enableRayClusters",
          "enableDaskClusters",
          "canStartRun",
          "canEdit"
        ]
      },
      "domino.files.interface.CredentialMappings": {
        "properties": {
          "repoId": {
            "type": "string"
          },
          "credentialId": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "repoId"
        ]
      },
      "domino.common.modelproduct.PaginationFilter": {
        "properties": {
          "limit": {
            "type": "integer",
            "format": "int32"
          },
          "offset": {
            "type": "integer",
            "format": "int32"
          },
          "latestTimeNano": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "limit",
          "offset"
        ]
      },
      "domino.scheduledjob.api.LegacyScheduledRunDTO": {
        "properties": {
          "id": {
            "type": "string"
          },
          "schedulingUserName": {
            "type": "string"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "scheduleTime": {
            "type": "string"
          },
          "hardwareTierName": {
            "type": "string"
          },
          "launchBehavior": {
            "type": "string",
            "enum": [
              "Concurrent",
              "Sequential"
            ]
          },
          "emailsToNotify": {
            "type": "string",
            "nullable": true
          },
          "projectIdentity": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "schedulingUserName",
          "scheduleTime",
          "hardwareTierName",
          "launchBehavior",
          "projectIdentity"
        ]
      },
      "domino.jobs.interface.DependentExternalVolumeMount": {
        "properties": {
          "name": {
            "type": "string"
          },
          "mount": {
            "$ref": "#/components/schemas/domino.jobs.interface.VolumeMount"
          }
        },
        "required": [
          "name",
          "mount"
        ]
      },
      "domino.workspace.api.git.CancelMergeConflictResolutionRequest": {
        "properties": {
          "repositories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.workspace.api.git.MergeConflictRepository"
            }
          },
          "shouldRevertLastCommit": {
            "type": "boolean"
          }
        },
        "required": [
          "repositories",
          "shouldRevertLastCommit"
        ]
      },
      "domino.files.interface.ProjectCodeBrowseCommitDto": {
        "properties": {
          "commitsNonEmpty": {
            "type": "boolean"
          },
          "thisCommitId": {
            "type": "string"
          },
          "headCommitId": {
            "type": "string"
          },
          "headCommitCreatedAt": {
            "type": "integer",
            "format": "int64"
          },
          "projectSizeBytes": {
            "type": "integer",
            "format": "int64"
          },
          "runNumberForCommit": {
            "type": "string"
          },
          "commitsRunLink": {
            "type": "string"
          },
          "selectedRevision": {
            "$ref": "#/components/schemas/domino.files.interface.RevisionShape"
          }
        },
        "required": [
          "commitsNonEmpty",
          "thisCommitId",
          "headCommitId",
          "headCommitCreatedAt",
          "projectSizeBytes",
          "runNumberForCommit",
          "commitsRunLink",
          "selectedRevision"
        ]
      },
      "domino.layout.web.ValidateStepRequest": {
        "properties": {
          "workflowID": {
            "type": "string",
            "enum": [
              "CreateDataset",
              "CreateDatasource",
              "UpdateDataset",
              "CreateFeatureStore",
              "UpdateDatasource",
              "UpdateFeatureStore"
            ]
          },
          "stepID": {
            "type": "string",
            "enum": [
              "Authenticate",
              "Configure",
              "ConfigureOnlineStore"
            ]
          },
          "data": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "required": [
          "workflowID",
          "stepID",
          "data"
        ]
      },
      "domino.activity.api.AllMetadata": {
        "properties": {
          "jobStatusActivityMetaData": {
            "$ref": "#/components/schemas/domino.activity.api.JobStatusActivityMetaData"
          },
          "workspaceStatusActivityMetaData": {
            "$ref": "#/components/schemas/domino.activity.api.WorkspaceStatusActivityMetaData"
          },
          "commentActivityMetaData": {
            "$ref": "#/components/schemas/domino.activity.api.CommentActivityMetaData"
          },
          "commentedOnJobMetaData": {
            "$ref": "#/components/schemas/domino.activity.api.CommentedOnJobMetaData"
          },
          "commentedOnWorkspaceMetaData": {
            "$ref": "#/components/schemas/domino.activity.api.CommentedOnWorkspaceMetaData"
          },
          "commentedOnFileMetaData": {
            "$ref": "#/components/schemas/domino.activity.api.CommentedOnFileMetaData"
          },
          "commentedOnProjectGoalMetaData": {
            "$ref": "#/components/schemas/domino.activity.api.CommentedOnProjectGoalMetaData"
          },
          "commentedOnDeliverableMetaData": {
            "$ref": "#/components/schemas/domino.activity.api.CommentedOnDeliverableMetaData"
          },
          "projectStageChangeActivityMetaData": {
            "$ref": "#/components/schemas/domino.activity.api.ProjectStageChangeActivityMetaData"
          },
          "projectStatusChangeActivityMetaData": {
            "$ref": "#/components/schemas/domino.activity.api.ProjectStatusChangeActivityMetaData"
          },
          "appStatusActivityMetaData": {
            "$ref": "#/components/schemas/domino.activity.api.AppStatusActivityMetaData"
          },
          "modelVersionStatusActivityMetaData": {
            "$ref": "#/components/schemas/domino.activity.api.ModelVersionStatusActivityMetaData"
          },
          "scheduleJobActivityMetaData": {
            "$ref": "#/components/schemas/domino.activity.api.ScheduleJobActivityMetaData"
          },
          "scheduleJobEditActivityMetaData": {
            "$ref": "#/components/schemas/domino.activity.api.ScheduleJobEditActivityMetaData"
          },
          "fileChangeActivityMetaData": {
            "$ref": "#/components/schemas/domino.activity.api.FileChangeActivityMetaData"
          },
          "projectGoalCreateActivityMetadata": {
            "$ref": "#/components/schemas/domino.activity.api.ProjectGoalCreateActivityMetadata"
          },
          "projectGoalStatusChangeActivityMetadata": {
            "$ref": "#/components/schemas/domino.activity.api.ProjectGoalStatusChangeActivityMetadata"
          },
          "projectGoalStageChangeActivityMetaData": {
            "$ref": "#/components/schemas/domino.activity.api.ProjectGoalStageChangeActivityMetadata"
          },
          "projectGoalAssignmentChangeActivityMetadata": {
            "$ref": "#/components/schemas/domino.activity.api.ProjectGoalAssignmentChangeActivityMetadata"
          },
          "projectGoalUpdateTitleActivityMetadata": {
            "$ref": "#/components/schemas/domino.activity.api.ProjectGoalUpdateTitleActivityMetadata"
          },
          "projectGoalUpdateDescriptionActivityMetadata": {
            "$ref": "#/components/schemas/domino.activity.api.ProjectGoalUpdateDescriptionActivityMetadata"
          },
          "projectGoalFileLinkActivityMetadata": {
            "$ref": "#/components/schemas/domino.activity.api.ProjectGoalFileLinkActivityMetadata"
          },
          "projectGoalJobLinkActivityMetadata": {
            "$ref": "#/components/schemas/domino.activity.api.ProjectGoalJobLinkActivityMetadata"
          },
          "projectGoalWorkspaceLinkActivityMetadata": {
            "$ref": "#/components/schemas/domino.activity.api.ProjectGoalWorkspaceLinkActivityMetadata"
          },
          "projectGoalAppLinkActivityMetadata": {
            "$ref": "#/components/schemas/domino.activity.api.ProjectGoalAppLinkActivityMetadata"
          },
          "projectGoalModelLinkActivityMetadata": {
            "$ref": "#/components/schemas/domino.activity.api.ProjectGoalModelLinkActivityMetadata"
          },
          "projectLinkChangeActivityMetadata": {
            "$ref": "#/components/schemas/domino.activity.api.ProjectLinkChangeActivityMetadata"
          },
          "modelReviewActivityWithNotesMetadata": {
            "$ref": "#/components/schemas/domino.activity.api.ModelReviewActivityWithNotesMetadata"
          },
          "allModelReviewersApprovedMetadata": {
            "$ref": "#/components/schemas/domino.activity.api.AllModelReviewersApprovedMetadata"
          },
          "registeredModelStageTransitionedMetadata": {
            "$ref": "#/components/schemas/domino.activity.api.RegisteredModelStageTransitionedMetadata"
          },
          "projectGoalBulkUpdateActivityMetadata": {
            "$ref": "#/components/schemas/domino.activity.api.ProjectGoalBulkUpdateActivityMetadata"
          },
          "projectGoalBulkDeleteActivityMetadata": {
            "$ref": "#/components/schemas/domino.activity.api.ProjectGoalBulkDeleteActivityMetadata"
          }
        },
        "required": [
          "jobStatusActivityMetaData",
          "workspaceStatusActivityMetaData",
          "commentActivityMetaData",
          "commentedOnJobMetaData",
          "commentedOnWorkspaceMetaData",
          "commentedOnFileMetaData",
          "commentedOnProjectGoalMetaData",
          "commentedOnDeliverableMetaData",
          "projectStageChangeActivityMetaData",
          "projectStatusChangeActivityMetaData",
          "appStatusActivityMetaData",
          "modelVersionStatusActivityMetaData",
          "scheduleJobActivityMetaData",
          "scheduleJobEditActivityMetaData",
          "fileChangeActivityMetaData",
          "projectGoalCreateActivityMetadata",
          "projectGoalStatusChangeActivityMetadata",
          "projectGoalStageChangeActivityMetaData",
          "projectGoalAssignmentChangeActivityMetadata",
          "projectGoalUpdateTitleActivityMetadata",
          "projectGoalUpdateDescriptionActivityMetadata",
          "projectGoalFileLinkActivityMetadata",
          "projectGoalJobLinkActivityMetadata",
          "projectGoalWorkspaceLinkActivityMetadata",
          "projectGoalAppLinkActivityMetadata",
          "projectGoalModelLinkActivityMetadata",
          "projectLinkChangeActivityMetadata",
          "modelReviewActivityWithNotesMetadata",
          "allModelReviewersApprovedMetadata",
          "registeredModelStageTransitionedMetadata",
          "projectGoalBulkUpdateActivityMetadata",
          "projectGoalBulkDeleteActivityMetadata"
        ]
      },
      "domino.jobs.interface.OrchestratorExecutionMetadata": {
        "properties": {
          "taskProjectId": {
            "type": "string",
            "nullable": true
          },
          "taskDomain": {
            "type": "string",
            "nullable": true
          },
          "taskExecutionVersion": {
            "type": "string",
            "nullable": true
          },
          "taskExecutionName": {
            "type": "string",
            "nullable": true
          },
          "nodeId": {
            "type": "string",
            "nullable": true
          },
          "nodeProjectId": {
            "type": "string",
            "nullable": true
          },
          "nodeDomain": {
            "type": "string",
            "nullable": true
          },
          "nodeWorkflowExecutionName": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "domino.workspaces.api.DominoStats": {
        "properties": {
          "name": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "value"
        ]
      },
      "domino.activity.api.CommentedOnWorkspaceMetaData": {
        "properties": {
          "workspaceId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "workspaceNumber": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string"
          }
        },
        "required": [
          "workspaceId",
          "workspaceNumber",
          "title"
        ]
      },
      "domino.workspace.api.git.CommitAndPushRequest": {
        "properties": {
          "projectId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "repos": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.workspace.api.git.CommitRepo"
            }
          },
          "syncOperationInfo": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.provenance.api.SyncOperationInfo"
          },
          "pushOnly": {
            "type": "boolean",
            "nullable": true
          }
        },
        "required": [
          "projectId",
          "repos"
        ]
      },
      "domino.workspaces.web.CreateCommentInput": {
        "properties": {
          "comment": {
            "type": "string"
          }
        },
        "required": [
          "comment"
        ]
      },
      "domino.projects.api.OnDemandSparkClusterPropertiesSpec": {
        "properties": {
          "computeEnvironmentId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "computeEnvironmentRevisionSpec": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "enum": [
                  "ActiveRevision",
                  "LatestRevision",
                  "RestrictedRevision"
                ]
              },
              {
                "type": "object",
                "required": [
                  "revisionId"
                ],
                "properties": {
                  "revisionId": {
                    "type": "string"
                  }
                }
              }
            ]
          },
          "executorCount": {
            "type": "integer",
            "format": "int32"
          },
          "executorHardwareTierId": {
            "type": "string"
          },
          "executorStorage": {
            "nullable": true,
            "$ref": "#/components/schemas/Information"
          },
          "masterHardwareTierId": {
            "type": "string"
          }
        },
        "required": [
          "computeEnvironmentId",
          "executorCount",
          "executorHardwareTierId",
          "masterHardwareTierId"
        ]
      },
      "domino.datasetrw.api.DatasetRwInfoDto": {
        "properties": {
          "datasetRwDto": {
            "$ref": "#/components/schemas/domino.datasetrw.api.DatasetRwDto"
          },
          "projectInfo": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.datasetrw.api.DatasetRwProjectInfoDto"
          },
          "storageInfo": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.datasetrw.api.DatasetRwStorageInfoDto"
          }
        },
        "required": [
          "datasetRwDto"
        ]
      },
      "domino.jobs.interface.HardwareTierDetails": {
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "isArchived": {
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "name",
          "isArchived"
        ]
      },
      "domino.scheduledjob.api.ScheduledJobDto": {
        "properties": {
          "id": {
            "type": "string"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "projectId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "title": {
            "type": "string"
          },
          "command": {
            "type": "string"
          },
          "schedule": {
            "$ref": "#/components/schemas/domino.scheduledjob.api.CronScheduleDTO"
          },
          "timezoneId": {
            "type": "string"
          },
          "isPaused": {
            "type": "boolean"
          },
          "publishModelId": {
            "nullable": true,
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "allowConcurrentExecution": {
            "type": "boolean"
          },
          "hardwareTierIdentifier": {
            "type": "string"
          },
          "hardwareTierName": {
            "type": "string"
          },
          "overrideEnvironmentId": {
            "nullable": true,
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "environmentRevisionSpec": {
            "oneOf": [
              {
                "type": "string",
                "enum": [
                  "ActiveRevision",
                  "LatestRevision",
                  "RestrictedRevision"
                ]
              },
              {
                "type": "object",
                "required": [
                  "revisionId"
                ],
                "properties": {
                  "revisionId": {
                    "type": "string"
                  }
                }
              }
            ]
          },
          "scheduledByUserId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "scheduledByUserName": {
            "type": "string"
          },
          "notifyOnCompleteEmailAddresses": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "dataConfig": {
            "$ref": "#/components/schemas/domino.scheduledjob.api.DataConfigDto"
          },
          "computeClusterProperties": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.scheduledjob.api.ComputeClusterConfigSpecDto"
          },
          "volumeSpecificationOverride": {
            "nullable": true,
            "type": "object"
          },
          "mainRepoGitRef": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.projects.api.repositories.ReferenceDTO"
          }
        },
        "required": [
          "id",
          "created",
          "projectId",
          "title",
          "command",
          "schedule",
          "timezoneId",
          "isPaused",
          "allowConcurrentExecution",
          "hardwareTierIdentifier",
          "hardwareTierName",
          "environmentRevisionSpec",
          "scheduledByUserId",
          "scheduledByUserName",
          "notifyOnCompleteEmailAddresses",
          "dataConfig"
        ]
      },
      "domino.jobs.interface.ResultFileContent": {
        "properties": {
          "content": {
            "type": "string"
          }
        },
        "required": [
          "content"
        ]
      },
      "domino.projects.templates.api.models.DatasetDto": {
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "domino.datasetrw.web.RenameFileOrDirectoryRequest": {
        "properties": {
          "relativePath": {
            "type": "string"
          },
          "newNameWithExtension": {
            "type": "string"
          }
        },
        "required": [
          "relativePath",
          "newNameWithExtension"
        ]
      },
      "domino.modelmanager.api.ModelExportVersion": {
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "exportId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "buildId": {
            "nullable": true,
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "modelVersion": {
            "$ref": "#/components/schemas/domino.modelmanager.api.ModelVersion"
          },
          "exportTargetDetails": {
            "$ref": "#/components/schemas/domino.modelmanager.api.ModelExportTargetDetails"
          },
          "status": {
            "type": "string",
            "enum": [
              "exporting",
              "preparing",
              "complete",
              "not_triggered",
              "failed"
            ]
          },
          "created": {
            "type": "integer",
            "format": "epoch"
          }
        },
        "required": [
          "id",
          "exportId",
          "modelVersion",
          "exportTargetDetails",
          "status",
          "created"
        ]
      },
      "domino.environments.api.NewEnvironmentRevision": {
        "properties": {
          "baseRevision": {
            "$ref": "#/components/schemas/domino.environments.api.NewEnvironmentRevisionBase"
          },
          "workspaceTools": {
            "type": "string",
            "nullable": true
          },
          "supportedClusters": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "Dask",
                "Spark",
                "Ray",
                "MPI"
              ]
            }
          },
          "dockerfileInstructions": {
            "type": "string",
            "nullable": true
          },
          "environmentVariables": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "preSetupScript": {
            "type": "string",
            "nullable": true
          },
          "postSetupScript": {
            "type": "string",
            "nullable": true
          },
          "preRunScript": {
            "type": "string",
            "nullable": true
          },
          "postRunScript": {
            "type": "string",
            "nullable": true
          },
          "dockerArguments": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "summary": {
            "type": "string",
            "nullable": true
          },
          "skipCache": {
            "type": "boolean"
          },
          "shouldUseVpn": {
            "type": "boolean"
          },
          "tags": {
            "type": "array",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "isRestricted": {
            "type": "boolean",
            "nullable": true
          }
        },
        "required": [
          "baseRevision",
          "supportedClusters",
          "environmentVariables",
          "dockerArguments",
          "skipCache",
          "shouldUseVpn"
        ]
      },
      "domino.projects.api.AssetViewStats": {
        "properties": {
          "viewType": {
            "type": "string",
            "enum": [
              "last24H",
              "allView"
            ]
          },
          "totalCount": {
            "type": "integer",
            "format": "int64"
          },
          "errorRate": {
            "type": "number",
            "format": "double",
            "nullable": true
          }
        },
        "required": [
          "viewType",
          "totalCount"
        ]
      },
      "domino.admin.interface.ComputeClusterOverview": {
        "properties": {
          "clusterName": {
            "type": "string"
          },
          "clusterType": {
            "type": "string"
          },
          "masterHardwareTier": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.admin.interface.HardwareTierOverview"
          },
          "workerHardwareTier": {
            "$ref": "#/components/schemas/domino.admin.interface.HardwareTierOverview"
          },
          "workerStorageSize": {
            "nullable": true,
            "$ref": "#/components/schemas/Information"
          },
          "webUiPath": {
            "type": "string"
          },
          "podOverviews": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.admin.interface.ComputeClusterPodOverview"
            }
          }
        },
        "required": [
          "clusterName",
          "clusterType",
          "workerHardwareTier",
          "webUiPath",
          "podOverviews"
        ]
      },
      "domino.common.gateway.search.TagValueHighlight": {
        "properties": {
          "tagValue": {
            "type": "string"
          },
          "highlightedTagValue": {
            "type": "string"
          }
        },
        "required": [
          "tagValue",
          "highlightedTagValue"
        ]
      },
      "domino.datasetrw.web.UpdateSnapshotStatusRequest": {
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "Pending",
              "Deleted",
              "DeletionInProgress",
              "Copying",
              "Failed",
              "Active",
              "MarkedForDeletion"
            ]
          }
        },
        "required": [
          "status"
        ]
      },
      "domino.filesync.sync.RelativeFilePath": {
        "type": "object",
        "properties": {
          "canonicalizedPathString": {
            "type": "string",
            "description": "Path on the file system"
          },
          "separator": {
            "type": "string",
            "description": "Path separator",
            "example": "/"
          }
        },
        "required": [
          "canonicalizedPathString"
        ]
      },
      "domino.nucleus.modelproduct.models.EmailInvitationFailure": {
        "properties": {
          "email": {
            "type": "string"
          },
          "errorMessage": {
            "type": "string"
          }
        },
        "required": [
          "email",
          "errorMessage"
        ]
      },
      "domino.projects.api.ProxyConfig": {
        "properties": {
          "internalPath": {
            "type": "string"
          },
          "port": {
            "type": "integer",
            "format": "int32"
          },
          "rewrite": {
            "type": "boolean"
          }
        },
        "required": [
          "internalPath",
          "port",
          "rewrite"
        ]
      },
      "domino.modelmanager.web.RecordInvocation": {
        "properties": {
          "modelVersionId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32"
          }
        },
        "required": [
          "modelVersionId",
          "statusCode"
        ]
      },
      "domino.projectManagement.api.PmId": {
        "properties": {
          "id": {
            "type": "string"
          }
        },
        "required": [
          "id"
        ]
      },
      "domino.workspace.api.WorkspacePageDto": {
        "properties": {
          "workspaces": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.workspace.api.WorkspaceDto"
            }
          },
          "totalWorkspaceCount": {
            "type": "integer",
            "format": "int64"
          },
          "offset": {
            "type": "integer",
            "format": "int32"
          },
          "limit": {
            "type": "integer",
            "format": "int32"
          }
        },
        "required": [
          "workspaces",
          "totalWorkspaceCount",
          "offset",
          "limit"
        ]
      },
      "domino.datasetrw.web.CreateDownloadArchiveRequest": {
        "properties": {
          "relativePaths": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "relativePaths"
        ]
      },
      "domino.gruz.api.LauncherValue": {
        "properties": {
          "key": {
            "type": "string"
          },
          "values": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "key",
          "values"
        ]
      },
      "domino.common.models.EnvironmentVariables": {
        "properties": {
          "vars": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.common.models.EnvironmentVariable"
            }
          }
        },
        "required": [
          "vars"
        ]
      },
      "domino.projects.templates.api.models.CustomerTemplateDto": {
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "format": "date-time"
          },
          "categories": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "base64Logo": {
            "type": "string",
            "nullable": true
          },
          "owner": {
            "$ref": "#/components/schemas/domino.projects.templates.api.models.TemplateOwnerDto"
          },
          "license": {
            "type": "string",
            "nullable": true
          },
          "revisionId": {
            "type": "string",
            "nullable": true
          },
          "recommended": {
            "type": "boolean",
            "nullable": true
          },
          "access": {
            "$ref": "#/components/schemas/domino.projects.templates.api.models.TemplateAccessDto"
          },
          "sourceProject": {
            "$ref": "#/components/schemas/domino.projects.templates.api.models.SourceProjectDto"
          },
          "definition": {
            "$ref": "#/components/schemas/domino.projects.templates.api.models.TemplateDefinitionDto"
          },
          "isArchived": {
            "type": "boolean"
          },
          "billingTag": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.projects.api.BillingTag"
          },
          "isCompanyOfficial": {
            "type": "boolean",
            "nullable": true
          }
        },
        "required": [
          "id",
          "name",
          "created",
          "updated",
          "categories",
          "owner",
          "access",
          "sourceProject",
          "definition",
          "isArchived"
        ]
      },
      "domino.projects.templates.api.models.ProjectGoalDto": {
        "properties": {
          "title": {
            "type": "string"
          }
        },
        "required": [
          "title"
        ]
      },
      "domino.hardwaretier.api.HardwareTierComputeClusterRestrictionsDto": {
        "properties": {
          "restrictToSpark": {
            "type": "boolean"
          },
          "restrictToRay": {
            "type": "boolean"
          },
          "restrictToDask": {
            "type": "boolean"
          },
          "restrictToMpi": {
            "type": "boolean"
          }
        },
        "required": [
          "restrictToSpark",
          "restrictToRay",
          "restrictToDask",
          "restrictToMpi"
        ]
      },
      "domino.modelmanager.web.LinkmodelToGoal": {
        "properties": {
          "modelId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "modelVersion": {
            "type": "integer",
            "format": "int32"
          },
          "projectId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "goalId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          }
        },
        "required": [
          "modelId",
          "modelVersion",
          "projectId",
          "goalId"
        ]
      },
      "domino.projects.api.AssetPortfolioPaginationFilter": {
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/domino.apiserverutils.pagination.PaginationFilter"
          },
          "sortBy": {
            "type": "string",
            "enum": [
              "assetType",
              "lastUpdated",
              "numberOfVersions",
              "ownerName",
              "last24Hours",
              "name",
              "projectName"
            ]
          },
          "searchQuery": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "pagination",
          "sortBy"
        ]
      },
      "domino.projects.templates.api.models.ProjectTemplateImportedRepositoryDto": {
        "properties": {
          "uri": {
            "type": "string"
          }
        },
        "required": [
          "uri"
        ]
      },
      "domino.projects.api.ProjectPortfolioElement": {
        "properties": {
          "projectId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "projectName": {
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/domino.projects.api.ProjectStatus"
          },
          "stage": {
            "$ref": "#/components/schemas/domino.projects.api.ProjectStage"
          },
          "createdOn": {
            "type": "integer",
            "format": "epoch"
          },
          "lastActivity": {
            "type": "integer",
            "format": "epoch",
            "nullable": true
          },
          "collaborators": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.projects.api.ProjectStakeholder"
            }
          },
          "owner": {
            "$ref": "#/components/schemas/domino.projects.api.ProjectStakeholder"
          },
          "assets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.projects.api.ProjectAssetCount"
            }
          },
          "costPerMinute": {
            "type": "number",
            "format": "double"
          },
          "duration": {
            "type": "integer",
            "format": "int64"
          },
          "totalGoalsCount": {
            "type": "integer",
            "format": "int32"
          },
          "completedGoalsCount": {
            "type": "integer",
            "format": "int32"
          }
        },
        "required": [
          "projectId",
          "projectName",
          "status",
          "stage",
          "createdOn",
          "collaborators",
          "owner",
          "assets",
          "costPerMinute",
          "duration",
          "totalGoalsCount",
          "completedGoalsCount"
        ]
      },
      "domino.workspaces.web.WorkspacesUsageSocketEvent": {
        "properties": {
          "correlationId": {
            "type": "string"
          },
          "projectId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "workspaceId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "room": {
            "type": "string"
          },
          "cpu": {
            "type": "number",
            "format": "double"
          },
          "mem": {
            "type": "number",
            "format": "double"
          },
          "timestamp": {
            "type": "integer",
            "format": "epoch"
          }
        },
        "required": [
          "correlationId",
          "projectId",
          "workspaceId",
          "room",
          "cpu",
          "mem",
          "timestamp"
        ]
      },
      "DocumentType": {
        "type": "string",
        "description": "List of searchable document types",
        "enum": [
          "project",
          "file",
          "run",
          "model",
          "environment",
          "comment",
          "dataset"
        ]
      },
      "domino.projects.api.repositories.responses.BranchEntryDTO": {
        "properties": {
          "name": {
            "type": "string"
          }
        },
        "required": [
          "name"
        ]
      },
      "domino.jobs.interface.JobGoal": {
        "properties": {
          "goalId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "jobId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "jobNumber": {
            "type": "integer",
            "format": "int32"
          },
          "projectId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "title": {
            "type": "string"
          },
          "currentStage": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "goalId",
          "jobId",
          "jobNumber",
          "projectId",
          "title",
          "currentStage"
        ]
      },
      "domino.common.user.CreateUserRequest": {
        "properties": {
          "email": {
            "type": "string"
          },
          "roles": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "email",
          "roles"
        ]
      },
      "domino.activity.api.ProjectGoalFileLinkActivityMetadata": {
        "properties": {
          "action": {
            "type": "string",
            "enum": [
              "added",
              "removed"
            ]
          },
          "fileName": {
            "type": "string"
          },
          "commitId": {
            "type": "string"
          },
          "projectGoalTitle": {
            "type": "string"
          }
        },
        "required": [
          "action",
          "fileName",
          "commitId",
          "projectGoalTitle"
        ]
      },
      "domino.projects.api.repositories.ReferenceDTO": {
        "properties": {
          "type": {
            "type": "string"
          },
          "value": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "type"
        ]
      },
      "domino.jobs.web.CreateComment": {
        "properties": {
          "comment": {
            "type": "string"
          }
        },
        "required": [
          "comment"
        ]
      },
      "domino.jobs.interface.ResultFileMetadata": {
        "properties": {
          "contentId": {
            "type": "string"
          },
          "filename": {
            "type": "string"
          },
          "size": {
            "type": "integer",
            "format": "int64"
          },
          "lastModified": {
            "type": "integer",
            "format": "epoch"
          },
          "author": {
            "type": "string"
          }
        },
        "required": [
          "contentId",
          "filename",
          "size",
          "lastModified",
          "author"
        ]
      },
      "domino.projects.api.AddManyCollaborators": {
        "properties": {
          "collaboratorUsernameOrEmails": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "welcomeMessage": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "collaboratorUsernameOrEmails"
        ]
      },
      "domino.datasource.model.EngineType": {
        "type": "string",
        "enum": [
          "Domino",
          "Starburst"
        ]
      },
      "domino.hardwaretier.api.NewHwtFlags": {
        "properties": {
          "isDefault": {
            "type": "boolean",
            "nullable": true
          },
          "isVisible": {
            "type": "boolean",
            "nullable": true
          },
          "isGlobal": {
            "type": "boolean",
            "nullable": true
          },
          "isDataAnalystTier": {
            "type": "boolean",
            "nullable": true
          },
          "isAllowedDuringTrial": {
            "type": "boolean",
            "nullable": true
          },
          "isModelApiTier": {
            "type": "boolean",
            "nullable": true
          },
          "isDefaultForModelApi": {
            "type": "boolean",
            "nullable": true
          }
        }
      },
      "domino.projects.api.ProjectPortfolioStats": {
        "properties": {
          "totalProjects": {
            "type": "integer",
            "format": "int32"
          },
          "stageStats": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.projects.api.StageStat"
            }
          },
          "statuStats": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.projects.api.StatusStat"
            }
          }
        },
        "required": [
          "totalProjects",
          "stageStats",
          "statuStats"
        ]
      },
      "domino.projects.templates.api.models.ProjectTemplateEnvironmentDto": {
        "properties": {
          "name": {
            "type": "string"
          },
          "revisionDetails": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.projects.templates.api.models.ProjectTemplateEnvRevDetailsDto"
          }
        },
        "required": [
          "name"
        ]
      },
      "domino.computegrid.ExecutionEventDto": {
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "kind": {
            "type": "string"
          },
          "payload": {
            "nullable": true,
            "type": "object"
          },
          "resourceKind": {
            "type": "string",
            "nullable": true,
            "enum": [
              "Other",
              "Role",
              "Job",
              "Service",
              "ServiceAccount",
              "PersistentVolume",
              "Pod",
              "NetworkPolicy",
              "PriorityClass",
              "RoleBinding",
              "Event",
              "StatefulSet",
              "Ingress",
              "ConfigMap",
              "Node",
              "HorizontalPodAutoscaler",
              "Secret",
              "PersistentVolumeClaim",
              "Deployment"
            ]
          },
          "reason": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "source": {
            "type": "string",
            "enum": [
              "Domino",
              "Kubernetes",
              "Metrics"
            ]
          },
          "attempt": {
            "type": "integer",
            "format": "int32"
          },
          "attemptCorrelationId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "elapsedMillis": {
            "type": "integer",
            "format": "int64"
          },
          "sagaId": {
            "type": "string",
            "nullable": true
          },
          "sagaName": {
            "type": "string",
            "nullable": true
          },
          "executionId": {
            "nullable": true,
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "executionType": {
            "type": "string",
            "nullable": true,
            "enum": [
              "Model API",
              "Endpoint",
              "App",
              "Scheduled",
              "Launcher",
              "Batch",
              "Workspace",
              "Other",
              "SSHProxy"
            ]
          },
          "state": {
            "type": "string",
            "nullable": true
          },
          "nextState": {
            "type": "string",
            "nullable": true
          },
          "maxAttempts": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "outcome": {
            "type": "string",
            "nullable": true,
            "enum": [
              "Error",
              "Retry",
              "Failure",
              "Ignored",
              "Success"
            ]
          },
          "outcomeMessage": {
            "type": "string",
            "nullable": true
          },
          "outcomeDetails": {
            "type": "string",
            "nullable": true
          },
          "metricName": {
            "type": "string",
            "nullable": true
          },
          "creationTime": {
            "type": "string",
            "format": "date-time"
          },
          "updateTime": {
            "type": "string",
            "format": "date-time"
          },
          "durationMillis": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          }
        },
        "required": [
          "id",
          "kind",
          "source",
          "attempt",
          "attemptCorrelationId",
          "timestamp",
          "elapsedMillis",
          "creationTime",
          "updateTime"
        ]
      },
      "domino.featurestore.web.UpdateFeatureStoreConfigRequest": {
        "properties": {
          "offlineStoreType": {
            "type": "string",
            "nullable": true,
            "enum": [
              "File",
              "BigQuery",
              "Redshift",
              "Snowflake"
            ]
          },
          "offlineStoreConfig": {
            "nullable": true,
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "domino.workspaces.web.WorkspaceEvents": {
        "properties": {
          "workspacesUsage": {
            "$ref": "#/components/schemas/domino.workspaces.web.WorkspacesUsageSocketEvent"
          },
          "workspaceStatusChangeEvent": {
            "$ref": "#/components/schemas/domino.workspaces.web.WorkspaceStatusChangeSocketEvent"
          }
        },
        "required": [
          "workspacesUsage",
          "workspaceStatusChangeEvent"
        ]
      },
      "domino.workspace.api.RepositoryChanges": {
        "properties": {
          "created": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "modified": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "deleted": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "staged": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "created",
          "modified",
          "deleted",
          "staged"
        ]
      },
      "domino.environments.api.RebuildEnvironmentRevision": {
        "properties": {
          "revisionId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          }
        },
        "required": [
          "revisionId"
        ]
      },
      "domino.common.DominoId": {
        "properties": {
          "raw": {
            "type": "string"
          }
        },
        "required": [
          "raw"
        ]
      },
      "domino.workspaces.api.DependentProject": {
        "properties": {
          "projectId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "commitId": {
            "type": "string"
          }
        },
        "required": [
          "projectId",
          "commitId"
        ]
      },
      "domino.files.interface.CommentedBy": {
        "properties": {
          "userId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "userName": {
            "type": "string"
          }
        },
        "required": [
          "userId",
          "userName"
        ]
      },
      "domino.admin.usermanagement.api.BriefUserUsageReport": {
        "properties": {
          "userId": {
            "type": "string"
          },
          "practitionerWorkloadsTotal": {
            "type": "integer",
            "format": "int32"
          },
          "mostRecentActivity": {
            "type": "string",
            "nullable": true
          },
          "runsTotal": {
            "type": "integer",
            "format": "int32"
          },
          "runsRecent": {
            "type": "integer",
            "format": "int32"
          },
          "projectsTotal": {
            "type": "integer",
            "format": "int32"
          },
          "projectsRecent": {
            "type": "integer",
            "format": "int32"
          },
          "licenseType": {
            "type": "string"
          }
        },
        "required": [
          "userId",
          "practitionerWorkloadsTotal",
          "runsTotal",
          "runsRecent",
          "projectsTotal",
          "projectsRecent",
          "licenseType"
        ]
      },
      "domino.modelmanager.web.ExportImageForSagemakerWithoutModelRequest": {
        "properties": {
          "registryUrl": {
            "type": "string"
          },
          "repository": {
            "type": "string"
          },
          "tag": {
            "type": "string",
            "nullable": true
          },
          "username": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          },
          "exportName": {
            "type": "string"
          },
          "exportDescription": {
            "type": "string",
            "nullable": true
          },
          "userId": {
            "type": "string"
          },
          "projectId": {
            "type": "string"
          },
          "file": {
            "type": "string"
          },
          "function": {
            "type": "string"
          },
          "environmentId": {
            "type": "string"
          }
        },
        "required": [
          "registryUrl",
          "repository",
          "exportName",
          "userId",
          "projectId",
          "file",
          "function",
          "environmentId"
        ]
      },
      "domino.jobs.interface.JobResourceUsage": {
        "properties": {
          "cpu": {
            "type": "number",
            "format": "double"
          },
          "memory": {
            "type": "number",
            "format": "double"
          },
          "timestamp": {
            "type": "integer",
            "format": "epoch"
          }
        },
        "required": [
          "cpu",
          "memory",
          "timestamp"
        ]
      },
      "domino.dataplane.DataPlaneName": {
        "properties": {
          "value": {
            "type": "string"
          }
        },
        "required": [
          "value"
        ]
      },
      "domino.files.interface.DeletePropsDto": {
        "properties": {}
      },
      "domino.projects.api.repositories.responses.ProjectTemplateReferenceDTO": {
        "properties": {
          "type": {
            "type": "string"
          },
          "value": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "type"
        ]
      },
      "domino.projects.api.WritableProjectMounts": {
        "type": "object",
        "properties": {
          "mainGitMount": {
            "nullable": true,
            "type": "string"
          },
          "importedGitMounts": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          },
          "mainDfsMount": {
            "type": "string"
          }
        },
        "required": [
          "mainDfsMount",
          "importedGitMounts"
        ]
      },
      "domino.gitproviders.api.GetOwnersApiResponse": {
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.gitproviders.api.OwnerDTO"
            }
          }
        },
        "required": [
          "items"
        ]
      },
      "domino.datasource.api.DataSourceCodeSnippetsDto": {
        "properties": {
          "snippetsByLanguages": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "required": [
          "snippetsByLanguages"
        ]
      },
      "domino.executor.api.ListBranchesRequest": {
        "properties": {
          "repoId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "query": {
            "type": "string"
          }
        },
        "required": [
          "repoId",
          "query"
        ]
      },
      "domino.projects.web.MarkProjectComplete": {
        "properties": {
          "projectId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "completeReason": {
            "type": "string"
          }
        },
        "required": [
          "projectId",
          "completeReason"
        ]
      },
      "domino.notifications.NameAndId": {
        "type": "object",
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "object ID",
            "example": "abc123"
          },
          "name": {
            "type": "string",
            "description": "Descriptive name for presentation, optional"
          }
        }
      },
      "domino.common.run.interfaces.NewRunDTO": {
        "properties": {
          "projectId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "commandToRun": {
            "type": "string"
          },
          "commitId": {
            "type": "string",
            "nullable": true
          },
          "mainRepoGitRef": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.common.run.interfaces.NewRunGitRefDto"
          },
          "hardwareTierName": {
            "type": "string",
            "nullable": true
          },
          "datasetConfig": {
            "type": "string",
            "nullable": true
          },
          "dominoClientSource": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "projectId",
          "commandToRun"
        ]
      },
      "domino.projectManagement.api.SubTicketToDominoMapper": {
        "properties": {
          "dominoEntity": {
            "$ref": "#/components/schemas/domino.projectManagement.api.DominoEntity"
          },
          "pmEntity": {
            "$ref": "#/components/schemas/domino.projectManagement.api.PmEntity"
          },
          "metadata": {
            "$ref": "#/components/schemas/domino.projectManagement.api.DominoGoalToPmSubTicketMetadata"
          },
          "isDeleted": {
            "type": "boolean"
          }
        },
        "required": [
          "dominoEntity",
          "pmEntity",
          "metadata",
          "isDeleted"
        ]
      },
      "domino.projects.api.ProjectOwnerInfo": {
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "canonicalName": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "canonicalName"
        ]
      },
      "domino.common.modelproduct.AppResourceUsageSnapshot": {
        "properties": {
          "timestamp": {
            "type": "integer",
            "format": "epoch"
          },
          "cpu": {
            "type": "number",
            "format": "double"
          },
          "memory": {
            "type": "number",
            "format": "double"
          }
        },
        "required": [
          "timestamp",
          "cpu",
          "memory"
        ]
      },
      "domino.gruz.api.StatusChange": {
        "properties": {
          "time": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "type": "string"
          }
        },
        "required": [
          "time",
          "status"
        ]
      },
      "domino.projectManagement.api.PmLinker": {
        "properties": {
          "userId": {
            "nullable": true,
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "credentials": {
            "$ref": "#/components/schemas/domino.projectManagement.api.PmCredentials"
          }
        },
        "required": [
          "credentials"
        ]
      },
      "domino.projects.api.ProjectDependenciesAndForks": {
        "properties": {
          "dependencies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.projects.api.ProjectInfo"
            }
          },
          "baseProject": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.projects.api.ProjectInfo"
          },
          "relatedForks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.projects.api.ProjectInfo"
            }
          },
          "canCreateReviewRequest": {
            "type": "boolean"
          },
          "canUpdateFork": {
            "type": "boolean"
          }
        },
        "required": [
          "dependencies",
          "relatedForks",
          "canCreateReviewRequest",
          "canUpdateFork"
        ]
      },
      "domino.scheduledjob.api.UpdatedScheduledJobDTO": {
        "properties": {
          "title": {
            "type": "string"
          },
          "command": {
            "type": "string"
          },
          "schedule": {
            "$ref": "#/components/schemas/domino.scheduledjob.api.EditCronScheduleDTO"
          },
          "timezoneId": {
            "type": "string"
          },
          "isPaused": {
            "type": "boolean"
          },
          "publishModelId": {
            "nullable": true,
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "allowConcurrentExecution": {
            "type": "boolean"
          },
          "hardwareTierIdentifier": {
            "type": "string"
          },
          "overrideEnvironmentId": {
            "nullable": true,
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "environmentRevisionSpec": {
            "oneOf": [
              {
                "type": "string",
                "enum": [
                  "ActiveRevision",
                  "LatestRevision",
                  "RestrictedRevision"
                ]
              },
              {
                "type": "object",
                "required": [
                  "revisionId"
                ],
                "properties": {
                  "revisionId": {
                    "type": "string"
                  }
                }
              }
            ]
          },
          "scheduledByUserId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "notifyOnCompleteEmailAddresses": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "datasetConfig": {
            "type": "string",
            "nullable": true
          },
          "computeClusterProperties": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.scheduledjob.api.ComputeClusterConfigSpecDto"
          },
          "volumeSpecificationOverride": {
            "nullable": true,
            "type": "object"
          },
          "externalVolumeMounts": {
            "type": "array",
            "nullable": true,
            "items": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            }
          },
          "mainRepoGitRef": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.projects.api.repositories.ReferenceDTO"
          },
          "snapshotDatasetsOnCompletion": {
            "type": "boolean",
            "nullable": true
          }
        },
        "required": [
          "title",
          "command",
          "schedule",
          "timezoneId",
          "isPaused",
          "allowConcurrentExecution",
          "hardwareTierIdentifier",
          "environmentRevisionSpec",
          "scheduledByUserId",
          "notifyOnCompleteEmailAddresses"
        ]
      },
      "domino.nucleus.dataset.ui.DatasetWorkspace": {
        "properties": {
          "workspaceId": {
            "type": "string"
          }
        },
        "required": [
          "workspaceId"
        ]
      },
      "domino.workspaces.api.CommentContent": {
        "properties": {
          "value": {
            "type": "string"
          }
        },
        "required": [
          "value"
        ]
      },
      "domino.projects.templates.api.models.AppDto": {
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "domino.projects.api.NewTagsDTO": {
        "properties": {
          "tagNames": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "tagNames"
        ]
      },
      "domino.common.gateway.search.SearchProjectTag": {
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "name": {
            "type": "string"
          },
          "isApproved": {
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "name",
          "isApproved"
        ]
      },
      "domino.workspace.api.WorkspaceAdminPageTableRow": {
        "properties": {
          "workspaceId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "name": {
            "type": "string"
          },
          "ownerUsername": {
            "type": "string"
          },
          "workspaceCreatedTime": {
            "type": "string",
            "format": "date-time"
          },
          "lastSessionStart": {
            "nullable": true,
            "type": "string",
            "format": "date-time"
          },
          "environmentRevisionId": {
            "nullable": true,
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "environmentRevisionNumber": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "environmentName": {
            "type": "string"
          },
          "pvSpace": {
            "$ref": "#/components/schemas/Information"
          },
          "projectName": {
            "type": "string"
          },
          "projectOwnerName": {
            "type": "string"
          },
          "workspaceState": {
            "type": "string",
            "enum": [
              "Started",
              "Stopped",
              "Initializing",
              "Stopping",
              "Created",
              "Deleted",
              "Starting"
            ]
          },
          "pvcName": {
            "type": "string"
          },
          "clusterInfo": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.workspace.api.WorkspaceAdminPageClusterInfo"
          },
          "diskUsage": {
            "nullable": true,
            "type": "object"
          },
          "dataPlaneName": {
            "$ref": "#/components/schemas/domino.dataplane.DataPlaneName"
          }
        },
        "required": [
          "workspaceId",
          "name",
          "ownerUsername",
          "workspaceCreatedTime",
          "environmentName",
          "pvSpace",
          "projectName",
          "projectOwnerName",
          "workspaceState",
          "pvcName",
          "dataPlaneName"
        ]
      },
      "domino.workspace.api.ref.ProjectRefDto": {
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "name": {
            "type": "string"
          },
          "owner": {
            "$ref": "#/components/schemas/domino.workspace.api.ref.UserRefDto"
          }
        },
        "required": [
          "id",
          "name",
          "owner"
        ]
      },
      "domino.datasetrw.web.AddTagRequest": {
        "properties": {
          "snapshotId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "tag": {
            "type": "string"
          }
        },
        "required": [
          "snapshotId",
          "tag"
        ]
      },
      "domino.jobs.web.RemoveTagFromJob": {
        "properties": {
          "projectId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "tagId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          }
        },
        "required": [
          "projectId",
          "tagId"
        ]
      },
      "domino.workspaces.api.ResultFileMetadata": {
        "properties": {
          "contentId": {
            "type": "string"
          },
          "filename": {
            "type": "string"
          },
          "size": {
            "type": "integer",
            "format": "int64"
          },
          "lastModified": {
            "type": "integer",
            "format": "epoch"
          },
          "author": {
            "type": "string"
          }
        },
        "required": [
          "contentId",
          "filename",
          "size",
          "lastModified",
          "author"
        ]
      },
      "domino.datasetrw.web.UpdateDatasetRequest": {
        "properties": {
          "datasetName": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "domino.projectManagement.web.UnlinkWorkspaceFromGoalRequest": {
        "properties": {
          "projectId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "goalId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          }
        },
        "required": [
          "projectId",
          "goalId"
        ]
      },
      "domino.admin.interface.AdminProjectsSettings": {
        "properties": {
          "sizeColumnEnabled": {
            "type": "boolean"
          }
        },
        "required": [
          "sizeColumnEnabled"
        ]
      },
      "domino.jobs.web.CreateTag": {
        "properties": {
          "tagName": {
            "type": "string"
          },
          "projectId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          }
        },
        "required": [
          "tagName",
          "projectId"
        ]
      },
      "domino.projectManagement.api.TicketToDominoMapper": {
        "properties": {
          "dominoEntity": {
            "$ref": "#/components/schemas/domino.projectManagement.api.DominoEntity"
          },
          "pmEntity": {
            "$ref": "#/components/schemas/domino.projectManagement.api.PmEntity"
          },
          "metadata": {
            "$ref": "#/components/schemas/domino.projectManagement.api.DominoProjectToPmTicketMetadata"
          },
          "isDeleted": {
            "type": "boolean"
          }
        },
        "required": [
          "dominoEntity",
          "pmEntity",
          "metadata",
          "isDeleted"
        ]
      },
      "domino.activity.api.ProjectGoalWorkspaceLinkActivityMetadata": {
        "properties": {
          "action": {
            "type": "string",
            "enum": [
              "added",
              "removed"
            ]
          },
          "workspaceNumber": {
            "type": "integer",
            "format": "int32"
          },
          "workspaceId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "projectGoalTitle": {
            "type": "string"
          }
        },
        "required": [
          "action",
          "workspaceNumber",
          "workspaceId",
          "projectGoalTitle"
        ]
      },
      "domino.nucleus.dataset.ui.CreateSnapshotWithRunInput": {
        "properties": {
          "datasetId": {
            "type": "string"
          },
          "command": {
            "type": "string"
          },
          "outputPath": {
            "type": "string"
          }
        },
        "required": [
          "datasetId",
          "command",
          "outputPath"
        ]
      },
      "domino.gruz.api.RunMemoryLimit": {
        "properties": {
          "memoryLimitMegabytes": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "memorySwapLimitMegabytes": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        }
      },
      "domino.common.models.EnvironmentVariable": {
        "properties": {
          "name": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "value"
        ]
      },
      "domino.datasetrw.api.DatasetRwSnapshotDto": {
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "datasetId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "author": {
            "nullable": true,
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "version": {
            "type": "integer",
            "format": "int32"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "creationTime": {
            "type": "integer",
            "format": "int64"
          },
          "lifecycleStatus": {
            "type": "string",
            "enum": [
              "Pending",
              "Deleted",
              "DeletionInProgress",
              "Copying",
              "Failed",
              "Active",
              "MarkedForDeletion"
            ]
          },
          "statusLastUpdatedBy": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "statusLastUpdatedTime": {
            "type": "integer",
            "format": "int64"
          },
          "storageSize": {
            "type": "integer",
            "format": "int64"
          },
          "isPartialSize": {
            "type": "boolean"
          },
          "lastUsedTime": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "isReadWrite": {
            "type": "boolean"
          },
          "datasetStorageId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "resourceId": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "datasetId",
          "version",
          "creationTime",
          "lifecycleStatus",
          "statusLastUpdatedBy",
          "statusLastUpdatedTime",
          "storageSize",
          "isPartialSize",
          "isReadWrite",
          "datasetStorageId",
          "resourceId"
        ]
      },
      "domino.modelmanager.api.responses.ModelExportsApiResponse": {
        "properties": {
          "currentItemCount": {
            "type": "integer",
            "format": "int32"
          },
          "itemsPerPage": {
            "type": "integer",
            "format": "int32"
          },
          "startIndex": {
            "type": "integer",
            "format": "int32"
          },
          "totalItems": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.modelmanager.api.ModelExport"
            }
          }
        },
        "required": [
          "currentItemCount",
          "itemsPerPage",
          "startIndex",
          "totalItems",
          "items"
        ]
      },
      "domino.common.gateway.search.SearchModelDTO": {
        "properties": {
          "environmentName": {
            "type": "string"
          },
          "environmentLink": {
            "type": "string"
          },
          "projects": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.common.gateway.search.SearchProjectDetails"
            }
          },
          "collaborators": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.common.gateway.search.CollaboratorDetails"
            }
          }
        },
        "required": [
          "environmentName",
          "environmentLink",
          "projects",
          "collaborators"
        ]
      },
      "domino.featurestore.api.FeatureDto": {
        "properties": {
          "name": {
            "type": "string"
          },
          "valueType": {
            "type": "string"
          },
          "tags": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "required": [
          "name",
          "valueType",
          "tags"
        ]
      },
      "domino.jobs.interface.Environment": {
        "properties": {
          "environmentId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "environmentRevisionId": {
            "nullable": true,
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "environmentName": {
            "type": "string"
          },
          "revisionNumber": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "environmentRevisionSpec": {
            "oneOf": [
              {
                "type": "string",
                "enum": [
                  "ActiveRevision",
                  "LatestRevision",
                  "RestrictedRevision"
                ]
              },
              {
                "type": "object",
                "required": [
                  "revisionId"
                ],
                "properties": {
                  "revisionId": {
                    "type": "string"
                  }
                }
              }
            ]
          }
        },
        "required": [
          "environmentId",
          "environmentName",
          "environmentRevisionSpec"
        ]
      },
      "domino.activity.api.AllModelReviewersApprovedMetadata": {
        "properties": {
          "modelVersion": {
            "type": "integer",
            "format": "int32"
          },
          "initialStage": {
            "type": "string"
          },
          "targetStage": {
            "type": "string"
          },
          "reviewId": {
            "type": "string"
          }
        },
        "required": [
          "modelVersion",
          "initialStage",
          "targetStage",
          "reviewId"
        ]
      },
      "domino.projects.api.ProjectStakeholder": {
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "name": {
            "type": "string"
          },
          "userName": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "userName"
        ]
      },
      "domino.projects.api.AssetPortfolioStats": {
        "properties": {
          "assetPortfolioStats": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.projects.api.ProjectAssetCount"
            }
          }
        },
        "required": [
          "assetPortfolioStats"
        ]
      },
      "domino.server.projectreleases.ProjectReleaseDto": {
        "properties": {
          "projectId": {
            "type": "string"
          },
          "runId": {
            "type": "string"
          },
          "createdAt": {
            "type": "integer",
            "format": "epoch"
          },
          "createdBy": {
            "type": "string"
          }
        },
        "required": [
          "projectId",
          "runId",
          "createdAt",
          "createdBy"
        ]
      },
      "domino.projects.api.SelectedV2EnvironmentDetailsDTO": {
        "properties": {
          "latestRevision": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "latestRevisionUrl": {
            "type": "string"
          },
          "latestRevisionStatus": {
            "type": "string",
            "nullable": true
          },
          "selectedRevision": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "selectedRevisionId": {
            "nullable": true,
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "selectedRevisionUrl": {
            "type": "string",
            "nullable": true
          },
          "restrictedRevisionNumber": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "restrictedRevisionId": {
            "nullable": true,
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          }
        },
        "required": [
          "latestRevisionUrl"
        ]
      },
      "domino.environments.api.VisibleEnvironments": {
        "properties": {
          "activeEnvironmentRevisions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.environments.api.EnvironmentRevisionSummary"
            }
          },
          "defaultEnv": {
            "$ref": "#/components/schemas/domino.environments.api.Environment"
          },
          "defaultEnvRev": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.environments.api.EnvironmentRevision"
          }
        },
        "required": [
          "activeEnvironmentRevisions",
          "defaultEnv"
        ]
      },
      "domino.datasetrw.api.DatasetRwSummaryDto": {
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "ownerUsername": {
            "type": "string",
            "nullable": true
          },
          "projects": {
            "$ref": "#/components/schemas/domino.datasetrw.api.DatasetRwProjectDetailsDto"
          },
          "lifecycleStatus": {
            "type": "string",
            "enum": [
              "Pending",
              "Deleted",
              "DeletionInProgress",
              "Failed",
              "Active",
              "MarkedForDeletion"
            ]
          },
          "sizeInBytes": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "ownerUsernames": {
            "type": "array",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "sizeStatus": {
            "type": "string",
            "nullable": true,
            "enum": [
              "Active",
              "Pending"
            ]
          },
          "storageName": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "id",
          "name",
          "projects",
          "lifecycleStatus"
        ]
      },
      "domino.projects.templates.api.models.TemplateDefinitionDto": {
        "properties": {
          "backingProject": {
            "$ref": "#/components/schemas/domino.projects.templates.api.models.BackingProjectDto"
          },
          "projectType": {
            "type": "string",
            "enum": [
              "git_based",
              "dfs"
            ]
          },
          "mainRepository": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.projects.templates.api.models.GitRepositoryDto"
          },
          "importedRepos": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.projects.templates.api.models.GitRepositoryDto"
            }
          },
          "goals": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.projects.templates.api.models.ProjectGoalDto"
            }
          },
          "settings": {
            "$ref": "#/components/schemas/domino.projects.templates.api.models.SettingsDto"
          },
          "datasets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.projects.templates.api.models.DatasetDto"
            }
          },
          "datasources": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.projects.templates.api.models.DatasourceDto"
            }
          },
          "externalDataVolumes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.projects.templates.api.models.ExternalDataVolumeDto"
            }
          },
          "apps": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.projects.templates.api.models.AppDto"
            }
          },
          "launchers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.projects.templates.api.models.LauncherDto"
            }
          }
        },
        "required": [
          "backingProject",
          "projectType",
          "importedRepos",
          "goals",
          "settings",
          "datasets",
          "datasources",
          "externalDataVolumes",
          "apps",
          "launchers"
        ]
      },
      "domino.modelmanager.api.ModelsForUIApiResponse": {
        "properties": {
          "currentItemCount": {
            "type": "integer",
            "format": "int32"
          },
          "startIndex": {
            "type": "integer",
            "format": "int32"
          },
          "itemsPerPage": {
            "type": "integer",
            "format": "int32"
          },
          "totalItems": {
            "type": "integer",
            "format": "int32"
          },
          "models": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.modelmanager.api.Model"
            }
          },
          "modelAccess": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        },
        "required": [
          "currentItemCount",
          "startIndex",
          "itemsPerPage",
          "totalItems",
          "models",
          "modelAccess"
        ]
      },
      "domino.datasetrw.api.DatasetStorageVolumeInfoDto": {
        "properties": {
          "pvcName": {
            "type": "string"
          },
          "dataPlaneId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "dataPlaneName": {
            "type": "string"
          },
          "volumeType": {
            "type": "string"
          }
        },
        "required": [
          "pvcName",
          "dataPlaneId",
          "dataPlaneName",
          "volumeType"
        ]
      },
      "domino.files.interface.CommitSourceInfo": {
        "properties": {
          "sourceProjectId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "sourceId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "sourceNumber": {
            "type": "integer",
            "format": "int32"
          },
          "sourceType": {
            "type": "string",
            "enum": [
              "job",
              "workspace",
              "user"
            ]
          }
        },
        "required": [
          "sourceProjectId",
          "sourceId",
          "sourceNumber",
          "sourceType"
        ]
      },
      "domino.nucleus.lib.auth.MixpanelSettings": {
        "properties": {
          "frontendClientEnabled": {
            "type": "boolean"
          },
          "backendClientEnabled": {
            "type": "boolean"
          },
          "token": {
            "type": "string"
          }
        },
        "required": [
          "frontendClientEnabled",
          "backendClientEnabled",
          "token"
        ]
      },
      "domino.activity.api.CommentedOnDeliverableMetaData": {
        "properties": {
          "deliverableId": {
            "type": "string"
          },
          "artifactId": {
            "type": "string",
            "nullable": true
          },
          "approvalId": {
            "type": "string",
            "nullable": true
          },
          "threadStatus": {
            "type": "string",
            "enum": [
              "Open",
              "Resolved"
            ]
          }
        },
        "required": [
          "deliverableId",
          "threadStatus"
        ]
      },
      "domino.files.interface.CommitInfo": {
        "properties": {
          "commitId": {
            "type": "string"
          },
          "commitShortMessage": {
            "type": "string"
          },
          "commitFullMessage": {
            "type": "string"
          },
          "commitTime": {
            "type": "integer",
            "format": "int32"
          },
          "committedBy": {
            "type": "string"
          },
          "commitSourceInfo": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.files.interface.CommitSourceInfo"
          },
          "isLatestCommit": {
            "type": "boolean"
          }
        },
        "required": [
          "commitId",
          "commitShortMessage",
          "commitFullMessage",
          "commitTime",
          "committedBy",
          "isLatestCommit"
        ]
      },
      "domino.files.interface.CommitSummaryForFilepath": {
        "properties": {
          "requestedOrNewestCommit": {
            "$ref": "#/components/schemas/domino.files.interface.CommitInfo"
          },
          "lastCommitOfFile": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.files.interface.CommitInfo"
          },
          "allCommitsForPath": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.files.interface.CommitInfo"
            }
          }
        },
        "required": [
          "requestedOrNewestCommit",
          "allCommitsForPath"
        ]
      },
      "domino.projects.api.AssetVersionHistoryElement": {
        "properties": {
          "timestamp": {
            "type": "integer",
            "format": "epoch"
          },
          "duration": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "stakeholder": {
            "$ref": "#/components/schemas/domino.projects.api.ProjectStakeholder"
          },
          "projectId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "projectName": {
            "type": "string"
          },
          "assetVersion": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.projects.api.AssetVersionInfo"
          }
        },
        "required": [
          "timestamp",
          "stakeholder",
          "projectId",
          "projectName"
        ]
      },
      "domino.workspace.api.WorkspaceSessionEndDto": {
        "properties": {
          "time": {
            "type": "integer",
            "format": "int64"
          },
          "exitStatus": {
            "type": "string",
            "enum": [
              "Stopped",
              "Succeeded",
              "Failed",
              "Error"
            ]
          },
          "repoDirty": {
            "type": "boolean"
          }
        },
        "required": [
          "time",
          "exitStatus",
          "repoDirty"
        ]
      },
      "domino.nucleus.modelproduct.models.UsageStatisticsTopNResponse": {
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.nucleus.modelproduct.models.UsageStatisticsCount"
            }
          }
        },
        "required": [
          "data"
        ]
      },
      "domino.jobs.interface.DependentRepository": {
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "name": {
            "type": "string"
          },
          "uri": {
            "type": "string"
          },
          "ref": {
            "type": "string"
          },
          "serviceProvider": {
            "type": "string"
          },
          "startingCommitId": {
            "nullable": true,
            "type": "string"
          },
          "startingCommitUri": {
            "type": "string",
            "nullable": true
          },
          "finishedCommitId": {
            "nullable": true,
            "type": "string"
          },
          "finishedCommitUri": {
            "type": "string",
            "nullable": true
          },
          "startingBranch": {
            "type": "string",
            "nullable": true
          },
          "finishedBranch": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "id",
          "name",
          "uri",
          "ref",
          "serviceProvider"
        ]
      },
      "domino.projectManagement.api.PmTicketMetadata": {
        "properties": {
          "ticketLink": {
            "type": "string"
          },
          "ticketKey": {
            "type": "string"
          },
          "projectId": {
            "$ref": "#/components/schemas/domino.projectManagement.api.PmId"
          }
        },
        "required": [
          "ticketLink",
          "ticketKey",
          "projectId"
        ]
      },
      "domino.common.gateway.search.FeatureHighlight": {
        "properties": {
          "featureName": {
            "type": "string"
          },
          "highlightedFeatureName": {
            "type": "string"
          }
        },
        "required": [
          "featureName",
          "highlightedFeatureName"
        ]
      },
      "domino.projects.api.ProjectSparkConfig": {
        "properties": {
          "sparkMode": {
            "type": "string"
          },
          "sparkLegacyProxiable": {
            "type": "boolean",
            "nullable": true
          },
          "masterHost": {
            "type": "string",
            "nullable": true
          },
          "masterPort": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "freeFormConfig": {
            "type": "string",
            "nullable": true
          },
          "yarnFreeFormConfig": {
            "type": "string",
            "nullable": true
          },
          "onDemandFreeFormConfig": {
            "type": "string",
            "nullable": true
          },
          "hostnameMappings": {
            "type": "string",
            "nullable": true
          },
          "hadoopUserName": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "sparkMode"
        ]
      },
      "domino.projects.templates.api.models.LauncherDto": {
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "domino.projects.api.repositories.responses.CreateBranchApiResponse": {
        "properties": {
          "name": {
            "type": "string"
          }
        },
        "required": [
          "name"
        ]
      },
      "domino.projects.templates.api.models.ValueOptionalLink": {
        "properties": {
          "value": {
            "type": "string"
          },
          "link": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "value"
        ]
      },
      "domino.workspaces.api.WorkspaceSummary": {
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "projectId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "title": {
            "type": "string"
          },
          "stageTime": {
            "$ref": "#/components/schemas/domino.workspaces.api.StageTime"
          },
          "startedBy": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.workspaces.api.WorkspaceStartedBy"
          },
          "number": {
            "type": "integer",
            "format": "int32"
          },
          "isCompleted": {
            "type": "boolean"
          },
          "isArchived": {
            "type": "boolean"
          },
          "commentsCount": {
            "type": "integer",
            "format": "int32"
          },
          "status": {
            "type": "string"
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.workspaces.api.WorkspaceTag"
            }
          },
          "dominoStats": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.workspaces.api.DominoStats"
            }
          },
          "goalIds": {
            "type": "array",
            "items": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            }
          },
          "usage": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.workspaces.api.WorkspaceResourceUsage"
          },
          "isRestartable": {
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "projectId",
          "title",
          "stageTime",
          "number",
          "isCompleted",
          "isArchived",
          "commentsCount",
          "status",
          "tags",
          "dominoStats",
          "goalIds",
          "isRestartable"
        ]
      },
      "domino.projects.api.ProjectPortfolioSet": {
        "properties": {
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "projectPortfolios": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.projects.api.ProjectPortfolioElement"
            }
          },
          "paginationFilter": {
            "$ref": "#/components/schemas/domino.projects.api.ProjectPortfolioPaginationFilter"
          }
        },
        "required": [
          "totalCount",
          "projectPortfolios",
          "paginationFilter"
        ]
      },
      "domino.files.web.FileOrFolderToRemove": {
        "properties": {
          "pathToRemove": {
            "type": "string"
          },
          "ownerUsername": {
            "type": "string"
          },
          "projectName": {
            "type": "string"
          }
        },
        "required": [
          "pathToRemove",
          "ownerUsername",
          "projectName"
        ]
      },
      "domino.projects.api.EnvironmentDetails": {
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "archived": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "visibility": {
            "type": "string",
            "enum": [
              "Global",
              "Private",
              "Organization"
            ]
          },
          "owner": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.projects.api.EnvironmentOwner"
          },
          "supportedClusters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ComputeClusterType"
            }
          },
          "latestRevision": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.projects.api.RevisionOverview"
          },
          "selectedRevision": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.projects.api.RevisionOverview"
          },
          "restrictedRevision": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.projects.api.RevisionOverview"
          },
          "isCurated": {
            "type": "boolean",
            "nullable": true
          },
          "templateMetadata": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.environments.api.EnvironmentTemplateMetadata"
          }
        },
        "required": [
          "id",
          "archived",
          "name",
          "visibility",
          "supportedClusters"
        ]
      },
      "domino.projects.api.repositories.responses.GetCommitsApiResponse": {
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.projects.api.repositories.responses.browse.CommitShortDTO"
            }
          }
        },
        "required": [
          "items"
        ]
      },
      "domino.datasource.model.Field": {
        "type": "object",
        "properties": {
          "alias": {
            "type": "string"
          },
          "initialValue": {
            "type": "string"
          },
          "isOptional": {
            "type": "boolean"
          },
          "isOverridable": {
            "type": "boolean"
          },
          "isSecret": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "placeholder": {
            "type": "string"
          },
          "regexp": {
            "type": "string"
          },
          "regexpErrorMessage": {
            "type": "string"
          }
        },
        "required": [
          "isOptional",
          "isOverridable",
          "name"
        ]
      },
      "domino.jobs.interface.LogSet": {
        "properties": {
          "logContent": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.jobs.interface.LogContent"
            }
          },
          "isComplete": {
            "type": "boolean"
          },
          "pagination": {
            "$ref": "#/components/schemas/domino.jobs.interface.PaginationFilter"
          }
        },
        "required": [
          "logContent",
          "isComplete",
          "pagination"
        ]
      },
      "domino.projects.api.AssetVersionInfo": {
        "properties": {
          "assetVersionId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "assetName": {
            "type": "string"
          },
          "assetVersion": {
            "type": "string"
          }
        },
        "required": [
          "assetVersionId",
          "assetName",
          "assetVersion"
        ]
      },
      "domino.executor.api.RepositoryBranchList": {
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.executor.api.BranchEntryDto"
            }
          }
        },
        "required": [
          "items"
        ]
      },
      "domino.common.gateway.search.SearchDatasetDTO": {
        "properties": {
          "description": {
            "type": "string"
          },
          "authorName": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "created": {
            "type": "string"
          },
          "project": {
            "$ref": "#/components/schemas/domino.common.gateway.search.SearchProjectDetails"
          },
          "tagNames": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "description",
          "authorName",
          "status",
          "created",
          "project",
          "tagNames"
        ]
      },
      "domino.projectManagement.api.PmUser": {
        "properties": {
          "id": {
            "$ref": "#/components/schemas/domino.projectManagement.api.PmId"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "domino.server.controlcenter.MoneyDTO": {
        "properties": {
          "amount": {
            "type": "number",
            "format": "double"
          },
          "currencyCode": {
            "type": "string"
          }
        },
        "required": [
          "amount",
          "currencyCode"
        ]
      },
      "domino.workspace.api.git.CommitReposResponseDto": {
        "properties": {
          "succeeded": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          }
        },
        "required": [
          "succeeded",
          "message"
        ]
      },
      "domino.common.util.yaml.DefaultYamlString": {
        "properties": {
          "raw": {
            "type": "string"
          }
        },
        "required": [
          "raw"
        ]
      },
      "domino.common.modelproduct.ExecutorDetails": {
        "properties": {
          "executorInstanceId": {
            "type": "string"
          },
          "region": {
            "type": "string"
          },
          "humanName": {
            "type": "string",
            "nullable": true
          },
          "publicAddress": {
            "type": "string",
            "nullable": true
          },
          "privateAddress": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "executorInstanceId",
          "region"
        ]
      },
      "domino.projectManagement.web.BulkDeleteProjectGoals": {
        "properties": {
          "goalIds": {
            "type": "array",
            "items": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            }
          }
        },
        "required": [
          "goalIds"
        ]
      },
      "domino.admin.interface.OnDemandSparkClusterOverview": {
        "properties": {
          "name": {
            "type": "string"
          },
          "workerStorageMB": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "masterHardwareTier": {
            "$ref": "#/components/schemas/domino.admin.interface.HardwareTierOverview"
          },
          "workerHardwareTier": {
            "$ref": "#/components/schemas/domino.admin.interface.HardwareTierOverview"
          },
          "webUiPath": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "masterHardwareTier",
          "workerHardwareTier",
          "webUiPath"
        ]
      },
      "domino.projects.templates.api.models.TemplateAccessDto": {
        "properties": {
          "visibility": {
            "type": "string",
            "enum": [
              "private",
              "all_non_anonymous_users"
            ]
          },
          "collaborators": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.projects.templates.api.models.TemplateCollaboratorDto"
            }
          }
        },
        "required": [
          "visibility",
          "collaborators"
        ]
      },
      "domino.server.projects.api.ProjectGatewayTag": {
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "name": {
            "type": "string"
          },
          "isApproved": {
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "name",
          "isApproved"
        ]
      },
      "domino.datasource.model.DatasourceConfig": {
        "type": "object",
        "properties": {
          "authTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.datasource.model.AuthType"
            }
          },
          "engineType": {
            "$ref": "#/components/schemas/domino.datasource.model.EngineType"
          },
          "connectorGroup": {
            "$ref": "#/components/schemas/domino.datasource.model.ConnectorGroup"
          },
          "connectorType": {
            "$ref": "#/components/schemas/domino.datasource.model.ConnectorType"
          },
          "fields": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/domino.datasource.model.Field"
            }
          },
          "storageType": {
            "$ref": "#/components/schemas/domino.datasource.model.StorageType"
          },
          "datasourceType": {
            "$ref": "#/components/schemas/domino.datasource.model.DatasourceType"
          }
        },
        "required": [
          "authTypes",
          "datasourceType",
          "fields",
          "type"
        ]
      },
      "domino.projects.web.AddBlockedAtComment": {
        "properties": {
          "comment": {
            "type": "string"
          },
          "blockedAt": {
            "type": "integer",
            "format": "epoch"
          }
        },
        "required": [
          "comment",
          "blockedAt"
        ]
      },
      "domino.workspace.api.WorkspacePageCollectionDto": {
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.workspace.api.WorkspaceDto"
            }
          },
          "paginationDetails": {
            "$ref": "#/components/schemas/domino.apiserverutils.pagination.PaginationFilter"
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          }
        },
        "required": [
          "items",
          "paginationDetails",
          "totalCount"
        ]
      },
      "domino.jobs.interface.CodeInfoDto": {
        "properties": {
          "mainRepo": {
            "$ref": "#/components/schemas/domino.jobs.interface.CodeInfoRepositoryDto"
          },
          "importedGitRepos": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.jobs.interface.CodeInfoRepositoryDto"
            }
          }
        },
        "required": [
          "mainRepo",
          "importedGitRepos"
        ]
      },
      "domino.workspace.api.WorkspaceReproductionDetailsDto": {
        "properties": {
          "dfsCommit": {
            "type": "string"
          },
          "gitRepoCommits": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/domino.workspace.api.WorkspaceInitialGitCommitDto"
            }
          },
          "suggestedBranchName": {
            "type": "string"
          },
          "workspaceReproductionType": {
            "type": "string",
            "enum": [
              "FromWorkspace",
              "FromModel",
              "FromModelCommits"
            ]
          }
        },
        "required": [
          "dfsCommit",
          "suggestedBranchName",
          "workspaceReproductionType"
        ]
      },
      "domino.launcherjob.api.LauncherJobUploadedFile": {
        "properties": {
          "parameterName": {
            "type": "string"
          },
          "fileName": {
            "type": "string"
          },
          "tempFileBase64Encoding": {
            "type": "string"
          }
        },
        "required": [
          "parameterName",
          "fileName",
          "tempFileBase64Encoding"
        ]
      },
      "domino.projects.api.UpdateProjectAnonymousRunExecutionSettings": {
        "properties": {
          "allowPublicRunExecution": {
            "type": "boolean"
          }
        },
        "required": [
          "allowPublicRunExecution"
        ]
      },
      "domino.projects.api.ProjectResultsBranchSettingChoices": {
        "properties": {
          "branch": {
            "type": "string",
            "enum": [
              "Isolated",
              "Main"
            ]
          }
        },
        "required": [
          "branch"
        ]
      },
      "domino.activity.api.CommentedOnMetaData": {
        "properties": {}
      },
      "domino.projectManagement.api.PmTicketStage": {
        "properties": {
          "id": {
            "$ref": "#/components/schemas/domino.projectManagement.api.PmId"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "domino.nucleus.modelproduct.models.IsRunnable": {
        "properties": {
          "isRunnable": {
            "type": "boolean"
          }
        },
        "required": [
          "isRunnable"
        ]
      },
      "domino.activity.api.ScheduleJobEditActivityMetaData": {
        "properties": {
          "action": {
            "type": "string",
            "enum": [
              "scheduled",
              "paused",
              "edited",
              "unpaused",
              "unscheduled"
            ]
          },
          "fromTitle": {
            "type": "string",
            "nullable": true
          },
          "fromCommandToRun": {
            "type": "string"
          },
          "fromCronSchedule": {
            "type": "string"
          },
          "toTitle": {
            "type": "string",
            "nullable": true
          },
          "toCommandToRun": {
            "type": "string"
          },
          "toCronSchedule": {
            "type": "string"
          }
        },
        "required": [
          "action",
          "fromCommandToRun",
          "fromCronSchedule",
          "toCommandToRun",
          "toCronSchedule"
        ]
      },
      "domino.admin.interface.AdminSettings": {
        "properties": {
          "projects": {
            "$ref": "#/components/schemas/domino.admin.interface.AdminProjectsSettings"
          }
        },
        "required": [
          "projects"
        ]
      },
      "domino.jobs.interface.AbnormalStatus": {
        "properties": {
          "runFailureReason": {
            "type": "string"
          },
          "runFailureMessage": {
            "type": "string"
          }
        },
        "required": [
          "runFailureReason",
          "runFailureMessage"
        ]
      },
      "domino.common.user.TrialStatusDTO": {
        "properties": {
          "trialStatus": {
            "type": "string",
            "enum": [
              "Initial",
              "Extended",
              "Expired"
            ]
          }
        },
        "required": [
          "trialStatus"
        ]
      },
      "domino.projects.api.repositories.CredentialMappingDTO": {
        "properties": {
          "userId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "projectId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "repoId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "credentialId": {
            "nullable": true,
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          }
        },
        "required": [
          "userId",
          "projectId",
          "repoId"
        ]
      },
      "domino.workspaces.api.WorkspaceDefinitionDto": {
        "properties": {
          "id": {
            "type": "string"
          },
          "iconUrl": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string"
          },
          "title": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "title"
        ]
      },
      "domino.datamount.web.CreateDataMountRequest": {
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "volumeType": {
            "type": "string",
            "enum": [
              "Nfs",
              "Smb",
              "Efs",
              "Generic"
            ]
          },
          "pvcName": {
            "type": "string"
          },
          "pvId": {
            "type": "string",
            "nullable": true
          },
          "mountPath": {
            "type": "string"
          },
          "users": {
            "type": "array",
            "items": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            }
          },
          "readOnly": {
            "type": "boolean"
          },
          "isPublic": {
            "type": "boolean"
          },
          "dataPlaneIds": {
            "type": "array",
            "items": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            }
          }
        },
        "required": [
          "name",
          "volumeType",
          "pvcName",
          "mountPath",
          "users",
          "readOnly",
          "isPublic",
          "dataPlaneIds"
        ]
      },
      "domino.projects.api.AssetPortfolioElement": {
        "properties": {
          "assetId": {
            "type": "string"
          },
          "assetName": {
            "type": "string"
          },
          "assetType": {
            "type": "string",
            "enum": [
              "App",
              "ModelAPI",
              "Launcher",
              "Schedules"
            ]
          },
          "projectId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "projectName": {
            "type": "string"
          },
          "projectOwner": {
            "$ref": "#/components/schemas/domino.projects.api.ProjectStakeholder"
          },
          "lastUpdatedAt": {
            "type": "integer",
            "format": "epoch",
            "nullable": true
          },
          "owner": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.projects.api.ProjectStakeholder"
          },
          "versionHistory": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/domino.projects.api.AssetVersionHistoryElement"
            }
          },
          "status": {
            "type": "string",
            "nullable": true
          },
          "usage": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/domino.projects.api.AssetUsageValues"
            }
          },
          "metadata": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.projects.api.AssetViewStats"
          }
        },
        "required": [
          "assetId",
          "assetName",
          "assetType",
          "projectId",
          "projectName",
          "projectOwner"
        ]
      },
      "domino.notifications.CreateNotificationRequest": {
        "type": "object",
        "required": [
          "title",
          "priority"
        ],
        "description": "Request to create a new notification. If any of (targetUsers, targetRoles, targetOrgs) contain a valid entry, then the notification will be visible to users for which at least one of these conditions apply. Otherwise, it will be visible to all users.",
        "properties": {
          "title": {
            "type": "string",
            "description": "the notification title"
          },
          "message": {
            "type": "string",
            "description": "the notification body"
          },
          "priority": {
            "$ref": "#/components/schemas/domino.notifications.Priority"
          },
          "start": {
            "type": "string",
            "format": "date-time",
            "description": "optional start date/time (defaults to now)",
            "example": "2022-12-03T10:15:30Z"
          },
          "end": {
            "type": "string",
            "format": "date-time",
            "description": "optional end date/time",
            "example": "2022-12-03T10:15:30Z"
          },
          "targetUsers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "DominoIds of users who will receive this notification."
          },
          "targetOrgs": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "DominoIds of orgs whose users will receive this notification."
          },
          "targetRoles": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Ids of Roles. Users that have any of these Roles will receive this notification."
          }
        }
      },
      "domino.hardwaretier.api.HardwareTierOverprovisioningDto": {
        "properties": {
          "instances": {
            "type": "integer",
            "format": "int32"
          },
          "schedulingEnabled": {
            "type": "boolean"
          },
          "daysOfWeek": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "MONDAY",
                "TUESDAY",
                "WEDNESDAY",
                "THURSDAY",
                "FRIDAY",
                "SATURDAY",
                "SUNDAY"
              ]
            }
          },
          "timezone": {
            "type": "string"
          },
          "fromTime": {
            "type": "string"
          },
          "toTime": {
            "type": "string"
          }
        },
        "required": [
          "instances",
          "schedulingEnabled",
          "daysOfWeek",
          "timezone",
          "fromTime",
          "toTime"
        ]
      },
      "domino.computegrid.MonitoredExecutionResourceList": {
        "properties": {
          "resourcePluralName": {
            "type": "string"
          },
          "resourceSingularName": {
            "type": "string"
          },
          "resources": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.computegrid.MonitoredExecutionResource"
            }
          },
          "combinedResourceStatus": {
            "type": "string",
            "enum": [
              "READY",
              "IN_PROGRESS",
              "WARNING",
              "UNKNOWN"
            ]
          }
        },
        "required": [
          "resourcePluralName",
          "resourceSingularName",
          "resources",
          "combinedResourceStatus"
        ]
      },
      "domino.dataplane.DataPlaneDto": {
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "namespace": {
            "type": "string"
          },
          "isLocal": {
            "type": "boolean"
          },
          "configuration": {
            "$ref": "#/components/schemas/domino.dataplane.DataPlaneConfiguration"
          },
          "status": {
            "$ref": "#/components/schemas/domino.dataplane.DataPlaneStatus"
          },
          "isHealthy": {
            "type": "boolean"
          },
          "isArchived": {
            "type": "boolean"
          },
          "isFileSyncDisabled": {
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "name",
          "namespace",
          "isLocal",
          "configuration",
          "status",
          "isHealthy",
          "isArchived",
          "isFileSyncDisabled"
        ]
      },
      "domino.server.projects.api.ProjectGatewayExecutingRunsByType": {
        "properties": {
          "runType": {
            "type": "string",
            "enum": [
              "Endpoint",
              "App",
              "Scheduled",
              "Launcher",
              "Batch",
              "Workspace",
              "Other",
              "SSHProxy"
            ]
          },
          "count": {
            "type": "integer",
            "format": "int32"
          }
        },
        "required": [
          "runType",
          "count"
        ]
      },
      "domino.modelmanager.api.ModelBuild": {
        "properties": {
          "modelId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "environmentId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "projectId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "projectName": {
            "type": "string"
          },
          "buildStatus": {
            "type": "string",
            "enum": [
              "preparing",
              "building",
              "complete",
              "failed"
            ]
          },
          "modelVersionId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "modelVersionNumber": {
            "type": "integer",
            "format": "int32"
          }
        },
        "required": [
          "modelId",
          "name",
          "environmentId",
          "projectId",
          "projectName",
          "buildStatus",
          "modelVersionId",
          "modelVersionNumber"
        ]
      },
      "domino.projects.api.model.goals.ProjectGoalCollectionDto": {
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.projects.api.ProjectGoal"
            }
          },
          "paginationDetails": {
            "$ref": "#/components/schemas/domino.apiserverutils.pagination.PaginationFilter"
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          }
        },
        "required": [
          "items",
          "paginationDetails",
          "totalCount"
        ]
      },
      "domino.projects.api.repositories.responses.GitApiResponseWrapper[domino.projects.api.repositories.responses.GetRepoFilesApiResponse]": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/domino.projects.api.repositories.responses.GetRepoFilesApiResponse"
          }
        },
        "required": [
          "data"
        ]
      },
      "domino.workspace.api.WorkspaceAdminPageDataDto": {
        "properties": {
          "offset": {
            "type": "integer",
            "format": "int32"
          },
          "limit": {
            "type": "integer",
            "format": "int32"
          },
          "totalEntries": {
            "type": "integer",
            "format": "int32"
          },
          "tableRows": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.workspace.api.WorkspaceAdminPageTableRow"
            }
          }
        },
        "required": [
          "offset",
          "limit",
          "totalEntries",
          "tableRows"
        ]
      },
      "domino.files.interface.FileMatchesDto": {
        "properties": {
          "projectId": {
            "type": "string"
          },
          "commitId": {
            "type": "string"
          },
          "files": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "projectId",
          "commitId",
          "files"
        ]
      },
      "domino.workspace.api.WorkspaceSessionDto": {
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "executionId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "config": {
            "$ref": "#/components/schemas/domino.workspace.api.WorkspaceConfigDto"
          },
          "datasetMounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.workspace.api.WorkspaceDatasetMountDto"
            }
          },
          "externalVolumeMounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.workspace.api.DataMountSpecificationDto"
            }
          },
          "queuedWorkspaceHistoryDetails": {
            "$ref": "#/components/schemas/domino.workspace.api.QueuedWorkspaceHistoryDetails"
          },
          "start": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.workspace.api.WorkspaceSessionStartDto"
          },
          "end": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.workspace.api.WorkspaceSessionEndDto"
          },
          "sessionStatusInfo": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.workspace.api.WorkspaceSessionStatusInfo"
          },
          "diskUsage": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.workspace.api.WorkspaceDiskUsageDto"
          }
        },
        "required": [
          "id",
          "executionId",
          "config",
          "datasetMounts",
          "externalVolumeMounts",
          "queuedWorkspaceHistoryDetails"
        ]
      },
      "domino.featurestore.api.FeatureViewProjectInfoDto": {
        "properties": {
          "projectId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "projectName": {
            "type": "string",
            "nullable": true
          },
          "ownerUsername": {
            "type": "string",
            "nullable": true
          },
          "isOriginProject": {
            "type": "boolean"
          }
        },
        "required": [
          "projectId",
          "isOriginProject"
        ]
      },
      "domino.hardwaretier.api.HardwareTierEnvelope": {
        "properties": {
          "hardwareTiers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.hardwaretier.api.HardwareTierDto"
            }
          },
          "isDataAnalystEnabled": {
            "type": "boolean"
          }
        },
        "required": [
          "hardwareTiers",
          "isDataAnalystEnabled"
        ]
      },
      "domino.projects.templates.api.models.ProjectTemplateGoalsDto": {
        "properties": {
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "title"
        ]
      },
      "domino.projectManagement.web.FilterProjectGoals": {
        "properties": {
          "stageIds": {
            "type": "array",
            "nullable": true,
            "items": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            }
          },
          "assigneeIds": {
            "type": "array",
            "nullable": true,
            "items": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            }
          }
        }
      },
      "domino.aigateway.interface.ProviderModelsMap": {
        "type": "object",
        "properties": {
          "modelsMap": {
            "additionalProperties": {
              "$ref": "#/components/schemas/InnerMap"
            },
            "type": "object"
          }
        },
        "required": [
          "modelsMap"
        ]
      },
      "domino.projectManagement.web.SetAssigneeForLinkedGoalRequest": {
        "properties": {
          "goalId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "jiraUserData": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.projectManagement.web.AssigneeForLinkedGoal"
          }
        },
        "required": [
          "goalId"
        ]
      },
      "domino.datasource.model.ConnectorType": {
        "type": "string",
        "enum": [
          "clickhouse",
          "db2",
          "druid",
          "genericJdbc",
          "greenplum",
          "ignite",
          "mariadb",
          "netezza",
          "sapHana",
          "singlestore",
          "synapse",
          "vertica"
        ]
      },
      "domino.workspaces.web.StopEndWorkspaceDetails": {
        "properties": {
          "workspaceId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          }
        },
        "required": [
          "workspaceId"
        ]
      },
      "domino.files.web.FullDeleteSpecification": {
        "properties": {
          "filePath": {
            "type": "string"
          },
          "projectId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "commitId": {
            "type": "string"
          },
          "deleteReason": {
            "type": "string"
          }
        },
        "required": [
          "filePath",
          "projectId",
          "commitId",
          "deleteReason"
        ]
      },
      "domino.common.modelproduct.AppResourceUsage": {
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.common.modelproduct.AppResourceUsageSnapshot"
            }
          }
        },
        "required": [
          "data"
        ]
      },
      "domino.provenance.api.ProvenanceGitRepoDto": {
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "name": {
            "type": "string"
          },
          "commitId": {
            "type": "string"
          },
          "branchName": {
            "type": "string"
          },
          "isMainRepo": {
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "name",
          "commitId",
          "branchName",
          "isMainRepo"
        ]
      },
      "domino.organizations.api.OrganizationMemberDTO": {
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "role": {
            "type": "string",
            "enum": [
              "Member",
              "Admin"
            ]
          }
        },
        "required": [
          "id",
          "role"
        ]
      },
      "domino.admin.usermanagement.api.AdminUserManagementUserWithUsage": {
        "properties": {
          "user": {
            "$ref": "#/components/schemas/domino.admin.usermanagement.api.AdminUserManagementUser"
          },
          "usage": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.admin.usermanagement.api.BriefUserUsageReport"
          }
        },
        "required": [
          "user"
        ]
      },
      "domino.jobs.web.UpdateJobName": {
        "properties": {
          "name": {
            "type": "string"
          }
        },
        "required": [
          "name"
        ]
      },
      "domino.credential.api.FullCredentialDto": {
        "type": "object",
        "properties": {
          "secretCredentials": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          },
          "credentialType": {
            "type": "string",
            "enum": [
              "Individual",
              "Shared"
            ]
          },
          "authType": {
            "type": "string",
            "enum": [
              "AzureBasic",
              "Basic",
              "GCPBasic",
              "AWSIAMBasic",
              "AWSIAMBasicNoOverride",
              "AWSIAMRole",
              "AWSIAMRoleWithUsername",
              "OAuth",
              "PersonalToken",
              "UserOnly",
              "BasicOptional",
              "NoAuth",
              "ClientIdSecret",
              "OAuthToken",
              "APIKey"
            ]
          },
          "visibleCredentials": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          }
        },
        "required": [
          "authType",
          "visibleCredentials",
          "secretCredentials",
          "credentialType"
        ]
      },
      "domino.projectManagement.web.LinkJobToGoalRequest": {
        "properties": {
          "goalId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          }
        },
        "required": [
          "goalId"
        ]
      },
      "domino.projects.api.repositories.responses.GetRepoFilesApiResponse": {
        "properties": {
          "files": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "files"
        ]
      },
      "domino.guardrails.web.UpdateThreadStatusRequest": {
        "type": "object",
        "required": [
          "threadStatus"
        ],
        "properties": {
          "threadStatus": {
            "type": "string",
            "enum": [
              "Open",
              "Resolved"
            ]
          }
        }
      },
      "domino.common.run.interfaces.RunMonolithDTO": {
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "title": {
            "type": "string"
          },
          "command": {
            "type": "string"
          },
          "startTime": {
            "type": "string"
          },
          "nextFireTime": {
            "type": "string"
          },
          "projectId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "projectIdentity": {
            "type": "string"
          },
          "runType": {
            "type": "string"
          },
          "hardwareTierName": {
            "type": "string"
          },
          "runDurationInSeconds": {
            "type": "number",
            "format": "double"
          },
          "estimatedCost": {
            "type": "number",
            "format": "double"
          },
          "status": {
            "type": "string",
            "enum": [
              "Pending",
              "Stopping",
              "Stopped",
              "Scheduled",
              "Pulling",
              "Succeeded",
              "StopAndDiscardRequested",
              "Building",
              "Error",
              "Finishing",
              "Queued",
              "StopRequested",
              "Preparing",
              "Running",
              "Failed",
              "Serving"
            ]
          }
        },
        "required": [
          "id",
          "title",
          "command",
          "startTime",
          "nextFireTime",
          "projectId",
          "projectIdentity",
          "runType",
          "hardwareTierName",
          "runDurationInSeconds",
          "estimatedCost",
          "status"
        ]
      },
      "domino.workspace.api.WorkspaceExecutionInfoDto": {
        "properties": {
          "executionId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "workspaceId": {
            "nullable": true,
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "workspaceSessionId": {
            "nullable": true,
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "isRestartable": {
            "type": "boolean"
          }
        },
        "required": [
          "executionId",
          "isRestartable"
        ]
      },
      "domino.projects.api.repositories.GitProvidersDto": {
        "properties": {
          "providers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.projects.api.repositories.GitProviderDto"
            }
          }
        },
        "required": [
          "providers"
        ]
      },
      "domino.datasetrw.api.DatasetRwSnapshotFileMetadataDto": {
        "properties": {
          "exceedsSizeLimit": {
            "type": "boolean",
            "nullable": true
          },
          "fileSize": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "lastModified": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "mimeType": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "previewUri": {
            "type": "string",
            "nullable": true
          },
          "uri": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "domino.nucleus.dataset.ui.AddMountInput": {
        "properties": {
          "datasetId": {
            "type": "string"
          },
          "useLatest": {
            "type": "boolean"
          },
          "useTag": {
            "type": "string",
            "nullable": true
          },
          "useId": {
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "datasetId",
          "useLatest"
        ]
      },
      "domino.files.web.FileOrFolderToMove": {
        "properties": {
          "originPath": {
            "type": "string"
          },
          "targetPath": {
            "type": "string"
          },
          "isDirectory": {
            "type": "boolean"
          },
          "ownerUsername": {
            "type": "string"
          },
          "projectName": {
            "type": "string"
          }
        },
        "required": [
          "originPath",
          "targetPath",
          "isDirectory",
          "ownerUsername",
          "projectName"
        ]
      },
      "domino.projects.api.ProjectEnvVarVersion": {
        "properties": {
          "projectId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "version": {
            "type": "integer",
            "format": "int32"
          }
        },
        "required": [
          "projectId",
          "version"
        ]
      },
      "domino.projectManagement.web.AssigneeForLinkedGoal": {
        "properties": {
          "jiraUserId": {
            "type": "string"
          },
          "jiraUserName": {
            "type": "string"
          }
        },
        "required": [
          "jiraUserId",
          "jiraUserName"
        ]
      },
      "domino.projectManagement.api.PmEntity": {
        "properties": {
          "entityId": {
            "$ref": "#/components/schemas/domino.projectManagement.api.PmId"
          },
          "entityType": {
            "type": "string",
            "enum": [
              "PmTicket",
              "PmSubTicket",
              "PmStage",
              "PmComment"
            ]
          }
        },
        "required": [
          "entityId",
          "entityType"
        ]
      },
      "domino.nucleus.modelproduct.models.LoginRequired": {
        "properties": {
          "loginUrl": {
            "type": "string"
          }
        },
        "required": [
          "loginUrl"
        ]
      },
      "domino.computegrid.MonitoredExecutionResource": {
        "properties": {
          "shortName": {
            "type": "string"
          },
          "fullName": {
            "type": "string"
          },
          "startupStatus": {
            "type": "string",
            "enum": [
              "READY",
              "IN_PROGRESS",
              "WARNING",
              "UNKNOWN"
            ]
          },
          "startupStatusMessage": {
            "type": "string"
          },
          "helpText": {
            "type": "string",
            "nullable": true
          },
          "debugText": {
            "type": "string",
            "nullable": true
          },
          "lastEventTimestamp": {
            "nullable": true,
            "type": "string",
            "format": "date-time"
          },
          "extraInfo": {
            "nullable": true,
            "type": "object"
          }
        },
        "required": [
          "shortName",
          "fullName",
          "startupStatus",
          "startupStatusMessage"
        ]
      },
      "domino.gitproviders.api.GetRepoTypeCapabilitiesApiResponse": {
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.gitproviders.api.RepoTypeCapabilitiesDTO"
            }
          }
        },
        "required": [
          "items"
        ]
      },
      "domino.server.projects.api.ProjectGatewayOverview": {
        "description": "Project Overview entity returned by the API gateway",
        "type": "object",
        "properties": {
          "templateDetails": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.projects.api.ProjectTemplateDetails"
          },
          "lastStatusChangeInMillis": {
            "nullable": true,
            "format": "int64",
            "type": "integer"
          },
          "lastStageChangeInMillis": {
            "nullable": true,
            "format": "int64",
            "type": "integer"
          },
          "hardwareTierName": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "hardwareTierId": {
            "type": "string"
          },
          "enabledGitRepositories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.repoman.domain.GitRepository"
            }
          },
          "runsCountByType": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.server.projects.api.ProjectGatewayExecutingRunsByType"
            }
          },
          "environmentName": {
            "type": "string"
          },
          "details": {
            "$ref": "#/components/schemas/domino.server.projects.api.ProjectGatewayOverviewDetails"
          },
          "id": {
            "pattern": "^[0-9a-f]{24}$",
            "type": "string"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "stageId": {
            "pattern": "^[0-9a-f]{24}$",
            "type": "string"
          },
          "owner": {
            "$ref": "#/components/schemas/domino.server.projects.api.Owner"
          },
          "visibility": {
            "type": "string",
            "enum": [
              "Public",
              "Searchable",
              "Private"
            ]
          },
          "requestingUserRole": {
            "type": "string",
            "enum": [
              "Admin",
              "ProjectImporter",
              "Contributor",
              "Viewer",
              "ResultsConsumer",
              "LauncherUser",
              "Owner"
            ]
          },
          "totalRunTime": {
            "description": "sum of run times of all executions in the project, in ISO8601 duration format including only seconds and milliseconds",
            "type": "string"
          },
          "mainRepository": {
            "nullable": true,
            "serviceProvider": {
              "type": "string"
            },
            "id": {
              "type": "string"
            },
            "uri": {
              "type": "string"
            },
            "$ref": "#/components/schemas/domino.server.projects.api.MainRepositoryDetails"
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.server.projects.api.ProjectGatewayTag"
            }
          },
          "numComments": {
            "format": "int64",
            "type": "integer"
          },
          "allowedOperations": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "ChangeProjectSettings",
                "Run",
                "Edit",
                "ViewWorkspaces",
                "UpdateProjectDescription",
                "ProjectSearchPreview",
                "BrowseReadFiles",
                "EditTags",
                "RunLauncher",
                "ViewRuns"
              ]
            }
          },
          "name": {
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/domino.server.projects.api.ProjectStatus"
          }
        },
        "required": [
          "id",
          "name",
          "owner",
          "description",
          "hardwareTierName",
          "hardwareTierId",
          "environmentName",
          "allowedOperations",
          "visibility",
          "tags",
          "updatedAt",
          "numComments",
          "runsCountByType",
          "totalRunTime",
          "stageId",
          "status",
          "requestingUserRole"
        ]
      },
      "domino.workspaces.api.WorkspaceResultFiles": {
        "properties": {
          "commitId": {
            "type": "string"
          },
          "fileMetadata": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.workspaces.api.ResultFileMetadata"
            }
          }
        },
        "required": [
          "commitId",
          "fileMetadata"
        ]
      },
      "domino.environments.api.PaginatedRevisionData": {
        "properties": {
          "revisions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.environments.api.RevisionSummary"
            }
          },
          "pageInfo": {
            "$ref": "#/components/schemas/domino.environments.api.PaginatedRevisionInfo"
          }
        },
        "required": [
          "revisions",
          "pageInfo"
        ]
      },
      "domino.projects.web.ArchiveProjectStage": {
        "properties": {
          "stageId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          }
        },
        "required": [
          "stageId"
        ]
      },
      "domino.datasource.api.EngineInfoDto": {
        "properties": {
          "engineType": {
            "type": "string",
            "enum": [
              "Domino",
              "Starburst"
            ]
          },
          "catalogEntryName": {
            "type": "string"
          }
        },
        "required": [
          "engineType",
          "catalogEntryName"
        ]
      },
      "domino.notifications.Priority": {
        "type": "string",
        "enum": [
          "Critical",
          "Default"
        ]
      },
      "domino.workspaces.web.LaunchWorkspaceInputs": {
        "properties": {
          "workspaceDefinitionId": {
            "type": "string"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "commitId": {
            "type": "string",
            "nullable": true
          },
          "mainRepoGitRef": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.projects.api.repositories.ReferenceDTO"
          },
          "hardwareTierId": {
            "type": "string",
            "nullable": true
          },
          "datasetConfig": {
            "type": "string",
            "nullable": true
          },
          "onDemandSparkClusterProperties": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.projects.api.OnDemandSparkClusterPropertiesSpec"
          },
          "environmentId": {
            "nullable": true,
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "environmentRevisionSpec": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "enum": [
                  "ActiveRevision",
                  "LatestRevision",
                  "RestrictedRevision"
                ]
              },
              {
                "type": "object",
                "required": [
                  "revisionId"
                ],
                "properties": {
                  "revisionId": {
                    "type": "string"
                  }
                }
              }
            ]
          },
          "externalVolumeMounts": {
            "type": "array",
            "nullable": true,
            "items": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            }
          }
        },
        "required": [
          "workspaceDefinitionId"
        ]
      },
      "domino.admin.interface.OnDemandSparkExecutionUnitOverview": {
        "properties": {
          "deployableObjectType": {
            "type": "string",
            "enum": [
              "Container",
              "Pod"
            ]
          },
          "deployableObjectId": {
            "type": "string"
          },
          "computeNodeId": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "string"
          },
          "role": {
            "type": "string"
          }
        },
        "required": [
          "deployableObjectType",
          "deployableObjectId",
          "status",
          "role"
        ]
      },
      "domino.common.gateway.search.SearchResultGatewayDTO": {
        "properties": {
          "id": {
            "nullable": true,
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "projectId": {
            "nullable": true,
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "displayText": {
            "type": "string",
            "nullable": true
          },
          "ownerId": {
            "nullable": true,
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "link": {
            "type": "string"
          },
          "area": {
            "type": "string"
          },
          "featureViewInfo": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.common.gateway.search.FeatureViewSearchResultDTO"
          }
        },
        "required": [
          "link",
          "area"
        ]
      },
      "domino.projects.api.ProjectInfo": {
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "name": {
            "type": "string"
          },
          "owner": {
            "$ref": "#/components/schemas/domino.projects.api.ProjectOwnerInfo"
          },
          "isArchived": {
            "type": "boolean"
          },
          "hasProjectAccess": {
            "type": "boolean",
            "nullable": true
          }
        },
        "required": [
          "id",
          "name",
          "owner",
          "isArchived"
        ]
      },
      "domino.projects.api.ProjectEnvironmentOwnerDTO": {
        "properties": {
          "id": {
            "type": "string"
          },
          "username": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "username"
        ]
      },
      "domino.environments.api.EnvironmentRevisionDetails": {
        "properties": {
          "environment": {
            "$ref": "#/components/schemas/domino.environments.api.Environment"
          },
          "environmentRevision": {
            "$ref": "#/components/schemas/domino.environments.api.EnvironmentRevision"
          },
          "isLatestRevision": {
            "type": "boolean"
          },
          "visibleEnvironments": {
            "$ref": "#/components/schemas/domino.environments.api.VisibleEnvironments"
          },
          "base": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.environments.api.EnvironmentRevision"
          },
          "canRevertTo": {
            "type": "boolean"
          },
          "hasRunningBuild": {
            "type": "boolean"
          }
        },
        "required": [
          "environment",
          "environmentRevision",
          "isLatestRevision",
          "visibleEnvironments",
          "canRevertTo",
          "hasRunningBuild"
        ]
      },
      "domino.quota.api.QuotaDto": {
        "type": "object",
        "required": [
          "id",
          "quotaType"
        ],
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$",
            "description": "quota Id"
          },
          "limit": {
            "type": "integer",
            "format": "int64",
            "description": "quota limit"
          },
          "targetId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$",
            "description": "Id of user for quota"
          },
          "quotaType": {
            "$ref": "#/components/schemas/domino.quota.api.QuotaType"
          },
          "actionMetadata": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/domino.quota.api.QuotaActionMetadata"
            }
          },
          "targetMetadata": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/domino.quota.api.targetMetadata"
            }
          }
        }
      },
      "domino.datasource.model.ConnectorGroup": {
        "type": "string",
        "enum": [
          "Native",
          "Starburst",
          "StarburstSelfService",
          "ReverseProxy"
        ]
      },
      "domino.projects.api.ProjectAssetCount": {
        "properties": {
          "assetType": {
            "type": "string",
            "enum": [
              "App",
              "ModelAPI",
              "Launcher",
              "Schedules"
            ]
          },
          "assetCount": {
            "type": "integer",
            "format": "int32"
          }
        },
        "required": [
          "assetType",
          "assetCount"
        ]
      },
      "domino.modelmanager.api.ModelBuildLogsV2": {
        "properties": {
          "modelId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "modelVersionId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "status": {
            "type": "string",
            "enum": [
              "preparing",
              "building",
              "complete",
              "failed"
            ]
          },
          "logs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.modelmanager.api.LogLine"
            }
          }
        },
        "required": [
          "modelId",
          "modelVersionId",
          "status",
          "logs"
        ]
      },
      "domino.featurestore.model.OfflineStoreType": {
        "type": "string",
        "enum": [
          "File",
          "BigQuery",
          "Redshift",
          "Snowflake"
        ]
      },
      "domino.datasetrw.web.CreateDatasetRwStorageRequest": {
        "properties": {
          "name": {
            "type": "string"
          },
          "dataPlaneId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "pvcName": {
            "type": "string"
          },
          "isDataPlaneDefault": {
            "type": "boolean",
            "nullable": true
          }
        },
        "required": [
          "name",
          "dataPlaneId",
          "pvcName"
        ]
      },
      "domino.jobs.interface.CommentContent": {
        "properties": {
          "value": {
            "type": "string"
          }
        },
        "required": [
          "value"
        ]
      },
      "domino.datasetrw.api.DatasetRwFiletaskCopyUpdateDto": {
        "properties": {
          "timeRemaining": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "progress": {
            "type": "integer",
            "format": "int64"
          },
          "errorCode": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "errorMessage": {
            "type": "string",
            "nullable": true
          },
          "snapshotId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "snapshotStatus": {
            "type": "string",
            "enum": [
              "Pending",
              "Deleted",
              "DeletionInProgress",
              "Copying",
              "Failed",
              "Active",
              "MarkedForDeletion"
            ]
          }
        },
        "required": [
          "progress",
          "snapshotId",
          "snapshotStatus"
        ]
      },
      "domino.datasetrw.api.DatasetRwFileDetailsDto": {
        "properties": {
          "isDirectory": {
            "type": "boolean",
            "nullable": true
          },
          "label": {
            "type": "string"
          },
          "sortableName": {
            "type": "string",
            "nullable": true
          },
          "fileName": {
            "type": "string",
            "nullable": true
          },
          "url": {
            "type": "string",
            "nullable": true
          },
          "sizeInBytes": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          }
        },
        "required": [
          "label"
        ]
      },
      "domino.projects.api.ProjectStageAndStatus": {
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "name": {
            "type": "string"
          },
          "stage": {
            "$ref": "#/components/schemas/domino.projects.api.ProjectStage"
          },
          "status": {
            "$ref": "#/components/schemas/domino.projects.api.ProjectStatus"
          },
          "lastStageChangeInMillis": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "lastStatusChangeInMillis": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          }
        },
        "required": [
          "id",
          "name",
          "stage",
          "status"
        ]
      },
      "domino.jobs.web.JobsUsageSocketEvent": {
        "properties": {
          "correlationId": {
            "type": "string"
          },
          "jobId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "room": {
            "type": "string"
          },
          "cpu": {
            "type": "number",
            "format": "double"
          },
          "mem": {
            "type": "number",
            "format": "double"
          },
          "timestamp": {
            "type": "integer",
            "format": "epoch"
          }
        },
        "required": [
          "correlationId",
          "jobId",
          "room",
          "cpu",
          "mem",
          "timestamp"
        ]
      },
      "domino.environments.api.EnvironmentProjectUsageSummary": {
        "properties": {
          "name": {
            "type": "string"
          },
          "ownerName": {
            "type": "string"
          },
          "visibility": {
            "type": "string"
          },
          "latestRuns": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.environments.api.EnvironmentRunUsageSummary"
            }
          },
          "latestResultsTimestamp": {
            "nullable": true,
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "name",
          "ownerName",
          "visibility",
          "latestRuns"
        ]
      },
      "domino.projects.templates.api.models.EnvironmentRevisionDto": {
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "environment": {
            "$ref": "#/components/schemas/domino.projects.templates.api.models.EnvironmentDto"
          }
        },
        "required": [
          "id",
          "environment"
        ]
      },
      "domino.datasetrw.api.DatasetRwStorageUsageDto": {
        "type": "object",
        "properties": {
          "quotaId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "targetId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "limit": {
            "type": "integer",
            "format": "int64"
          },
          "totalStorageUsed": {
            "type": "integer",
            "format": "int64"
          },
          "isAtWarningThreshold": {
            "type": "boolean"
          },
          "isAtEmailThreshold": {
            "type": "boolean"
          }
        },
        "required": [
          "quotaId",
          "limit",
          "totalStorageUsed",
          "isAtWarningThreshold",
          "isAtEmailThreshold"
        ]
      },
      "domino.workspace.api.WorkspaceImportedProject": {
        "properties": {
          "projectId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "projectName": {
            "type": "string"
          },
          "ownerId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "directoryName": {
            "type": "string",
            "nullable": true
          },
          "commitId": {
            "type": "string"
          },
          "release": {
            "nullable": true,
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          }
        },
        "required": [
          "projectId",
          "projectName",
          "ownerId",
          "commitId"
        ]
      },
      "domino.jobs.interface.HardwareTierRef": {
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "domino.projects.api.StageStat": {
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "name": {
            "type": "string"
          },
          "projectCount": {
            "type": "integer",
            "format": "int32"
          }
        },
        "required": [
          "id",
          "name",
          "projectCount"
        ]
      },
      "domino.projects.api.ResolveReviewRequest": {
        "properties": {
          "resolution": {
            "type": "string",
            "enum": [
              "Open",
              "Accepted",
              "Rejected"
            ]
          },
          "fromCommitId": {
            "type": "string"
          },
          "intoCommitId": {
            "type": "string"
          },
          "resolutionDecisions": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "required": [
          "resolution",
          "fromCommitId",
          "intoCommitId",
          "resolutionDecisions"
        ]
      },
      "domino.nucleus.modelproduct.models.Stats": {
        "properties": {
          "usageCount": {
            "type": "integer",
            "format": "int32"
          }
        },
        "required": [
          "usageCount"
        ]
      },
      "domino.activity.api.ModelVersionStatusActivityMetaData": {
        "properties": {
          "action": {
            "type": "string",
            "enum": [
              "published",
              "started",
              "destroyed"
            ]
          },
          "currentStatus": {
            "type": "string"
          },
          "modelName": {
            "type": "string"
          },
          "modelId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "modelVersionNumber": {
            "type": "integer",
            "format": "int32"
          }
        },
        "required": [
          "action",
          "currentStatus",
          "modelName",
          "modelId",
          "modelVersionNumber"
        ]
      },
      "domino.environments.api.EnvironmentOwner": {
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "username": {
            "type": "string"
          },
          "environmentOwnerType": {
            "type": "string",
            "enum": [
              "Organization",
              "Individual"
            ]
          }
        },
        "required": [
          "id",
          "username",
          "environmentOwnerType"
        ]
      },
      "domino.datamount.web.UpdateDataMountRequest": {
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "mountPath": {
            "type": "string"
          },
          "users": {
            "type": "array",
            "items": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            }
          },
          "projects": {
            "type": "array",
            "items": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            }
          },
          "readOnly": {
            "type": "boolean"
          },
          "isPublic": {
            "type": "boolean"
          },
          "isRegistered": {
            "type": "boolean"
          },
          "status": {
            "type": "string",
            "nullable": true
          },
          "dataPlaneIds": {
            "type": "array",
            "items": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            }
          }
        },
        "required": [
          "id",
          "name",
          "mountPath",
          "users",
          "projects",
          "readOnly",
          "isPublic",
          "isRegistered",
          "dataPlaneIds"
        ]
      },
      "domino.activity.api.ActivityStream": {
        "properties": {
          "activity": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.activity.api.Activity"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/domino.activity.api.ActivityPagination"
          }
        },
        "required": [
          "activity",
          "pagination"
        ]
      },
      "domino.activity.api.ScheduleJobActivityMetaData": {
        "properties": {
          "action": {
            "type": "string",
            "enum": [
              "scheduled",
              "paused",
              "edited",
              "unpaused",
              "unscheduled"
            ]
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "commandToRun": {
            "type": "string"
          },
          "cronSchedule": {
            "type": "string"
          }
        },
        "required": [
          "action",
          "commandToRun",
          "cronSchedule"
        ]
      },
      "domino.activity.api.AppStatusActivityMetaData": {
        "properties": {
          "title": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "currentStatus": {
            "type": "string"
          }
        },
        "required": [
          "title",
          "status",
          "currentStatus"
        ]
      },
      "domino.featurestore.api.FeatureViewCommentContext": {
        "properties": {
          "featureViewId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          }
        },
        "required": [
          "featureViewId"
        ]
      },
      "domino.datasetrw.api.TaskUpdate": {
        "properties": {
          "timeRemaining": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "progress": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "deletedFiles": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "fileCount": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "totalSize": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          }
        }
      },
      "domino.nucleus.dataset.ui.DataSetFileBrowserViewModel": {
        "properties": {
          "directorySize": {
            "type": "string",
            "nullable": true
          },
          "rows": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.nucleus.dataset.ui.DataSetFileBrowserRow"
            }
          }
        },
        "required": [
          "rows"
        ]
      },
      "domino.files.interface.GitRepo": {
        "properties": {
          "id": {
            "type": "string"
          },
          "location": {
            "type": "string"
          },
          "repoName": {
            "type": "string"
          },
          "domain": {
            "type": "string"
          },
          "uri": {
            "type": "string"
          },
          "refLabel": {
            "type": "string"
          },
          "refType": {
            "type": "string"
          },
          "serviceProvider": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "location",
          "repoName",
          "domain",
          "uri",
          "refLabel",
          "refType",
          "serviceProvider"
        ]
      },
      "domino.projects.api.repositories.GitRepositoryDTO": {
        "properties": {
          "id": {
            "nullable": true,
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "uri": {
            "type": "string"
          },
          "ref": {
            "$ref": "#/components/schemas/domino.projects.api.repositories.ReferenceDTO"
          },
          "credentialId": {
            "nullable": true,
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "serviceProvider": {
            "type": "string"
          },
          "isFeatureStore": {
            "type": "boolean",
            "nullable": true
          }
        },
        "required": [
          "uri",
          "ref",
          "serviceProvider"
        ]
      },
      "domino.workspace.web.ReproduceWorkspaceRequest": {
        "properties": {
          "name": {
            "type": "string"
          },
          "provenanceCheckpointId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "hardwareTierId": {
            "$ref": "#/components/schemas/domino.hardwaretier.api.HardwareTierIdentifier"
          },
          "branchName": {
            "type": "string"
          },
          "workspaceReproductionType": {
            "type": "string",
            "enum": [
              "FromWorkspace",
              "FromModel",
              "FromModelCommits"
            ]
          }
        },
        "required": [
          "name",
          "provenanceCheckpointId",
          "hardwareTierId",
          "branchName",
          "workspaceReproductionType"
        ]
      },
      "domino.datasetrw.api.DatasetRwSnapshotSummaryDto": {
        "properties": {
          "snapshot": {
            "$ref": "#/components/schemas/domino.datasetrw.api.DatasetRwSnapshotDto"
          },
          "authorUsername": {
            "type": "string",
            "nullable": true
          },
          "datasetDescription": {
            "type": "string",
            "nullable": true
          },
          "isReadWrite": {
            "type": "boolean"
          },
          "storageInfo": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.datasetrw.api.DatasetRwStorageInfoDto"
          }
        },
        "required": [
          "snapshot",
          "isReadWrite"
        ]
      },
      "domino.layout.web.ValidateStepResponse": {
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "success": {
            "type": "boolean"
          }
        },
        "required": [
          "errors",
          "success"
        ]
      },
      "domino.projects.api.Commenter": {
        "properties": {
          "commenterId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "username": {
            "type": "string"
          },
          "fullName": {
            "type": "string"
          }
        },
        "required": [
          "commenterId",
          "username",
          "fullName"
        ]
      },
      "domino.admin.interface.WhiteLabelConfigurations": {
        "properties": {
          "appURL": {
            "type": "string"
          },
          "appLogo": {
            "type": "string",
            "nullable": true
          },
          "appLogoBgColor": {
            "type": "string",
            "nullable": true
          },
          "colorTheme": {
            "type": "string",
            "nullable": true
          },
          "datasetContainerHomeDisplay": {
            "type": "string",
            "nullable": true
          },
          "datasetLocalPathDisplay": {
            "type": "string",
            "nullable": true
          },
          "errorPageContactEmail": {
            "type": "string"
          },
          "defaultProjectName": {
            "type": "string"
          },
          "favicon": {
            "type": "string"
          },
          "gitCredentialsDescription": {
            "type": "string"
          },
          "helpContentUrl": {
            "type": "string"
          },
          "supportUrl": {
            "type": "string"
          },
          "pdfTemplateUrl": {
            "type": "string",
            "nullable": true
          },
          "pdfAppName": {
            "type": "string"
          },
          "hideAddProjectAction": {
            "type": "boolean"
          },
          "hidePopularProjects": {
            "type": "boolean"
          },
          "hideDownloadDominoCli": {
            "type": "boolean"
          },
          "hideMarketingDisclaimer": {
            "type": "boolean"
          },
          "hidePublicProjects": {
            "type": "boolean"
          },
          "hideSearchableProjects": {
            "type": "boolean"
          },
          "hideSuggestedProjects": {
            "type": "boolean"
          },
          "hideLearnMoreOnFile": {
            "type": "boolean"
          },
          "hideGitSshKey": {
            "type": "boolean"
          },
          "appName": {
            "type": "string"
          },
          "pageFooter": {
            "type": "string"
          },
          "showSupportButton": {
            "type": "boolean"
          },
          "supportEmail": {
            "type": "string"
          },
          "globalBanner": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.admin.interface.GlobalBanner"
          },
          "admin": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.admin.interface.AdminSettings"
          }
        },
        "required": [
          "appURL",
          "errorPageContactEmail",
          "defaultProjectName",
          "favicon",
          "gitCredentialsDescription",
          "helpContentUrl",
          "supportUrl",
          "pdfAppName",
          "hideAddProjectAction",
          "hidePopularProjects",
          "hideDownloadDominoCli",
          "hideMarketingDisclaimer",
          "hidePublicProjects",
          "hideSearchableProjects",
          "hideSuggestedProjects",
          "hideLearnMoreOnFile",
          "hideGitSshKey",
          "appName",
          "pageFooter",
          "showSupportButton",
          "supportEmail"
        ]
      },
      "domino.layout.web.CompleteWorkflowResponse": {
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "success": {
            "type": "boolean"
          },
          "id": {
            "nullable": true,
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "ownerInfo": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.layout.web.OwnerInfoDto"
          }
        },
        "required": [
          "errors",
          "success"
        ]
      },
      "domino.datamount.api.DataMountProjectInfoDto": {
        "properties": {
          "projectId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "projectName": {
            "type": "string"
          },
          "projectOwnerUsername": {
            "type": "string"
          },
          "isProjectArchived": {
            "type": "boolean"
          }
        },
        "required": [
          "projectId",
          "projectName",
          "projectOwnerUsername",
          "isProjectArchived"
        ]
      },
      "domino.common.gateway.search.SearchRunDTO": {
        "properties": {
          "command": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "completed": {
            "type": "string"
          },
          "duration": {
            "type": "string"
          },
          "ownerName": {
            "type": "string"
          },
          "projectName": {
            "type": "string"
          },
          "jobLink": {
            "type": "string"
          },
          "resultLink": {
            "type": "string"
          }
        },
        "required": [
          "command",
          "status",
          "completed",
          "duration",
          "ownerName",
          "projectName",
          "jobLink",
          "resultLink"
        ]
      },
      "domino.modelmanager.api.ModelExportVersionLogs": {
        "properties": {
          "modelId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "modelVersionId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "exportVersionId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "status": {
            "type": "string",
            "enum": [
              "exporting",
              "preparing",
              "complete",
              "not_triggered",
              "failed"
            ]
          },
          "logs": {
            "type": "string"
          }
        },
        "required": [
          "modelId",
          "modelVersionId",
          "exportVersionId",
          "status",
          "logs"
        ]
      },
      "domino.workspaces.api.WorkspaceTag": {
        "properties": {
          "tagId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "name": {
            "type": "string"
          },
          "createdBy": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "createdAt": {
            "type": "integer",
            "format": "epoch"
          },
          "projectId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          }
        },
        "required": [
          "tagId",
          "name",
          "createdBy",
          "createdAt",
          "projectId"
        ]
      },
      "domino.apiserverutils.pagination.SortOrder": {
        "properties": {}
      },
      "domino.quota.web.CreateQuotaOverridesRequest": {
        "type": "object",
        "required": [
          "targetIds",
          "quotaLimit"
        ],
        "properties": {
          "targetIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "quotaLimit": {
            "type": "integer",
            "format": "int64",
            "description": "quota limit"
          }
        }
      },
      "domino.executor.api.CheckoutBranchRequest": {
        "properties": {
          "branchName": {
            "type": "string"
          },
          "repoId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          }
        },
        "required": [
          "branchName",
          "repoId"
        ]
      },
      "domino.modelmanager.api.ModelOwner": {
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "username": {
            "type": "string"
          },
          "fullName": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "username",
          "fullName"
        ]
      },
      "domino.nucleus.modelproduct.models.VisibilityPatch": {
        "properties": {
          "visibility": {
            "type": "string",
            "enum": [
              "PUBLIC",
              "AUTHENTICATED",
              "GRANT_BASED",
              "GRANT_BASED_STRICT"
            ]
          }
        },
        "required": [
          "visibility"
        ]
      },
      "domino.common.gateway.search.SearchCommentDTO": {
        "properties": {
          "project": {
            "$ref": "#/components/schemas/domino.common.gateway.search.SearchProjectDetails"
          },
          "contextDescription": {
            "type": "string"
          },
          "offset": {
            "type": "integer",
            "format": "int32"
          }
        },
        "required": [
          "project",
          "contextDescription",
          "offset"
        ]
      },
      "domino.modelmanager.web.ExportImageForNvidiaApiRequest": {
        "properties": {
          "containerRepository": {
            "type": "string"
          },
          "tag": {
            "type": "string",
            "nullable": true
          },
          "helmRepository": {
            "type": "string"
          },
          "helmVersion": {
            "type": "string"
          },
          "ngcApiKey": {
            "type": "string"
          }
        },
        "required": [
          "containerRepository",
          "helmRepository",
          "helmVersion",
          "ngcApiKey"
        ]
      },
      "domino.credential.api.VisibleDataSourceCredentialDto": {
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "dataSourceId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "credential": {
            "$ref": "#/components/schemas/domino.credential.api.VisibleCredentialDto"
          },
          "owner": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "users": {
            "type": "array",
            "items": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            }
          },
          "isEveryone": {
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "dataSourceId",
          "credential",
          "owner",
          "users",
          "isEveryone"
        ]
      },
      "domino.admin.interface.ComputeNodeInfrastructureInfo": {
        "properties": {
          "name": {
            "type": "string"
          },
          "nodePool": {
            "type": "string",
            "nullable": true
          },
          "instanceType": {
            "type": "string",
            "nullable": true
          },
          "isBuildNode": {
            "type": "boolean"
          },
          "dataPlane": {
            "$ref": "#/components/schemas/domino.dataplane.DataPlane"
          }
        },
        "required": [
          "name",
          "isBuildNode",
          "dataPlane"
        ]
      },
      "domino.workspace.api.WorkspaceConfigDto": {
        "properties": {
          "environment": {
            "$ref": "#/components/schemas/domino.environments.api.EnvironmentRevisionSummary"
          },
          "hardwareTier": {
            "$ref": "#/components/schemas/domino.workspace.api.WorkspaceHardwareTierDto"
          },
          "tools": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "clusterProps": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.computecluster.api.SparkClusterPropsDto"
          },
          "computeClusterResponseProps": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.computecluster.api.ComputeClusterConfigResponseDto"
          }
        },
        "required": [
          "environment",
          "hardwareTier",
          "tools"
        ]
      },
      "domino.jobs.interface.JobRepositoryStatus": {
        "properties": {
          "name": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "Unpushed",
              "Unpushed and Dirty",
              "Clean",
              "Unknown",
              "Modified"
            ]
          },
          "changes": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.jobs.interface.RepositoryChanges"
          }
        },
        "required": [
          "name",
          "status"
        ]
      },
      "domino.workspace.api.DataPlaneRefDto": {
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "domino.featurestore.api.CredentialConfigItem": {
        "properties": {
          "name": {
            "type": "string"
          },
          "envVarKey": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "envVarKey"
        ]
      },
      "domino.projects.templates.api.models.ProjectTemplateGoalStagesDto": {
        "properties": {
          "stageName": {
            "type": "string"
          }
        },
        "required": [
          "stageName"
        ]
      },
      "domino.nucleus.modelproduct.models.App": {
        "properties": {
          "appType": {
            "type": "string"
          }
        },
        "required": [
          "appType"
        ]
      },
      "domino.environments.api.EnvironmentPermissionsResult": {
        "properties": {
          "canClassifyEnvironments": {
            "type": "boolean"
          },
          "canCreateEnvironments": {
            "type": "boolean"
          },
          "canSetEnvironmentsAsDefault": {
            "type": "boolean"
          },
          "canTransferOwnership": {
            "type": "boolean"
          },
          "canCreateGlobalEnvironment": {
            "type": "boolean"
          },
          "canEditPrivilegedFields": {
            "type": "boolean"
          },
          "environment": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.environments.api.EnvironmentPermissions"
          }
        },
        "required": [
          "canClassifyEnvironments",
          "canCreateEnvironments",
          "canSetEnvironmentsAsDefault",
          "canTransferOwnership",
          "canCreateGlobalEnvironment",
          "canEditPrivilegedFields"
        ]
      },
      "domino.featurestore.api.FeatureViewCommenter": {
        "properties": {
          "commenterId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "username": {
            "type": "string"
          }
        },
        "required": [
          "commenterId",
          "username"
        ]
      },
      "domino.datasource.web.RecordDataSourceAccessRequest": {
        "properties": {
          "clientSource": {
            "type": "string",
            "nullable": true
          },
          "dataPlaneId": {
            "nullable": true,
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "runId": {
            "nullable": true,
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "userName": {
            "type": "string",
            "nullable": true
          },
          "extraInfo": {
            "nullable": true,
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "domino.modelmanager.api.ModelExportTargetDetails": {
        "properties": {}
      },
      "domino.projects.api.CollaboratorDTO": {
        "properties": {
          "collaboratorId": {
            "type": "string"
          },
          "projectRole": {
            "type": "string",
            "enum": [
              "ProjectImporter",
              "Contributor",
              "ResultsConsumer",
              "LauncherUser",
              "Owner"
            ]
          }
        },
        "required": [
          "collaboratorId",
          "projectRole"
        ]
      },
      "domino.nucleus.dataset.ui.DataSetFileBrowserRow": {
        "properties": {
          "name": {
            "$ref": "#/components/schemas/domino.nucleus.dataset.ui.DataSetFileBrowserEntry"
          },
          "size": {
            "$ref": "#/components/schemas/domino.nucleus.dataset.ui.DataSetFileBrowserEntry"
          }
        },
        "required": [
          "name",
          "size"
        ]
      },
      "domino.jobs.interface.CommentThread": {
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "comments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.jobs.interface.Comment"
            }
          },
          "context": {
            "$ref": "#/components/schemas/domino.jobs.interface.CommentContext"
          }
        },
        "required": [
          "id",
          "comments",
          "context"
        ]
      },
      "domino.projects.api.RevisionOverview": {
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "number": {
            "type": "integer",
            "format": "int32"
          },
          "status": {
            "type": "string",
            "nullable": true
          },
          "url": {
            "type": "string"
          },
          "availableTools": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.projects.api.EnvironmentWorkspaceToolDefinition"
            }
          },
          "tags": {
            "type": "array",
            "nullable": true,
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "id",
          "number",
          "url",
          "availableTools"
        ]
      },
      "domino.common.modelproduct.LogContent": {
        "properties": {
          "timestamp": {
            "type": "integer",
            "format": "epoch"
          },
          "logType": {
            "type": "string",
            "enum": [
              "stdout",
              "stderr",
              "prepareoutput",
              "complete"
            ]
          },
          "log": {
            "type": "string"
          },
          "size": {
            "type": "integer",
            "format": "int64"
          }
        },
        "required": [
          "timestamp",
          "logType",
          "log",
          "size"
        ]
      },
      "domino.computegrid.ComputeClusterStatus": {
        "properties": {
          "clusterName": {
            "type": "string"
          },
          "clusterState": {
            "type": "string",
            "enum": [
              "Pending",
              "NonExistent",
              "Stopping",
              "Starting",
              "Ready",
              "Unknown"
            ]
          },
          "isReady": {
            "type": "boolean"
          },
          "workerCount": {
            "type": "integer",
            "format": "int32"
          }
        },
        "required": [
          "clusterName",
          "clusterState",
          "isReady",
          "workerCount"
        ]
      },
      "domino.apiserverutils.pagination.PaginationFilter": {
        "properties": {
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "pageNumber": {
            "type": "integer",
            "format": "int32"
          },
          "sortOrder": {
            "type": "string",
            "enum": [
              "asc",
              "desc"
            ]
          }
        },
        "required": [
          "pageSize",
          "pageNumber",
          "sortOrder"
        ]
      },
      "domino.nucleus.modelproduct.models.EmailInvitationResponse": {
        "properties": {
          "succeeded": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "failed": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.nucleus.modelproduct.models.EmailInvitationFailure"
            }
          }
        },
        "required": [
          "succeeded",
          "failed"
        ]
      },
      "domino.jobs.interface.JobSet": {
        "properties": {
          "jobs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.jobs.interface.Job"
            }
          },
          "totalCount": {
            "type": "integer",
            "format": "int64"
          },
          "pagination": {
            "$ref": "#/components/schemas/domino.jobs.interface.JobPagination"
          },
          "dominoStatColumns": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "jobs",
          "totalCount",
          "pagination",
          "dominoStatColumns"
        ]
      },
      "domino.projects.api.SelectedEnvironmentDTO": {
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "v2EnvironmentDetails": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.projects.api.SelectedV2EnvironmentDetailsDTO"
          },
          "supportedClusters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ComputeClusterType"
            }
          },
          "activeRevisionTags": {
            "type": "array",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "isCurated": {
            "type": "boolean",
            "nullable": true
          }
        },
        "required": [
          "id",
          "name",
          "supportedClusters"
        ]
      },
      "domino.datasource.model.AuthConfig": {
        "type": "object",
        "properties": {
          "fields": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/domino.datasource.model.Field"
            }
          },
          "meta": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "authType": {
            "$ref": "#/components/schemas/domino.datasource.model.AuthType"
          }
        },
        "required": [
          "fields",
          "meta",
          "type"
        ]
      },
      "domino.files.interface.Author": {
        "properties": {
          "username": {
            "type": "string"
          }
        },
        "required": [
          "username"
        ]
      },
      "domino.featurestore.model.OnlineStoreType": {
        "type": "string",
        "enum": [
          "Snowflake",
          "DynamoDB",
          "Redis",
          "Datastore",
          "Bigtable",
          "SQLite"
        ]
      },
      "domino.nucleus.dataset.ui.UpdateDatasetInput": {
        "properties": {
          "description": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "domino.hardwaretier.api.HardwareTierCapacity": {
        "properties": {
          "currentNumberOfExecutors": {
            "type": "integer",
            "format": "int32"
          },
          "maximumNumberOfExecutors": {
            "type": "integer",
            "format": "int32"
          },
          "numberOfCurrentlyExecutingRuns": {
            "type": "integer",
            "format": "int32"
          },
          "numberOfQueuedRuns": {
            "type": "integer",
            "format": "int32"
          },
          "maximumConcurrentRuns": {
            "type": "integer",
            "format": "int32"
          },
          "availableCapacityWithoutLaunching": {
            "type": "integer",
            "format": "int32"
          },
          "maximumAvailableCapacity": {
            "type": "integer",
            "format": "int32"
          },
          "capacityLevel": {
            "type": "string",
            "enum": [
              "CAN_EXECUTE_WITH_CURRENT_INSTANCES",
              "REQUIRES_LAUNCHING_INSTANCE",
              "FULL",
              "UNKNOWN"
            ]
          }
        },
        "required": [
          "currentNumberOfExecutors",
          "maximumNumberOfExecutors",
          "numberOfCurrentlyExecutingRuns",
          "numberOfQueuedRuns",
          "maximumConcurrentRuns",
          "availableCapacityWithoutLaunching",
          "maximumAvailableCapacity",
          "capacityLevel"
        ]
      },
      "domino.workspace.api.git.ContinueMergeConflictResolutionRequest": {
        "properties": {
          "repository": {
            "$ref": "#/components/schemas/domino.workspace.api.git.MergeConflictRepository"
          },
          "shouldCommitAndPush": {
            "type": "boolean"
          }
        },
        "required": [
          "repository",
          "shouldCommitAndPush"
        ]
      },
      "domino.datasource.api.DataSourceAdminInfoDto": {
        "type": "object",
        "properties": {
          "projectLastActiveMap": {
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "type": "object"
          },
          "projectNames": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          },
          "projectIdOwnerUsernameMap": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          }
        },
        "required": [
          "projectNames",
          "projectIdOwnerUsernameMap",
          "projectLastActiveMap"
        ]
      },
      "domino.activity.api.CommentedOnFileMetaData": {
        "properties": {
          "commitId": {
            "type": "string"
          },
          "fileName": {
            "type": "string"
          },
          "separator": {
            "type": "string"
          }
        },
        "required": [
          "commitId",
          "fileName",
          "separator"
        ]
      },
      "domino.files.interface.GitCredentials": {
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "domain": {
            "type": "string"
          },
          "fingerprint": {
            "type": "string"
          },
          "gitServiceProvider": {
            "type": "string"
          },
          "protocol": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "domain",
          "fingerprint",
          "gitServiceProvider",
          "protocol"
        ]
      },
      "domino.gruz.api.RunDependencyProject": {
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "commitId": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "commitId"
        ]
      },
      "domino.nucleus.project.models.Project": {
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "visibility": {
            "type": "string"
          },
          "ownerId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "ownerUsername": {
            "type": "string"
          },
          "mainRepository": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.server.projects.domain.entities.ProjectGitRepository"
          },
          "importedGitRepos": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.projects.api.repositories.GitRepositoryDTO"
            }
          },
          "templateDetails": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.projects.api.ProjectTemplateDetails"
          },
          "collaboratorIds": {
            "type": "array",
            "items": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            }
          },
          "collaborators": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.projects.api.CollaboratorDTO"
            }
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.projects.api.ProjectTagDTO"
            }
          },
          "stageId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "status": {
            "$ref": "#/components/schemas/domino.projects.api.ProjectStatus"
          },
          "billingTag": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.projects.api.BillingTag"
          }
        },
        "required": [
          "id",
          "name",
          "description",
          "visibility",
          "ownerId",
          "ownerUsername",
          "importedGitRepos",
          "collaboratorIds",
          "collaborators",
          "tags",
          "stageId",
          "status"
        ]
      },
      "domino.workspace.api.WorkspaceSessionProvenanceDto": {
        "properties": {
          "workspaceSessionId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "provenanceCheckpoints": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.provenance.api.ProvenanceCheckpointDto"
            }
          }
        },
        "required": [
          "workspaceSessionId",
          "provenanceCheckpoints"
        ]
      },
      "domino.datasetrw.web.UpdateDatasetGrantsRequest": {
        "properties": {
          "grants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.datasetrw.api.DatasetRwGrant"
            }
          }
        },
        "required": [
          "grants"
        ]
      },
      "domino.nucleus.modelproduct.models.AccessRequest": {
        "properties": {
          "userId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "redirect": {
            "type": "boolean",
            "nullable": true
          }
        },
        "required": [
          "userId"
        ]
      },
      "domino.modelmanager.api.ModelVersionReproduceInWorkspaceDetails": {
        "properties": {
          "modelId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "modelVersionId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "projectName": {
            "type": "string"
          },
          "projectOwnerName": {
            "type": "string"
          },
          "projectId": {
            "type": "string"
          },
          "isGitBasedProject": {
            "type": "boolean"
          },
          "dfsCommitId": {
            "type": "string"
          },
          "gitRepoCommits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.modelmanager.api.ModelGitRepoCommit"
            }
          },
          "canBeReproduced": {
            "type": "boolean"
          },
          "envId": {
            "type": "string"
          },
          "envName": {
            "type": "string"
          },
          "envRevisionNumber": {
            "type": "integer",
            "format": "int32"
          },
          "requestedUserId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "versionNumber": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "status": {
            "type": "string",
            "enum": [
              "starting",
              "running",
              "not_running",
              "failed"
            ]
          }
        },
        "required": [
          "modelId",
          "modelVersionId",
          "projectName",
          "projectOwnerName",
          "projectId",
          "isGitBasedProject",
          "dfsCommitId",
          "gitRepoCommits",
          "canBeReproduced",
          "envId",
          "envName",
          "envRevisionNumber",
          "requestedUserId",
          "status"
        ]
      },
      "domino.projects.api.EntityLinkMetadata": {
        "properties": {}
      },
      "domino.projects.templates.api.models.SettingsDto": {
        "properties": {
          "defaultEnvironmentRevision": {
            "$ref": "#/components/schemas/domino.projects.templates.api.models.EnvironmentRevisionDto"
          },
          "defaultHardwareTier": {
            "$ref": "#/components/schemas/domino.projects.templates.api.models.HardwareTierDto"
          },
          "computeClusterEnvironmentRevision": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.projects.templates.api.models.EnvironmentRevisionDto"
          }
        },
        "required": [
          "defaultEnvironmentRevision",
          "defaultHardwareTier"
        ]
      },
      "domino.admin.interface.ServiceAccountTokenMetadata": {
        "properties": {
          "name": {
            "type": "string"
          },
          "serviceAccountIdpId": {
            "type": "string"
          },
          "isValid": {
            "type": "boolean"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "expiresAt": {
            "nullable": true,
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "name",
          "serviceAccountIdpId",
          "isValid",
          "createdAt"
        ]
      },
      "domino.environments.api.SetDeployDefaultEnvRequest": {
        "properties": {
          "environmentId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          }
        },
        "required": [
          "environmentId"
        ]
      },
      "domino.jobs.interface.PaginationFilter": {
        "properties": {
          "limit": {
            "type": "integer",
            "format": "int32"
          },
          "offset": {
            "type": "integer",
            "format": "int32"
          },
          "latestTimeNano": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "limit",
          "offset"
        ]
      },
      "domino.jobs.web.ResolveDefaultJobPropertiesRequest": {
        "properties": {
          "commitId": {
            "type": "string",
            "nullable": true
          },
          "mainRepoGitRef": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.projects.api.repositories.ReferenceDTO"
          },
          "hardwareTierId": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.hardwaretier.api.HardwareTierIdentifier"
          },
          "computeClusterProperties": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.jobs.interface.ComputeClusterConfigSpecDto"
          },
          "datasetSnapshots": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/domino.datasetrw.api.DatasetSnapshotRefDto"
            }
          },
          "environmentId": {
            "nullable": true,
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "environmentRevisionSpec": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "enum": [
                  "ActiveRevision",
                  "LatestRevision",
                  "RestrictedRevision"
                ]
              },
              {
                "type": "object",
                "required": [
                  "revisionId"
                ],
                "properties": {
                  "revisionId": {
                    "type": "string"
                  }
                }
              }
            ]
          },
          "externalVolumeMountIds": {
            "type": "array",
            "nullable": true,
            "items": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            }
          },
          "volumeSizeGiB": {
            "type": "number",
            "format": "double",
            "nullable": true
          }
        }
      },
      "domino.projects.templates.api.models.CustomerTemplateTagDto": {
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "name": {
            "type": "string"
          },
          "isApproved": {
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "name",
          "isApproved"
        ]
      },
      "domino.datasource.web.CreateDataSourceRequest": {
        "properties": {
          "authType": {
            "type": "string",
            "enum": [
              "AzureBasic",
              "Basic",
              "GCPBasic",
              "AWSIAMBasic",
              "AWSIAMBasicNoOverride",
              "AWSIAMRole",
              "AWSIAMRoleWithUsername",
              "OAuth",
              "PersonalToken",
              "UserOnly",
              "BasicOptional",
              "NoAuth",
              "ClientIdSecret",
              "OAuthToken",
              "APIKey"
            ]
          },
          "credentialType": {
            "type": "string",
            "enum": [
              "Individual",
              "Shared"
            ]
          },
          "config": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "dataSourceType": {
            "type": "string",
            "enum": [
              "ADLSConfig",
              "AzureBlobStorageConfig",
              "BigQueryConfig",
              "ClickHouseConfig",
              "DatabricksConfig",
              "DB2Config",
              "DruidConfig",
              "GCSConfig",
              "GenericJDBCConfig",
              "GenericS3Config",
              "GreenplumConfig",
              "IgniteConfig",
              "MariaDBConfig",
              "MongoDBConfig",
              "MySQLConfig",
              "NetezzaConfig",
              "OracleConfig",
              "PalantirConfig",
              "PineconeConfig",
              "PostgreSQLConfig",
              "QdrantConfig",
              "RedshiftConfig",
              "S3Config",
              "SAPHanaConfig",
              "SingleStoreConfig",
              "SQLServerConfig",
              "SnowflakeConfig",
              "SynapseConfig",
              "TabularS3GlueConfig",
              "TeradataConfig",
              "TrinoConfig",
              "VerticaConfig"
            ]
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "engineType": {
            "type": "string",
            "nullable": true,
            "enum": [
              "Domino",
              "Starburst"
            ]
          },
          "isEveryone": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "projectId": {
            "nullable": true,
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "secretCredential": {
            "type": "string",
            "nullable": true
          },
          "userIds": {
            "type": "array",
            "items": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            }
          },
          "visibleCredential": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "authType",
          "credentialType",
          "config",
          "dataSourceType",
          "isEveryone",
          "name",
          "userIds"
        ]
      },
      "domino.projects.api.repositories.responses.browse.RepoBrowserEntryDTO": {
        "properties": {
          "kind": {
            "type": "string",
            "enum": [
              "file",
              "dir"
            ]
          },
          "sha": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "modified": {
            "$ref": "#/components/schemas/domino.projects.api.repositories.responses.browse.CommitShortDTO"
          }
        },
        "required": [
          "kind",
          "sha",
          "name",
          "path",
          "modified"
        ]
      },
      "domino.datasetrw.api.DatasetRwFiletaskTaskDto": {
        "properties": {
          "taskId": {
            "type": "string"
          },
          "taskKey": {
            "type": "string"
          },
          "taskStatus": {
            "type": "string"
          }
        },
        "required": [
          "taskId",
          "taskKey",
          "taskStatus"
        ]
      },
      "domino.projects.templates.api.models.ProjectTemplateSizeDto": {
        "properties": {
          "value": {
            "type": "integer",
            "format": "int32"
          },
          "units": {
            "type": "string"
          }
        },
        "required": [
          "value",
          "units"
        ]
      },
      "domino.admin.usermanagement.api.UsersWithUsageMetadata": {
        "properties": {
          "offset": {
            "type": "integer",
            "format": "int32"
          },
          "limit": {
            "type": "integer",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "allowedActions": {
            "$ref": "#/components/schemas/domino.admin.usermanagement.api.AllowedActions"
          }
        },
        "required": [
          "offset",
          "limit",
          "totalCount",
          "allowedActions"
        ]
      },
      "domino.gruz.api.VerbatimBoundPort": {
        "properties": {
          "environmentVariableName": {
            "type": "string"
          },
          "assignPortFromRange": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.gruz.api.PortsRange"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "port": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "required": [
          "environmentVariableName"
        ]
      },
      "domino.datasetrw.api.DatasetSnapshotRefDto": {
        "properties": {
          "datasetId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "snapshotVersion": {
            "type": "integer",
            "format": "int32"
          },
          "datasetName": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "datasetId",
          "snapshotVersion"
        ]
      },
      "domino.projects.api.ProjectBillingTag": {
        "properties": {
          "projectId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "billingTag": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.projects.api.BillingTag"
          }
        },
        "required": [
          "projectId"
        ]
      },
      "domino.projects.api.repositories.responses.ProjectTemplateRepositoryDTO": {
        "properties": {
          "uri": {
            "type": "string"
          },
          "ref": {
            "$ref": "#/components/schemas/domino.projects.api.repositories.responses.ProjectTemplateReferenceDTO"
          },
          "serviceProvider": {
            "type": "string"
          }
        },
        "required": [
          "uri",
          "ref",
          "serviceProvider"
        ]
      },
      "domino.activity.api.ProjectGoalStageChangeActivityMetadata": {
        "properties": {
          "fromStage": {
            "$ref": "#/components/schemas/domino.activity.api.ProjectStage"
          },
          "toStage": {
            "$ref": "#/components/schemas/domino.activity.api.ProjectStage"
          },
          "title": {
            "type": "string"
          }
        },
        "required": [
          "fromStage",
          "toStage",
          "title"
        ]
      },
      "domino.files.interface.ProjectCodeSharedViewDto": {
        "properties": {
          "availableRevisions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.files.interface.RevisionShape"
            }
          },
          "commitId": {
            "type": "string"
          },
          "commitsRunLink": {
            "type": "string"
          },
          "filename": {
            "type": "string"
          },
          "isCommentPreviewEnabled": {
            "type": "boolean"
          },
          "projectId": {
            "type": "string"
          },
          "relativeBreadCrumbs": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          },
          "runNumberForCommit": {
            "type": "string"
          },
          "selectedRevision": {
            "$ref": "#/components/schemas/domino.files.interface.RevisionShape"
          }
        },
        "required": [
          "availableRevisions",
          "commitId",
          "commitsRunLink",
          "filename",
          "isCommentPreviewEnabled",
          "projectId",
          "relativeBreadCrumbs",
          "runNumberForCommit",
          "selectedRevision"
        ]
      },
      "domino.environments.api.CreateNewEnvironment": {
        "properties": {
          "newEnvironment": {
            "$ref": "#/components/schemas/domino.environments.api.NewEnvironment"
          },
          "newEnvironmentRevision": {
            "$ref": "#/components/schemas/domino.environments.api.NewEnvironmentRevision"
          }
        },
        "required": [
          "newEnvironment",
          "newEnvironmentRevision"
        ]
      },
      "domino.featurestore.model.OnlineStoreConfig": {
        "type": "object",
        "properties": {
          "fields": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/domino.featurestore.model.Field"
            }
          },
          "onlineStoreType": {
            "$ref": "#/components/schemas/domino.featurestore.model.OnlineStoreType"
          }
        },
        "required": [
          "onlineStoreType",
          "fields"
        ]
      },
      "domino.projects.templates.api.models.ExternalDataVolumeDto": {
        "properties": {
          "name": {
            "type": "string"
          }
        },
        "required": [
          "name"
        ]
      },
      "domino.projects.templates.api.models.TemplateHubsCollectionDto": {
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.projects.templates.api.models.TemplateHubDto"
            }
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          }
        },
        "required": [
          "items",
          "totalCount"
        ]
      },
      "domino.quota.api.QuotaActionMetadata": {
        "type": "object",
        "required": [
          "emails"
        ],
        "properties": {
          "emails": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "domino.modelmanager.api.ModelGoal": {
        "properties": {
          "modelVersionId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "goalId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "projectId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "modelVersion": {
            "type": "integer",
            "format": "int32"
          },
          "modelId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          }
        },
        "required": [
          "modelVersionId",
          "goalId",
          "projectId",
          "modelVersion",
          "modelId"
        ]
      },
      "domino.modelmanager.web.BuildModelImageApiRequest": {
        "properties": {
          "modelName": {
            "type": "string"
          },
          "environmentId": {
            "nullable": true,
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "projectId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "inferenceFunctionToCall": {
            "type": "string"
          },
          "inferenceFunctionFile": {
            "type": "string"
          },
          "modelId": {
            "nullable": true,
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "logHttpRequestResponse": {
            "type": "boolean"
          }
        },
        "required": [
          "modelName",
          "projectId",
          "inferenceFunctionToCall",
          "inferenceFunctionFile",
          "logHttpRequestResponse"
        ]
      },
      "domino.projectManagement.web.CommentRequest": {
        "properties": {
          "comment": {
            "type": "string"
          }
        },
        "required": [
          "comment"
        ]
      },
      "domino.projects.templates.api.models.TemplateBackingGitCodeSpecDto": {
        "properties": {
          "credentialId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "repoName": {
            "type": "string"
          },
          "repoOwnerName": {
            "type": "string"
          },
          "visibility": {
            "type": "string",
            "nullable": true,
            "enum": [
              "Public",
              "Private",
              "Internal"
            ]
          },
          "writeType": {
            "type": "string",
            "nullable": true,
            "enum": [
              "Create",
              "Import",
              "ForceImport"
            ]
          }
        },
        "required": [
          "credentialId",
          "repoName",
          "repoOwnerName"
        ]
      },
      "domino.datasource.web.GetAuthenticationStatusesRequest": {
        "properties": {
          "dataSourceIds": {
            "type": "array",
            "items": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            }
          }
        },
        "required": [
          "dataSourceIds"
        ]
      },
      "domino.notifications.ListNotificationsResult": {
        "type": "object",
        "required": [
          "pagination",
          "notifications"
        ],
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/domino.notifications.Pagination"
          },
          "notifications": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.notifications.UserNotification"
            }
          }
        }
      },
      "domino.provenance.api.ProvenanceCommit": {
        "properties": {
          "commitId": {
            "type": "string"
          },
          "branchName": {
            "type": "string"
          }
        },
        "required": [
          "commitId",
          "branchName"
        ]
      },
      "domino.workspace.api.WorkspaceSessionStatusInfo": {
        "properties": {
          "rawExecutionDisplayStatus": {
            "type": "string"
          },
          "rawExecutionDisplayStatusUpdatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "isLoading": {
            "type": "boolean"
          },
          "isRunning": {
            "type": "boolean"
          },
          "isStoppable": {
            "type": "boolean"
          },
          "isCompleting": {
            "type": "boolean"
          },
          "isFailed": {
            "type": "boolean"
          },
          "isSuccessful": {
            "type": "boolean"
          },
          "isCompleted": {
            "type": "boolean"
          }
        },
        "required": [
          "rawExecutionDisplayStatus",
          "rawExecutionDisplayStatusUpdatedAt",
          "isLoading",
          "isRunning",
          "isStoppable",
          "isCompleting",
          "isFailed",
          "isSuccessful",
          "isCompleted"
        ]
      },
      "domino.server.projects.api.ProjectGatewaySummary": {
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "name": {
            "type": "string"
          },
          "ownerId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "ownerName": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "visibility": {
            "type": "string",
            "enum": [
              "Public",
              "Searchable",
              "Private"
            ]
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.server.projects.api.ProjectGatewayTag"
            }
          },
          "runCounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.server.projects.api.ProjectGatewayRunCountForType"
            }
          },
          "latestResultTimestamp": {
            "nullable": true,
            "type": "string",
            "format": "date-time"
          },
          "latestResultRunId": {
            "nullable": true,
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "relationship": {
            "type": "string",
            "enum": [
              "Collaborating",
              "Popular",
              "OwnedAndCollaborating",
              "Suggested",
              "Owned"
            ]
          },
          "projectType": {
            "type": "string",
            "enum": [
              "Analytic",
              "DataSet",
              "Template"
            ]
          },
          "stageId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "status": {
            "$ref": "#/components/schemas/domino.server.projects.api.ProjectStatus"
          },
          "mainGitRepositoryUri": {
            "type": "string",
            "nullable": true
          },
          "serviceProvider": {
            "type": "string",
            "nullable": true,
            "enum": [
              "github",
              "gitlab",
              "githubEnterprise",
              "unknown",
              "gitlabEnterprise",
              "bitbucket",
              "bitbucketServer"
            ]
          },
          "isPinned": {
            "type": "boolean",
            "nullable": true
          },
          "details": {
            "$ref": "#/components/schemas/domino.server.projects.api.ProjectGatewayOverviewDetails"
          }
        },
        "required": [
          "id",
          "name",
          "ownerId",
          "ownerName",
          "description",
          "visibility",
          "tags",
          "runCounts",
          "relationship",
          "projectType",
          "stageId",
          "status",
          "details"
        ]
      },
      "domino.jobs.interface.EnvironmentWithRevisions": {
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "name": {
            "type": "string"
          },
          "revisions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.jobs.interface.EnvironmentRevisionRef"
            }
          },
          "isDefault": {
            "type": "boolean"
          },
          "isRestricted": {
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "name",
          "revisions",
          "isDefault",
          "isRestricted"
        ]
      },
      "domino.projects.templates.api.models.SourceProjectDto": {
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "included": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "integrations",
                "external_data_volumes",
                "launchers",
                "artifacts",
                "mounted_datasets",
                "imported_projects",
                "tags",
                "datasets",
                "code",
                "feature_stores",
                "imported_repositories",
                "goals",
                "apps",
                "data_sources"
              ]
            }
          },
          "name": {
            "type": "string"
          },
          "owner": {
            "$ref": "#/components/schemas/domino.projects.templates.api.models.ProjectOwnerDto"
          }
        },
        "required": [
          "id",
          "included",
          "name",
          "owner"
        ]
      },
      "domino.projects.templates.api.models.StringCollectionDto": {
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          }
        },
        "required": [
          "items",
          "totalCount"
        ]
      },
      "domino.environments.api.RevisionOverview": {
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "number": {
            "type": "integer",
            "format": "int32"
          },
          "status": {
            "type": "string",
            "nullable": true,
            "enum": [
              "Queued",
              "Pulling",
              "Succeeded",
              "Failed",
              "Building",
              "Pushing",
              "Killed",
              "Starting"
            ]
          },
          "url": {
            "type": "string"
          },
          "availableTools": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.environments.api.EnvironmentWorkspaceToolDefinition"
            }
          },
          "tags": {
            "type": "array",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "isRestricted": {
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "number",
          "url",
          "availableTools",
          "isRestricted"
        ]
      },
      "domino.datasetrw.api.DatasetRwDto": {
        "type": "object",
        "properties": {
          "sizeInBytes": {
            "nullable": true,
            "format": "int64",
            "type": "integer"
          },
          "lifecycleStatus": {
            "type": "string",
            "enum": [
              "Pending",
              "Deleted",
              "DeletionInProgress",
              "Failed",
              "Active",
              "MarkedForDeletion"
            ]
          },
          "author": {
            "nullable": true,
            "pattern": "^[0-9a-f]{24}$",
            "type": "string"
          },
          "snapshotIds": {
            "type": "array",
            "items": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            }
          },
          "description": {
            "nullable": true,
            "type": "string"
          },
          "statusLastUpdatedBy": {
            "pattern": "^[0-9a-f]{24}$",
            "type": "string"
          },
          "activeROSnapshotCount": {
            "nullable": true,
            "format": "int32",
            "type": "integer"
          },
          "tags": {
            "additionalProperties": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            },
            "type": "object"
          },
          "datasetPath": {
            "type": "string"
          },
          "datasetStorageId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "sizeStatus": {
            "nullable": true,
            "type": "string",
            "$ref": "#/components/schemas/domino.datasetrw.api.DatasetRwSizeStatus",
            "enum": [
              "Active",
              "Pending"
            ]
          },
          "readWriteSnapshotId": {
            "pattern": "^[0-9a-f]{24}$",
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "createdTime": {
            "format": "int64",
            "type": "integer"
          },
          "statusLastUpdatedTime": {
            "format": "int64",
            "type": "integer"
          },
          "ownerUsernames": {
            "nullable": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "id": {
            "pattern": "^[0-9a-f]{24}$",
            "type": "string"
          },
          "projectId": {
            "nullable": true,
            "pattern": "^[0-9a-f]{24}$",
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "snapshotIds",
          "tags",
          "createdTime",
          "lifecycleStatus",
          "statusLastUpdatedBy",
          "statusLastUpdatedTime",
          "readWriteSnapshotId",
          "datasetPath"
        ]
      },
      "domino.hardwaretier.api.HardwareTierPodCustomizationDto": {
        "properties": {
          "additionalRequests": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "additionalLimits": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "additionalAnnotations": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "additionalLabels": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "hugepages": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "capabilities": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "additionalRequests",
          "additionalLimits",
          "additionalAnnotations",
          "additionalLabels",
          "hugepages",
          "capabilities"
        ]
      },
      "domino.workspace.api.WorkspaceDatasetMountDto": {
        "properties": {
          "datasetId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "snapshot": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.workspace.api.WorkspaceDatasetSnapshotDto"
          },
          "datasetName": {
            "type": "string"
          },
          "containerPath": {
            "type": "string"
          },
          "isInput": {
            "type": "boolean"
          }
        },
        "required": [
          "datasetId",
          "datasetName",
          "containerPath",
          "isInput"
        ]
      },
      "domino.workspaces.api.Comment": {
        "properties": {
          "commentId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "commenter": {
            "$ref": "#/components/schemas/domino.workspaces.api.Commenter"
          },
          "commentBody": {
            "$ref": "#/components/schemas/domino.workspaces.api.CommentContent"
          },
          "created": {
            "type": "integer",
            "format": "epoch"
          }
        },
        "required": [
          "commentId",
          "commenter",
          "commentBody",
          "created"
        ]
      },
      "domino.mlflow.api.MlflowProjectInfo": {
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "name": {
            "type": "string"
          },
          "ownerId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "ownerName": {
            "type": "string"
          },
          "collaborators": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.projects.api.CollaboratorDTO"
            }
          }
        },
        "required": [
          "id",
          "name",
          "ownerId",
          "ownerName",
          "collaborators"
        ]
      },
      "domino.admin.usermanagement.api.AdminUserManagementUser": {
        "properties": {
          "idpId": {
            "type": "string"
          },
          "id": {
            "type": "string",
            "nullable": true
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "fullName": {
            "type": "string"
          },
          "username": {
            "type": "string"
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "roles": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "isActive": {
            "type": "boolean"
          },
          "isDominoEmployee": {
            "type": "boolean"
          },
          "licenseName": {
            "type": "string"
          },
          "createdAtTimestampMs": {
            "type": "integer",
            "format": "int64"
          },
          "metadata": {
            "$ref": "#/components/schemas/domino.admin.usermanagement.api.AdminUserManagementUserMetadata"
          }
        },
        "required": [
          "idpId",
          "firstName",
          "lastName",
          "fullName",
          "username",
          "roles",
          "isActive",
          "isDominoEmployee",
          "licenseName",
          "createdAtTimestampMs",
          "metadata"
        ]
      },
      "domino.modelmanager.api.SnowflakeExport": {
        "properties": {
          "snowflakeUdfName": {
            "type": "string"
          },
          "snowflakeUrl": {
            "type": "string"
          },
          "snowflakeUsername": {
            "type": "string"
          },
          "snowflakePassword": {
            "type": "string"
          },
          "snowflakeUserRole": {
            "type": "string"
          },
          "snowflakeWarehouseName": {
            "type": "string"
          },
          "snowflakeDatabaseName": {
            "type": "string"
          },
          "snowflakeSchemaName": {
            "type": "string"
          },
          "snowflakeStageName": {
            "type": "string"
          }
        },
        "required": [
          "snowflakeUdfName",
          "snowflakeUrl",
          "snowflakeUsername",
          "snowflakePassword",
          "snowflakeUserRole",
          "snowflakeWarehouseName",
          "snowflakeDatabaseName",
          "snowflakeSchemaName",
          "snowflakeStageName"
        ]
      },
      "domino.server.controlcenter.OrganizationStatsDTO": {
        "properties": {
          "id": {
            "type": "string"
          },
          "fullName": {
            "type": "string"
          },
          "totalComputeTimeInMillis": {
            "type": "integer",
            "format": "int64"
          },
          "totalComputeSpend": {
            "$ref": "#/components/schemas/domino.server.controlcenter.MoneyDTO"
          },
          "numberOfRuns": {
            "type": "integer",
            "format": "int32"
          },
          "numberOfProjectsWithRuns": {
            "type": "integer",
            "format": "int32"
          }
        },
        "required": [
          "id",
          "fullName",
          "totalComputeTimeInMillis",
          "totalComputeSpend",
          "numberOfRuns",
          "numberOfProjectsWithRuns"
        ]
      },
      "domino.server.projects.api.MainRepositoryDetails": {
        "properties": {
          "uri": {
            "type": "string"
          },
          "id": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "serviceProvider": {
            "type": "string",
            "enum": [
              "github",
              "gitlab",
              "githubEnterprise",
              "unknown",
              "gitlabEnterprise",
              "bitbucket",
              "bitbucketServer"
            ]
          }
        },
        "required": [
          "uri",
          "id",
          "serviceProvider"
        ]
      },
      "domino.projects.api.AssetPortfolioSet": {
        "properties": {
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "assetPortfolios": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.projects.api.AssetPortfolioElement"
            }
          },
          "filter": {
            "$ref": "#/components/schemas/domino.projects.api.AssetPortfolioPaginationFilter"
          }
        },
        "required": [
          "totalCount",
          "assetPortfolios",
          "filter"
        ]
      },
      "domino.jobs.interface.JobsTimelineDiagnosticStatRecord": {
        "properties": {
          "name": {
            "type": "string"
          },
          "value": {
            "type": "number",
            "format": "double"
          }
        },
        "required": [
          "name",
          "value"
        ]
      },
      "domino.guardrails.interface.DeliverableCommentsSummary": {
        "type": "object",
        "required": [
          "deliverableCommentsCount",
          "artifactCommentsCountMap"
        ],
        "properties": {
          "deliverableCommentsCount": {
            "type": "integer"
          },
          "artifactCommentsCountMap": {
            "type": "object",
            "additionalProperties": {
              "type": "integer"
            }
          }
        }
      },
      "domino.admin.usermanagement.api.AllowedActions": {
        "properties": {
          "createUsers": {
            "type": "boolean"
          },
          "enableDisableUsers": {
            "type": "boolean"
          },
          "manageFeatureFlags": {
            "type": "boolean"
          },
          "markUnmarkUserAsDominoEmployee": {
            "type": "boolean"
          },
          "resetPasswords": {
            "type": "boolean"
          },
          "saveRoles": {
            "type": "boolean"
          },
          "viewExternalOrgs": {
            "type": "boolean"
          },
          "viewDataAnalystColumn": {
            "type": "boolean"
          }
        },
        "required": [
          "createUsers",
          "enableDisableUsers",
          "manageFeatureFlags",
          "markUnmarkUserAsDominoEmployee",
          "resetPasswords",
          "saveRoles",
          "viewExternalOrgs",
          "viewDataAnalystColumn"
        ]
      },
      "domino.projects.templates.api.models.TemplateOwnerDto": {
        "properties": {
          "name": {
            "type": "string"
          },
          "link": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "name"
        ]
      },
      "domino.jobs.web.ArchiveComment": {
        "properties": {
          "commentId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          }
        },
        "required": [
          "commentId"
        ]
      },
      "domino.jobs.interface.ResolvedJobProperties": {
        "properties": {
          "commitId": {
            "type": "string"
          },
          "mainRepoGitRef": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.projects.api.repositories.ReferenceDTO"
          },
          "hardwareTierId": {
            "$ref": "#/components/schemas/domino.hardwaretier.api.HardwareTierIdentifier"
          },
          "computeClusterProperties": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.jobs.interface.ComputeClusterConfigSpecWithSpecificRevisionDto"
          },
          "datasetSnapshots": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.datasetrw.api.DatasetSnapshotRefDto"
            }
          },
          "environmentId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "environmentRevisionSpec": {
            "$ref": "#/components/schemas/domino.environments.api.SpecificRevision"
          },
          "externalVolumeMountIds": {
            "type": "array",
            "items": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            }
          },
          "volumeSizeGiB": {
            "type": "number",
            "format": "double"
          }
        },
        "required": [
          "commitId",
          "hardwareTierId",
          "datasetSnapshots",
          "environmentId",
          "environmentRevisionSpec",
          "externalVolumeMountIds",
          "volumeSizeGiB"
        ]
      },
      "domino.jobs.web.LinkJobtoGoalRequest": {
        "properties": {
          "goalId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          }
        },
        "required": [
          "goalId"
        ]
      },
      "domino.datamount.api.DataMountDto": {
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "volumeType": {
            "type": "string",
            "enum": [
              "Nfs",
              "Smb",
              "Efs",
              "Generic"
            ]
          },
          "pvcName": {
            "type": "string"
          },
          "pvId": {
            "type": "string"
          },
          "mountPath": {
            "type": "string"
          },
          "users": {
            "type": "array",
            "items": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            }
          },
          "projects": {
            "type": "array",
            "items": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            }
          },
          "readOnly": {
            "type": "boolean"
          },
          "isPublic": {
            "type": "boolean"
          },
          "isRegistered": {
            "type": "boolean"
          },
          "status": {
            "type": "string",
            "nullable": true
          },
          "dataPlanes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.dataplane.DataPlaneDto"
            }
          },
          "projectsInfo": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/domino.datamount.api.DataMountProjectInfoDto"
            }
          }
        },
        "required": [
          "id",
          "name",
          "volumeType",
          "pvcName",
          "pvId",
          "mountPath",
          "users",
          "projects",
          "readOnly",
          "isPublic",
          "isRegistered",
          "dataPlanes"
        ]
      },
      "domino.projects.api.ImportGitFilesSpec": {
        "properties": {
          "targetRepoName": {
            "type": "string"
          },
          "targetRepoOwnerName": {
            "type": "string"
          },
          "forceRequested": {
            "type": "boolean"
          }
        },
        "required": [
          "targetRepoName",
          "targetRepoOwnerName",
          "forceRequested"
        ]
      },
      "domino.executor.api.ListBranchesResponseDto": {
        "properties": {
          "succeeded": {
            "type": "boolean"
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "branches": {
            "$ref": "#/components/schemas/domino.executor.api.RepositoryBranchList"
          }
        },
        "required": [
          "succeeded",
          "branches"
        ]
      },
      "domino.server.controlcenter.UserStatsDTO": {
        "properties": {
          "id": {
            "type": "string"
          },
          "fullName": {
            "type": "string"
          },
          "totalComputeTimeInMillis": {
            "type": "integer",
            "format": "int64"
          },
          "totalComputeSpend": {
            "$ref": "#/components/schemas/domino.server.controlcenter.MoneyDTO"
          },
          "numberOfRuns": {
            "type": "integer",
            "format": "int32"
          },
          "numberOfProjectsWithRuns": {
            "type": "integer",
            "format": "int32"
          },
          "username": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "fullName",
          "totalComputeTimeInMillis",
          "totalComputeSpend",
          "numberOfRuns",
          "numberOfProjectsWithRuns",
          "username"
        ]
      },
      "domino.projects.api.SingleProjectPermissionResult": {
        "properties": {
          "canFork": {
            "type": "boolean"
          },
          "canCopy": {
            "type": "boolean"
          }
        },
        "required": [
          "canFork",
          "canCopy"
        ]
      },
      "domino.nucleus.modelproduct.models.UsageStatisticsRecorded": {
        "properties": {
          "productId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "timestampInSec": {
            "type": "integer",
            "format": "int64"
          }
        },
        "required": [
          "productId",
          "timestampInSec"
        ]
      },
      "domino.datasource.web.UpdateUsersRequest": {
        "properties": {
          "isEveryone": {
            "type": "boolean"
          },
          "userIds": {
            "type": "array",
            "items": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            }
          }
        },
        "required": [
          "isEveryone",
          "userIds"
        ]
      },
      "domino.projectManagement.web.UnlinkFileFromGoalRequest": {
        "properties": {
          "fileName": {
            "type": "string"
          },
          "commitId": {
            "type": "string"
          },
          "projectId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "goalId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          }
        },
        "required": [
          "fileName",
          "commitId",
          "projectId",
          "goalId"
        ]
      },
      "domino.workspace.api.ComputeClusterConfigDto": {
        "properties": {
          "clusterType": {
            "$ref": "#/components/schemas/ComputeClusterType"
          },
          "computeEnvironmentId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "computeEnvironmentRevisionSpec": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "enum": [
                  "ActiveRevision",
                  "LatestRevision",
                  "RestrictedRevision"
                ]
              },
              {
                "type": "object",
                "required": [
                  "revisionId"
                ],
                "properties": {
                  "revisionId": {
                    "type": "string"
                  }
                }
              }
            ]
          },
          "masterHardwareTierId": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.hardwaretier.api.HardwareTierIdentifier"
          },
          "workerCount": {
            "type": "integer",
            "format": "int32"
          },
          "maxWorkerCount": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "workerHardwareTierId": {
            "$ref": "#/components/schemas/domino.hardwaretier.api.HardwareTierIdentifier"
          },
          "workerStorage": {
            "nullable": true,
            "$ref": "#/components/schemas/Information"
          },
          "extraConfigs": {
            "nullable": true,
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "required": [
          "clusterType",
          "computeEnvironmentId",
          "workerCount",
          "workerHardwareTierId"
        ]
      },
      "domino.datasetrw.api.DatasetRwGrant": {
        "properties": {
          "targetId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "targetRole": {
            "type": "string",
            "enum": [
              "DatasetRwOwner",
              "DatasetRwEditor",
              "DatasetRwReader"
            ]
          }
        },
        "required": [
          "targetId",
          "targetRole"
        ]
      },
      "domino.common.modelproduct.AppCodeInfoRepositoryDto": {
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "linkText": {
            "type": "string"
          },
          "fullUrl": {
            "type": "string"
          },
          "commit": {
            "type": "string",
            "nullable": true
          },
          "commitResourceLink": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "id",
          "linkText",
          "fullUrl"
        ]
      },
      "domino.projects.api.EnvironmentOwner": {
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "username": {
            "type": "string"
          },
          "environmentOwnerType": {
            "type": "string",
            "enum": [
              "Organization",
              "Individual"
            ]
          }
        },
        "required": [
          "id",
          "username",
          "environmentOwnerType"
        ]
      },
      "domino.provenance.api.ProvenanceImportedProject": {
        "properties": {
          "projectId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "projectName": {
            "type": "string"
          },
          "ownerId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "directoryName": {
            "type": "string",
            "nullable": true
          },
          "commitId": {
            "type": "string"
          },
          "release": {
            "nullable": true,
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          }
        },
        "required": [
          "projectId",
          "projectName",
          "ownerId",
          "commitId"
        ]
      },
      "domino.workspaces.api.PaginationFilter": {
        "properties": {
          "limit": {
            "type": "integer",
            "format": "int32"
          },
          "offset": {
            "type": "integer",
            "format": "int32"
          },
          "latestTimeNano": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "limit",
          "offset"
        ]
      },
      "domino.admin.interface.CreateServiceAccountRequest": {
        "properties": {
          "username": {
            "type": "string"
          },
          "email": {
            "type": "string"
          }
        },
        "required": [
          "username",
          "email"
        ]
      },
      "domino.jobs.web.StartJobRequest": {
        "properties": {
          "projectId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "commandToRun": {
            "type": "string"
          },
          "commitId": {
            "type": "string",
            "nullable": true
          },
          "mainRepoGitRef": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.projects.api.repositories.ReferenceDTO"
          },
          "overrideHardwareTierId": {
            "type": "string",
            "nullable": true
          },
          "onDemandSparkClusterProperties": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.projects.api.OnDemandSparkClusterPropertiesSpec"
          },
          "computeClusterProperties": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.jobs.interface.ComputeClusterConfigSpecDto"
          },
          "environmentId": {
            "nullable": true,
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "environmentRevisionSpec": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "enum": [
                  "ActiveRevision",
                  "LatestRevision",
                  "RestrictedRevision"
                ]
              },
              {
                "type": "object",
                "required": [
                  "revisionId"
                ],
                "properties": {
                  "revisionId": {
                    "type": "string"
                  }
                }
              }
            ]
          },
          "externalVolumeMounts": {
            "type": "array",
            "nullable": true,
            "items": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            }
          },
          "overrideVolumeSizeGiB": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "snapshotDatasetsOnCompletion": {
            "type": "boolean",
            "nullable": true
          }
        },
        "required": [
          "projectId",
          "commandToRun"
        ]
      },
      "domino.dataset.api.DatasetSnapshotDto": {
        "type": "object",
        "properties": {
          "resourceId": {
            "type": "string"
          },
          "creationTime": {
            "format": "int64",
            "type": "integer"
          },
          "author": {
            "nullable": true,
            "type": "string"
          },
          "deletedByUser": {
            "nullable": true,
            "type": "string"
          },
          "description": {
            "nullable": true,
            "type": "string"
          },
          "lastUsedTime": {
            "nullable": true,
            "format": "int64",
            "type": "integer"
          },
          "version": {
            "format": "int32",
            "type": "integer"
          },
          "labels": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          },
          "markedForDeletionTime": {
            "nullable": true,
            "format": "int64",
            "type": "integer"
          },
          "deleted": {
            "type": "boolean"
          },
          "deleteTime": {
            "nullable": true,
            "format": "int64",
            "type": "integer"
          },
          "storageSize": {
            "format": "int64",
            "type": "integer"
          },
          "datasetId": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "isPartialSize": {
            "type": "boolean"
          },
          "status": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "resourceId",
          "datasetId",
          "version",
          "labels",
          "creationTime",
          "status",
          "deleted",
          "storageSize",
          "isPartialSize"
        ]
      },
      "domino.nucleus.dataset.ui.DatasetViewModel": {
        "type": "object",
        "properties": {
          "snapshotIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "name": {
            "type": "string"
          },
          "description": {
            "nullable": true,
            "type": "string"
          },
          "projectOwner": {
            "nullable": true,
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "projectName": {
            "nullable": true,
            "type": "string"
          },
          "tags": {
            "type": "object"
          }
        },
        "required": [
          "id",
          "name",
          "snapshotIds",
          "tags"
        ]
      },
      "domino.nucleus.lib.auth.GlobalBannerSettings": {
        "properties": {
          "isClosable": {
            "type": "boolean"
          },
          "reappearTimeAfterCloseInSec": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "content": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "isClosable"
        ]
      },
      "domino.modelmanager.api.ModelExportLogs": {
        "properties": {
          "modelId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "modelVersionId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "status": {
            "type": "string",
            "enum": [
              "exporting",
              "preparing",
              "complete",
              "not_triggered",
              "failed"
            ]
          },
          "sinceTimeNano": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "logs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.modelmanager.api.LogLine"
            }
          }
        },
        "required": [
          "modelId",
          "modelVersionId",
          "status",
          "logs"
        ]
      },
      "domino.projects.api.ProjectSummaries": {
        "properties": {
          "summaries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.projects.api.ProjectSummary"
            }
          }
        },
        "required": [
          "summaries"
        ]
      },
      "domino.jobs.web.JobEvents": {
        "properties": {
          "jobsUsageEvent": {
            "$ref": "#/components/schemas/domino.jobs.web.JobsUsageSocketEvent"
          },
          "jobStatusChangeEvent": {
            "$ref": "#/components/schemas/domino.jobs.web.JobStatusChangeSocketEvent"
          }
        },
        "required": [
          "jobsUsageEvent",
          "jobStatusChangeEvent"
        ]
      },
      "domino.hardwaretier.api.HardwareTierGpuConfigurationDto": {
        "properties": {
          "numberOfGpus": {
            "type": "integer",
            "format": "int32"
          },
          "gpuKey": {
            "type": "string"
          }
        },
        "required": [
          "numberOfGpus",
          "gpuKey"
        ]
      },
      "domino.server.controlcenter.TopItemDTO": {
        "description": "Represents one of the values for some object for which a specific metric has one of the top values",
        "type": "object",
        "properties": {
          "unit": {
            "description": "What units this value is in (e.g., \"$\", \"hours\")",
            "type": "string"
          },
          "name": {
            "description": "Name of the object for which this metric is at the top",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier of the ranked metric value",
            "type": "string"
          },
          "value": {
            "format": "double",
            "description": "What is the current value of this metric",
            "type": "number"
          },
          "variation": {
            "format": "double",
            "description": "Derivative of the value between the previous state and current",
            "type": "number"
          },
          "username": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "id",
          "name",
          "value",
          "unit",
          "variation"
        ]
      },
      "domino.workspaces.web.ArchiveWorkspaceInput": {
        "properties": {
          "workspaceId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "projectId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          }
        },
        "required": [
          "workspaceId",
          "projectId"
        ]
      },
      "domino.projects.web.TransferProjectOwnership": {
        "properties": {
          "projectId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "newOwnerUsernameOrEmail": {
            "type": "string"
          }
        },
        "required": [
          "projectId",
          "newOwnerUsernameOrEmail"
        ]
      },
      "domino.environments.api.EnvironmentWorkspaceToolDefinition": {
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "iconUrl": {
            "type": "string",
            "nullable": true
          },
          "start": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "proxyConfig": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.environments.api.ProxyConfig"
          },
          "supportedFileExtensions": {
            "type": "array",
            "nullable": true,
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "id",
          "name",
          "title",
          "start"
        ]
      },
      "domino.projects.api.ProjectGoalStageAndStatus": {
        "properties": {
          "goalId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "isCompleted": {
            "type": "boolean"
          },
          "stage": {
            "$ref": "#/components/schemas/domino.projects.api.ProjectStage"
          },
          "lastStageUpdatedAt": {
            "type": "integer",
            "format": "epoch"
          }
        },
        "required": [
          "goalId",
          "isCompleted",
          "stage",
          "lastStageUpdatedAt"
        ]
      },
      "domino.workspace.web.UpdateWorkspaceRequest": {
        "properties": {
          "name": {
            "type": "string"
          },
          "environmentId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "environmentRevisionSpec": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "enum": [
                  "ActiveRevision",
                  "LatestRevision",
                  "RestrictedRevision"
                ]
              },
              {
                "type": "object",
                "required": [
                  "revisionId"
                ],
                "properties": {
                  "revisionId": {
                    "type": "string"
                  }
                }
              }
            ]
          },
          "hardwareTierId": {
            "$ref": "#/components/schemas/domino.hardwaretier.api.HardwareTierIdentifier"
          },
          "tools": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "clusterConfig": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.workspace.api.WorkspaceClusterConfigDto"
          },
          "computeClusterConfig": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.workspace.api.ComputeClusterConfigDto"
          }
        },
        "required": [
          "name",
          "environmentId",
          "hardwareTierId",
          "tools"
        ]
      },
      "domino.projects.api.ProjectsBillingTags": {
        "properties": {
          "projectsBillingTags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.projects.api.ProjectBillingTag"
            }
          }
        },
        "required": [
          "projectsBillingTags"
        ]
      },
      "domino.jobs.interface.ArtifactsStartStateDto": {
        "properties": {
          "projectArtifacts": {
            "$ref": "#/components/schemas/domino.jobs.interface.ArtifactsObjectDto"
          },
          "importedProjectArtifacts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.jobs.interface.ArtifactsObjectDto"
            }
          }
        },
        "required": [
          "projectArtifacts",
          "importedProjectArtifacts"
        ]
      },
      "domino.featurestore.web.UpdateFeatureViewCommentRequest": {
        "properties": {
          "commentId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "commentContent": {
            "type": "string"
          }
        },
        "required": [
          "commentId",
          "commentContent"
        ]
      },
      "domino.projects.api.Comment": {
        "properties": {
          "commentId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "commenter": {
            "$ref": "#/components/schemas/domino.projects.api.Commenter"
          },
          "commentBody": {
            "type": "string"
          },
          "created": {
            "type": "integer",
            "format": "epoch"
          },
          "updatedAt": {
            "type": "integer",
            "format": "epoch"
          }
        },
        "required": [
          "commentId",
          "commenter",
          "commentBody",
          "created",
          "updatedAt"
        ]
      },
      "domino.guardrails.interface.DeliverableCommentThreadDto": {
        "type": "object",
        "required": [
          "id",
          "deliverableId",
          "projectId",
          "threadStatus",
          "comments"
        ],
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "deliverableId": {
            "type": "string"
          },
          "projectId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "artifactId": {
            "type": "string"
          },
          "approvalId": {
            "type": "string"
          },
          "threadStatus": {
            "type": "string",
            "enum": [
              "Open",
              "Resolved"
            ]
          },
          "comments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Comment"
            }
          }
        }
      },
      "domino.workspace.api.ref.UserRefDto": {
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "userName": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "userName"
        ]
      },
      "domino.environments.api.EnvProjectPagination": {
        "properties": {
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "pageNo": {
            "type": "integer",
            "format": "int32"
          }
        },
        "required": [
          "pageSize",
          "pageNo"
        ]
      },
      "domino.dataplane.DataPlaneFormDto": {
        "properties": {
          "name": {
            "type": "string"
          },
          "namespace": {
            "type": "string"
          },
          "configuration": {
            "$ref": "#/components/schemas/domino.dataplane.DataPlaneConfiguration"
          }
        },
        "required": [
          "name",
          "namespace",
          "configuration"
        ]
      },
      "domino.projectManagement.web.SetAssigneeForGoal": {
        "properties": {
          "assigneeId": {
            "nullable": true,
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          }
        }
      },
      "domino.admin.interface.ComputeNodeOverview": {
        "properties": {
          "name": {
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/domino.admin.interface.ComputeNodeStatus"
          },
          "utilization": {
            "$ref": "#/components/schemas/domino.admin.interface.ComputeNodeUtilization"
          }
        },
        "required": [
          "name",
          "status",
          "utilization"
        ]
      },
      "domino.admin.interface.ExecutionOverview": {
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "computeGridType": {
            "type": "string",
            "enum": [
              "ClassicOnPremises",
              "ClassicAWS",
              "Kubernetes"
            ]
          },
          "projectId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "projectIdentifier": {
            "$ref": "#/components/schemas/domino.common.ProjectId"
          },
          "startingUserId": {
            "nullable": true,
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "startingUsername": {
            "type": "string",
            "nullable": true
          },
          "hardwareTier": {
            "$ref": "#/components/schemas/domino.admin.interface.HardwareTierOverview"
          },
          "status": {
            "type": "string"
          },
          "executionUnits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.computegrid.ExecutionUnitOverview"
            }
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "workloadType": {
            "type": "string"
          },
          "computeClusterOverviews": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.admin.interface.ComputeClusterOverview"
            }
          },
          "onDemandSparkClusterProperties": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.admin.interface.OnDemandSparkClusterOverview"
          },
          "onDemandSparkExecutionUnits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.admin.interface.OnDemandSparkExecutionUnitOverview"
            }
          }
        },
        "required": [
          "id",
          "computeGridType",
          "projectId",
          "projectIdentifier",
          "hardwareTier",
          "status",
          "executionUnits",
          "created",
          "workloadType",
          "computeClusterOverviews",
          "onDemandSparkExecutionUnits"
        ]
      },
      "domino.workspaces.web.AutoSyncFrequencyRequest": {
        "properties": {
          "projectId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "timeInMinutes": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "enableAutoSync": {
            "type": "boolean"
          }
        },
        "required": [
          "projectId",
          "enableAutoSync"
        ]
      },
      "domino.datasetrw.web.CreateDatasetRequest": {
        "properties": {
          "datasetName": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "projectId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "usedForModelMonitoring": {
            "type": "boolean"
          },
          "grants": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/domino.datasetrw.api.DatasetRwGrant"
            }
          },
          "datasetStorageId": {
            "nullable": true,
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          }
        },
        "required": [
          "datasetName",
          "projectId",
          "usedForModelMonitoring"
        ]
      },
      "domino.provenance.api.SyncOperationInfo": {
        "properties": {
          "syncOperationId": {
            "type": "string"
          },
          "syncOperationType": {
            "$ref": "#/components/schemas/SyncOperationType"
          }
        },
        "required": [
          "syncOperationId",
          "syncOperationType"
        ]
      },
      "Information": {
        "type": "object",
        "properties": {
          "value": {
            "type": "number",
            "description": "Number being stored"
          },
          "unit": {
            "$ref": "#/components/schemas/StorageUnit"
          }
        },
        "required": [
          "value",
          "unit"
        ]
      },
      "domino.computecluster.api.ComputeClusterType.Value": {
        "properties": {}
      },
      "domino.workspaces.api.LogSet": {
        "properties": {
          "logContent": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.workspaces.api.LogContent"
            }
          },
          "isComplete": {
            "type": "boolean"
          },
          "pagination": {
            "$ref": "#/components/schemas/domino.workspaces.api.PaginationFilter"
          }
        },
        "required": [
          "logContent",
          "isComplete",
          "pagination"
        ]
      },
      "domino.admin.interface.GlobalBanner": {
        "properties": {
          "content": {
            "type": "string"
          },
          "reappearTimeAfterCloseInSec": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "isClosable": {
            "type": "boolean"
          }
        },
        "required": [
          "content",
          "isClosable"
        ]
      },
      "domino.projectManagement.api.PmComment": {
        "properties": {
          "id": {
            "$ref": "#/components/schemas/domino.projectManagement.api.PmId"
          },
          "commentBody": {
            "type": "string"
          },
          "created": {
            "type": "integer",
            "format": "epoch"
          },
          "commenter": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.projectManagement.api.PmUser"
          },
          "updatedAt": {
            "type": "integer",
            "format": "epoch"
          },
          "dominoEntity": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.projectManagement.api.DominoEntity"
          }
        },
        "required": [
          "id",
          "commentBody",
          "created",
          "updatedAt"
        ]
      },
      "domino.projects.templates.api.models.NamedOptionalLink": {
        "properties": {
          "name": {
            "type": "string"
          },
          "link": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "name"
        ]
      },
      "domino.provenance.api.SortableFields.Value": {
        "properties": {}
      },
      "domino.gruz.api.HttpProxyConfig": {
        "properties": {
          "port": {
            "type": "integer",
            "format": "int32"
          },
          "internalPath": {
            "type": "string"
          },
          "rewrite": {
            "type": "boolean"
          },
          "requireSubdomain": {
            "type": "boolean"
          }
        },
        "required": [
          "port",
          "internalPath",
          "rewrite",
          "requireSubdomain"
        ]
      },
      "domino.projects.templates.api.models.ProjectTemplateEnvRevDetailsDto": {
        "properties": {
          "environmentId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "revisionNumber": {
            "type": "integer",
            "format": "int32"
          },
          "link": {
            "type": "string"
          }
        },
        "required": [
          "environmentId",
          "revisionNumber",
          "link"
        ]
      },
      "domino.datasetrw.web.CreateSnapshotRequest": {
        "properties": {
          "relativeFilePaths": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "datasetId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          }
        },
        "required": [
          "relativeFilePaths",
          "datasetId"
        ]
      },
      "domino.jobs.interface.CodeInfoRepositoryDto": {
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "linkText": {
            "type": "string"
          },
          "fullUrl": {
            "type": "string"
          },
          "commit": {
            "type": "string",
            "nullable": true
          },
          "commitResourceLink": {
            "type": "string",
            "nullable": true
          },
          "branch": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "id",
          "linkText",
          "fullUrl"
        ]
      },
      "Comment": {
        "type": "object",
        "required": [
          "commentId",
          "commenter",
          "commentBody",
          "createdAt",
          "updatedAt"
        ],
        "properties": {
          "commentId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "commenter": {
            "$ref": "#/components/schemas/Commenter"
          },
          "commentBody": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "domino.quota.api.QuotaType": {
        "type": "string",
        "description": "type of quota",
        "enum": [
          "Global",
          "Override"
        ]
      },
      "domino.executor.api.BranchEntryDto": {
        "properties": {
          "name": {
            "type": "string"
          }
        },
        "required": [
          "name"
        ]
      },
      "domino.common.modelproduct.EnvironmentDetails": {
        "properties": {
          "environmentRevisionId": {
            "nullable": true,
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "environmentName": {
            "type": "string"
          },
          "revisionNumber": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "required": [
          "environmentName"
        ]
      },
      "domino.featurestore.api.FeatureStoreDto": {
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "ownerId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "creationTime": {
            "type": "string",
            "format": "date-time"
          },
          "offlineStoreType": {
            "type": "string",
            "enum": [
              "File",
              "BigQuery",
              "Redshift",
              "Snowflake"
            ]
          },
          "offlineStoreConfig": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "onlineStoreType": {
            "type": "string",
            "enum": [
              "Snowflake",
              "DynamoDB",
              "Redis",
              "Datastore",
              "Bigtable",
              "SQLite"
            ]
          },
          "onlineStoreConfig": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "gitRepo": {
            "type": "string"
          },
          "gitServiceProvider": {
            "type": "string",
            "enum": [
              "github",
              "gitlab",
              "githubEnterprise",
              "unknown",
              "gitlabEnterprise",
              "bitbucket",
              "bitbucketServer"
            ]
          },
          "gitCommitHash": {
            "type": "string"
          },
          "projectIds": {
            "type": "array",
            "items": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            }
          },
          "lastUpdatedTime": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "type": "string",
            "enum": [
              "Active",
              "Deleted"
            ]
          },
          "syncStatus": {
            "type": "string",
            "enum": [
              "Successful",
              "Failed",
              "InProgress"
            ]
          },
          "runId": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "id",
          "ownerId",
          "creationTime",
          "offlineStoreType",
          "offlineStoreConfig",
          "onlineStoreType",
          "onlineStoreConfig",
          "gitRepo",
          "gitServiceProvider",
          "gitCommitHash",
          "projectIds",
          "lastUpdatedTime",
          "status",
          "syncStatus"
        ]
      },
      "domino.files.interface.ProjectFile": {
        "properties": {
          "path": {
            "type": "string"
          },
          "lastModified": {
            "type": "integer",
            "format": "int64"
          },
          "size": {
            "type": "integer",
            "format": "int64"
          },
          "key": {
            "type": "string"
          },
          "goalIds": {
            "type": "array",
            "items": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            }
          }
        },
        "required": [
          "path",
          "lastModified",
          "size",
          "key",
          "goalIds"
        ]
      },
      "domino.projects.web.UpdateProjectGoalTitle": {
        "properties": {
          "title": {
            "type": "string"
          }
        },
        "required": [
          "title"
        ]
      },
      "domino.activity.api.ProjectStatus": {
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "active",
              "complete"
            ]
          },
          "isBlocked": {
            "type": "boolean"
          },
          "blockedReason": {
            "type": "string",
            "nullable": true
          },
          "completedMessage": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "status",
          "isBlocked"
        ]
      },
      "domino.jobs.interface.ComputeClusterConfigSpecDto": {
        "properties": {
          "clusterType": {
            "$ref": "#/components/schemas/ComputeClusterType"
          },
          "computeEnvironmentId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "computeEnvironmentRevisionSpec": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "enum": [
                  "ActiveRevision",
                  "LatestRevision",
                  "RestrictedRevision"
                ]
              },
              {
                "type": "object",
                "required": [
                  "revisionId"
                ],
                "properties": {
                  "revisionId": {
                    "type": "string"
                  }
                }
              }
            ]
          },
          "masterHardwareTierId": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.hardwaretier.api.HardwareTierIdentifier"
          },
          "workerCount": {
            "type": "integer",
            "format": "int32"
          },
          "maxWorkerCount": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "workerHardwareTierId": {
            "$ref": "#/components/schemas/domino.hardwaretier.api.HardwareTierIdentifier"
          },
          "workerStorage": {
            "nullable": true,
            "$ref": "#/components/schemas/Information"
          },
          "extraConfigs": {
            "nullable": true,
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "required": [
          "clusterType",
          "computeEnvironmentId",
          "workerCount",
          "workerHardwareTierId"
        ]
      },
      "domino.projects.api.ProjectSettingsExport": {
        "properties": {
          "exportEnvironmentVariables": {
            "type": "boolean"
          },
          "exportFiles": {
            "type": "boolean"
          },
          "exportPackageType": {
            "type": "string",
            "nullable": true,
            "enum": [
              "Python",
              "R"
            ]
          }
        },
        "required": [
          "exportEnvironmentVariables",
          "exportFiles"
        ]
      },
      "domino.workspace.api.git.PullReposResponseDto": {
        "properties": {
          "succeeded": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          }
        },
        "required": [
          "succeeded",
          "message"
        ]
      },
      "domino.activity.api.GoalAssignee": {
        "properties": {
          "id": {
            "nullable": true,
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "name"
        ]
      },
      "domino.projects.templates.api.models.NewSettingsDto": {
        "properties": {
          "defaultEnvironmentRevision": {
            "$ref": "#/components/schemas/domino.projects.templates.api.models.NewEnvironmentRevisionDto"
          },
          "defaultHardwareTier": {
            "$ref": "#/components/schemas/domino.projects.templates.api.models.NewHardwareTierDto"
          },
          "computeClusterEnvironmentRevision": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.projects.templates.api.models.NewEnvironmentRevisionDto"
          }
        },
        "required": [
          "defaultEnvironmentRevision",
          "defaultHardwareTier"
        ]
      },
      "domino.datasetrw.api.DatasetRwUploadSessionDto": {
        "properties": {
          "uploadKey": {
            "type": "string"
          },
          "lastTouched": {
            "type": "integer",
            "format": "epoch"
          },
          "datasetId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "id": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          }
        },
        "required": [
          "uploadKey",
          "lastTouched",
          "datasetId",
          "id"
        ]
      },
      "domino.activity.api.ProjectGoalAssignmentChangeActivityMetadata": {
        "properties": {
          "assignee": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string"
          }
        },
        "required": [
          "title"
        ]
      },
      "domino.computegrid.ComputeClusterFileSyncResponse": {
        "properties": {
          "started": {
            "type": "boolean"
          },
          "reason": {
            "type": "string",
            "enum": [
              "Started",
              "FailedToStart",
              "AlreadySyncing",
              "ClusterNotReady"
            ]
          },
          "message": {
            "type": "string"
          },
          "startTimestamp": {
            "nullable": true,
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "started",
          "reason",
          "message"
        ]
      },
      "domino.jobs.interface.ValidJobProperties": {
        "properties": {
          "mainRepoGitRefs": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/domino.projects.api.repositories.ReferenceDTO"
            }
          },
          "hardwareTiers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.jobs.interface.HardwareTierRef"
            }
          },
          "datasetSnapshots": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.datasetrw.api.DatasetSnapshotRefDto"
            }
          },
          "environments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.jobs.interface.EnvironmentWithRevisions"
            }
          },
          "externalVolumeMounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.jobs.interface.ExternalVolumeMountRefDto"
            }
          }
        },
        "required": [
          "hardwareTiers",
          "datasetSnapshots",
          "environments",
          "externalVolumeMounts"
        ]
      },
      "domino.modelmanager.api.ModelInstanceLogs": {
        "properties": {
          "modelId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "modelVersionId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "podName": {
            "type": "string",
            "nullable": true
          },
          "containerName": {
            "type": "string",
            "nullable": true
          },
          "sinceTimeNano": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "tail": {
            "type": "boolean",
            "nullable": true
          },
          "maxResults": {
            "type": "integer",
            "format": "int32"
          },
          "logs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.modelmanager.api.LogLine"
            }
          }
        },
        "required": [
          "modelId",
          "modelVersionId",
          "maxResults",
          "logs"
        ]
      },
      "domino.projectManagement.api.PmTicket": {
        "properties": {
          "id": {
            "$ref": "#/components/schemas/domino.projectManagement.api.PmId"
          },
          "ticketType": {
            "$ref": "#/components/schemas/domino.projectManagement.api.PmTicketType"
          },
          "stage": {
            "$ref": "#/components/schemas/domino.projectManagement.api.PmTicketStage"
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "comments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.projectManagement.api.PmComment"
            }
          },
          "ticketMetadata": {
            "$ref": "#/components/schemas/domino.projectManagement.api.PmTicketMetadata"
          },
          "updatedAt": {
            "type": "integer",
            "format": "epoch"
          },
          "subTickets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.projectManagement.api.PmTicket"
            }
          },
          "assignee": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.projectManagement.api.PmUser"
          }
        },
        "required": [
          "id",
          "ticketType",
          "stage",
          "title",
          "comments",
          "ticketMetadata",
          "updatedAt",
          "subTickets"
        ]
      },
      "domino.admin.usermanagement.api.UpdateUserRequest": {
        "properties": {
          "roles": {
            "type": "array",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "enabled": {
            "type": "boolean",
            "nullable": true
          },
          "isDominoEmployee": {
            "type": "boolean",
            "nullable": true
          }
        }
      },
      "domino.workspaces.api.WorkspaceRuntimeExecutionDetails": {
        "properties": {
          "executorInfo": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.workspaces.api.ExecutorInfo"
          },
          "environment": {
            "$ref": "#/components/schemas/domino.workspaces.api.Environment"
          },
          "hardwareTier": {
            "$ref": "#/components/schemas/domino.workspaces.api.HardwareTierDetails"
          }
        },
        "required": [
          "environment",
          "hardwareTier"
        ]
      },
      "domino.environments.api.NewEnvironmentRevisionBase": {
        "properties": {
          "image": {
            "type": "string",
            "nullable": true
          },
          "baseRevisionId": {
            "nullable": true,
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          }
        }
      },
      "domino.workspaces.api.ListWorkspaceStatus": {
        "properties": {}
      },
      "domino.datasetrw.api.DatasetRwProjectInfoDto": {
        "properties": {
          "projectId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "projectName": {
            "type": "string"
          },
          "projectOwnerUsername": {
            "type": "string"
          },
          "isProjectArchived": {
            "type": "boolean"
          },
          "hasProjectAccess": {
            "type": "boolean",
            "nullable": true
          }
        },
        "required": [
          "projectId",
          "projectName",
          "projectOwnerUsername",
          "isProjectArchived"
        ]
      },
      "domino.workspaces.api.WorkspaceRepositoryStatus": {
        "properties": {
          "repositories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.workspaces.api.WorkspaceRepositoryState"
            }
          }
        },
        "required": [
          "repositories"
        ]
      },
      "domino.modelmanager.api.ModelExport": {
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "modelId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "registryUrlHostName": {
            "type": "string"
          },
          "target": {
            "type": "string",
            "enum": [
              "Sagemaker",
              "NvidiaFleetcommand",
              "Snowflake",
              "Domino"
            ]
          },
          "projectId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "modelName": {
            "type": "string"
          },
          "modelDescription": {
            "type": "string"
          },
          "latestSuccessfulVersionId": {
            "nullable": true,
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "isArchived": {
            "type": "boolean"
          },
          "created": {
            "type": "integer",
            "format": "epoch"
          }
        },
        "required": [
          "id",
          "modelId",
          "registryUrlHostName",
          "target",
          "projectId",
          "modelName",
          "modelDescription",
          "isArchived",
          "created"
        ]
      },
      "domino.gitproviders.api.RepoTypeCapabilitiesDTO": {
        "properties": {
          "repoCreationEnabled": {
            "type": "boolean"
          },
          "repoListingEnabled": {
            "type": "boolean"
          },
          "ownerListingEnabled": {
            "type": "boolean"
          }
        },
        "required": [
          "repoCreationEnabled",
          "repoListingEnabled",
          "ownerListingEnabled"
        ]
      },
      "domino.common.modelproduct.AppGoal": {
        "properties": {
          "projectId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "goalId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "appVersionId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          }
        },
        "required": [
          "projectId",
          "goalId",
          "appVersionId"
        ]
      },
      "domino.dataplane.TargetDataPlaneVersionDto": {
        "properties": {
          "version": {
            "type": "string"
          }
        },
        "required": [
          "version"
        ]
      },
      "domino.files.interface.RepositoryViewModelDto": {
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "location": {
            "type": "string"
          },
          "repoName": {
            "type": "string"
          },
          "uri": {
            "type": "string"
          },
          "domain": {
            "type": "string"
          },
          "refLabel": {
            "type": "string"
          },
          "refType": {
            "type": "string"
          },
          "serviceProvider": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "location",
          "repoName",
          "uri",
          "domain",
          "refLabel",
          "refType",
          "serviceProvider"
        ]
      },
      "domino.projects.api.repositories.responses.browse.RepoDirectorySummaryDTO": {
        "properties": {
          "path": {
            "type": "string"
          },
          "commit": {
            "$ref": "#/components/schemas/domino.projects.api.repositories.responses.browse.CommitShortDTO"
          }
        },
        "required": [
          "path",
          "commit"
        ]
      },
      "domino.files.interface.ProjectFileForTable": {
        "properties": {
          "path": {
            "type": "string"
          },
          "lastModified": {
            "type": "integer",
            "format": "int64"
          },
          "size": {
            "type": "integer",
            "format": "int64"
          },
          "key": {
            "type": "string"
          },
          "goalIds": {
            "type": "array",
            "items": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            }
          },
          "name": {
            "type": "string"
          },
          "quotedFilePath": {
            "type": "string"
          },
          "sizeLabel": {
            "type": "string"
          },
          "isFileLaunchableAsNotebook": {
            "type": "boolean"
          },
          "isFileRunnableFromView": {
            "type": "boolean"
          },
          "isFileRunnableAsApp": {
            "type": "boolean"
          }
        },
        "required": [
          "path",
          "lastModified",
          "size",
          "key",
          "goalIds",
          "name",
          "quotedFilePath",
          "sizeLabel",
          "isFileLaunchableAsNotebook",
          "isFileRunnableFromView",
          "isFileRunnableAsApp"
        ]
      },
      "domino.workspaces.api.WorkspaceRepositoryState": {
        "properties": {
          "name": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "Unpushed",
              "Unpushed and Dirty",
              "Clean",
              "Unknown",
              "Modified"
            ]
          },
          "changes": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.workspaces.api.RepositoryChanges"
          }
        },
        "required": [
          "name",
          "status"
        ]
      },
      "domino.nucleus.file.ProjectFileDeprecated": {
        "properties": {
          "path": {
            "$ref": "#/components/schemas/domino.filesync.sync.RelativeFilePath"
          },
          "lastModified": {
            "type": "integer",
            "format": "int64"
          },
          "size": {
            "type": "integer",
            "format": "int64"
          },
          "key": {
            "type": "string",
            "pattern": "^[0-9a-f]{40}$"
          }
        },
        "required": [
          "path",
          "lastModified",
          "size",
          "key"
        ]
      },
      "domino.files.interface.Comment": {
        "properties": {
          "commentId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "commentedBy": {
            "$ref": "#/components/schemas/domino.files.interface.CommentedBy"
          },
          "commentBody": {
            "type": "string"
          },
          "createdAt": {
            "type": "integer",
            "format": "epoch"
          }
        },
        "required": [
          "commentId",
          "commentedBy",
          "commentBody",
          "createdAt"
        ]
      },
      "domino.notifications.UserNotification": {
        "type": "object",
        "required": [
          "notification",
          "timeframe",
          "read",
          "expired"
        ],
        "properties": {
          "notification": {
            "$ref": "#/components/schemas/domino.notifications.Notification"
          },
          "timeframe": {
            "$ref": "#/components/schemas/domino.notifications.Timeframe"
          },
          "read": {
            "type": "boolean",
            "description": "has this notification been read by the current user?"
          },
          "expired": {
            "type": "boolean",
            "description": "has this notification expired?"
          }
        }
      },
      "domino.datasource.web.UpdateDataSourceCredentialRequest": {
        "properties": {
          "authType": {
            "type": "string",
            "enum": [
              "AzureBasic",
              "Basic",
              "GCPBasic",
              "AWSIAMBasic",
              "AWSIAMBasicNoOverride",
              "AWSIAMRole",
              "AWSIAMRoleWithUsername",
              "OAuth",
              "PersonalToken",
              "UserOnly",
              "BasicOptional",
              "NoAuth",
              "ClientIdSecret",
              "OAuthToken",
              "APIKey"
            ]
          },
          "credentialType": {
            "type": "string",
            "enum": [
              "Individual",
              "Shared"
            ]
          },
          "visibleCredential": {
            "type": "string",
            "nullable": true
          },
          "secretCredential": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "authType",
          "credentialType"
        ]
      },
      "domino.notifications.HasNotifications": {
        "type": "object",
        "required": [
          "unread"
        ],
        "properties": {
          "unread": {
            "type": "boolean"
          },
          "priority": {
            "$ref": "#/components/schemas/domino.notifications.Priority"
          }
        }
      },
      "domino.common.gateway.search.SearchPageResultGatewayDTO": {
        "properties": {
          "id": {
            "nullable": true,
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "projectId": {
            "nullable": true,
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "displayText": {
            "type": "string",
            "nullable": true
          },
          "ownerId": {
            "nullable": true,
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "link": {
            "type": "string"
          },
          "area": {
            "type": "string"
          },
          "featureViewInfo": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.common.gateway.search.FeatureViewSearchResultDTO"
          },
          "projectInfo": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.common.gateway.search.SearchProjectDTO"
          },
          "modelInfo": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.common.gateway.search.SearchModelDTO"
          },
          "environmentInfo": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.common.gateway.search.SearchEnvironmentDTO"
          },
          "commentInfo": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.common.gateway.search.SearchCommentDTO"
          },
          "runInfo": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.common.gateway.search.SearchRunDTO"
          },
          "datasetInfo": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.common.gateway.search.SearchDatasetDTO"
          },
          "fileInfo": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.common.gateway.search.SearchFileDTO"
          }
        },
        "required": [
          "link",
          "area"
        ]
      },
      "domino.datasetrw.api.DatasetRwSnapshotFilesViewDto": {
        "properties": {
          "directorySize": {
            "type": "string",
            "nullable": true
          },
          "rows": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.datasetrw.api.DatasetRwFileDetailsRowDto"
            }
          }
        },
        "required": [
          "rows"
        ]
      },
      "domino.projects.api.ProjectKerberosConfig": {
        "properties": {
          "kerberosMode": {
            "type": "string"
          },
          "principal": {
            "type": "string",
            "nullable": true
          },
          "keytabFileName": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "kerberosMode"
        ]
      },
      "domino.workspaces.api.Commenter": {
        "properties": {
          "commenterId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "username": {
            "type": "string"
          },
          "fullName": {
            "type": "string"
          }
        },
        "required": [
          "commenterId",
          "username",
          "fullName"
        ]
      },
      "domino.modelmanager.web.ExportModelImageApiRequest": {
        "properties": {
          "registryUrl": {
            "type": "string"
          },
          "repository": {
            "type": "string"
          },
          "tag": {
            "type": "string",
            "nullable": true
          },
          "username": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "registryUrl",
          "repository"
        ]
      },
      "domino.files.interface.FileGoal": {
        "properties": {
          "projectId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "goalId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "fileName": {
            "type": "string"
          },
          "commitId": {
            "type": "string"
          }
        },
        "required": [
          "projectId",
          "goalId",
          "fileName",
          "commitId"
        ]
      },
      "domino.projectManagement.api.FullSyncStatus": {
        "properties": {
          "syncStatus": {
            "type": "string",
            "enum": [
              "InProgress",
              "Completed",
              "Failed"
            ]
          },
          "lastSyncInitiatedAt": {
            "type": "integer",
            "format": "epoch"
          }
        },
        "required": [
          "syncStatus",
          "lastSyncInitiatedAt"
        ]
      },
      "domino.modelmanager.api.ModelApiLast24HourInvocationCount": {
        "properties": {
          "modelVersionId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32"
          },
          "invocationCount": {
            "type": "integer",
            "format": "int64"
          }
        },
        "required": [
          "modelVersionId",
          "statusCode",
          "invocationCount"
        ]
      },
      "domino.nucleus.modelproduct.models.PermissionsData": {
        "description": "ModelProduct permissions",
        "type": "object",
        "properties": {
          "appAccessStatus": {
            "type": "string",
            "enum": [
              "ALLOWED",
              "PENDING",
              "REQUESTABLE",
              "NOT_ALLOWED"
            ]
          },
          "pendingInvitations": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "visibility": {
            "type": "string",
            "enum": [
              "PUBLIC",
              "AUTHENTICATED",
              "GRANT_BASED",
              "GRANT_BASED_STRICT"
            ]
          },
          "discoverable": {
            "type": "boolean"
          },
          "accessRequestStatuses": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          }
        },
        "required": [
          "visibility",
          "accessRequestStatuses",
          "pendingInvitations",
          "discoverable",
          "appAccessStatus"
        ]
      },
      "domino.server.projects.api.ProjectGatewayRunCountForType": {
        "properties": {
          "runType": {
            "type": "string",
            "enum": [
              "Endpoint",
              "App",
              "Scheduled",
              "Launcher",
              "Batch",
              "Workspace",
              "Other",
              "SSHProxy"
            ]
          },
          "executingCount": {
            "type": "integer",
            "format": "int32"
          },
          "stoppedCount": {
            "type": "integer",
            "format": "int32"
          }
        },
        "required": [
          "runType",
          "executingCount",
          "stoppedCount"
        ]
      },
      "domino.datasetrw.api.DatasetRwDetailsDto": {
        "type": "object",
        "properties": {
          "datasetPath": {
            "type": "string"
          },
          "projects": {
            "$ref": "#/components/schemas/domino.datasetrw.api.DatasetRwProjectDetailsDto"
          },
          "lifecycleStatus": {
            "type": "string",
            "enum": [
              "Pending",
              "Deleted",
              "DeletionInProgress",
              "Failed",
              "Active",
              "MarkedForDeletion"
            ]
          },
          "author": {
            "nullable": true,
            "pattern": "^[0-9a-f]{24}$",
            "type": "string"
          },
          "snapshotIds": {
            "type": "array",
            "items": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            }
          },
          "readWriteSnapshotId": {
            "pattern": "^[0-9a-f]{24}$",
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "nullable": true,
            "type": "string"
          },
          "id": {
            "pattern": "^[0-9a-f]{24}$",
            "type": "string"
          },
          "tags": {
            "additionalProperties": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            },
            "type": "object"
          }
        },
        "required": [
          "id",
          "name",
          "snapshotIds",
          "tags",
          "projects",
          "lifecycleStatus",
          "readWriteSnapshotId",
          "datasetPath"
        ]
      },
      "domino.projects.api.ProjectSummary": {
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "visibility": {
            "type": "string"
          },
          "ownerId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "ownerUsername": {
            "type": "string"
          },
          "mainRepository": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.projects.api.ProjectGitRepositoryTemp"
          },
          "importedGitRepositories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.projects.api.repositories.GitRepositoryDTO"
            }
          },
          "templateDetails": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.projects.api.ProjectTemplateDetails"
          },
          "collaboratorIds": {
            "type": "array",
            "items": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            }
          },
          "collaborators": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.projects.api.CollaboratorDTO"
            }
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.projects.api.ProjectTagDTO"
            }
          },
          "stageId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "status": {
            "$ref": "#/components/schemas/domino.projects.api.ProjectStatus"
          },
          "internalTags": {
            "type": "array",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "billingTag": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.projects.api.BillingTag"
          }
        },
        "required": [
          "id",
          "name",
          "description",
          "created",
          "visibility",
          "ownerId",
          "ownerUsername",
          "importedGitRepositories",
          "collaboratorIds",
          "collaborators",
          "tags",
          "stageId",
          "status"
        ]
      },
      "domino.workspaces.web.WorkspaceStatusChangeSocketEvent": {
        "properties": {
          "correlationId": {
            "type": "string"
          },
          "workspaceId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "projectId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "room": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "timestamp": {
            "type": "integer",
            "format": "epoch"
          },
          "startedBy": {
            "nullable": true,
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          }
        },
        "required": [
          "correlationId",
          "workspaceId",
          "projectId",
          "room",
          "status",
          "timestamp"
        ]
      },
      "domino.notifications.Notification": {
        "type": "object",
        "required": [
          "id",
          "title",
          "created",
          "origin",
          "priority"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Message ID, not displayed anywhere",
            "example": "abc123"
          },
          "title": {
            "type": "string",
            "example": "Important notification"
          },
          "message": {
            "type": "string",
            "example": "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt."
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "origin": {
            "$ref": "#/components/schemas/domino.notifications.Origin"
          },
          "priority": {
            "$ref": "#/components/schemas/domino.notifications.Priority"
          }
        }
      },
      "domino.nucleus.modelproduct.models.UninviteRequest": {
        "properties": {
          "email": {
            "type": "string"
          }
        },
        "required": [
          "email"
        ]
      },
      "domino.datasetrw.web.FiletaskUpdateRequest": {
        "properties": {
          "id": {
            "type": "string"
          },
          "update": {
            "$ref": "#/components/schemas/domino.datasetrw.api.TaskUpdate"
          },
          "key": {
            "type": "string"
          },
          "taskType": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "errorMsg": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "update",
          "key",
          "taskType",
          "status",
          "errorMsg"
        ]
      },
      "StorageUnit": {
        "type": "string",
        "description": "Unit of number being stored",
        "enum": [
          "B",
          "o",
          "KB",
          "KiB",
          "MB",
          "MiB",
          "GB",
          "GiB",
          "TB",
          "TiB",
          "PB",
          "PiB",
          "EB",
          "EiB",
          "ZB",
          "ZiB",
          "YB",
          "YiB",
          "bit",
          "Kbit",
          "Kibit",
          "Mbit",
          "Mibit",
          "Gbit",
          "Gibit",
          "Tbit",
          "Tibit",
          "Pbit",
          "Pibit",
          "Ebit",
          "Eibit",
          "Zbit",
          "Zibit",
          "Ybit",
          "Yibit"
        ]
      },
      "domino.jobs.interface.JobsTimelineRecord": {
        "properties": {
          "jobNumber": {
            "type": "integer",
            "format": "int32"
          },
          "jobId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "jobStartTime": {
            "type": "integer",
            "format": "epoch"
          },
          "jobTitle": {
            "type": "string"
          },
          "jobStatus": {
            "type": "string"
          },
          "diagnosticStats": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.jobs.interface.JobsTimelineDiagnosticStatRecord"
            }
          }
        },
        "required": [
          "jobNumber",
          "jobId",
          "jobStartTime",
          "jobTitle",
          "jobStatus",
          "diagnosticStats"
        ]
      },
      "domino.computegrid.ResourceUsage": {
        "properties": {
          "snapshots": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.computegrid.UsageSnapshot"
            }
          }
        },
        "required": [
          "snapshots"
        ]
      },
      "domino.executor.api.CheckoutBranchResponseDto": {
        "properties": {
          "succeeded": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          }
        },
        "required": [
          "succeeded",
          "message"
        ]
      },
      "domino.jobs.interface.VolumeMount": {
        "properties": {
          "mountPath": {
            "type": "string"
          },
          "subPath": {
            "type": "string",
            "nullable": true
          },
          "readOnly": {
            "type": "boolean"
          }
        },
        "required": [
          "mountPath",
          "readOnly"
        ]
      },
      "domino.nucleus.modelproduct.models.GrantAccessRequired": {
        "properties": {
          "modelProduct": {
            "$ref": "#/components/schemas/domino.nucleus.modelproduct.models.ModelProduct"
          }
        },
        "required": [
          "modelProduct"
        ]
      },
      "domino.workspace.api.git.MergeConflictResolutionResponseDto": {
        "properties": {
          "succeededRepoIds": {
            "type": "array",
            "items": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            }
          },
          "failedRepoIds": {
            "type": "array",
            "items": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            }
          },
          "failedReason": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "succeededRepoIds",
          "failedRepoIds"
        ]
      },
      "domino.featurestore.api.FeatureViewCommentThreadDto": {
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "comments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.featurestore.api.FeatureViewCommentDto"
            }
          },
          "context": {
            "$ref": "#/components/schemas/domino.featurestore.api.FeatureViewCommentContext"
          }
        },
        "required": [
          "id",
          "comments",
          "context"
        ]
      },
      "domino.projects.api.LinkedGitRepoMetadata": {
        "properties": {
          "uri": {
            "type": "string"
          }
        },
        "required": [
          "uri"
        ]
      },
      "NewOrganization": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Organization name"
          },
          "email": {
            "type": "string",
            "description": "Organization email used to create the organization user"
          },
          "members": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.nucleus.organization.models.OrganizationMember"
            },
            "description": "List of members the organization should have"
          }
        },
        "required": [
          "firstName",
          "lastName",
          "fullName",
          "userName",
          "avatarUrl",
          "id"
        ]
      },
      "domino.workspace.api.git.StageCurrentLocalFileRequest": {
        "properties": {
          "repoId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "filePath": {
            "type": "string"
          }
        },
        "required": [
          "repoId",
          "filePath"
        ]
      },
      "domino.computecluster.api.SparkClusterPropsDto": {
        "properties": {
          "computeEnvironment": {
            "$ref": "#/components/schemas/domino.environments.api.EnvironmentRevisionSummary"
          },
          "executorCount": {
            "type": "integer",
            "format": "int32"
          },
          "executorHardwareTierId": {
            "$ref": "#/components/schemas/domino.hardwaretier.api.HardwareTierIdentifier"
          },
          "volumeSize": {
            "nullable": true,
            "$ref": "#/components/schemas/Information"
          },
          "masterHardwareTierId": {
            "$ref": "#/components/schemas/domino.hardwaretier.api.HardwareTierIdentifier"
          }
        },
        "required": [
          "computeEnvironment",
          "executorCount",
          "executorHardwareTierId",
          "masterHardwareTierId"
        ]
      },
      "domino.workspace.api.WorkspaceSessionStartDto": {
        "properties": {
          "time": {
            "type": "integer",
            "format": "int64"
          }
        },
        "required": [
          "time"
        ]
      },
      "domino.projects.api.repositories.responses.browse.RepoBranchSummaryDTO": {
        "properties": {
          "branchName": {
            "type": "string"
          },
          "commit": {
            "$ref": "#/components/schemas/domino.projects.api.repositories.responses.browse.CommitShortDTO"
          }
        },
        "required": [
          "branchName",
          "commit"
        ]
      },
      "domino.files.interface.BranchInfo": {
        "properties": {
          "branchName": {
            "type": "string"
          },
          "commitId": {
            "type": "string"
          }
        },
        "required": [
          "branchName",
          "commitId"
        ]
      },
      "domino.workspaces.api.Environment": {
        "properties": {
          "environmentRevisionId": {
            "nullable": true,
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "environmentName": {
            "type": "string"
          },
          "environmentId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "revisionNumber": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "environmentRevisionSpec": {
            "oneOf": [
              {
                "type": "string",
                "enum": [
                  "ActiveRevision",
                  "LatestRevision",
                  "RestrictedRevision"
                ]
              },
              {
                "type": "object",
                "required": [
                  "revisionId"
                ],
                "properties": {
                  "revisionId": {
                    "type": "string"
                  }
                }
              }
            ]
          }
        },
        "required": [
          "environmentName",
          "environmentId",
          "environmentRevisionSpec"
        ]
      },
      "domino.files.interface.DefaultValues": {
        "properties": {
          "newName": {
            "type": "string"
          }
        },
        "required": [
          "newName"
        ]
      },
      "domino.nucleus.modelproduct.models.UsageStatisticsTimeseries": {
        "properties": {
          "timestampSec": {
            "type": "integer",
            "format": "int64"
          },
          "stats": {
            "$ref": "#/components/schemas/domino.nucleus.modelproduct.models.UsageStatistics"
          }
        },
        "required": [
          "timestampSec",
          "stats"
        ]
      },
      "domino.admin.interface.ComputeNodeDiskUtilization": {
        "properties": {
          "total": {
            "type": "number",
            "format": "double"
          },
          "used": {
            "type": "number",
            "format": "double"
          }
        },
        "required": [
          "total",
          "used"
        ]
      },
      "domino.nucleus.gateway.users.models.ProjectDependencyView": {
        "properties": {
          "projectId": {
            "$ref": "#/components/schemas/domino.common.ProjectId"
          },
          "projectType": {
            "type": "string",
            "enum": [
              "Analytic",
              "DataSet",
              "Template"
            ]
          },
          "dependencies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.common.ProjectId"
            }
          }
        },
        "required": [
          "projectId",
          "projectType",
          "dependencies"
        ]
      },
      "domino.gruz.api.ContainerNetworkingConfig": {
        "properties": {
          "httpProxyPort": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "autoBoundPorts": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "verbatimBoundPorts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.gruz.api.VerbatimBoundPort"
            }
          },
          "allowedVerbatimPortsRange": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.gruz.api.PortsRange"
          },
          "executorHostnameMapping": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.gruz.api.ExecutorHostnameMapping"
          },
          "customHostnameMappings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.gruz.api.CustomHostnameMapping"
            }
          }
        },
        "required": [
          "autoBoundPorts",
          "verbatimBoundPorts",
          "customHostnameMappings"
        ]
      },
      "domino.projectManagement.api.DominoProjectToPmTicketMetadata": {
        "properties": {
          "mapType": {
            "type": "string",
            "enum": [
              "DominoProject",
              "DominoGoal",
              "DominoStage",
              "DominoComment"
            ]
          },
          "ticketMetadata": {
            "$ref": "#/components/schemas/domino.projectManagement.api.PmTicketMetadata"
          },
          "description": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "updatedAt": {
            "type": "integer",
            "format": "epoch"
          },
          "ticketTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.projectManagement.api.PmTicketType"
            }
          },
          "ticketStages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.projectManagement.api.PmTicketStage"
            }
          }
        },
        "required": [
          "mapType",
          "ticketMetadata",
          "description",
          "title",
          "updatedAt",
          "ticketTypes",
          "ticketStages"
        ]
      },
      "domino.workspaces.api.DependentExternalVolumeMount": {
        "properties": {
          "name": {
            "type": "string"
          },
          "mount": {
            "$ref": "#/components/schemas/domino.workspaces.api.VolumeMount"
          }
        },
        "required": [
          "name",
          "mount"
        ]
      },
      "domino.modelmanager.api.ModelGitRepoCommit": {
        "properties": {
          "repoId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "commitId": {
            "type": "string"
          },
          "repoName": {
            "type": "string"
          },
          "isMainRepo": {
            "type": "boolean"
          }
        },
        "required": [
          "repoId",
          "commitId",
          "repoName",
          "isMainRepo"
        ]
      },
      "domino.activity.api.ProjectGoalBulkUpdateActivityMetadata": {
        "properties": {
          "goalIds": {
            "type": "array",
            "items": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            }
          },
          "goalNames": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "updateAssignee": {
            "type": "boolean"
          },
          "toAssignee": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.activity.api.GoalAssignee"
          },
          "updateStage": {
            "type": "boolean"
          },
          "toStage": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.activity.api.ProjectStage"
          }
        },
        "required": [
          "goalIds",
          "goalNames",
          "updateAssignee",
          "updateStage"
        ]
      },
      "ComputeClusterType": {
        "type": "string",
        "description": "Type of compute cluster",
        "enum": [
          "Spark",
          "Ray",
          "Dask",
          "MPI"
        ]
      },
      "domino.organizations.api.OrganizationMembersDTO": {
        "properties": {
          "members": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.organizations.api.OrganizationMemberDTO"
            }
          }
        },
        "required": [
          "members"
        ]
      },
      "domino.workspace.api.WorkspaceQuotaStatusDto": {
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "OverQuotaForMaxWorkspacesPerUserPerProject",
              "OverQuotaForMaxAllocatedVolumeSizeAcrossAllWorkspaces",
              "QuotaNotExceeded",
              "OverQuotaForMaxWorkspacesPerUser",
              "OverQuotaForMaxWorkspaces"
            ]
          },
          "currentValue": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "limit": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          }
        },
        "required": [
          "status"
        ]
      },
      "domino.projects.api.ProjectSettingsCollaborators": {
        "properties": {
          "collaborator": {
            "$ref": "#/components/schemas/domino.common.user.PersonDTO"
          },
          "role": {
            "type": "string",
            "enum": [
              "ProjectImporter",
              "Contributor",
              "ResultsConsumer",
              "LauncherUser",
              "Owner"
            ]
          },
          "participantNotificationSettings": {
            "type": "string",
            "enum": [
              "AllRuns",
              "RunsStartedByUserThatFailed",
              "RunsThatFailed",
              "Never",
              "RunsStartedByUser"
            ]
          }
        },
        "required": [
          "collaborator",
          "role",
          "participantNotificationSettings"
        ]
      },
      "domino.provenance.api.ProvenanceGitRepoCommit": {
        "properties": {
          "repoId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "commitId": {
            "type": "string"
          }
        },
        "required": [
          "repoId",
          "commitId"
        ]
      },
      "domino.projects.web.MoveProjectToStage": {
        "properties": {
          "stageId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "projectId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          }
        },
        "required": [
          "stageId",
          "projectId"
        ]
      },
      "domino.notifications.ListAdminNotificationsResult": {
        "type": "object",
        "required": [
          "pagination",
          "notifications"
        ],
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/domino.notifications.Pagination"
          },
          "notifications": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.notifications.AdminNotification"
            }
          }
        }
      },
      "domino.common.gateway.runs.ComputeClusterDetails": {
        "properties": {
          "computeClusterType": {
            "type": "string"
          },
          "masterHardwareTierId": {
            "type": "string",
            "nullable": true
          },
          "masterHardwareTierCostPerMinute": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "averageWorkerCount": {
            "type": "number",
            "format": "double"
          },
          "workerHardwareTierId": {
            "type": "string"
          },
          "workerHardwareTierCostPerMinute": {
            "type": "number",
            "format": "double"
          }
        },
        "required": [
          "computeClusterType",
          "averageWorkerCount",
          "workerHardwareTierId",
          "workerHardwareTierCostPerMinute"
        ]
      },
      "domino.nucleus.modelproduct.models.UsageStatistics": {
        "type": "object",
        "properties": {
          "count": {
            "format": "int64",
            "type": "integer"
          },
          "users": {
            "additionalProperties": {
              "type": "integer"
            },
            "type": "object"
          }
        },
        "required": [
          "count",
          "users"
        ]
      },
      "domino.workspaces.api.WorkspaceAutoSync": {
        "properties": {
          "enable": {
            "type": "boolean"
          },
          "syncFrequencyInMinutes": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "required": [
          "enable"
        ]
      },
      "domino.projects.api.model.ref.ProjectRefDto": {
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "name": {
            "type": "string"
          },
          "owner": {
            "$ref": "#/components/schemas/domino.projects.api.model.ref.UserRefDto"
          }
        },
        "required": [
          "id",
          "name",
          "owner"
        ]
      },
      "domino.jobs.interface.JobStatus": {
        "properties": {
          "queued": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "running": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "completed": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "archived": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "active": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "queued",
          "running",
          "completed",
          "archived",
          "active"
        ]
      },
      "domino.computegrid.UsageSnapshot": {
        "properties": {
          "timestamp": {
            "type": "integer",
            "format": "epoch"
          },
          "cpu": {
            "type": "number",
            "format": "double"
          },
          "memory": {
            "type": "number",
            "format": "double"
          }
        },
        "required": [
          "timestamp",
          "cpu",
          "memory"
        ]
      },
      "domino.datasetrw.api.SharedDatasetRwEntryDto": {
        "properties": {
          "projectId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "sharedDatasets": {
            "type": "array",
            "items": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            }
          }
        },
        "required": [
          "projectId",
          "sharedDatasets"
        ]
      },
      "domino.activity.api.ProjectGoalUpdateTitleActivityMetadata": {
        "properties": {
          "fromTitle": {
            "type": "string"
          },
          "toTitle": {
            "type": "string"
          }
        },
        "required": [
          "fromTitle",
          "toTitle"
        ]
      },
      "domino.workspaces.web.StopCommitWorkspaceDetails": {
        "properties": {
          "workspaceId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "commitMessage": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "workspaceId"
        ]
      },
      "domino.nucleus.dataset.ui.UpdateSnapshotStatusInput": {
        "properties": {
          "status": {
            "type": "string"
          }
        },
        "required": [
          "status"
        ]
      },
      "domino.projectManagement.api.DominoGoalToPmSubTicketMetadata": {
        "properties": {
          "mapType": {
            "type": "string",
            "enum": [
              "DominoProject",
              "DominoGoal",
              "DominoStage",
              "DominoComment"
            ]
          },
          "dominoProjectId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "updatedAt": {
            "type": "integer",
            "format": "epoch"
          },
          "ticketMetadata": {
            "$ref": "#/components/schemas/domino.projectManagement.api.PmTicketMetadata"
          },
          "ticketStages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.projectManagement.api.PmTicketStage"
            }
          },
          "ticketAssignee": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.projectManagement.api.PmUser"
          }
        },
        "required": [
          "mapType",
          "dominoProjectId",
          "updatedAt",
          "ticketMetadata",
          "ticketStages"
        ]
      },
      "domino.workspace.api.git.StageFileResponseDto": {
        "properties": {
          "succeeded": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          }
        },
        "required": [
          "succeeded",
          "message"
        ]
      },
      "domino.projects.templates.api.models.TemplateCollaboratorDto": {
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "role": {
            "type": "string",
            "enum": [
              "template_user"
            ]
          }
        },
        "required": [
          "id",
          "role"
        ]
      },
      "domino.activity.api.JobStatusActivityMetaData": {
        "properties": {
          "title": {
            "type": "string"
          },
          "number": {
            "type": "integer",
            "format": "int32"
          },
          "status": {
            "type": "string"
          },
          "isScheduled": {
            "type": "boolean"
          },
          "currentStatus": {
            "type": "string"
          },
          "commentCount": {
            "type": "integer",
            "format": "int32"
          }
        },
        "required": [
          "title",
          "number",
          "status",
          "isScheduled",
          "currentStatus",
          "commentCount"
        ]
      },
      "domino.workspace.api.WorkspaceDatasetSnapshotDto": {
        "properties": {
          "snapshotId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "snapshotVersion": {
            "type": "integer",
            "format": "int32"
          }
        },
        "required": [
          "snapshotId",
          "snapshotVersion"
        ]
      },
      "domino.projects.templates.api.models.NamedLink": {
        "properties": {
          "name": {
            "type": "string"
          },
          "link": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "link"
        ]
      },
      "domino.projects.templates.api.models.BackingProjectDto": {
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "name": {
            "type": "string"
          },
          "owner": {
            "$ref": "#/components/schemas/domino.projects.templates.api.models.ProjectOwnerDto"
          }
        },
        "required": [
          "id",
          "name",
          "owner"
        ]
      },
      "domino.datasource.web.UpdateDataSourceConfigRequest": {
        "properties": {
          "dataSourceType": {
            "type": "string",
            "enum": [
              "ADLSConfig",
              "AzureBlobStorageConfig",
              "BigQueryConfig",
              "ClickHouseConfig",
              "DatabricksConfig",
              "DB2Config",
              "DruidConfig",
              "GCSConfig",
              "GenericJDBCConfig",
              "GenericS3Config",
              "GreenplumConfig",
              "IgniteConfig",
              "MariaDBConfig",
              "MongoDBConfig",
              "MySQLConfig",
              "NetezzaConfig",
              "OracleConfig",
              "PalantirConfig",
              "PineconeConfig",
              "PostgreSQLConfig",
              "QdrantConfig",
              "RedshiftConfig",
              "S3Config",
              "SAPHanaConfig",
              "SingleStoreConfig",
              "SQLServerConfig",
              "SnowflakeConfig",
              "SynapseConfig",
              "TabularS3GlueConfig",
              "TeradataConfig",
              "TrinoConfig",
              "VerticaConfig"
            ]
          },
          "config": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "required": [
          "dataSourceType",
          "config"
        ]
      },
      "domino.workspaces.api.DependentDatasetMount": {
        "properties": {
          "datasetId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "snapshotId": {
            "nullable": true,
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "snapshotVersion": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "datasetName": {
            "type": "string"
          },
          "projectId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "isInput": {
            "type": "boolean"
          },
          "containerPath": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "datasetId",
          "datasetName",
          "projectId",
          "isInput"
        ]
      },
      "domino.nucleus.modelproduct.models.GranteeList": {
        "properties": {
          "emails": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "emails"
        ]
      },
      "domino.workspace.api.DataMountSpecificationDto": {
        "properties": {
          "id": {
            "nullable": true,
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "name": {
            "type": "string"
          },
          "mount": {
            "$ref": "#/components/schemas/domino.workspace.api.VolumeMountDto"
          }
        },
        "required": [
          "name",
          "mount"
        ]
      },
      "domino.datasetrw.api.DatasetRwViewDto": {
        "type": "object",
        "properties": {
          "snapshotIds": {
            "type": "array",
            "items": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            }
          },
          "name": {
            "type": "string"
          },
          "description": {
            "nullable": true,
            "type": "string"
          },
          "createdTime": {
            "format": "int64",
            "type": "integer"
          },
          "projectOwner": {
            "type": "string"
          },
          "id": {
            "pattern": "^[0-9a-f]{24}$",
            "type": "string"
          },
          "projectName": {
            "type": "string"
          },
          "projectId": {
            "nullable": true,
            "pattern": "^[0-9a-f]{24}$",
            "type": "string"
          },
          "tags": {
            "additionalProperties": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            },
            "type": "object"
          }
        },
        "required": [
          "id",
          "name",
          "snapshotIds",
          "tags",
          "createdTime",
          "projectOwner",
          "projectName"
        ]
      },
      "domino.server.account.api.GitCredentialAccessorDto": {
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "name": {
            "type": "string"
          },
          "gitServiceProvider": {
            "type": "string",
            "enum": [
              "github",
              "gitlab",
              "githubEnterprise",
              "unknown",
              "gitlabEnterprise",
              "bitbucket",
              "bitbucketServer"
            ]
          },
          "domain": {
            "type": "string"
          },
          "fingerprint": {
            "type": "string"
          },
          "protocol": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "gitServiceProvider",
          "domain",
          "fingerprint",
          "protocol"
        ]
      },
      "domino.projects.api.CommentThread": {
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "comments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.projects.api.Comment"
            }
          }
        },
        "required": [
          "id",
          "comments"
        ]
      },
      "domino.files.web.SaveFile": {
        "properties": {
          "path": {
            "type": "string"
          },
          "content": {
            "type": "string"
          },
          "mustRun": {
            "type": "boolean",
            "nullable": true
          },
          "creatingNewFile": {
            "type": "boolean",
            "nullable": true
          }
        },
        "required": [
          "path",
          "content"
        ]
      },
      "domino.computegrid.LogSet": {
        "properties": {
          "logContent": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.computegrid.LogContent"
            }
          },
          "isComplete": {
            "type": "boolean"
          },
          "pagination": {
            "$ref": "#/components/schemas/domino.computegrid.PaginationFilter"
          }
        },
        "required": [
          "logContent",
          "isComplete",
          "pagination"
        ]
      },
      "domino.server.projects.api.ProjectStatus": {
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "active",
              "complete"
            ]
          },
          "isBlocked": {
            "type": "boolean"
          },
          "blockedReason": {
            "type": "string",
            "nullable": true
          },
          "completedMessage": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "status",
          "isBlocked"
        ]
      },
      "domino.projects.api.repositories.responses.browse.RepoBrowserSummaryDTO": {
        "properties": {
          "ref": {
            "$ref": "#/components/schemas/domino.projects.api.repositories.responses.browse.RepoBranchSummaryDTO"
          },
          "dir": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.projects.api.repositories.responses.browse.RepoDirectorySummaryDTO"
          }
        },
        "required": [
          "ref"
        ]
      },
      "domino.jobs.web.JobStopOperationRequest": {
        "properties": {
          "jobId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "commitResults": {
            "type": "boolean"
          },
          "source": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "jobId",
          "commitResults"
        ]
      },
      "domino.jobs.web.StartWorkflowJobRequest": {
        "properties": {
          "title": {
            "type": "string",
            "nullable": true
          },
          "projectId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "commandToRun": {
            "type": "string"
          },
          "commitId": {
            "type": "string"
          },
          "mainRepoGitRef": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.projects.api.repositories.ReferenceDTO"
          },
          "hardwareTierId": {
            "$ref": "#/components/schemas/domino.hardwaretier.api.HardwareTierIdentifier"
          },
          "computeClusterProperties": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.jobs.interface.ComputeClusterConfigSpecWithSpecificRevisionDto"
          },
          "datasetSnapshots": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.datasetrw.api.DatasetSnapshotRefDto"
            }
          },
          "environmentId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "environmentRevisionSpec": {
            "$ref": "#/components/schemas/domino.environments.api.SpecificRevision"
          },
          "externalVolumeMountIds": {
            "type": "array",
            "items": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            }
          },
          "volumeSizeGiB": {
            "type": "number",
            "format": "double"
          },
          "workflowConfig": {
            "$ref": "#/components/schemas/domino.jobs.interface.WorkflowConfig"
          }
        },
        "required": [
          "projectId",
          "commandToRun",
          "commitId",
          "hardwareTierId",
          "datasetSnapshots",
          "environmentId",
          "environmentRevisionSpec",
          "externalVolumeMountIds",
          "volumeSizeGiB",
          "workflowConfig"
        ]
      },
      "domino.jobs.interface.Tag": {
        "properties": {
          "tagId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "tagId",
          "name"
        ]
      },
      "domino.activity.api.ProjectGoalStatusChangeActivityMetadata": {
        "properties": {
          "fromStatus": {
            "type": "string",
            "enum": [
              "complete",
              "incomplete",
              "delete"
            ]
          },
          "toStatus": {
            "type": "string",
            "enum": [
              "complete",
              "incomplete",
              "delete"
            ]
          },
          "projectGoalTitle": {
            "type": "string"
          }
        },
        "required": [
          "fromStatus",
          "toStatus",
          "projectGoalTitle"
        ]
      },
      "domino.files.web.FilesAndFoldersToRemove": {
        "properties": {
          "paths": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "ownerUsername": {
            "type": "string"
          },
          "projectName": {
            "type": "string"
          }
        },
        "required": [
          "paths",
          "ownerUsername",
          "projectName"
        ]
      },
      "domino.files.interface.FilesBrowseSettingsDto": {
        "properties": {
          "allowFolderDownloads": {
            "type": "boolean"
          },
          "maxUploadFilesCount": {
            "type": "integer",
            "format": "int32"
          },
          "maxUploadFileSizeInMegabytes": {
            "type": "integer",
            "format": "int32"
          }
        },
        "required": [
          "allowFolderDownloads",
          "maxUploadFilesCount",
          "maxUploadFileSizeInMegabytes"
        ]
      },
      "domino.modelmanager.api.LogTag": {
        "properties": {
          "key": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "required": [
          "key",
          "value"
        ]
      },
      "RunUtilization": {
        "type": "object",
        "description": "Statistics on a specific run",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id of a run"
          },
          "projectId": {
            "type": "string",
            "description": "Id of a oproject the run belongs to"
          },
          "projectIdentity": {
            "type": "string",
            "description": "human-readable project identifier"
          },
          "startingUserId": {
            "type": "string",
            "description": "Id of a user who started the run"
          },
          "startingUserFullName": {
            "type": "string",
            "description": "Full name of a user who started the run"
          },
          "runType": {
            "$ref": "#/components/schemas/RunType"
          },
          "hardwareTierId": {
            "type": "string",
            "description": "Hardware tier which was used for these runs"
          },
          "startDateTime": {
            "type": "string",
            "description": "Date when the run was started in the ISO-8601 format"
          },
          "queueDurationInSeconds": {
            "type": "number",
            "description": "How long the run spent in the queue before running (in seconds)"
          },
          "runDurationInSeconds": {
            "type": "number",
            "description": "How long the run was running (in seconds)"
          },
          "estimatedCost": {
            "type": "number",
            "description": "The estimated cost of the run"
          }
        }
      },
      "domino.projects.api.ProjectGitRepositoryTemp": {
        "properties": {
          "id": {
            "nullable": true,
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "uri": {
            "type": "string"
          },
          "defaultRef": {
            "$ref": "#/components/schemas/domino.projects.api.repositories.ReferenceDTO"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "serviceProvider": {
            "type": "string"
          },
          "credentialId": {
            "nullable": true,
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          }
        },
        "required": [
          "uri",
          "defaultRef",
          "serviceProvider"
        ]
      },
      "domino.gruz.api.RunMeta": {
        "properties": {
          "queued": {
            "type": "string",
            "format": "date-time"
          },
          "started": {
            "nullable": true,
            "type": "string",
            "format": "date-time"
          },
          "completed": {
            "nullable": true,
            "type": "string",
            "format": "date-time"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "number": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "dependencyProjects": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.gruz.api.RunDependencyProject"
            }
          },
          "postProcessing": {
            "$ref": "#/components/schemas/domino.gruz.api.RunPostProcessing"
          },
          "overrideHardwareTierId": {
            "type": "string",
            "nullable": true
          },
          "centsPerMinute": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "isolatedOutputCommit": {
            "type": "boolean",
            "nullable": true
          },
          "priority": {
            "type": "integer",
            "format": "int32"
          },
          "repositories": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/domino.gruz.api.PreparedRepository"
            }
          },
          "statusChanges": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.gruz.api.StatusChange"
            }
          },
          "stopRequest": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.gruz.api.StopRequest"
          },
          "publiclyVisible": {
            "type": "boolean"
          },
          "datasetMounts": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/domino.gruz.api.DatasetMount"
            }
          }
        },
        "required": [
          "queued",
          "dependencyProjects",
          "postProcessing",
          "priority",
          "statusChanges",
          "publiclyVisible"
        ]
      },
      "domino.projects.api.EnvironmentWorkspaceToolDefinition": {
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "iconUrl": {
            "type": "string",
            "nullable": true
          },
          "start": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "proxyConfig": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.projects.api.ProxyConfig"
          },
          "supportedFileExtensions": {
            "type": "array",
            "nullable": true,
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "id",
          "name",
          "title",
          "start"
        ]
      },
      "domino.datasetrw.web.CalculateSnapshotSizeRequest": {
        "properties": {
          "forceRecalculate": {
            "type": "boolean",
            "nullable": true
          }
        }
      },
      "domino.modelmanager.web.ModelDeploymentLogsApiResponse": {
        "properties": {
          "modelId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "modelVersionId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "status": {
            "type": "string"
          },
          "logs": {
            "type": "string"
          }
        },
        "required": [
          "modelId",
          "modelVersionId",
          "status",
          "logs"
        ]
      },
      "domino.environments.api.EnvironmentRevision": {
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "environmentId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "environmentName": {
            "type": "string"
          },
          "imageType": {
            "type": "string",
            "enum": [
              "DefaultImage",
              "Environment",
              "CustomImage"
            ]
          },
          "isRestricted": {
            "type": "boolean"
          },
          "isBuilt": {
            "type": "boolean"
          },
          "number": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "clusterTypes": {
            "type": "array",
            "nullable": true,
            "items": {
              "type": "string",
              "enum": [
                "Dask",
                "Spark",
                "Ray",
                "MPI"
              ]
            }
          },
          "summary": {
            "type": "string",
            "nullable": true
          },
          "dockerImage": {
            "type": "string",
            "nullable": true
          },
          "workspacesProperties": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.common.util.yaml.DefaultYamlString"
          },
          "dockerArguments": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "dockerfileInstructions": {
            "type": "string",
            "nullable": true
          },
          "preSetupScript": {
            "type": "string",
            "nullable": true
          },
          "postSetupScript": {
            "type": "string",
            "nullable": true
          },
          "preRunScript": {
            "type": "string",
            "nullable": true
          },
          "postRunScript": {
            "type": "string",
            "nullable": true
          },
          "shouldUseVPN": {
            "type": "boolean"
          },
          "buildEnvironmentVariables": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        },
        "required": [
          "id",
          "environmentId",
          "environmentName",
          "imageType",
          "isRestricted",
          "isBuilt",
          "dockerArguments",
          "shouldUseVPN",
          "buildEnvironmentVariables"
        ]
      },
      "domino.jobs.interface.ArtifactsObjectDto": {
        "properties": {
          "commitId": {
            "type": "string"
          },
          "projectName": {
            "type": "string"
          },
          "ownerName": {
            "type": "string"
          }
        },
        "required": [
          "commitId",
          "projectName",
          "ownerName"
        ]
      },
      "domino.datasetrw.api.DatasetRwStorageDto": {
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "name": {
            "type": "string"
          },
          "dataPlaneId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "isDataPlaneDefault": {
            "type": "boolean"
          },
          "loadBalanceType": {
            "type": "string",
            "enum": [
              "primary"
            ]
          },
          "storageAddedAt": {
            "type": "integer",
            "format": "int64"
          },
          "unregisteredAt": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "numberOfActiveDatasets": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "dataPlaneName": {
            "type": "string",
            "nullable": true
          },
          "hardwareTiers": {
            "type": "array",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "hostname": {
            "type": "string",
            "nullable": true
          },
          "mountInfo": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.datasetrw.api.DatasetRwMountInfoDto"
          }
        },
        "required": [
          "id",
          "name",
          "dataPlaneId",
          "isDataPlaneDefault",
          "loadBalanceType",
          "storageAddedAt"
        ]
      },
      "domino.datasource.api.DataSourceOwnerInfoDto": {
        "properties": {
          "ownerName": {
            "type": "string"
          },
          "ownerEmail": {
            "type": "string"
          },
          "isOwnerAdmin": {
            "type": "boolean"
          }
        },
        "required": [
          "ownerName",
          "ownerEmail",
          "isOwnerAdmin"
        ]
      },
      "domino.workspace.api.WorkspaceInitConfigDto": {
        "properties": {
          "volumeSize": {
            "$ref": "#/components/schemas/Information"
          },
          "workspaceReproductionDetails": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.workspace.api.WorkspaceReproductionDetailsDto"
          },
          "mainGitRepoRef": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.projects.api.repositories.ReferenceDTO"
          }
        },
        "required": [
          "volumeSize"
        ]
      },
      "domino.activity.api.ProjectStage": {
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "domino.projects.api.ProjectTemplatePrerequisites": {
        "properties": {
          "value": {
            "type": "string"
          },
          "link": {
            "type": "string"
          }
        },
        "required": [
          "value",
          "link"
        ]
      },
      "domino.common.gateway.runs.RunsGatewaySummary": {
        "properties": {
          "batchId": {
            "type": "string"
          },
          "runId": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "command": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "runType": {
            "type": "string"
          },
          "userName": {
            "type": "string"
          },
          "userId": {
            "type": "string"
          },
          "projectOwnerName": {
            "type": "string"
          },
          "projectOwnerId": {
            "type": "string"
          },
          "projectName": {
            "type": "string"
          },
          "projectId": {
            "type": "string"
          },
          "runDurationSec": {
            "type": "number",
            "format": "double"
          },
          "hardwareTier": {
            "type": "string"
          },
          "hardwareTierCostCurrency": {
            "type": "string"
          },
          "hardwareTierCostAmount": {
            "type": "number",
            "format": "double"
          },
          "queuedTime": {
            "type": "string",
            "format": "date-time"
          },
          "startTime": {
            "nullable": true,
            "type": "string",
            "format": "date-time"
          },
          "endTime": {
            "nullable": true,
            "type": "string",
            "format": "date-time"
          },
          "totalCostCurrency": {
            "type": "string"
          },
          "totalCostAmount": {
            "type": "number",
            "format": "double"
          },
          "computeClusterDetails": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.common.gateway.runs.ComputeClusterDetails"
          },
          "diskUsageGiB": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "diskUsagePercent": {
            "type": "number",
            "format": "double",
            "nullable": true
          }
        },
        "required": [
          "batchId",
          "runId",
          "title",
          "command",
          "status",
          "runType",
          "userName",
          "userId",
          "projectOwnerName",
          "projectOwnerId",
          "projectName",
          "projectId",
          "runDurationSec",
          "hardwareTier",
          "hardwareTierCostCurrency",
          "hardwareTierCostAmount",
          "queuedTime",
          "totalCostCurrency",
          "totalCostAmount"
        ]
      },
      "domino.notifications.Origin": {
        "required": [
          "name",
          "initials"
        ],
        "properties": {
          "name": {
            "type": "string",
            "example": "Admin",
            "description": "author or origin name"
          },
          "initials": {
            "type": "string",
            "example": "SF",
            "description": "2 letter initials to display in a bubble"
          }
        },
        "description": "Message source or author. Modeled as object for future extensibility"
      },
      "domino.workspaces.web.UnlinkWorkspaceFromGoal": {
        "properties": {
          "projectId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "goalId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          }
        },
        "required": [
          "projectId",
          "goalId"
        ]
      },
      "domino.admin.interface.ServiceAccount": {
        "properties": {
          "username": {
            "type": "string"
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "id": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "idpId": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "username",
          "id"
        ]
      },
      "domino.quota.api.QuotaActionDto": {
        "type": "object",
        "required": [
          "id",
          "quotaId",
          "userId",
          "timeOfAction",
          "actionType"
        ],
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$",
            "description": "quota action id"
          },
          "quotaId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$",
            "description": "quota id"
          },
          "userId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$",
            "description": "Id of user for quota"
          },
          "timeOfAction": {
            "type": "integer",
            "format": "int64",
            "description": "when the action was taken"
          },
          "actionType": {
            "$ref": "#/components/schemas/domino.quota.api.QuotaActionType"
          }
        }
      },
      "domino.jobs.interface.CommentContext": {
        "properties": {
          "commentType": {
            "type": "string",
            "enum": [
              "JobCommentThread",
              "JobResultFileCommentThread"
            ]
          },
          "jobId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "fileName": {
            "type": "string",
            "nullable": true
          },
          "commitId": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "commentType",
          "jobId"
        ]
      },
      "domino.repoman.domain.GitProviderName": {
        "properties": {}
      },
      "domino.common.gateway.runs.RunsGatewaySequence": {
        "properties": {
          "runs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.common.gateway.runs.RunsGatewaySummary"
            }
          },
          "nextBatchId": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "runs"
        ]
      },
      "domino.featurestore.api.FeatureStoreCodeSnippetDto": {
        "properties": {
          "snippet": {
            "type": "string"
          }
        },
        "required": [
          "snippet"
        ]
      },
      "domino.projects.templates.api.models.CustomerTemplateTagCollectionDto": {
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.projects.templates.api.models.CustomerTemplateTagDto"
            }
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          }
        },
        "required": [
          "items",
          "totalCount"
        ]
      },
      "domino.dataset.api.DatasetDto": {
        "type": "object",
        "properties": {
          "archived": {
            "type": "boolean"
          },
          "created": {
            "format": "int64",
            "type": "integer"
          },
          "snapshotIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "name": {
            "type": "string"
          },
          "description": {
            "nullable": true,
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "projectId": {
            "nullable": true,
            "type": "string"
          },
          "stupidProjectId": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.common.ProjectId"
          },
          "tags": {
            "type": "object"
          }
        },
        "required": [
          "id",
          "name",
          "archived",
          "snapshotIds",
          "tags",
          "created"
        ]
      },
      "domino.projectManagement.web.ErrorResponse": {
        "type": "object",
        "properties": {
          "code": {
            "format": "int32",
            "description": "Error code",
            "type": "integer"
          },
          "message": {
            "description": "Error message received from external service (ex jira)",
            "type": "string"
          }
        },
        "required": [
          "message",
          "code"
        ]
      },
      "domino.nucleus.lib.frontend.FrontendConfigDto": {
        "properties": {
          "stage": {
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "mixpanelSettings": {
            "$ref": "#/components/schemas/domino.nucleus.lib.auth.MixpanelSettings"
          },
          "globalBannerSettings": {
            "$ref": "#/components/schemas/domino.nucleus.lib.auth.GlobalBannerSettings"
          },
          "booleanSettings": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "featureFlags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "whiteLabelConfigurations": {
            "$ref": "#/components/schemas/domino.admin.interface.WhiteLabelConfigurations"
          }
        },
        "required": [
          "stage",
          "version",
          "mixpanelSettings",
          "globalBannerSettings",
          "booleanSettings",
          "featureFlags",
          "whiteLabelConfigurations"
        ]
      },
      "domino.projects.templates.api.models.NewEnvironmentRevisionDto": {
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "environmentId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          }
        },
        "required": [
          "id",
          "environmentId"
        ]
      },
      "domino.common.run.interfaces.NewRunGitRefDto": {
        "properties": {
          "refType": {
            "type": "string"
          },
          "refValue": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "refType"
        ]
      },
      "domino.projectManagement.web.BulkEditProjectGoals": {
        "properties": {
          "goalIds": {
            "type": "array",
            "items": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            }
          },
          "stageId": {
            "nullable": true,
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "assigneeValue": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.projectManagement.web.SetAssigneeForGoal"
          }
        },
        "required": [
          "goalIds"
        ]
      },
      "domino.common.gateway.search.FeatureViewSearchResultDTO": {
        "properties": {
          "featureViewId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "highlightInfo": {
            "$ref": "#/components/schemas/domino.common.gateway.search.FuzzyHighlightInfo"
          },
          "featureViewName": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "entities": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "features": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "tags": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "author": {
            "type": "string"
          },
          "lastUpdated": {
            "type": "integer",
            "format": "int64"
          },
          "created": {
            "type": "integer",
            "format": "int64"
          },
          "projectIds": {
            "type": "array",
            "items": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            }
          }
        },
        "required": [
          "featureViewId",
          "highlightInfo",
          "featureViewName",
          "description",
          "entities",
          "features",
          "tags",
          "author",
          "lastUpdated",
          "created",
          "projectIds"
        ]
      },
      "domino.projects.api.CopyGitRequest": {
        "properties": {
          "credentialId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "importedGitReposCredentialId": {
            "nullable": true,
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "linkSpec": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.projects.api.LinkedGitRepoMetadata"
          },
          "copySpec": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.projects.api.CopiedGitRepoMetadata"
          },
          "importSpec": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.projects.api.ImportGitFilesSpec"
          }
        },
        "required": [
          "credentialId"
        ]
      },
      "domino.activity.api.Activity": {
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "activitySource": {
            "type": "string",
            "enum": [
              "project",
              "job",
              "model_api",
              "comment",
              "app",
              "goals",
              "schedule_job",
              "files",
              "workspace",
              "registered_model"
            ]
          },
          "activity": {
            "type": "string",
            "enum": [
              "PROJECT_GOAL_BULK_UPDATE",
              "MODEL_API_STATUS_CHANGE",
              "PROJECT_GOAL_MODEL_LINK_CHANGE",
              "MODEL_REVIEW_CREATED",
              "JOB_STATUS_CHANGE",
              "WORKSPACE_TITLE_CHANGE",
              "PROJECT_STATUS_CHANGE",
              "APP_STATUS_CHANGE",
              "FILE_CHANGE",
              "PROJECT_GOAL_APP_LINK_CHANGE",
              "PROJECT_GOAL_STAGE_CHANGE",
              "ALL_MODEL_REVIEWERS_APPROVED",
              "JOB_TITLE_CHANGE",
              "PROJECT_GOAL_TITLE_CHANGE",
              "COMMENT_UPDATED",
              "MODEL_REVIEWER_APPROVED",
              "MODEL_REVIEW_CANCELLED",
              "PROJECT_GOAL_DESCRIPTION_CHANGE",
              "PROJECT_STAGE_CHANGE",
              "COMMENT_ADDED",
              "PROJECT_GOAL_ASSIGNMENT_CHANGE",
              "PROJECT_GOAL_CREATE",
              "SCHEDULE_JOB_TRIGGER_CHANGE",
              "PROJECT_LINK_CHANGE",
              "PROJECT_GOAL_BULK_DELETE",
              "SCHEDULE_JOB_CONFIG_CHANGE",
              "PROJECT_GOAL_FILE_LINK_CHANGE",
              "PROJECT_GOAL_STATUS_CHANGE",
              "REGISTERED_MODEL_STAGE_TRANSITIONED",
              "MODEL_REVIEWER_REQUESTED_CHANGES",
              "PROJECT_GOAL_JOB_LINK_CHANGE",
              "COMMENT_ARCHIVED",
              "WORKSPACE_STATUS_CHANGE",
              "PROJECT_GOAL_WORKSPACE_LINK_CHANGE"
            ]
          },
          "sourceId": {
            "type": "string"
          },
          "timestamp": {
            "type": "integer",
            "format": "epoch"
          },
          "activityBy": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.activity.api.ActivityBy"
          },
          "projectId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "metadata": {
            "$ref": "#/components/schemas/domino.activity.api.ActivityMetaData"
          }
        },
        "required": [
          "id",
          "activitySource",
          "activity",
          "sourceId",
          "timestamp",
          "projectId",
          "metadata"
        ]
      },
      "domino.nucleus.file.ProjectCommitDeprecated": {
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "commitTime": {
            "type": "integer",
            "format": "int64"
          }
        },
        "required": [
          "id",
          "name",
          "commitTime"
        ]
      },
      "domino.projects.api.UpdateReviewRequest": {
        "properties": {
          "title": {
            "type": "string"
          },
          "summary": {
            "type": "string"
          }
        },
        "required": [
          "title",
          "summary"
        ]
      },
      "domino.nucleus.dataset.ui.AddDataSetTagInput": {
        "properties": {
          "name": {
            "type": "string"
          },
          "dataSetId": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "dataSetId"
        ]
      },
      "domino.common.gateway.search.SearchFileDTO": {
        "properties": {
          "codeSnippet": {
            "type": "string",
            "nullable": true
          },
          "project": {
            "$ref": "#/components/schemas/domino.common.gateway.search.SearchProjectDetails"
          }
        },
        "required": [
          "project"
        ]
      },
      "domino.jobs.interface.ExternalVolumeMountRefDto": {
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "domino.jobs.interface.Comment": {
        "properties": {
          "commentId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "commenter": {
            "$ref": "#/components/schemas/domino.jobs.interface.Commenter"
          },
          "commentBody": {
            "$ref": "#/components/schemas/domino.jobs.interface.CommentContent"
          },
          "created": {
            "type": "integer",
            "format": "epoch"
          }
        },
        "required": [
          "commentId",
          "commenter",
          "commentBody",
          "created"
        ]
      },
      "domino.computegrid.LogContent": {
        "properties": {
          "timestamp": {
            "type": "integer",
            "format": "epoch"
          },
          "logType": {
            "type": "string",
            "enum": [
              "stdout",
              "complete",
              "prepareoutput",
              "stderr",
              "stdoutstderr"
            ]
          },
          "log": {
            "type": "string"
          },
          "size": {
            "type": "integer",
            "format": "int64"
          }
        },
        "required": [
          "timestamp",
          "logType",
          "log",
          "size"
        ]
      },
      "domino.guardrails.web.UpdateCommentRequest": {
        "type": "object",
        "required": [
          "comment"
        ],
        "properties": {
          "comment": {
            "type": "string"
          }
        }
      },
      "domino.featurestore.api.FeatureViewCommentContent": {
        "properties": {
          "value": {
            "type": "string"
          }
        },
        "required": [
          "value"
        ]
      },
      "domino.gruz.api.RunPostProcessingControl": {
        "properties": {
          "publishApiEndpoint": {
            "type": "boolean"
          },
          "publishModelId": {
            "nullable": true,
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          }
        },
        "required": [
          "publishApiEndpoint"
        ]
      },
      "domino.projects.api.StatusStat": {
        "properties": {
          "name": {
            "type": "string",
            "enum": [
              "active",
              "complete",
              "blocked"
            ]
          },
          "projectCount": {
            "type": "integer",
            "format": "int32"
          }
        },
        "required": [
          "name",
          "projectCount"
        ]
      },
      "domino.projects.web.UpdateStageName": {
        "properties": {
          "stageId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "stageName": {
            "type": "string"
          }
        },
        "required": [
          "stageId",
          "stageName"
        ]
      },
      "domino.datasource.model.StorageType": {
        "type": "string",
        "enum": [
          "Tabular",
          "ObjectStore",
          "Vector"
        ]
      },
      "domino.files.interface.ProjectDirectoryForTable": {
        "properties": {
          "path": {
            "type": "string"
          },
          "sizeInBytes": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "path",
          "sizeInBytes",
          "name"
        ]
      },
      "domino.projects.templates.api.models.NewTemplateDefinitionDto": {
        "properties": {
          "settings": {
            "$ref": "#/components/schemas/domino.projects.templates.api.models.NewSettingsDto"
          }
        },
        "required": [
          "settings"
        ]
      },
      "domino.jobs.interface.CommitDetails": {
        "properties": {
          "inputCommitId": {
            "type": "string"
          },
          "outputCommitId": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "inputCommitId"
        ]
      },
      "domino.nucleus.modelproduct.models.UnlinkAppFromGoal": {
        "properties": {
          "projectId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "goalId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "appVersionId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          }
        },
        "required": [
          "projectId",
          "goalId",
          "appVersionId"
        ]
      },
      "domino.projects.api.ProjectTagDTO": {
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "name": {
            "type": "string"
          },
          "isApproved": {
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "name",
          "isApproved"
        ]
      },
      "domino.notifications.LimitedAudience": {
        "type": "object",
        "properties": {
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.notifications.NameAndId"
            },
            "description": "Names and IDs of users who will receive this notification"
          },
          "orgs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.notifications.NameAndId"
            },
            "description": "Names and IDs of orgs whose users will receive this notification"
          },
          "roles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.notifications.NameAndId"
            },
            "description": "Names and Ids of Roles. Users that have any of these Roles will receive this notification."
          }
        },
        "description": "Definition of a limited audience for a notification. If present, a notification will be shown to users who are mentioned directly, or part of a mentioned org, or have one of the mentioned roles (at least one of these criteria must apply)."
      },
      "domino.common.gateway.search.CollaboratorDetails": {
        "properties": {
          "username": {
            "type": "string"
          },
          "highlightedUsername": {
            "type": "string"
          }
        },
        "required": [
          "username",
          "highlightedUsername"
        ]
      },
      "domino.workspace.api.git.HardResetResolutionRequest": {
        "properties": {
          "repositories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.workspace.api.git.MergeConflictRepository"
            }
          }
        },
        "required": [
          "repositories"
        ]
      },
      "domino.activity.api.CommentedOnProjectGoalMetaData": {
        "properties": {
          "goalId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "title": {
            "type": "string"
          },
          "isArchived": {
            "type": "boolean"
          }
        },
        "required": [
          "goalId",
          "title",
          "isArchived"
        ]
      },
      "domino.jobs.interface.JobRuntimeExecutionDetails": {
        "properties": {
          "executorInfo": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.jobs.interface.ExecutorInfo"
          },
          "environment": {
            "$ref": "#/components/schemas/domino.jobs.interface.Environment"
          },
          "hardwareTier": {
            "$ref": "#/components/schemas/domino.jobs.interface.HardwareTierDetails"
          }
        },
        "required": [
          "environment",
          "hardwareTier"
        ]
      },
      "domino.workspace.api.WorkspaceInitialGitCommitDto": {
        "properties": {
          "repoId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "repoName": {
            "type": "string"
          },
          "commitId": {
            "type": "string"
          },
          "isMainRepo": {
            "type": "boolean"
          }
        },
        "required": [
          "repoId",
          "repoName",
          "commitId",
          "isMainRepo"
        ]
      },
      "domino.datasource.api.DataSourcePermissionsDto": {
        "properties": {
          "isEveryone": {
            "type": "boolean"
          },
          "userIds": {
            "type": "array",
            "items": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            }
          },
          "credentialType": {
            "type": "string",
            "enum": [
              "Individual",
              "Shared"
            ]
          }
        },
        "required": [
          "isEveryone",
          "userIds",
          "credentialType"
        ]
      },
      "domino.activity.api.ActivityBy": {
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "username": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "username"
        ]
      },
      "domino.guardrails.interface.CommentCountsDto": {
        "type": "object",
        "required": [
          "commentCountsMap"
        ],
        "properties": {
          "commentCountsMap": {
            "type": "object",
            "additionalProperties": {
              "type": "integer"
            }
          }
        }
      },
      "domino.datasource.api.DataSourceDataPlaneInfo": {
        "properties": {
          "dataPlaneId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          }
        },
        "required": [
          "dataPlaneId"
        ]
      },
      "domino.computecluster.api.DefaultComputeClusterSettings": {
        "properties": {
          "clusterType": {
            "$ref": "#/components/schemas/ComputeClusterType"
          },
          "computeEnvironmentId": {
            "nullable": true,
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "computeEnvironmentRevisionSpec": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "enum": [
                  "ActiveRevision",
                  "LatestRevision",
                  "RestrictedRevision"
                ]
              },
              {
                "type": "object",
                "required": [
                  "revisionId"
                ],
                "properties": {
                  "revisionId": {
                    "type": "string"
                  }
                }
              }
            ]
          },
          "masterHardwareTierId": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.hardwaretier.api.HardwareTierIdentifier"
          },
          "workerCount": {
            "type": "integer",
            "format": "int32"
          },
          "maxWorkerCount": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "workerHardwareTierId": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.hardwaretier.api.HardwareTierIdentifier"
          },
          "workerStorage": {
            "nullable": true,
            "$ref": "#/components/schemas/Information"
          },
          "extraConfigs": {
            "nullable": true,
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "maxUserExecutionSlots": {
            "type": "integer",
            "format": "int32"
          }
        },
        "required": [
          "clusterType",
          "workerCount",
          "maxUserExecutionSlots"
        ]
      },
      "domino.environments.api.DominoCompatibleTools": {
        "properties": {
          "workspaceTools": {
            "type": "string",
            "nullable": true
          },
          "dockerfileInstructions": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "domino.projects.api.repositories.responses.browse.CommitShortDTO": {
        "properties": {
          "sha": {
            "type": "string"
          },
          "author": {
            "$ref": "#/components/schemas/domino.projects.api.repositories.responses.browse.CommitAuthorDTO"
          },
          "message": {
            "type": "string"
          }
        },
        "required": [
          "sha",
          "author",
          "message"
        ]
      },
      "domino.jobs.interface.DominoStats": {
        "properties": {
          "name": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "value"
        ]
      },
      "domino.jobs.interface.TagApplication": {
        "properties": {
          "tagId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "name": {
            "type": "string"
          },
          "createdBy": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "createdAt": {
            "type": "integer",
            "format": "epoch"
          },
          "projectId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          }
        },
        "required": [
          "tagId",
          "name",
          "createdBy",
          "createdAt",
          "projectId"
        ]
      },
      "domino.repoman.domain.GitRepository": {
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "name": {
            "type": "string"
          },
          "uriHost": {
            "type": "string"
          },
          "uriPort": {
            "type": "string",
            "nullable": true
          },
          "uriPath": {
            "type": "string"
          },
          "serviceProvider": {
            "type": "string",
            "enum": [
              "github",
              "gitlab",
              "githubEnterprise",
              "unknown",
              "gitlabEnterprise",
              "bitbucket",
              "bitbucketServer"
            ]
          },
          "isFeatureStore": {
            "type": "boolean",
            "nullable": true
          }
        },
        "required": [
          "id",
          "name",
          "uriHost",
          "uriPath",
          "serviceProvider"
        ]
      },
      "domino.files.interface.ProjectImportsDto": {
        "properties": {
          "id": {
            "type": "string"
          },
          "projectName": {
            "type": "string"
          },
          "ownerUsername": {
            "type": "string"
          },
          "variablesAvailable": {
            "type": "boolean"
          },
          "isActive": {
            "type": "boolean"
          },
          "isArchived": {
            "type": "boolean"
          },
          "filesAvailable": {
            "type": "boolean"
          },
          "packageAvailable": {
            "type": "boolean"
          },
          "projects": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "availableReleases": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.files.interface.ProjectReleaseDto"
            }
          },
          "mountPath": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "projectName",
          "ownerUsername",
          "variablesAvailable",
          "isActive",
          "isArchived",
          "filesAvailable",
          "packageAvailable",
          "projects",
          "availableReleases",
          "mountPath"
        ]
      },
      "domino.projects.web.SetCredentialMapping": {
        "properties": {
          "credentialId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          }
        },
        "required": [
          "credentialId"
        ]
      },
      "domino.activity.api.ActivityPagination": {
        "properties": {
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "latestTimeStamp": {
            "type": "integer",
            "format": "epoch"
          }
        },
        "required": [
          "pageSize",
          "latestTimeStamp"
        ]
      },
      "domino.projects.web.ArchiveComment": {
        "properties": {
          "threadId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "commentId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          }
        },
        "required": [
          "threadId",
          "commentId"
        ]
      },
      "domino.featurestore.api.EntityDto": {
        "properties": {
          "name": {
            "type": "string"
          },
          "joinKey": {
            "type": "string",
            "nullable": true
          },
          "valueType": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "valueType"
        ]
      },
      "domino.launcherjob.api.LauncherJobStartDto": {
        "properties": {
          "jobTitle": {
            "type": "string",
            "nullable": true
          },
          "startingUserId": {
            "nullable": true,
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "project": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "postParameters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.launcherjob.api.PostParameter"
            }
          },
          "uploadedFiles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.launcherjob.api.LauncherJobUploadedFile"
            }
          },
          "notifyOnCompleteEmailAddresses": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "project",
          "postParameters",
          "uploadedFiles",
          "notifyOnCompleteEmailAddresses"
        ]
      },
      "domino.notifications.Timeframe": {
        "type": "object",
        "properties": {
          "start": {
            "description": "Start time from which to display the notification, optional",
            "type": "string",
            "format": "date-time",
            "example": "2021-12-12T09:12:33.001Z"
          },
          "end": {
            "description": "End time at which the notification expires, optional",
            "type": "string",
            "format": "date-time",
            "example": "2021-12-16T09:12:33.001Z"
          }
        }
      },
      "domino.workspace.api.WorkspaceHardwareTierDto": {
        "properties": {
          "id": {
            "$ref": "#/components/schemas/domino.hardwaretier.api.HardwareTierIdentifier"
          },
          "name": {
            "type": "string"
          },
          "dataPlane": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.workspace.api.DataPlaneRefDto"
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "domino.nucleus.dataset.ui.DataSetRun": {
        "properties": {
          "runId": {
            "type": "string"
          }
        },
        "required": [
          "runId"
        ]
      },
      "domino.workspace.api.git.CommitRequest": {
        "properties": {
          "projectId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "repos": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.workspace.api.git.CommitRepo"
            }
          }
        },
        "required": [
          "projectId",
          "repos"
        ]
      },
      "domino.projects.api.ProjectEnvironmentDTO": {
        "properties": {
          "id": {
            "type": "string"
          },
          "archived": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "version": {
            "type": "integer",
            "format": "int32"
          },
          "visibility": {
            "type": "string",
            "enum": [
              "Global",
              "Private",
              "Organization"
            ]
          },
          "owner": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.projects.api.ProjectEnvironmentOwnerDTO"
          },
          "supportedClusters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ComputeClusterType"
            }
          },
          "activeRevisionTags": {
            "type": "array",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "isCurated": {
            "type": "boolean",
            "nullable": true
          },
          "activeRevisionNumber": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "activeRevisionId": {
            "nullable": true,
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "restrictedRevisionNumber": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "restrictedRevisionId": {
            "nullable": true,
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          }
        },
        "required": [
          "id",
          "archived",
          "name",
          "version",
          "visibility",
          "supportedClusters"
        ]
      },
      "domino.hardwaretier.api.HwtResources": {
        "properties": {
          "cores": {
            "type": "number",
            "format": "double"
          },
          "coresLimit": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "memory": {
            "$ref": "#/components/schemas/Information"
          },
          "memoryLimit": {
            "nullable": true,
            "$ref": "#/components/schemas/Information"
          },
          "memorySwapLimit": {
            "nullable": true,
            "$ref": "#/components/schemas/Information"
          },
          "allowSharedMemoryToExceedDefault": {
            "type": "boolean"
          },
          "sharedMemoryLimit": {
            "nullable": true,
            "$ref": "#/components/schemas/Information"
          }
        },
        "required": [
          "cores",
          "memory",
          "allowSharedMemoryToExceedDefault"
        ]
      },
      "domino.projectManagement.web.UpdateProjectGoalStage": {
        "properties": {
          "stageId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "stageName": {
            "type": "string"
          }
        },
        "required": [
          "stageId",
          "stageName"
        ]
      },
      "domino.provenance.api.ProvenanceEnvironmentVariablesMap": {
        "properties": {
          "projectEnvVarBlobKeys": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "userEnvVarBlobKey": {
            "type": "string",
            "nullable": true
          },
          "projectVarVersions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.projects.api.ProjectEnvVarVersion"
            }
          },
          "userVarVersion": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "required": [
          "projectEnvVarBlobKeys",
          "projectVarVersions"
        ]
      },
      "domino.featurestore.api.FeatureViewAddProjectDto": {
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "domino.jobs.interface.JobUsageInJob": {
        "properties": {
          "cpu": {
            "type": "number",
            "format": "double"
          },
          "memory": {
            "type": "number",
            "format": "double"
          }
        },
        "required": [
          "cpu",
          "memory"
        ]
      },
      "domino.modelmanager.api.ModelVersion": {
        "properties": {
          "modelVersionId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "modelId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "projectId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "commitId": {
            "type": "string"
          },
          "file": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.filesync.sync.RelativeFilePath"
          },
          "function": {
            "type": "string",
            "nullable": true
          },
          "excludeFiles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.filesync.sync.RelativeFilePath"
            }
          },
          "registeredModelName": {
            "type": "string",
            "nullable": true
          },
          "registeredModelVersion": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "environmentId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "environmentRevisionId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "dataPlaneId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "number": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "createdBy": {
            "$ref": "#/components/schemas/domino.modelmanager.api.ModelOwner"
          },
          "created": {
            "type": "integer",
            "format": "epoch"
          }
        },
        "required": [
          "modelVersionId",
          "modelId",
          "projectId",
          "commitId",
          "excludeFiles",
          "environmentId",
          "environmentRevisionId",
          "dataPlaneId",
          "createdBy",
          "created"
        ]
      },
      "domino.admin.usermanagement.api.AggregateUserActivityReport": {
        "properties": {
          "enabledUsers": {
            "type": "integer",
            "format": "int32"
          },
          "practitioners": {
            "type": "integer",
            "format": "int32"
          },
          "resultsConsumers": {
            "type": "integer",
            "format": "int32"
          },
          "reportEndDate": {
            "type": "string",
            "nullable": true
          },
          "licenseQuota": {
            "type": "integer",
            "format": "int32"
          },
          "recentUsageDays": {
            "type": "integer",
            "format": "int32"
          },
          "hideLicenseType": {
            "type": "boolean"
          },
          "roleBasedCounts": {
            "type": "object",
            "additionalProperties": {
              "type": "integer"
            }
          }
        },
        "required": [
          "enabledUsers",
          "practitioners",
          "resultsConsumers",
          "licenseQuota",
          "recentUsageDays",
          "hideLicenseType",
          "roleBasedCounts"
        ]
      },
      "domino.workspace.api.git.StageRemoteCommitFileRequest": {
        "properties": {
          "repoId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "filePath": {
            "type": "string"
          }
        },
        "required": [
          "repoId",
          "filePath"
        ]
      },
      "domino.environments.api.NewEnvironment": {
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "visibility": {
            "type": "string",
            "enum": [
              "Global",
              "Private",
              "Organization"
            ]
          },
          "ownerId": {
            "nullable": true,
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "addBaseDependencies": {
            "type": "boolean"
          },
          "clusterTypes": {
            "type": "array",
            "nullable": true,
            "items": {
              "type": "string",
              "enum": [
                "Dask",
                "Spark",
                "Ray",
                "MPI"
              ]
            }
          },
          "isCurated": {
            "type": "boolean"
          },
          "skipFirstBuild": {
            "type": "boolean"
          },
          "isRestricted": {
            "type": "boolean",
            "nullable": true
          },
          "projectsCount": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "lastUpdated": {
            "nullable": true,
            "type": "string",
            "format": "date-time"
          },
          "templateMetadata": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.environments.api.EnvironmentTemplateMetadata"
          }
        },
        "required": [
          "name",
          "description",
          "visibility",
          "addBaseDependencies",
          "isCurated",
          "skipFirstBuild"
        ]
      },
      "domino.computegrid.PaginationFilter": {
        "properties": {
          "limit": {
            "type": "integer",
            "format": "int32"
          },
          "offset": {
            "type": "integer",
            "format": "int32"
          },
          "latestTimeNano": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "limit",
          "offset"
        ]
      },
      "domino.guardrails.web.RecordGuardrailsAuditEventRequest": {
        "type": "object",
        "required": [
          "eventType",
          "eventDetails"
        ],
        "properties": {
          "eventType": {
            "type": "string",
            "description": "audit event type",
            "enum": [
              "CreateGovernancePolicy",
              "UpdateGovernancePolicyDefinition",
              "ChangeGovernancePolicyStatus",
              "DeleteGovernancePolicy",
              "CreateGovernanceBundle",
              "ChangeGovernanceBundleStage",
              "DeleteGovernanceBundle",
              "CreateGovernanceApproval",
              "AcceptGovernanceApproval",
              "AddGovernanceBundleAttachment",
              "RemoveGovernanceBundleAttachment",
              "CreateGovernanceResults"
            ]
          },
          "eventDetails": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "domino.dataset.api.DatasetSnapshotSummaryDto": {
        "type": "object",
        "properties": {
          "datasetDescription": {
            "nullable": true,
            "type": "string"
          },
          "runUrl": {
            "nullable": true,
            "type": "string"
          },
          "authorUsername": {
            "nullable": true,
            "type": "string"
          },
          "snapshot": {
            "$ref": "#/components/schemas/domino.dataset.api.DatasetSnapshotDto"
          },
          "originName": {
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "snapshot"
        ]
      },
      "domino.gitproviders.api.GetReposApiResponse": {
        "properties": {
          "totalHits": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.gitproviders.api.RepoDTO"
            }
          }
        },
        "required": [
          "totalHits",
          "items"
        ]
      },
      "domino.workspaces.api.WorkspaceResourceUsage": {
        "properties": {
          "cpu": {
            "type": "number",
            "format": "double"
          },
          "memory": {
            "type": "number",
            "format": "double"
          },
          "timestamp": {
            "type": "integer",
            "format": "epoch"
          }
        },
        "required": [
          "cpu",
          "memory",
          "timestamp"
        ]
      },
      "domino.jobs.interface.JobPagination": {
        "properties": {
          "offset": {
            "type": "integer",
            "format": "int32"
          },
          "limit": {
            "type": "integer",
            "format": "int32"
          },
          "sortBy": {
            "type": "string",
            "enum": [
              "asc",
              "desc"
            ]
          },
          "orderBy": {
            "type": "string",
            "enum": [
              "number",
              "duration",
              "dominoStatsField",
              "queued",
              "numberAsDouble",
              "command",
              "commentCount",
              "status",
              "title",
              "user"
            ]
          },
          "dominoStatsSortFieldName": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "offset",
          "limit",
          "sortBy",
          "orderBy"
        ]
      },
      "domino.environments.api.EnvironmentPermissions": {
        "properties": {
          "canEdit": {
            "type": "boolean"
          },
          "canArchive": {
            "type": "boolean"
          }
        },
        "required": [
          "canEdit",
          "canArchive"
        ]
      },
      "domino.workspace.web.WorkspaceEvents": {
        "properties": {
          "changeEvent": {
            "$ref": "#/components/schemas/domino.workspace.api.RestartableWorkspaceChangeEvent"
          }
        },
        "required": [
          "changeEvent"
        ]
      },
      "domino.workspace.api.WorkspaceClusterConfigDto": {
        "properties": {
          "computeEnvironmentId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "computeEnvironmentRevisionSpec": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "enum": [
                  "ActiveRevision",
                  "LatestRevision",
                  "RestrictedRevision"
                ]
              },
              {
                "type": "object",
                "required": [
                  "revisionId"
                ],
                "properties": {
                  "revisionId": {
                    "type": "string"
                  }
                }
              }
            ]
          },
          "executorCount": {
            "type": "integer",
            "format": "int32"
          },
          "executorHardwareTierId": {
            "$ref": "#/components/schemas/domino.hardwaretier.api.HardwareTierIdentifier"
          },
          "volumeSize": {
            "nullable": true,
            "$ref": "#/components/schemas/Information"
          },
          "masterHardwareTierId": {
            "$ref": "#/components/schemas/domino.hardwaretier.api.HardwareTierIdentifier"
          }
        },
        "required": [
          "computeEnvironmentId",
          "executorCount",
          "executorHardwareTierId",
          "masterHardwareTierId"
        ]
      },
      "domino.projects.web.UpdateCommentInfo": {
        "properties": {
          "commentThreadId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "commentId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "commentBody": {
            "type": "string"
          }
        },
        "required": [
          "commentThreadId",
          "commentId",
          "commentBody"
        ]
      },
      "domino.nucleus.dataset.ui.CreateSnapshotWithWorkspaceInput": {
        "properties": {
          "datasetId": {
            "type": "string"
          },
          "outputPath": {
            "type": "string"
          },
          "workspaceDefinitionId": {
            "type": "string"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "commitId": {
            "type": "string",
            "nullable": true
          },
          "hardwareTierId": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "datasetId",
          "outputPath",
          "workspaceDefinitionId"
        ]
      },
      "domino.activity.api.CommentedOnJobMetaData": {
        "properties": {
          "jobId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "jobNumber": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string"
          }
        },
        "required": [
          "jobId",
          "jobNumber",
          "title"
        ]
      },
      "domino.admin.interface.ServiceAccountTokenMetadataAndToken": {
        "properties": {
          "name": {
            "type": "string"
          },
          "serviceAccountIdpId": {
            "type": "string"
          },
          "token": {
            "type": "string"
          },
          "isValid": {
            "type": "boolean"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "expiresAt": {
            "nullable": true,
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "name",
          "serviceAccountIdpId",
          "token",
          "isValid",
          "createdAt"
        ]
      },
      "domino.projects.templates.api.models.BaseTemplatesCollectionDto": {
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.projects.templates.api.models.BaseTemplateDto"
            }
          },
          "paginationDetails": {
            "$ref": "#/components/schemas/domino.apiserverutils.pagination.PaginationFilter"
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          }
        },
        "required": [
          "items",
          "paginationDetails",
          "totalCount"
        ]
      },
      "domino.gruz.api.ExecutorHostnameMapping": {
        "properties": {
          "targetIp": {
            "type": "string"
          }
        },
        "required": [
          "targetIp"
        ]
      },
      "domino.activity.api.RegisteredModelStageTransitionedMetadata": {
        "properties": {
          "modelVersion": {
            "type": "integer",
            "format": "int32"
          },
          "initialStage": {
            "type": "string"
          },
          "targetStage": {
            "type": "string"
          }
        },
        "required": [
          "modelVersion",
          "initialStage",
          "targetStage"
        ]
      },
      "domino.common.gateway.search.SearchPageGatewayDTO": {
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.common.gateway.search.SearchPageResultGatewayDTO"
            }
          },
          "hasMoreResults": {
            "type": "boolean"
          }
        },
        "required": [
          "results",
          "hasMoreResults"
        ]
      },
      "domino.datamount.web.UpdateDataMountStatusRequest": {
        "properties": {
          "datamountIds": {
            "type": "array",
            "items": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            }
          }
        },
        "required": [
          "datamountIds"
        ]
      },
      "domino.projects.api.UpdateProjectName": {
        "properties": {
          "newName": {
            "type": "string"
          }
        },
        "required": [
          "newName"
        ]
      },
      "domino.scheduledjob.api.NewScheduledJobDto": {
        "properties": {
          "title": {
            "type": "string"
          },
          "command": {
            "type": "string"
          },
          "schedule": {
            "$ref": "#/components/schemas/domino.scheduledjob.api.EditCronScheduleDTO"
          },
          "timezoneId": {
            "type": "string"
          },
          "isPaused": {
            "type": "boolean"
          },
          "publishModelId": {
            "nullable": true,
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "allowConcurrentExecution": {
            "type": "boolean"
          },
          "hardwareTierIdentifier": {
            "type": "string"
          },
          "overrideEnvironmentId": {
            "nullable": true,
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "environmentRevisionSpec": {
            "oneOf": [
              {
                "type": "string",
                "enum": [
                  "ActiveRevision",
                  "LatestRevision",
                  "RestrictedRevision"
                ]
              },
              {
                "type": "object",
                "required": [
                  "revisionId"
                ],
                "properties": {
                  "revisionId": {
                    "type": "string"
                  }
                }
              }
            ]
          },
          "scheduledByUserId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "notifyOnCompleteEmailAddresses": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "datasetConfig": {
            "type": "string",
            "nullable": true
          },
          "computeClusterProperties": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.scheduledjob.api.ComputeClusterConfigSpecDto"
          },
          "volumeSpecificationOverride": {
            "nullable": true,
            "type": "object"
          },
          "externalVolumeMounts": {
            "type": "array",
            "nullable": true,
            "items": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            }
          },
          "mainRepoGitRef": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.projects.api.repositories.ReferenceDTO"
          },
          "snapshotDatasetsOnCompletion": {
            "type": "boolean",
            "nullable": true
          }
        },
        "required": [
          "title",
          "command",
          "schedule",
          "timezoneId",
          "isPaused",
          "allowConcurrentExecution",
          "hardwareTierIdentifier",
          "environmentRevisionSpec",
          "scheduledByUserId",
          "notifyOnCompleteEmailAddresses"
        ]
      },
      "domino.jobs.interface.LogsWithProblemSuggestion": {
        "properties": {
          "logset": {
            "$ref": "#/components/schemas/domino.jobs.interface.LogSet"
          },
          "problemSuggestion": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.jobs.interface.JobProblemSuggestion"
          }
        },
        "required": [
          "logset"
        ]
      },
      "domino.projectManagement.web.LinkFileToGoalRequest": {
        "properties": {
          "fileName": {
            "type": "string"
          },
          "commitId": {
            "type": "string"
          },
          "projectId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "goalId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          }
        },
        "required": [
          "fileName",
          "commitId",
          "projectId",
          "goalId"
        ]
      },
      "domino.workspaces.api.HardwareTierDetails": {
        "properties": {
          "name": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "isArchived": {
            "type": "boolean"
          }
        },
        "required": [
          "name",
          "id",
          "isArchived"
        ]
      },
      "domino.dataplane.DataPlaneStatus": {
        "properties": {
          "state": {
            "type": "string",
            "enum": [
              "Healthy",
              "Unhealthy",
              "Error",
              "Disconnected"
            ]
          },
          "message": {
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "lastHeartbeatTimestamp": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "requiresUpgrade": {
            "type": "boolean"
          }
        },
        "required": [
          "state",
          "message",
          "version",
          "requiresUpgrade"
        ]
      },
      "domino.jobs.interface.StageTime": {
        "properties": {
          "submissionTime": {
            "type": "integer",
            "format": "epoch"
          },
          "runStartTime": {
            "type": "integer",
            "format": "epoch",
            "nullable": true
          },
          "completedTime": {
            "type": "integer",
            "format": "epoch",
            "nullable": true
          }
        },
        "required": [
          "submissionTime"
        ]
      },
      "domino.common.user.Person": {
        "type": "object",
        "properties": {
          "lastName": {
            "description": "Person last name",
            "type": "string"
          },
          "firstName": {
            "description": "Person first name",
            "type": "string"
          },
          "phoneNumber": {
            "nullable": true,
            "description": "Person phone number",
            "type": "string"
          },
          "avatarUrl": {
            "description": "Url of the person's avatar",
            "type": "string"
          },
          "idpId": {
            "type": "string",
            "nullable": true
          },
          "companyName": {
            "nullable": true,
            "description": "Person's company name",
            "type": "string"
          },
          "fullName": {
            "description": "Person full name",
            "type": "string"
          },
          "id": {
            "pattern": "^[0-9a-f]{24}$",
            "description": "Person user id",
            "type": "string"
          },
          "userName": {
            "description": "Person username",
            "type": "string"
          },
          "email": {
            "nullable": true,
            "description": "Person email",
            "type": "string"
          }
        },
        "required": [
          "firstName",
          "lastName",
          "fullName",
          "userName",
          "avatarUrl",
          "id"
        ]
      },
      "domino.projects.templates.api.models.TemplateHubDto": {
        "properties": {
          "name": {
            "type": "string"
          },
          "kind": {
            "type": "string",
            "enum": [
              "shared",
              "ecosystem",
              "mine"
            ]
          },
          "totalTemplates": {
            "type": "integer",
            "format": "int32"
          },
          "updated": {
            "nullable": true,
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "name",
          "kind",
          "totalTemplates"
        ]
      },
      "domino.scheduledjob.api.ScheduledJobForRequestingUserDto": {
        "properties": {
          "scheduledJob": {
            "$ref": "#/components/schemas/domino.scheduledjob.api.ScheduledJobDto"
          },
          "canEdit": {
            "type": "boolean"
          }
        },
        "required": [
          "scheduledJob",
          "canEdit"
        ]
      },
      "domino.common.modelproduct.AppVersionOverview": {
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "started": {
            "type": "integer",
            "format": "epoch"
          },
          "duration": {
            "type": "integer",
            "format": "int32"
          },
          "publishingUserId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "publishingUsername": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "goalIds": {
            "type": "array",
            "items": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            }
          }
        },
        "required": [
          "id",
          "started",
          "duration",
          "publishingUserId",
          "publishingUsername",
          "status",
          "goalIds"
        ]
      },
      "domino.nucleus.user.Response": {
        "properties": {
          "message": {
            "type": "string"
          }
        },
        "required": [
          "message"
        ]
      },
      "domino.workspaces.web.UpdateWorkspaceTitle": {
        "properties": {
          "title": {
            "type": "string"
          }
        },
        "required": [
          "title"
        ]
      },
      "domino.modelmanager.web.ModelDeploymentStatusApiResponse": {
        "properties": {
          "modelId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "modelVersionId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "status": {
            "type": "string"
          }
        },
        "required": [
          "modelId",
          "modelVersionId",
          "status"
        ]
      },
      "domino.projectManagement.web.UnlinkJobFromGoalRequest": {
        "properties": {
          "goalId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          }
        },
        "required": [
          "goalId"
        ]
      },
      "domino.hardwaretier.api.HardwareTierDto": {
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "hwtResources": {
            "$ref": "#/components/schemas/domino.hardwaretier.api.HwtResources"
          },
          "hwtFlags": {
            "$ref": "#/components/schemas/domino.hardwaretier.api.HwtFlags"
          },
          "clusterType": {
            "type": "string",
            "nullable": true,
            "enum": [
              "ClassicOnPremises",
              "ClassicAWS",
              "Kubernetes"
            ]
          },
          "gpuConfiguration": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.hardwaretier.api.HardwareTierGpuConfigurationDto"
          },
          "centsPerMinute": {
            "type": "number",
            "format": "double"
          },
          "creationTime": {
            "type": "string",
            "format": "date-time"
          },
          "updateTime": {
            "type": "string",
            "format": "date-time"
          },
          "nodePool": {
            "type": "string",
            "nullable": true
          },
          "computeClusterRestrictions": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.hardwaretier.api.HardwareTierComputeClusterRestrictionsDto"
          },
          "maxSimultaneousExecutions": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "overprovisioning": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.hardwaretier.api.HardwareTierOverprovisioningDto"
          },
          "podCustomization": {
            "$ref": "#/components/schemas/domino.hardwaretier.api.HardwareTierPodCustomizationDto"
          },
          "dataPlaneId": {
            "nullable": true,
            "type": "string"
          },
          "capacity": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.hardwaretier.api.HardwareTierCapacity"
          },
          "tags": {
            "type": "array",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "availabilityZones": {
            "type": "array",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "required": [
          "id",
          "name",
          "hwtResources",
          "hwtFlags",
          "centsPerMinute",
          "creationTime",
          "updateTime",
          "podCustomization",
          "metadata"
        ]
      },
      "domino.server.controlcenter.HardwareTiersUtilizationDTO": {
        "description": "TODO describe",
        "type": "object",
        "properties": {
          "completedRunsCount": {
            "format": "int32",
            "description": "How many runs was executed in this hardware tier",
            "type": "integer"
          },
          "estimatedCostVariation": {
            "format": "double",
            "description": "How much the `estimatedCost` changed recently",
            "type": "number"
          },
          "averageQueueTimeInSeconds": {
            "format": "double",
            "description": "TODO describe",
            "type": "number"
          },
          "estimatedCostPerHour": {
            "format": "double",
            "description": "TODO describe",
            "type": "number"
          },
          "name": {
            "description": "TODO describe",
            "type": "string"
          },
          "costEfficiency": {
            "format": "double",
            "description": "TODO describe",
            "type": "number"
          },
          "utilization": {
            "format": "double",
            "description": "TODO describe",
            "type": "number"
          },
          "id": {
            "description": "TODO describe",
            "type": "string"
          },
          "estimatedCost": {
            "format": "double",
            "description": "TODO describe",
            "type": "number"
          },
          "utilizationVariation": {
            "format": "double",
            "description": "How much the `utilization` changed recently",
            "type": "number"
          }
        },
        "required": [
          "id",
          "name",
          "costEfficiency",
          "utilization",
          "utilizationVariation",
          "averageQueueTimeInSeconds",
          "estimatedCost",
          "estimatedCostVariation",
          "estimatedCostPerHour",
          "completedRunsCount"
        ]
      },
      "domino.datasetrw.web.CreateSnapshotFromExecutionRequest": {
        "properties": {
          "creatingUserId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "executionId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "datasetId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          }
        },
        "required": [
          "creatingUserId",
          "executionId",
          "datasetId"
        ]
      },
      "domino.workspace.web.CreateWorkspaceRequest": {
        "properties": {
          "name": {
            "type": "string"
          },
          "environmentId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "environmentRevisionSpec": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "enum": [
                  "ActiveRevision",
                  "LatestRevision",
                  "RestrictedRevision"
                ]
              },
              {
                "type": "object",
                "required": [
                  "revisionId"
                ],
                "properties": {
                  "revisionId": {
                    "type": "string"
                  }
                }
              }
            ]
          },
          "hardwareTierId": {
            "$ref": "#/components/schemas/domino.hardwaretier.api.HardwareTierIdentifier"
          },
          "tools": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "clusterConfig": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.workspace.api.WorkspaceClusterConfigDto"
          },
          "computeClusterConfig": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.workspace.api.ComputeClusterConfigDto"
          },
          "externalVolumeMounts": {
            "type": "array",
            "items": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            }
          },
          "overrideMainGitRepoRef": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.projects.api.repositories.ReferenceDTO"
          },
          "workspaceReproductionDetails": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.workspace.api.WorkspaceReproductionDetailsDto"
          },
          "overrideVolumeSizeGiB": {
            "type": "number",
            "format": "double",
            "nullable": true
          }
        },
        "required": [
          "name",
          "environmentId",
          "hardwareTierId",
          "tools",
          "externalVolumeMounts"
        ]
      },
      "domino.notifications.UpdateNotificationRequest": {
        "type": "object",
        "properties": {
          "expired": {
            "type": "boolean",
            "description": "mark the notification as expired (only true is supported)"
          }
        }
      },
      "domino.projects.api.repositories.responses.GitApiResponseWrapper[domino.gitproviders.api.GetOwnersApiResponse]": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/domino.gitproviders.api.GetOwnersApiResponse"
          }
        },
        "required": [
          "data"
        ]
      },
      "RunType": {
        "type": "string",
        "description": "What is the type of the run",
        "enum": [
          "App",
          "Batch",
          "Endpoint",
          "Launcher",
          "Scheduled",
          "SSHProxy",
          "Workspace",
          "Other"
        ]
      },
      "domino.projects.templates.api.models.ProjectTemplateProjectSettingsDto": {
        "properties": {
          "requireCommitMessage": {
            "type": "boolean",
            "nullable": true
          },
          "projectGoalStages": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/domino.projects.templates.api.models.ProjectTemplateGoalStagesDto"
            }
          }
        }
      },
      "domino.projects.templates.api.models.NewCustomerTemplateDto": {
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "access": {
            "$ref": "#/components/schemas/domino.projects.templates.api.models.TemplateAccessDto"
          },
          "type": {
            "type": "string",
            "enum": [
              "customer",
              "ecosystem"
            ]
          },
          "sourceProject": {
            "$ref": "#/components/schemas/domino.projects.templates.api.models.NewSourceProjectDto"
          },
          "definition": {
            "$ref": "#/components/schemas/domino.projects.templates.api.models.NewTemplateDefinitionDto"
          },
          "billingTag": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.projects.api.BillingTag"
          }
        },
        "required": [
          "name",
          "access",
          "type",
          "sourceProject",
          "definition"
        ]
      },
      "domino.featurestore.web.UpdateFeatureStoreSyncResultRequest": {
        "properties": {
          "featureStoreId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "runId": {
            "type": "string"
          },
          "syncStatus": {
            "type": "string",
            "enum": [
              "Success",
              "Failure"
            ]
          }
        },
        "required": [
          "featureStoreId",
          "runId",
          "syncStatus"
        ]
      },
      "domino.admin.interface.ComputeNodeStatus": {
        "properties": {
          "conditionType": {
            "type": "string"
          },
          "conditionStatus": {
            "type": "string"
          },
          "reason": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "lastHeartbeatTime": {
            "type": "string",
            "format": "date-time"
          },
          "lastTransitionTime": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "conditionType",
          "conditionStatus",
          "reason",
          "message",
          "lastHeartbeatTime",
          "lastTransitionTime"
        ]
      },
      "domino.workspace.api.WorkspaceDiskUsageDto": {
        "properties": {
          "diskUsageGiB": {
            "type": "number",
            "format": "double"
          },
          "diskUsagePercent": {
            "type": "number",
            "format": "double"
          },
          "maxDiskUsageGib": {
            "type": "number",
            "format": "double"
          },
          "hasHighDiskUsage": {
            "type": "boolean"
          }
        },
        "required": [
          "diskUsageGiB",
          "diskUsagePercent",
          "maxDiskUsageGib",
          "hasHighDiskUsage"
        ]
      },
      "domino.projectManagement.api.PmOAuth1aConfiguration": {
        "properties": {
          "applicationUrl": {
            "type": "string"
          },
          "applicationName": {
            "type": "string"
          },
          "applicationType": {
            "type": "string"
          },
          "createIncomingLink": {
            "type": "boolean"
          },
          "inComingConsumerKey": {
            "type": "string"
          },
          "inComingConsumerName": {
            "type": "string"
          },
          "publicKey": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "applicationUrl",
          "applicationName",
          "applicationType",
          "createIncomingLink",
          "inComingConsumerKey",
          "inComingConsumerName"
        ]
      },
      "domino.workspace.api.VolumeMountDto": {
        "properties": {
          "mountPath": {
            "type": "string"
          },
          "subPath": {
            "type": "string",
            "nullable": true
          },
          "readOnly": {
            "type": "boolean"
          }
        },
        "required": [
          "mountPath",
          "readOnly"
        ]
      },
      "domino.workspace.api.git.ForcePushResolutionRequest": {
        "properties": {
          "repositories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.workspace.api.git.MergeConflictRepository"
            }
          }
        },
        "required": [
          "repositories"
        ]
      },
      "domino.workspaces.api.Workspace": {
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "projectId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "title": {
            "type": "string"
          },
          "definitionTitle": {
            "type": "string"
          },
          "stageTime": {
            "$ref": "#/components/schemas/domino.workspaces.api.StageTime"
          },
          "startedBy": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.workspaces.api.WorkspaceStartedBy"
          },
          "number": {
            "type": "integer",
            "format": "int32"
          },
          "isCompleted": {
            "type": "boolean"
          },
          "isArchived": {
            "type": "boolean"
          },
          "queuedWorkspaceHistoryDetails": {
            "$ref": "#/components/schemas/domino.workspaces.api.QueuedWorkspaceHistoryDetails"
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.workspaces.api.WorkspaceTag"
            }
          },
          "usage": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.workspaces.api.WorkspaceResourceUsage"
          },
          "commentsCount": {
            "type": "integer",
            "format": "int32"
          },
          "status": {
            "type": "string"
          },
          "inputCommitId": {
            "type": "string"
          },
          "outputCommitId": {
            "type": "string",
            "nullable": true
          },
          "dominoStats": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.workspaces.api.DominoStats"
            }
          },
          "dependentRepositories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.workspaces.api.DependentRepository"
            }
          },
          "dependentDatasetMounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.workspaces.api.DependentDatasetMount"
            }
          },
          "dependentProjects": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.workspaces.api.DependentProject"
            }
          },
          "autoSyncSettings": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.workspaces.api.WorkspaceAutoSync"
          },
          "isRestartable": {
            "type": "boolean"
          },
          "dependentExternalVolumeMounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.workspaces.api.DependentExternalVolumeMount"
            }
          }
        },
        "required": [
          "id",
          "projectId",
          "title",
          "definitionTitle",
          "stageTime",
          "number",
          "isCompleted",
          "isArchived",
          "queuedWorkspaceHistoryDetails",
          "tags",
          "commentsCount",
          "status",
          "inputCommitId",
          "dominoStats",
          "dependentRepositories",
          "dependentDatasetMounts",
          "dependentProjects",
          "isRestartable",
          "dependentExternalVolumeMounts"
        ]
      },
      "domino.gitproviders.api.OwnerDTO": {
        "properties": {}
      },
      "domino.projectManagement.api.PmTicketSummary": {
        "properties": {
          "id": {
            "$ref": "#/components/schemas/domino.projectManagement.api.PmId"
          },
          "key": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "key",
          "name"
        ]
      },
      "domino.files.interface.ProjectCodeCreateEditDto": {
        "properties": {
          "atHeadCommit": {
            "type": "boolean"
          },
          "content": {
            "type": "string"
          },
          "currentCommitId": {
            "type": "string"
          },
          "defaultValues": {
            "$ref": "#/components/schemas/domino.files.interface.DefaultValues"
          },
          "filename": {
            "type": "string"
          },
          "isDefaultAppSh": {
            "type": "boolean"
          },
          "oldPath": {
            "type": "string"
          },
          "relativeBreadCrumbs": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          },
          "showSaveAndRun": {
            "type": "boolean"
          },
          "status": {
            "type": "string",
            "enum": [
              "Active",
              "Deleted",
              "Large",
              "New"
            ]
          }
        },
        "required": [
          "atHeadCommit",
          "content",
          "currentCommitId",
          "defaultValues",
          "filename",
          "isDefaultAppSh",
          "oldPath",
          "relativeBreadCrumbs",
          "showSaveAndRun",
          "status"
        ]
      },
      "domino.nucleus.project.ProjectSettingsDto": {
        "properties": {
          "defaultEnvironmentId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "defaultEnvironmentRevisionSpec": {
            "oneOf": [
              {
                "type": "string",
                "enum": [
                  "ActiveRevision",
                  "LatestRevision",
                  "RestrictedRevision"
                ]
              },
              {
                "type": "object",
                "required": [
                  "revisionId"
                ],
                "properties": {
                  "revisionId": {
                    "type": "string"
                  }
                }
              }
            ]
          },
          "defaultHardwareTierId": {
            "type": "string"
          },
          "sparkClusterMode": {
            "type": "string",
            "enum": [
              "Local",
              "Standalone",
              "Yarn",
              "OnDemand"
            ]
          },
          "defaultVolumeSizeGiB": {
            "type": "number",
            "format": "double"
          },
          "maxVolumeSizeGiB": {
            "type": "number",
            "format": "double"
          },
          "minVolumeSizeGiB": {
            "type": "number",
            "format": "double"
          },
          "recommendedVolumeSizeGiB": {
            "type": "number",
            "format": "double"
          }
        },
        "required": [
          "defaultEnvironmentId",
          "defaultEnvironmentRevisionSpec",
          "defaultHardwareTierId",
          "sparkClusterMode",
          "defaultVolumeSizeGiB",
          "maxVolumeSizeGiB",
          "minVolumeSizeGiB",
          "recommendedVolumeSizeGiB"
        ]
      },
      "domino.admin.interface.ComputeNodeCpuUtilization": {
        "properties": {
          "total": {
            "type": "number",
            "format": "double"
          },
          "requested": {
            "type": "number",
            "format": "double"
          },
          "available": {
            "type": "number",
            "format": "double"
          }
        },
        "required": [
          "total",
          "requested",
          "available"
        ]
      },
      "domino.jobs.interface.WorkflowDetails": {
        "properties": {
          "workflowOrchestrator": {
            "type": "string"
          },
          "executionMetadata": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.jobs.interface.OrchestratorExecutionMetadata"
          }
        },
        "required": [
          "workflowOrchestrator"
        ]
      },
      "domino.environments.api.EnvironmentRevisionSummary": {
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "name": {
            "type": "string"
          },
          "revisionId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "revisionNumber": {
            "type": "integer",
            "format": "int32"
          },
          "revisionType": {
            "type": "string",
            "enum": [
              "Active",
              "Latest",
              "Pinned",
              "Restricted"
            ]
          },
          "isRestricted": {
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "name",
          "revisionId",
          "revisionNumber",
          "revisionType",
          "isRestricted"
        ]
      },
      "domino.notifications.AdminNotification": {
        "type": "object",
        "required": [
          "notification",
          "timeframe",
          "expired"
        ],
        "properties": {
          "notification": {
            "$ref": "#/components/schemas/domino.notifications.Notification"
          },
          "timeframe": {
            "$ref": "#/components/schemas/domino.notifications.Timeframe"
          },
          "expired": {
            "type": "boolean",
            "description": "has this notification expired?"
          },
          "limitedAudience": {
            "$ref": "#/components/schemas/domino.notifications.LimitedAudience"
          }
        }
      },
      "domino.computecluster.api.ComputeClusterConfig": {
        "properties": {
          "clusterType": {
            "$ref": "#/components/schemas/ComputeClusterType"
          },
          "computeEnvironmentId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "computeEnvironmentRevisionSpec": {
            "oneOf": [
              {
                "type": "string",
                "enum": [
                  "ActiveRevision",
                  "LatestRevision",
                  "RestrictedRevision"
                ]
              },
              {
                "type": "object",
                "required": [
                  "revisionId"
                ],
                "properties": {
                  "revisionId": {
                    "type": "string"
                  }
                }
              }
            ]
          },
          "masterHardwareTierId": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.hardwaretier.api.HardwareTierIdentifier"
          },
          "workerCount": {
            "type": "integer",
            "format": "int32"
          },
          "maxWorkerCount": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "workerHardwareTierId": {
            "$ref": "#/components/schemas/domino.hardwaretier.api.HardwareTierIdentifier"
          },
          "workerStorage": {
            "nullable": true,
            "$ref": "#/components/schemas/Information"
          },
          "extraConfigs": {
            "nullable": true,
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "required": [
          "clusterType",
          "computeEnvironmentId",
          "computeEnvironmentRevisionSpec",
          "workerCount",
          "workerHardwareTierId"
        ]
      },
      "domino.datasetrw.api.DatasetRwProjectMountDto": {
        "properties": {
          "datasetId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "snapshotId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "versionNumber": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "ownerProjectId": {
            "nullable": true,
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "ownerProjectOwnerUsername": {
            "type": "string"
          },
          "ownerProjectName": {
            "type": "string"
          },
          "storageSize": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "isPartialSize": {
            "type": "boolean"
          },
          "availableVersions": {
            "type": "integer",
            "format": "int32"
          },
          "mountPathsForProject": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "dataPlanes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.dataplane.DataPlaneDto"
            }
          },
          "ownerUsernames": {
            "type": "array",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "sizeInBytes": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "sizeStatus": {
            "type": "string",
            "nullable": true,
            "enum": [
              "Active",
              "Pending"
            ]
          },
          "storageInfo": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.datasetrw.api.DatasetRwStorageInfoDto"
          }
        },
        "required": [
          "datasetId",
          "snapshotId",
          "name",
          "ownerProjectOwnerUsername",
          "ownerProjectName",
          "isPartialSize",
          "availableVersions",
          "mountPathsForProject",
          "dataPlanes"
        ]
      },
      "domino.credential.api.FullDataSourceCredentialDto": {
        "type": "object",
        "properties": {
          "owner": {
            "pattern": "^[0-9a-f]{24}$",
            "type": "string"
          },
          "dataSourceId": {
            "pattern": "^[0-9a-f]{24}$",
            "type": "string"
          },
          "isEveryone": {
            "type": "boolean"
          },
          "credential": {
            "$ref": "#/components/schemas/domino.credential.api.FullCredentialDto"
          },
          "id": {
            "pattern": "^[0-9a-f]{24}$",
            "type": "string"
          },
          "users": {
            "type": "array",
            "items": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            }
          }
        },
        "required": [
          "id",
          "dataSourceId",
          "credential",
          "owner",
          "users",
          "isEveryone"
        ]
      },
      "domino.projects.api.BillingTag": {
        "properties": {
          "tag": {
            "type": "string"
          }
        },
        "required": [
          "tag"
        ]
      },
      "domino.dataset.api.ConsumedSnapshotDto": {
        "properties": {
          "consumerType": {
            "type": "object",
            "properties": {
              "entryName": {
                "type": "string",
                "enum": [
                  "user",
                  "run"
                ]
              }
            }
          },
          "consumerId": {
            "type": "string"
          },
          "datasetId": {
            "type": "string"
          },
          "datasetName": {
            "type": "string"
          },
          "snapshotId": {
            "type": "string"
          },
          "snapshotVersion": {
            "type": "integer",
            "format": "int32"
          },
          "timestamp": {
            "type": "integer",
            "format": "epoch"
          }
        },
        "required": [
          "consumerType",
          "consumerId",
          "datasetId",
          "datasetName",
          "snapshotId",
          "snapshotVersion",
          "timestamp"
        ]
      },
      "domino.nucleus.project.models.NewProject": {
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "visibility": {
            "type": "string",
            "enum": [
              "Public",
              "Searchable",
              "Private"
            ]
          },
          "ownerId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "repoToCreate": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.projects.api.repositories.requests.CreateRepoRequest"
          },
          "mainRepository": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.projects.api.ProjectGitRepositoryTemp"
          },
          "templateDetails": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.projects.api.ProjectTemplateDetails"
          },
          "collaborators": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.projects.api.CollaboratorDTO"
            }
          },
          "isRestricted": {
            "type": "boolean",
            "nullable": true
          },
          "tags": {
            "$ref": "#/components/schemas/domino.projects.api.NewTagsDTO"
          },
          "billingTag": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.projects.api.BillingTag"
          }
        },
        "required": [
          "name",
          "description",
          "visibility",
          "ownerId",
          "collaborators",
          "tags"
        ]
      },
      "domino.gruz.api.PreparedRepository": {
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "name": {
            "type": "string"
          },
          "uriHost": {
            "type": "string"
          },
          "uriPort": {
            "type": "string",
            "nullable": true
          },
          "uriPath": {
            "type": "string"
          },
          "serviceProvider": {
            "type": "string"
          },
          "ref": {
            "type": "string"
          },
          "startingRef": {
            "type": "string",
            "nullable": true
          },
          "finishedRef": {
            "type": "string",
            "nullable": true
          },
          "startingBranch": {
            "type": "string",
            "nullable": true
          },
          "finishedBranch": {
            "type": "string",
            "nullable": true
          },
          "isFeatureStore": {
            "type": "boolean",
            "nullable": true
          }
        },
        "required": [
          "id",
          "name",
          "uriHost",
          "uriPath",
          "serviceProvider",
          "ref"
        ]
      },
      "domino.workspaces.api.RepositoryChanges": {
        "properties": {
          "created": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "modified": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "deleted": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "staged": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "created",
          "modified",
          "deleted",
          "staged"
        ]
      },
      "domino.files.interface.RevisionShape": {
        "properties": {
          "runId": {
            "type": "string"
          },
          "sha": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "timestamp": {
            "type": "integer",
            "format": "int64"
          },
          "url": {
            "type": "string"
          },
          "author": {
            "$ref": "#/components/schemas/domino.files.interface.Author"
          },
          "runNumberStr": {
            "type": "string"
          },
          "runLink": {
            "type": "string"
          }
        },
        "required": [
          "runId",
          "sha",
          "message",
          "timestamp",
          "url",
          "author",
          "runNumberStr",
          "runLink"
        ]
      },
      "domino.api.ErrorResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Error message"
          }
        }
      },
      "domino.jobs.interface.EnvironmentRevisionRef": {
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "number": {
            "type": "integer",
            "format": "int32"
          },
          "isActive": {
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "number",
          "isActive"
        ]
      },
      "domino.modelmanager.api.LogLine": {
        "properties": {
          "timestamp": {
            "type": "integer",
            "format": "epoch"
          },
          "timeNano": {
            "type": "integer",
            "format": "int64"
          },
          "log": {
            "type": "string"
          },
          "streamType": {
            "type": "string"
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.modelmanager.api.LogTag"
            }
          }
        },
        "required": [
          "timestamp",
          "timeNano",
          "log",
          "streamType",
          "tags"
        ]
      },
      "domino.activity.api.ProjectGoalUpdateDescriptionActivityMetadata": {
        "properties": {
          "fromDescription": {
            "type": "string",
            "nullable": true
          },
          "toDescription": {
            "type": "string",
            "nullable": true
          },
          "projectGoalTitle": {
            "type": "string"
          }
        },
        "required": [
          "projectGoalTitle"
        ]
      },
      "domino.projectManagement.web.ArchiveProjectGoalStage": {
        "properties": {
          "stageId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          }
        },
        "required": [
          "stageId"
        ]
      },
      "domino.nucleus.modelproduct.models.UsageStatisticsTimeseriesResponse": {
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.nucleus.modelproduct.models.UsageStatisticsTimeseries"
            }
          }
        },
        "required": [
          "data"
        ]
      },
      "domino.server.projects.api.ProjectGatewayOverviewDetails": {
        "properties": {
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "isRestricted": {
            "type": "boolean",
            "nullable": true
          }
        },
        "required": [
          "updatedAt"
        ]
      }
    },
    "responses": {
      "BadRequest": {
        "description": "The server could not understand the request due to malformed syntax",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/domino.api.ErrorResponse"
            }
          }
        }
      },
      "NotImplemented": {
        "description": "The server has not yet implemented this functionality",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/domino.api.ErrorResponse"
            }
          }
        }
      },
      "NotFound": {
        "description": "The server could not find the requested resource",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/domino.api.ErrorResponse"
            }
          }
        }
      },
      "Unauthorized": {
        "description": "The current user cannot perform this operation because they are not logged in",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/domino.api.ErrorResponse"
            }
          }
        }
      },
      "Forbidden": {
        "description": "The current user is not authorized to perform this operation",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/domino.api.ErrorResponse"
            }
          }
        }
      },
      "Timeout": {
        "description": "Server operation timed out",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/domino.api.ErrorResponse"
            }
          }
        }
      },
      "ProjectManagementErrorResponse": {
        "description": "The current operation failed due to external service failure",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/domino.projectManagement.web.ErrorResponse"
            }
          }
        }
      },
      "Relogin": {
        "description": "User needs to re-login even if they are logged in and come back",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "redirectPath": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "InternalError": {
        "description": "An internal error prevented the server from performing this action",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/domino.api.ErrorResponse"
            }
          }
        }
      }
    },
    "securitySchemes": {
      "DominoApiKey": {
        "type": "apiKey",
        "in": "header",
        "name": "X-Domino-Api-Key"
      },
      "BearerAuthentication": {
        "type": "apiKey",
        "in": "header",
        "name": "Authorization"
      }
    }
  },
  "servers": [
    {
      "url": "/v4"
    }
  ]
}