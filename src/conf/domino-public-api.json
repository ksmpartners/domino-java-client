{
  "openapi": "3.0.3",
  "info": {
    "title": "Domino Public API",
    "description": "Domino Public API Endpoints",
    "version": "0.0.0"
  },
  "security": [
    {
      "DominoApiKey": []
    },
    {
      "BearerAuthentication": []
    }
  ],
  "tags": [
    {
      "name": "Audit Trail"
    },
    {
      "name": "CustomMetrics"
    },
    {
      "name": "Deployment Targets"
    },
    {
      "name": "DatasetRw"
    },
    {
      "name": "DataSource"
    },
    {
      "name": "Cost"
    },
    {
      "name": "Environments"
    },
    {
      "name": "HardwareTier"
    },
    {
      "name": "Jobs"
    },
    {
      "name": "ModelAPI"
    },
    {
      "name": "ModelDeployment"
    },
    {
      "name": "Organizations"
    },
    {
      "name": "Projects"
    },
    {
      "name": "RegisteredModels"
    },
    {
      "name": "AIGateway"
    },
    {
      "name": "Users"
    },
    {
      "name": "AsyncPredictions"
    }
  ],
  "paths": {
    "/api/admin/v1/deploymentTargetTypes": {
      "get": {
        "description": "Gets all Deployment Target Types.",
        "operationId": "getDeploymentTargetTypes",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/DeploymentTargetType"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Gets all Deployment Target Types",
        "tags": [
          "DeploymentTargets"
        ]
      }
    },
    "/api/admin/v1/deploymentTargetTypes/{deploymentTargetTypeId}": {
      "get": {
        "description": "Gets a Deployment Target Type.",
        "operationId": "getDeploymentTargetType",
        "parameters": [
          {
            "description": "ID of Deployment Target Type",
            "in": "path",
            "name": "deploymentTargetTypeId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeploymentTargetType"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Gets a Deployment Target Type",
        "tags": [
          "DeploymentTargets"
        ]
      }
    },
    "/api/admin/v1/deploymentTargets": {
      "get": {
        "description": "Gets all non-archived Deployment Targets based on the provided filters.",
        "operationId": "getDeploymentTargets",
        "parameters": [
          {
            "description": "Filter by Deployment Target name",
            "in": "query",
            "name": "name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filter by deployment type",
            "in": "query",
            "name": "deploymentType",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "How many Deployment Targets from the start to skip. Defaults to 0.",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "default": 0,
              "type": "integer"
            }
          },
          {
            "description": "Max number of Deployment Targets to fetch. Defaults to 10.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "default": 10,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedDeploymentTargets"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Gets all non-archived Deployment Targets based on the provided filters",
        "tags": [
          "DeploymentTargets"
        ]
      },
      "post": {
        "description": "Creates a new Deployment Target.",
        "operationId": "createDeploymentTarget",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewDeploymentTarget"
              }
            }
          },
          "description": "Details of the Deployment Target to create",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeploymentTarget"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Creates a new Deployment Target",
        "tags": [
          "DeploymentTargets"
        ]
      }
    },
    "/api/admin/v1/deploymentTargets/selectable": {
      "get": {
        "description": "Gets all selectable non-archived Deployment Targets based on the provided filters.",
        "operationId": "getSelectableDeploymentTargets",
        "parameters": [
          {
            "description": "Filter by Deployment Target name",
            "in": "query",
            "name": "name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filter by deployment type",
            "in": "query",
            "name": "deploymentType",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "How many Deployment Targets from the start to skip. Defaults to 0.",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "default": 0,
              "type": "integer"
            }
          },
          {
            "description": "Max number of Deployment Targets to fetch. Defaults to 10.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "default": 10,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedDeploymentTargets"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Gets all selectable non-archived Deployment Targets based on the provided filters",
        "tags": [
          "DeploymentTargets"
        ]
      }
    },
    "/api/admin/v1/deploymentTargets/{deploymentTargetId}": {
      "delete": {
        "description": "Deletes a Deployment Target.",
        "operationId": "deleteDeploymentTarget",
        "parameters": [
          {
            "description": "ID of Deployment Target",
            "in": "path",
            "name": "deploymentTargetId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Deletes a Deployment Target",
        "tags": [
          "DeploymentTargets"
        ]
      },
      "get": {
        "description": "Gets a Deployment Target.",
        "operationId": "getDeploymentTarget",
        "parameters": [
          {
            "description": "ID of Deployment Target",
            "in": "path",
            "name": "deploymentTargetId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeploymentTarget"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Gets a Deployment Target",
        "tags": [
          "DeploymentTargets"
        ]
      },
      "patch": {
        "description": "Updates a Deployment Target.",
        "operationId": "updateDeploymentTarget",
        "parameters": [
          {
            "description": "ID of Deployment Target",
            "in": "path",
            "name": "deploymentTargetId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatedDeploymentTarget"
              }
            }
          },
          "description": "Details of the Deployment Target to create",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeploymentTarget"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Updates a Deployment Target",
        "tags": [
          "DeploymentTargets"
        ]
      }
    },
    "/api/admin/v1/deploymentTargets/{deploymentTargetId}/resourceConfigurations": {
      "get": {
        "description": "Gets all non-archived Resource Configurations based on the provided filters.",
        "operationId": "getResourceConfigurations",
        "parameters": [
          {
            "description": "Filter by Resource Configuration name",
            "in": "query",
            "name": "name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "How many Resource Configurations from the start to skip. Defaults to 0.",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "default": 0,
              "type": "integer"
            }
          },
          {
            "description": "Max number of Resource Configurations to fetch. Defaults to 10.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "default": 10,
              "type": "integer"
            }
          },
          {
            "description": "ID of Deployment Target that Resource Configuration belongs to.",
            "in": "path",
            "name": "deploymentTargetId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResourceConfigurations"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Gets all non-archived Resource Configurations based on the provided filters",
        "tags": [
          "DeploymentTargets"
        ]
      },
      "post": {
        "description": "Creates a new Resource Configuration.",
        "operationId": "createResourceConfiguration",
        "parameters": [
          {
            "description": "ID of Deployment Target that Resource Configuration belongs to.",
            "in": "path",
            "name": "deploymentTargetId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewResourceConfiguration"
              }
            }
          },
          "description": "Details of the Resource Configuration to create",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceConfiguration"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Creates a new Resource Configuration",
        "tags": [
          "DeploymentTargets"
        ]
      }
    },
    "/api/admin/v1/deploymentTargets/{deploymentTargetId}/resourceConfigurations/{resourceConfigurationId}": {
      "delete": {
        "description": "Deletes a Resource Configuration.",
        "operationId": "deleteResourceConfiguration",
        "parameters": [
          {
            "description": "ID of the Deployment Target that Resource Configuration belongs to.",
            "in": "path",
            "name": "deploymentTargetId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "ID of the Resource Configuration.",
            "in": "path",
            "name": "resourceConfigurationId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Deletes a Resource Configuration",
        "tags": [
          "DeploymentTargets"
        ]
      },
      "get": {
        "description": "Gets a Resource Configuration.",
        "operationId": "getResourceConfiguration",
        "parameters": [
          {
            "description": "ID of the Deployment Target that Resource Configuration belongs to.",
            "in": "path",
            "name": "deploymentTargetId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "ID of the Resource Configuration.",
            "in": "path",
            "name": "resourceConfigurationId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceConfiguration"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Gets a Resource Configuration",
        "tags": [
          "DeploymentTargets"
        ]
      },
      "patch": {
        "description": "Updates a Resource Configuration.",
        "operationId": "updateResourceConfiguration",
        "parameters": [
          {
            "description": "ID of the Deployment Target that Resource Configuration belongs to.",
            "in": "path",
            "name": "deploymentTargetId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "ID of the Resource Configuration.",
            "in": "path",
            "name": "resourceConfigurationId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatedResourceConfiguration"
              }
            }
          },
          "description": "Details of the Resource Configuration to create",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceConfiguration"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Updates a Resource Configuration",
        "tags": [
          "DeploymentTargets"
        ]
      }
    },
    "/api/admin/v1/deploymentTargets/{deploymentTargetId}/resourceConfigurations/{resourceConfigurationId}/effectiveModelDeploymentSchema": {
      "get": {
        "description": "Gets the effective configuration for model deployments using the resource configuration.",
        "operationId": "getEffectiveModelDeploymentSchema",
        "parameters": [
          {
            "description": "ID of Deployment Target the Resource Configuration belongs to",
            "in": "path",
            "name": "deploymentTargetId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "ID of Resource Configuration",
            "in": "path",
            "name": "resourceConfigurationId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EffectiveModelDeploymentSchema"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Gets the effective configuration for model deployments using the resource configuration",
        "tags": [
          "DeploymentTargets"
        ]
      }
    },
    "/api/aigateway/v1/audit": {
      "get": {
        "description": "Gets AI Gateway audit data given filter input parameters",
        "operationId": "getAIGatewayAuditData",
        "parameters": [
          {
            "description": "Endpoint IDs to query audit data for",
            "in": "query",
            "name": "endpointIds",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "Endpoint names to query audit data for",
            "in": "query",
            "name": "endpointNames",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "Start time (iso8601)",
            "in": "query",
            "name": "startTime",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "End time (iso8601)",
            "in": "query",
            "name": "endTime",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/AIGatewayAuditDataV1"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Get AI Gateway Audit Data",
        "tags": [
          "AIGateway"
        ]
      }
    },
    "/api/aigateway/v1/endpoints": {
      "get": {
        "description": "Get all active Gateway LLMs accessible by the user",
        "operationId": "getAllGatewayEndpoints",
        "parameters": [
          {
            "description": "How many Endpoints from the start to skip. Defaults to 0.",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Max number of Endpoints to fetch. Defaults to fetching all.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "The field by which to sort the list of returned endpoints. Defaults to creation date",
            "in": "query",
            "name": "sortByField",
            "required": false,
            "schema": {
              "enum": [
                "creationDate",
                "endpointName",
                "endpointType",
                "modelProvider",
                "modelName"
              ],
              "type": "string"
            }
          },
          {
            "description": "Boolean whether to sort Endpoints ascending or descending. Defaults to false (descending).",
            "in": "query",
            "name": "shouldSortAscending",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Search string by which to filter the list of returned endpoints",
            "in": "query",
            "name": "searchFilter",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AIGatewayEnvelopeV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Get all active Gateway LLMs accessible by the user",
        "tags": [
          "AIGateway"
        ]
      },
      "post": {
        "description": "Create a new a endpoint",
        "operationId": "createGatewayEndpoint",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewEndpointV1"
              }
            }
          },
          "description": "Details of the new endpoint to create",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EndpointEnvelopeV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Create a new endpoint",
        "tags": [
          "AIGateway"
        ]
      }
    },
    "/api/aigateway/v1/endpoints/{endpointName}": {
      "delete": {
        "description": "Delete a endpoint by name",
        "operationId": "deleteGatewayEndpointByName",
        "parameters": [
          {
            "description": "Name of the endpoint to delete",
            "in": "path",
            "name": "endpointName",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Delete a endpoint by name",
        "tags": [
          "AIGateway"
        ]
      },
      "get": {
        "description": "Get a endpoint by name (returns endpoint if user has access and endpoint is active)",
        "operationId": "getGatewayEndpointByName",
        "parameters": [
          {
            "description": "Name of the endpoint to get",
            "in": "path",
            "name": "endpointName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Number of input tokens sent to the endpoint",
            "in": "query",
            "name": "numInputTokens",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EndpointEnvelopeV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Get a endpoint by name",
        "tags": [
          "AIGateway"
        ]
      },
      "patch": {
        "description": "Update a endpoint by name (change endpoint name, endpoint type, model name, model provider, or model config)",
        "operationId": "updateGatewayEndpointByName",
        "parameters": [
          {
            "description": "Name of the endpoint to update details for",
            "in": "path",
            "name": "endpointName",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatedEndpointV1"
              }
            }
          },
          "description": "Updated endpoint details",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EndpointEnvelopeV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Update a endpoint by name",
        "tags": [
          "AIGateway"
        ]
      }
    },
    "/api/aigateway/v1/endpoints/{endpointName}/permissions": {
      "get": {
        "description": "Get permissions for a endpoint by name",
        "operationId": "getGatewayEndpointPermissionsByName",
        "parameters": [
          {
            "description": "Name of the endpoint to get permissions for",
            "in": "path",
            "name": "endpointName",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EndpointPermissionsDtoV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Get permissions for a endpoint by name",
        "tags": [
          "AIGateway"
        ]
      },
      "patch": {
        "description": "Update permissions for a endpoint by name (add or remove user IDs, or change isEveryoneAllowed)",
        "operationId": "updateGatewayEndpointPermissionsByName",
        "parameters": [
          {
            "description": "Name of the endpoint to update permissions for",
            "in": "path",
            "name": "endpointName",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatedEndpointPermissionsV1"
              }
            }
          },
          "description": "Updated endpoint permissions",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EndpointPermissionsDtoV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Update permissions for a endpoint by name",
        "tags": [
          "AIGateway"
        ]
      }
    },
    "/api/cost/v1/allocation": {
      "get": {
        "description": "Retrieve cost allocation",
        "operationId": "getCostAllocation",
        "parameters": [
          {
            "description": "Duration of time over which to query. Accepts words like today, week, month, yesterday, lastweek, lastmonth; durations like 30m, 12h, 7d, or time like 2021-03-10T00:00:00Z,2021-03-11T00:00:00Z",
            "in": "query",
            "name": "window",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Aggregate the cost allocation. Accepts kubecost aggregates cluster, namespace, pod, deployment, service, daemonset, statefulset, job, cronjob, replicaset, node, container, pv, pvc, storageclass, cluster",
            "in": "query",
            "name": "aggregate",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Start time of the query. Accepts RFC3339 format, must be inside the window",
            "in": "query",
            "name": "start",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "End time of the query. Accepts RFC3339 format, must be inside the window",
            "in": "query",
            "name": "end",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "If the result will be accumulated. Default is false. If true, the result will be accumulated from the start time to the end time.",
            "in": "query",
            "name": "accumulate",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Filter the result by the kubecost filter like cluster, namespace, pod, deployment, service, daemonset, statefulset, job, cronjob, replicaset, node, container, pv, pvc, storageclass, cluster.",
            "in": "query",
            "name": "filter",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "if the idle cost will be shared",
            "in": "query",
            "name": "shareIdle",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "list of namespaces to share the costs",
            "in": "query",
            "name": "shareNamespaces",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Determines how to split shared costs among non-idle, unshared allocations.",
            "in": "query",
            "name": "shareSplit",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The cost to share",
            "in": "query",
            "name": "shareCost",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The label to share the cost",
            "in": "query",
            "name": "shareLabels",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "If the cost will be reconciled",
            "in": "query",
            "name": "reconcile",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "If the tenancy costs will be shared",
            "in": "query",
            "name": "shareTenancyCosts",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "If the idle cost will be calculated",
            "in": "query",
            "name": "idle",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "If the external cost will be calculated",
            "in": "query",
            "name": "external",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CostAllocationEnvelopeV1"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Get the cost allocation over a time window",
        "tags": [
          "Cost"
        ]
      }
    },
    "/api/cost/v1/asset": {
      "get": {
        "description": "Retrieve asset cost",
        "operationId": "getCostAssets",
        "parameters": [
          {
            "description": "Duration of time over which to query. Accepts words like today, week, month, yesterday, lastweek, lastmonth; durations like 30m, 12h, 7d, or time like 2021-03-10T00:00:00Z,2021-03-11T00:00:00Z",
            "in": "query",
            "name": "window",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Aggregate the cost allocation. Accepts kubecost aggregates cluster, namespace, pod, deployment, service, daemonset, statefulset, job, cronjob, replicaset, node, container, pv, pvc, storageclass, cluster",
            "in": "query",
            "name": "aggregate",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Start time of the query. Accepts RFC3339 format, must be inside the window",
            "in": "query",
            "name": "start",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "End time of the query. Accepts RFC3339 format, must be inside the window",
            "in": "query",
            "name": "end",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "If the result will be accumulated. Default is false. If true, the result will be accumulated from the start time to the end time.",
            "in": "query",
            "name": "accumulate",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Filter the result by the kubecost filter like cluster, namespace, pod, deployment, service, daemonset, statefulset",
            "in": "query",
            "name": "filter",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CostAssetsEnvelopeV1"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Get the asset cost over a time window",
        "tags": [
          "Cost"
        ]
      }
    },
    "/api/cost/v1/athenaConfigs": {
      "put": {
        "description": "Set AWS Billing API Configuration",
        "operationId": "setAthenaConfigs",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AthenaBillingConfigsV1"
              }
            }
          },
          "description": "AWS Billing API Config",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AthenaBillingConfigsV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Set AWS Billing API Configuration",
        "tags": [
          "Cost"
        ]
      }
    },
    "/api/cost/v1/billingtagSettings": {
      "/api/cost/v1/billingtagSettings/mode": {
        "get": {
          "description": "Get mode setting of the billing tags",
          "operationId": "getBillingTagMode",
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BillingTagsModeEnvelopeV1"
                  }
                }
              },
              "description": "Success"
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            },
            "403": {
              "$ref": "#/components/responses/403"
            },
            "404": {
              "$ref": "#/components/responses/404"
            },
            "500": {
              "$ref": "#/components/responses/500"
            }
          },
          "summary": "Get mode setting of the billing tags",
          "tags": [
            "BillingTagSettings"
          ]
        },
        "put": {
          "description": "Update mode setting of the billing tags",
          "operationId": "updateBillingTagMode",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BillingTagsModeV1"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BillingTagsModeEnvelopeV1"
                  }
                }
              },
              "description": "Success"
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            },
            "403": {
              "$ref": "#/components/responses/403"
            },
            "404": {
              "$ref": "#/components/responses/404"
            },
            "500": {
              "$ref": "#/components/responses/500"
            }
          },
          "summary": "Update mode setting of the billing tags",
          "tags": [
            "BillingTagSettings"
          ]
        }
      },
      "/api/cost/v1/billingtagSettings/notifications": {
        "get": {
          "description": "Get notifications setting of the billing tags",
          "operationId": "getBillingTagNotification",
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BillingTagsNotificationsEnvelopeV1"
                  }
                }
              },
              "description": "Success"
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            },
            "403": {
              "$ref": "#/components/responses/403"
            },
            "404": {
              "$ref": "#/components/responses/404"
            },
            "500": {
              "$ref": "#/components/responses/500"
            }
          },
          "summary": "Get notifications setting of the billing tags",
          "tags": [
            "BillingTagSettings"
          ]
        },
        "put": {
          "description": "Update notifications setting of the billing tags",
          "operationId": "updateBillingTagNotification",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BillingTagsNotificationsV1"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BillingTagsNotificationsEnvelopeV1"
                  }
                }
              },
              "description": "Success"
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            },
            "403": {
              "$ref": "#/components/responses/403"
            },
            "404": {
              "$ref": "#/components/responses/404"
            },
            "500": {
              "$ref": "#/components/responses/500"
            }
          },
          "summary": "Update notifications setting of the billing tags",
          "tags": [
            "BillingTagSettings"
          ]
        }
      },
      "get": {
        "description": "Get  billing tags setting",
        "operationId": "getBillingTagSettings",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BillingTagsSettingsEnvelopeV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Get  billing tags setting",
        "tags": [
          "BillingTagSettings"
        ]
      },
      "put": {
        "description": "Update billing tags setting",
        "operationId": "updateBillingTagSettings",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BillingTagsSettingsV1"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BillingTagsSettingsEnvelopeV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Update billing tags setting",
        "tags": [
          "BillingTagSettings"
        ]
      }
    },
    "/api/cost/v1/billingtags": {
      "get": {
        "description": "Get billing codes that a user can see.",
        "operationId": "getActiveBillingTags",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BillingTagsEnvelopeV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Get usable billing codes",
        "tags": [
          "BillingTag"
        ]
      },
      "post": {
        "description": "Upsert billing codes.",
        "operationId": "upsertBillingTags",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewBillingTagsV1"
              }
            }
          },
          "description": "Billing codes to upsert",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BillingTagsEnvelopeV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Upsert billing codes",
        "tags": [
          "BillingTag"
        ]
      }
    },
    "/api/cost/v1/billingtags/{tag}": {
      "delete": {
        "description": "Deactivate a  billing tag.",
        "operationId": "deactivateBillingTag",
        "parameters": [
          {
            "description": "tag of the  billing tag to archive",
            "in": "path",
            "name": "tag",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BillingTagEnvelopeV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Deactivate billing tag",
        "tags": [
          "BillingTag"
        ]
      },
      "get": {
        "description": "Get billing tag by tag name.",
        "operationId": "getBillingTagByName",
        "parameters": [
          {
            "description": "tag of the  billing tag to archive",
            "in": "path",
            "name": "tag",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BillingTagEnvelopeV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Get billing tag by tag name",
        "tags": [
          "BillingTag"
        ]
      }
    },
    "/api/cost/v1/cloudCost": {
      "get": {
        "description": "Retrieve cloud cost",
        "operationId": "getCloudCost",
        "parameters": [
          {
            "description": "Duration of time over which to query. Accepts words like today, week, month, yesterday, lastweek, lastmonth; durations like 30m, 12h, 7d, or time like 2021-03-10T00:00:00Z,2021-03-11T00:00:00Z",
            "example": "window=3d",
            "in": "query",
            "name": "window",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Determines which cloud cost metric type will be returned. Acceptable values are AmortizedNetCost, InvoicedCost, ListCost, and NetCost. Default is AmortizedNetCost.",
            "in": "query",
            "name": "costMetric",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/CloudCostMetricsV1"
            }
          },
          {
            "description": "Field by which to aggregate the results. Accepts: invoiceEntityID, accountID, provider, service, and label:<name>. Supports multi-aggregation using comma-separated lists. Example: aggregate=accountID,service",
            "in": "query",
            "name": "aggregate",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filter for account",
            "in": "query",
            "name": "filterInvoiceEntityIDs",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "GCP only, filter for projectID",
            "in": "query",
            "name": "filterAccountIDs",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filter for cloud service provider",
            "in": "query",
            "name": "filterProviders",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filter for resource-level ID given by CSP",
            "in": "query",
            "name": "filterProvidersID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filter for cloud service",
            "in": "query",
            "name": "filterServices",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filter based on object type",
            "in": "query",
            "name": "filterCategories",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filter for a specific label. Does not support filtering for multiple labels at once",
            "in": "query",
            "name": "filterLabels",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FreeFormJsonObjectV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Get the cloud cost data",
        "tags": [
          "Cost"
        ]
      }
    },
    "/api/cost/v1/licenseKey": {
      "put": {
        "description": "Add kubecost license key",
        "operationId": "addKubecostLicenseKey",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/KubecostLicenseV1"
              }
            }
          },
          "description": "Kubecost License Key",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KubecostLicenseResponseV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Add kubecost license key",
        "tags": [
          "Cost"
        ]
      }
    },
    "/api/datasetrw/v1/datasets": {
      "get": {
        "description": "Deprecated: Use GetDatasetsV2. Get Datasets that a user has access to",
        "operationId": "getDatasets",
        "parameters": [
          {
            "description": "Project ID filter",
            "in": "query",
            "name": "projectId",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "How many Datasets from the start to skip. Defaults to 0.",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Max number of Datasets to fetch. Defaults to 10.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedDatasetRwEnvelopeV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Deprecated - Get datasets accessible to user",
        "tags": [
          "DatasetRw"
        ]
      },
      "post": {
        "description": "Create a new Dataset. Requires access to the project the dataset will originate from",
        "operationId": "createDataset",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewDatasetRwV1"
              }
            }
          },
          "description": "Dataset to create",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DatasetRwEnvelopeV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Create a dataset",
        "tags": [
          "DatasetRw"
        ]
      }
    },
    "/api/datasetrw/v1/datasets/{datasetId}": {
      "delete": {
        "description": "Delete a dataset. Requires PermanentDelete access to the dataset",
        "operationId": "deleteDataset",
        "parameters": [
          {
            "description": "ID of dataset to remove from project",
            "in": "path",
            "name": "datasetId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DatasetRwEnvelopeV1"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Delete Dataset",
        "tags": [
          "DatasetRw"
        ]
      },
      "get": {
        "description": "Get Dataset by ID. Requires List access to the dataset",
        "operationId": "getDataset",
        "parameters": [
          {
            "description": "ID of dataset to retrieve",
            "example": "62604702b7e5d347dbe7a909",
            "in": "path",
            "name": "datasetId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DatasetRwEnvelopeV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Get dataset by ID",
        "tags": [
          "DatasetRw"
        ]
      },
      "patch": {
        "description": "Update Dataset name or description. Requires Update access to the dataset",
        "operationId": "updateDataset",
        "parameters": [
          {
            "description": "ID of dataset to update",
            "example": "62604702b7e5d347dbe7a909",
            "in": "path",
            "name": "datasetId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DatasetRwMetadataV1"
              }
            }
          },
          "description": "Fields to update",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DatasetRwEnvelopeV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Update dataset metadata",
        "tags": [
          "DatasetRw"
        ]
      }
    },
    "/api/datasetrw/v1/datasets/{datasetId}/grants": {
      "delete": {
        "description": "Remove a grant from a dataset's existing sequence of grants. Requires EditSecurity access to the dataset",
        "operationId": "removeDatasetGrant",
        "parameters": [
          {
            "description": "ID of dataset to remove the grant from",
            "in": "path",
            "name": "datasetId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DatasetRwGrantV1"
              }
            }
          },
          "description": "Grant to remove",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DatasetRwGrantEnvelopeV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Remove a grant from a dataset's existing sequence of grants",
        "tags": [
          "DatasetRw"
        ]
      },
      "get": {
        "description": "Get Dataset grants by ID. Requires List access to the dataset",
        "operationId": "getDatasetGrants",
        "parameters": [
          {
            "description": "ID of dataset to get grants for",
            "example": "62604702b7e5d347dbe7a909",
            "in": "path",
            "name": "datasetId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DatasetRwGrantDetailsEnvelopeV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Get dataset grants by ID",
        "tags": [
          "DatasetRw"
        ]
      },
      "post": {
        "description": "Add a grant to a dataset's existing sequence of grants. Requires EditSecurity access to the dataset.",
        "operationId": "addDatasetGrant",
        "parameters": [
          {
            "description": "ID of dataset to add a grant to",
            "in": "path",
            "name": "datasetId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DatasetRwGrantV1"
              }
            }
          },
          "description": "Grant to add",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DatasetRwGrantEnvelopeV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Add a grant to a dataset's existing sequence of grants",
        "tags": [
          "DatasetRw"
        ]
      }
    },
    "/api/datasetrw/v1/datasets/{datasetId}/snapshots": {
      "get": {
        "description": "Get Snapshots belonging to a dataset. Requires List access to the dataset",
        "operationId": "getDatasetSnapshots",
        "parameters": [
          {
            "description": "ID of dataset to retrieve snapshots for",
            "example": "62604702b7e5d347dbe7a909",
            "in": "path",
            "name": "datasetId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "How many Snapshots from the start to skip. Defaults to 0.",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Max number of Snapshots to fetch. Defaults to 10.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedSnapshotEnvelopeV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Get snapshots belonging to dataset",
        "tags": [
          "DatasetRw"
        ]
      },
      "post": {
        "description": "Create a new Snapshot in a dataset. Requires Read access to the dataset and project access",
        "operationId": "createSnapshot",
        "parameters": [
          {
            "description": "Dataset ID",
            "in": "path",
            "name": "datasetId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewSnapshotV1"
              }
            }
          },
          "description": "Snapshot to create",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SnapshotEnvelopeV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Create a snapshot",
        "tags": [
          "DatasetRw"
        ]
      }
    },
    "/api/datasetrw/v1/datasets/{datasetId}/tags": {
      "post": {
        "description": "Tag a snapshot in this Dataset with the given tagName. Requires Update access to the dataset",
        "operationId": "addDatasetTag",
        "parameters": [
          {
            "description": "Dataset ID",
            "in": "path",
            "name": "datasetId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DatasetRwTagToAddV1"
              }
            }
          },
          "description": "Tag name and snapshot ID to apply it to",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DatasetRwEnvelopeV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Tag a snapshot in this Dataset",
        "tags": [
          "DatasetRw"
        ]
      }
    },
    "/api/datasetrw/v1/datasets/{datasetId}/tags/{tagName}": {
      "delete": {
        "description": "Remove a Tag from a dataset. Requires Update access to the dataset",
        "operationId": "removeDatasetTag",
        "parameters": [
          {
            "description": "Dataset ID",
            "in": "path",
            "name": "datasetId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of tag to delete",
            "in": "path",
            "name": "tagName",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DatasetRwEnvelopeV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Remove a tag from a Dataset",
        "tags": [
          "DatasetRw"
        ]
      }
    },
    "/api/datasetrw/v1/snapshots/{snapshotId}": {
      "get": {
        "description": "Fetch a snapshot by ID. Requires List access to the dataset",
        "operationId": "getSnapshot",
        "parameters": [
          {
            "description": "Snapshot ID",
            "example": "62604702b7e5d347dbe7a909",
            "in": "path",
            "name": "snapshotId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SnapshotEnvelopeV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Get snapshot",
        "tags": [
          "DatasetRw"
        ]
      }
    },
    "/api/datasetrw/v2/datasets": {
      "get": {
        "description": "Get Datasets that a user has access to based on dataset permissions and input filters",
        "operationId": "getDatasetsV2",
        "parameters": [
          {
            "description": "Filter for minimum dataset permission the principal needs to have in returned datasets.",
            "in": "query",
            "name": "minimumPermission",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/DatasetRwPermissionV1"
            }
          },
          {
            "description": "ProjectIds of datasets to exclude from result.",
            "in": "query",
            "name": "projectIdsToExclude",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "ProjectIds to get the datasets from. Should not be passed in if projectIdsToExclude is and vice versa.",
            "in": "query",
            "name": "projectIdsToInclude",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "Boolean to determine whether or not to return project-info in return objects.",
            "in": "query",
            "name": "includeProjectInfo",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "How many Datasets from the start to skip. Defaults to 0.",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Max number of Datasets to fetch. Defaults to 10.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedDatasetRwEnvelopeV2"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Get datasets the user has access to",
        "tags": [
          "DatasetRw"
        ]
      }
    },
    "/api/datasource/v1/audit": {
      "get": {
        "description": "Gets Data Source audit data given filter input parameters",
        "operationId": "getDataSourceAuditData",
        "parameters": [
          {
            "description": "Data Source IDs to query audit data for",
            "in": "query",
            "name": "dataSourceIds",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "Data Source names to query audit data for",
            "in": "query",
            "name": "dataSourceNames",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "events to query - AccessDataSource, CreateDataSource, DataSourceAssociatedToProject, DataSourceDissociatedFromProject, DataSourceChangeOfOwnership, DataSourceChangeOfPermissions, DeleteDataSource",
            "in": "query",
            "name": "eventKinds",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "Start time (iso8601)",
            "in": "query",
            "name": "startTime",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "End time (iso8601)",
            "in": "query",
            "name": "endTime",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/DataSourceAuditDataV1"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Get Data Source Audit Data",
        "tags": [
          "DataSource"
        ]
      }
    },
    "/api/datasource/v1/datasources": {
      "get": {
        "description": "Get Data Sources that a user has access to based on Data Source permissions and input filters",
        "operationId": "getAccessibleAndActiveDataSources",
        "parameters": [
          {
            "description": "Names of the Data Sources to get",
            "in": "query",
            "name": "dataSourceNames",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "How many Data Sources from the start to skip, sorted by descending ID order. Defaults to 0",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "default": 0,
              "type": "integer"
            }
          },
          {
            "description": "Maximum number of Data Sources to fetch. Defaults to 10",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "default": 10,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedDataSourceEnvelopeV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Get all active Data Source the user has access to",
        "tags": [
          "DataSource"
        ]
      },
      "post": {
        "description": "Create a Data Source",
        "operationId": "createDataSource",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewDataSourceV1"
              }
            }
          },
          "description": "Data Source to create",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataSourceEnvelopeV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Create a Data Source",
        "tags": [
          "DataSource"
        ]
      }
    },
    "/api/datasource/v1/datasources/{dataSourceId}": {
      "delete": {
        "description": "Delete Data Source with specified ID. Requires Data Source ownership privileges",
        "operationId": "deleteDataSource",
        "parameters": [
          {
            "description": "ID of Data Source to delete",
            "example": "62604702b7e5d347dbe7a909",
            "in": "path",
            "name": "dataSourceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataSourceEnvelopeV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Delete Data Source with specified ID",
        "tags": [
          "DataSource"
        ]
      },
      "get": {
        "description": "Gets Data Source by ID. Requires access to Data Source",
        "operationId": "getDataSource",
        "parameters": [
          {
            "description": "ID of Data Source to get",
            "example": "62604702b7e5d347dbe7a909",
            "in": "path",
            "name": "dataSourceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataSourceEnvelopeV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Get Data Source by ID",
        "tags": [
          "DataSource"
        ]
      },
      "patch": {
        "description": "Update Data Source with specified ID. If the current user is not an admin, then only their individual credentials are updated. Otherwise, the shared credentials are updated. If updating a Starburst-powered Data Source, please remember to restart the Starburst cluster in the UI for the changes to take effect. Requires Data Source management privileges",
        "operationId": "updateDataSource",
        "parameters": [
          {
            "description": "ID of Data Source to update",
            "example": "62604702b7e5d347dbe7a909",
            "in": "path",
            "name": "dataSourceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataSourceUpdateV1"
              }
            }
          },
          "description": "Users and projects to add and remove",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataSourceEnvelopeV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Update Data Source with specified ID",
        "tags": [
          "DataSource"
        ]
      }
    },
    "/api/develop/v1/customer-project-templates": {
      "post": {
        "operationId": "createProjectTemplate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewCustomerTemplate"
              }
            }
          },
          "description": "Project template to create",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerTemplate"
                }
              }
            },
            "description": "Created"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Create project template",
        "tags": [
          "ProjectTemplates"
        ]
      }
    },
    "/api/develop/v1/customer-project-templates/{id}": {
      "delete": {
        "operationId": "archiveCustomerProjectTemplate",
        "parameters": [
          {
            "description": "The id of the project template to delete.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Delete a customer project template by id.",
        "tags": [
          "ProjectTemplates"
        ]
      },
      "get": {
        "operationId": "getCustomerProjectTemplate",
        "parameters": [
          {
            "description": "The id of the project template to return.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            }
          },
          {
            "description": "If the template is archived and this parameter is set to true, the template will be returned instead of a 404.",
            "in": "query",
            "name": "includeArchived",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerTemplate"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Get customer project template by id",
        "tags": [
          "ProjectTemplates"
        ]
      },
      "patch": {
        "operationId": "updateCustomerProjectTemplate",
        "parameters": [
          {
            "description": "The id of the project template to update.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCustomerTemplate"
              }
            }
          },
          "description": "Template updates",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerTemplate"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Update a customer project template",
        "tags": [
          "ProjectTemplates"
        ]
      }
    },
    "/api/develop/v1/project-templates": {
      "get": {
        "operationId": "getProjectTemplatesCollection",
        "parameters": [
          {
            "description": "The page number of the collection to return. If not provided, the first page will be returned.",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "description": "The number of items to return per page. If not provided, 10 items will be returned per page.",
            "in": "query",
            "name": "size",
            "required": false,
            "schema": {
              "default": 10,
              "maximum": 100,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "description": "The view to filter on. To retrieve your own templates, pass your user ID as a string.\nTo retrieve templates shared with you, pass in \"shared\".\nTo retrieve company official templates, pass in \"official\".\nIf you have Domino AI Hub templates enabled, you can also pass in \"ecosystem\" to retrieve those.\n",
            "in": "query",
            "name": "view",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The category to filter on. Applies only to ecosystem templates.",
            "in": "query",
            "name": "category",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The owner to filter on. Supply user ID for custom templates and owner name for ecosystem templates.",
            "in": "query",
            "name": "owner",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "isCompanyOfficial",
            "required": false,
            "schema": {
              "description": "To filter on company official templates.",
              "type": "boolean"
            }
          },
          {
            "description": "The field to sort the collection by (in the given order).",
            "in": "query",
            "name": "orderBy",
            "required": false,
            "schema": {
              "default": "updated",
              "enum": [
                "updated",
                "name",
                "recommended"
              ],
              "type": "string"
            }
          },
          {
            "description": "The direction to sort the collection by. The direction is 'desc' by default in all cases.",
            "in": "query",
            "name": "sortOrder",
            "required": false,
            "schema": {
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string"
            }
          },
          {
            "description": "The search query to match on a template's name or description.",
            "in": "query",
            "name": "q",
            "required": false,
            "schema": {
              "default": "",
              "type": "string"
            }
          },
          {
            "description": "The custom template tag to search for.",
            "in": "query",
            "name": "tagName",
            "required": false,
            "schema": {
              "default": "",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedBaseTemplatesCollectionV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "List project templates",
        "tags": [
          "ProjectTemplates"
        ]
      }
    },
    "/api/environments/beta/environments": {
      "get": {
        "description": "Get environments that a user can see. Required permissions: `None`. *Note:* This is a beta endpoint with known limitations.",
        "operationId": "getEnvironments",
        "parameters": [
          {
            "description": "How many Environments from the start to skip. Defaults to 0.",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Max number of Environments to fetch. Defaults to 10.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedEnvironmentEnvelopeV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Get Environments visible to a user",
        "tags": [
          "Environments"
        ]
      },
      "post": {
        "description": "Create an environment. Required permissions: `CreateEnvironment, EditEnvironment, UseFileStorage`. *Note:* This is a beta endpoint with known limitations.",
        "operationId": "createEnvironment",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewEnvironmentV1"
              }
            }
          },
          "description": "Environment to create",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnvironmentEnvelopeV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Create an environment",
        "tags": [
          "Environments"
        ]
      }
    },
    "/api/environments/beta/environments/{environmentId}/revisions": {
      "post": {
        "description": "Create a revision of an environment. Required permissions: `ManageEnvironments, EditEnvironment, UseFileStorage`. *Note:* This is a beta endpoint with known limitations.",
        "operationId": "createEnvironmentRevision",
        "parameters": [
          {
            "description": "Id of environment to create revision of",
            "in": "path",
            "name": "environmentId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewEnvironmentRevisionV1"
              }
            }
          },
          "description": "Environment revision to create",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnvironmentRevisionEnvelopeV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Create a Revision of an Environment",
        "tags": [
          "Environments"
        ]
      }
    },
    "/api/environments/beta/environments/{environmentId}/revisions/{revisionId}": {
      "patch": {
        "description": "Update a revision of an environment to mark if isRestricted. Required permissions: `ClassifyEnvironments`. *Note:* This is a beta endpoint with known limitations.",
        "operationId": "updateEnvironmentRevisionIsRestricted",
        "parameters": [
          {
            "description": "Id of environment to mark restricted revision",
            "in": "path",
            "name": "environmentId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Id of environment revision to mark is restricted",
            "in": "path",
            "name": "revisionId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateEnvironmentRevisionV1"
              }
            }
          },
          "description": "Body of isRestricted",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnvironmentRevisionUpdateEnvelopeV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Update the restricted revision of an environment",
        "tags": [
          "Environments"
        ]
      }
    },
    "/api/environments/v1/environments/{environmentId}": {
      "delete": {
        "description": "Archive an Environment, removing it from the list of visible environments. Required permissions: `ManageEnvironments, EditEnvironment`",
        "operationId": "archiveEnvironment",
        "parameters": [
          {
            "description": "Id of environment to archive",
            "in": "path",
            "name": "environmentId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnvironmentEnvelopeV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Archive an environment",
        "tags": [
          "Environments"
        ]
      },
      "get": {
        "description": "Get an Environment by its Id. Required permissions: `ViewEnvironment`",
        "operationId": "getEnvironment",
        "parameters": [
          {
            "description": "Id of environment to retrieve",
            "in": "path",
            "name": "environmentId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnvironmentEnvelopeV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Get an environment",
        "tags": [
          "Environments"
        ]
      }
    },
    "/api/hardwaretiers/v1/hardwaretiers": {
      "get": {
        "description": "Get all hardware tiers. Required permissions: `ViewHardwareTiers`",
        "operationId": "getAllHardwareTiers",
        "parameters": [
          {
            "description": "How many hardware tiers from the start to skip. Defaults to 0.",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "How many hardware tiers to fetch. Defaults to 10.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Whether to include archived hardware tiers. Defaults to false.",
            "in": "query",
            "name": "includeArchived",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedHardwareTierEnvelopeV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Get all hardware tiers",
        "tags": [
          "HardwareTier"
        ]
      },
      "post": {
        "description": "Create a hardware tier. Required permissions: `ManageHardwareTiers`",
        "operationId": "createHardwareTier",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewHardwareTierV1"
              }
            }
          },
          "description": "Hardware tier to create",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HardwareTierEnvelopeV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Create a hardware tier",
        "tags": [
          "HardwareTier"
        ]
      },
      "put": {
        "description": "Update a hardware tier. Required permissions: `ManageHardwareTiers`",
        "operationId": "updateHardwareTier",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HardwareTierV1"
              }
            }
          },
          "description": "Updated hardware tier",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HardwareTierEnvelopeV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Update a hardware tier",
        "tags": [
          "HardwareTier"
        ]
      }
    },
    "/api/hardwaretiers/v1/hardwaretiers/{hardwareTierId}": {
      "delete": {
        "description": "Archive a hardware tier by Id. Required permissions: `ManageHardwareTiers`",
        "operationId": "archiveHardwareTier",
        "parameters": [
          {
            "description": "Id of hardwareTier to archive",
            "in": "path",
            "name": "hardwareTierId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HardwareTierEnvelopeV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Archive a hardware tier",
        "tags": [
          "HardwareTier"
        ]
      },
      "get": {
        "description": "Get a hardware tier by Id. Required permissions: `ViewHardwareTiers`",
        "operationId": "getHardwareTierById",
        "parameters": [
          {
            "description": "Id of hardwareTier to retrieve",
            "in": "path",
            "name": "hardwareTierId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HardwareTierEnvelopeV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Get a hardware tier by Id",
        "tags": [
          "HardwareTier"
        ]
      }
    },
    "/api/jobs/beta/jobs": {
      "get": {
        "description": "Retrieve all Jobs that belong to a project. Required permissions: `ViewJobs.` *Note:* This is a beta endpoint with known limitations.",
        "operationId": "getJobs",
        "parameters": [
          {
            "description": "Id of project to retrieve Jobs for",
            "example": "622a6944dde1a920fcccff0d",
            "in": "query",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Number of jobs from the start to skip. Defaults to 0.",
            "example": 2,
            "in": "query",
            "name": "offset",
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Total number of Jobs to retrieve. Defaults to 10.",
            "example": 25,
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Field to sort Jobs by. Defaults to \"number\".",
            "in": "query",
            "name": "sortBy",
            "schema": {
              "enum": [
                "number",
                "title",
                "command",
                "startedTime",
                "duration",
                "status",
                "user",
                "commentCount",
                "dominoStatsField"
              ],
              "type": "string"
            }
          },
          {
            "description": "Field in domino stats to sort by. Only used if sortBy = dominoStatsField.",
            "example": "r-squared",
            "in": "query",
            "name": "dominoStatsSortFieldName",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Whether to sort ascending or descending. Defaults to to False.",
            "example": true,
            "in": "query",
            "name": "ascending",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Whether to include archived Jobs in results. Defaults to false.",
            "example": true,
            "in": "query",
            "name": "showArchived",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Status of Jobs to fetch. Defaults to \"all\".",
            "in": "query",
            "name": "statusFilter",
            "schema": {
              "enum": [
                "all",
                "queued",
                "running",
                "completed",
                "archived",
                "active"
              ],
              "type": "string"
            }
          },
          {
            "description": "Tag to filter by. Must match tag name exactly.",
            "example": "MyTag",
            "in": "query",
            "name": "tagFilter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedJobEnvelopeV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Get Jobs for a project",
        "tags": [
          "Jobs"
        ]
      }
    },
    "/api/jobs/beta/jobs/{jobId}": {
      "get": {
        "description": "Retrieve a Job's details by its Id. Required permissions: `ViewJobs`. *Note:* This is a beta endpoint with known limitations.",
        "operationId": "getJobDetails",
        "parameters": [
          {
            "description": "Id of Job to retrieve details for",
            "in": "path",
            "name": "jobId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobEnvelopeV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Get Job details",
        "tags": [
          "Jobs"
        ]
      }
    },
    "/api/jobs/beta/jobs/{jobId}/logs": {
      "get": {
        "description": "Retrieve the logs for the Job with the specified Id. Required permissions: `ViewJobs`. *Note:* This is a beta endpoint with known limitations.",
        "operationId": "getJobLogs",
        "parameters": [
          {
            "description": "Id of job to get logs for",
            "in": "path",
            "name": "jobId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Type of log to retrieve. Case insensitive.",
            "in": "query",
            "name": "logType",
            "required": false,
            "schema": {
              "enum": [
                "stdOut",
                "stdErr",
                "prepareOutput",
                "complete"
              ],
              "type": "string"
            }
          },
          {
            "description": "Max number of log lines to fetch. Will not retrieve over 10000 log lines at a time.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "The epoch time in nanoseconds to start fetching from",
            "in": "query",
            "name": "latestTimeNano",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LogsEnvelopeV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Get logs for a Job",
        "tags": [
          "Jobs"
        ]
      }
    },
    "/api/jobs/v1/goals": {
      "get": {
        "description": "Retrieve goals for a Job with the specified Id. Required permissions: `ViewJobs`",
        "operationId": "getLinkedGoalsForJob",
        "parameters": [
          {
            "description": "Id of job to link to goal",
            "in": "query",
            "name": "jobId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedGoalEnvelopeV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Get linked goals for a job",
        "tags": [
          "Jobs"
        ]
      },
      "post": {
        "description": "Link the Goal with the specified Id to a Job. Required permissions: `ViewJobs, Edit`",
        "operationId": "linkJobToGoal",
        "parameters": [
          {
            "description": "Id of job to link to goal",
            "in": "query",
            "name": "jobId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GoalToLinkV1"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GoalEnvelopeV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Link a goal to a job",
        "tags": [
          "Jobs"
        ]
      }
    },
    "/api/jobs/v1/goals/{goalId}": {
      "delete": {
        "description": "Unlink the Goal with the specified Id from a Job. Required permissions: `ViewJobs, Edit`",
        "operationId": "unlinkJobFromGoal",
        "parameters": [
          {
            "description": "Id of goal to remove",
            "in": "path",
            "name": "goalId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Id of job to remove goal from",
            "in": "query",
            "name": "jobId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteEnvelopeV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Unlink goal from job",
        "tags": [
          "Jobs"
        ]
      }
    },
    "/api/jobs/v1/jobs": {
      "post": {
        "description": "Start a new Job. Required permissions: `StartJob, UseGlobalCompute`",
        "operationId": "startJob",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewJobV1"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobEnvelopeV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Start a Job",
        "tags": [
          "Jobs"
        ]
      }
    },
    "/api/jobs/v1/jobs/{jobId}/tags": {
      "post": {
        "description": "Add a Tag to the Job with the specified Id. Required permissions: `ViewJobs`",
        "operationId": "addJobTag",
        "parameters": [
          {
            "description": "Id of job to add tag to",
            "in": "path",
            "name": "jobId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TagToAddV1"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagEnvelopeV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Add a tag to a Job",
        "tags": [
          "Jobs"
        ]
      }
    },
    "/api/jobs/v1/jobs/{jobId}/tags/{tagId}": {
      "delete": {
        "description": "Remove a Tag from the Job with the specified Id. Required permissions: `ViewJobs`",
        "operationId": "removeJobTag",
        "parameters": [
          {
            "description": "Id of job to remove tag from",
            "in": "path",
            "name": "jobId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Id of tag to remove",
            "in": "path",
            "name": "tagId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Id of project that tag belongs to",
            "in": "query",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteEnvelopeV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Remove a tag from a Job",
        "tags": [
          "Jobs"
        ]
      }
    },
    "/api/metricAlerts/v1": {
      "post": {
        "description": "Send a metric out of range alert for a monitored model. Required Permissions: `ViewMonitoringResults`",
        "operationId": "sendMetricAlert",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricAlertRequestV1"
              }
            }
          },
          "description": "Details about the metric alert to send",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Send a metric alert",
        "tags": [
          "CustomMetrics"
        ]
      }
    },
    "/api/metricValues/v1": {
      "post": {
        "description": "Log metric values. Required Permissions: `RegisterMonitoringDataset`",
        "operationId": "logMetricValues",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewMetricValuesEnvelopeV1"
              }
            }
          },
          "description": "List of metric values to log",
          "required": true
        },
        "responses": {
          "201": {
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Log metric values",
        "tags": [
          "CustomMetrics"
        ]
      }
    },
    "/api/metricValues/v1/{modelMonitoringId}/{metric}": {
      "get": {
        "description": "Retrieve metric values. Required Permissions: `UpdateMonitoringSettings`",
        "operationId": "retrieveMetricValues",
        "parameters": [
          {
            "description": "ID of the monitored model",
            "in": "path",
            "name": "modelMonitoringId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of the metric to retrieve",
            "in": "path",
            "name": "metric",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Timestamp to filter metrics by referenceTimestamp >= startingReferenceTimestampInclusive. Timestamp should follow the RFC3339 format with timezone e.g. 2013-07-01T17:55:13-07:00",
            "in": "query",
            "name": "startingReferenceTimestampInclusive",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Timestamp to filter metrics by referenceTimestamp <= endingReferenceTimestampInclusive. Timestamp should follow the RFC3339 format with timezone e.g. 2013-07-01T17:55:13-07:00",
            "in": "query",
            "name": "endingReferenceTimestampInclusive",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricValuesEnvelopeV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Retrieve metric values",
        "tags": [
          "CustomMetrics"
        ]
      }
    },
    "/api/modelApis/async/v1/{asyncModelId}": {
      "post": {
        "description": "Request a prediction from an Async Model",
        "operationId": "requestAsyncPrediction",
        "parameters": [
          {
            "description": "Id of Async Model",
            "in": "path",
            "name": "asyncModelId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewAsyncPredictionV1"
              }
            }
          },
          "description": "Information for new Async Prediction",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncPredictionRequestEnvelopeV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "413": {
            "$ref": "#/components/responses/413"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Request a prediction from an Async model",
        "tags": [
          "AsyncPredictions"
        ]
      }
    },
    "/api/modelApis/async/v1/{asyncModelId}/{asyncPredictionId}": {
      "get": {
        "description": "Retrieve the result of an Async Model prediction",
        "operationId": "retrieveAsyncPredictionResult",
        "parameters": [
          {
            "description": "Id of Async Model",
            "in": "path",
            "name": "asyncModelId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Id of Async Prediction",
            "in": "path",
            "name": "asyncPredictionId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncPredictionEnvelopeV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Retrieve the result of an Async Model prediction",
        "tags": [
          "AsyncPredictions"
        ]
      }
    },
    "/api/modelServing/v1/modelApis": {
      "get": {
        "description": "Lists Model APIs based on the query filters. Returns only Model APIs visible to the requesting user.",
        "operationId": "listModelAPIs",
        "parameters": [
          {
            "description": "The id of the environment to filter the Model APIs by.",
            "in": "query",
            "name": "environmentId",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The id of the project to filter the Model APIs by.",
            "in": "query",
            "name": "projectId",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The name of the Model APIs. Can be a regular expression.",
            "in": "query",
            "name": "name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The name of the registered model that is the source of the Model API.",
            "in": "query",
            "name": "registeredModelName",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The version of the registered model that is the source of the Model API. Can only be present along with registeredModelName.",
            "in": "query",
            "name": "registeredModelVersion",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "The number of result to retrieve. Defaults to 25.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "The offset from the first element to start retrieving from.",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "default": 25,
              "type": "integer"
            }
          },
          {
            "description": "Field to order results by. Format is the name of the field optionally followed by a space and either ASC or DESC. If not specified defaults to ASC.",
            "in": "query",
            "name": "orderBy",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModelApiPaginatedList"
                }
              }
            },
            "description": "The list of Model APIs matching the provided query."
          }
        },
        "tags": [
          "ModelAPI"
        ]
      },
      "post": {
        "description": "Creates a new Model API with a single Model API version.",
        "operationId": "createModelApi",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ModelApiCreationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModelApi"
                }
              }
            },
            "description": "The created Model API."
          }
        },
        "tags": [
          "ModelAPI"
        ]
      }
    },
    "/api/modelServing/v1/modelApis/{modelApiId}": {
      "delete": {
        "description": "Archives a Model API.",
        "operationId": "deleteModelApi",
        "parameters": [
          {
            "description": "The id of the Model API to archive.",
            "in": "path",
            "name": "modelApiId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully archived the Model API."
          }
        },
        "tags": [
          "ModelAPI"
        ]
      },
      "get": {
        "description": "Retrieves a single Model API.",
        "operationId": "getModelApi",
        "parameters": [
          {
            "description": "The id of the Model API to retrieve.",
            "in": "path",
            "name": "modelApiId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModelApi"
                }
              }
            },
            "description": "The Model API with the requested id."
          }
        },
        "tags": [
          "ModelAPI"
        ]
      },
      "put": {
        "description": "Updates a Model API.",
        "operationId": "updateModelApi",
        "parameters": [
          {
            "description": "The id of the Model API to update.",
            "in": "path",
            "name": "modelApiId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ModelApiUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModelApi"
                }
              }
            },
            "description": "The updated Model API."
          }
        },
        "tags": [
          "ModelAPI"
        ]
      }
    },
    "/api/modelServing/v1/modelApis/{modelApiId}/versions": {
      "get": {
        "description": "Lists the Model API Versions for a Model API.",
        "operationId": "listModelApiVersions",
        "parameters": [
          {
            "description": "The id of the Model API to list the versions for.",
            "in": "path",
            "name": "modelApiId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ModelApiVersion"
                  },
                  "type": "array"
                }
              }
            },
            "description": "The list of Model API Versions for the given Model API."
          }
        },
        "tags": [
          "ModelAPIVersion"
        ]
      },
      "post": {
        "description": "Creates a Model API Version for a Model API.",
        "operationId": "createModelApiVersion",
        "parameters": [
          {
            "description": "The id of the Model API to create the version for.",
            "in": "path",
            "name": "modelApiId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ModelApiVersionCreationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModelApiVersion"
                }
              }
            },
            "description": "The created Model API Version."
          }
        },
        "tags": [
          "ModelAPIVersion"
        ]
      }
    },
    "/api/modelServing/v1/modelApis/{modelApiId}/versions/{modelApiVersionId}": {
      "get": {
        "description": "Retrieves a single Model API Version.",
        "operationId": "getModelApiVersion",
        "parameters": [
          {
            "description": "The id of the Model API to retrieve the version for.",
            "in": "path",
            "name": "modelApiId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The id of the Model API Version to retrieve.",
            "in": "path",
            "name": "modelApiVersionId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModelApiVersion"
                }
              }
            },
            "description": "The Model API version with the given id."
          }
        },
        "tags": [
          "ModelAPIVersion"
        ]
      }
    },
    "/api/modelServing/v1/modelDeployments": {
      "get": {
        "description": "Retrieves all Model Deployments filtered by optional query arguments.",
        "operationId": "getModelDeployments",
        "parameters": [
          {
            "description": "The Model Deployment name to search by.",
            "in": "query",
            "name": "name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The Project Id to filter by.",
            "in": "query",
            "name": "projectId",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The Deployment Target Id to filter by",
            "in": "query",
            "name": "deploymentTargetId",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The Resource Configuration Id to filter by",
            "in": "query",
            "name": "resourceConfigurationId",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The registered model name to filter by",
            "in": "query",
            "name": "registeredModelName",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The registered model version to filter by. If defined, registeredModelName must also be defined",
            "in": "query",
            "name": "registeredModelVersion",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "The number of results to retrieve. Defaults to 25.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "The offset from the first element to start retrieving from.",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "default": 25,
              "type": "integer"
            }
          },
          {
            "description": "Field to order results by. Format is the name of the field optionally followed by a space and either ASC or DESC. Field name can be name, type, status, creationTimestamp, or updateTimestamp. If not specified, defaults to \"name ASC\".",
            "in": "query",
            "name": "orderBy",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModelDeploymentPaginatedList"
                }
              }
            },
            "description": "A list of Model Deployments matching the provided query."
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Retrieve all Model Deployments",
        "tags": [
          "ModelDeployment"
        ]
      },
      "post": {
        "description": "Creates a new Model Deployment entity.",
        "operationId": "createModelDeployment",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewModelDeployment"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModelDeployment"
                }
              }
            },
            "description": "The created Model Deployment."
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Create a new Model Deployment",
        "tags": [
          "ModelDeployment"
        ]
      }
    },
    "/api/modelServing/v1/modelDeployments/{modelDeploymentId}": {
      "delete": {
        "description": "Archives a Model Deployment.",
        "operationId": "deleteModelDeployment",
        "parameters": [
          {
            "description": "The id of the Model Deployment to archive.",
            "in": "path",
            "name": "modelDeploymentId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully archived the Model Deployment."
          }
        },
        "tags": [
          "ModelDeployment"
        ]
      },
      "get": {
        "description": "Retrieves a specific Model Deployment entity by id.",
        "operationId": "getModelDeploymentById",
        "parameters": [
          {
            "description": "The id of the Model Deployment to retrieve",
            "in": "path",
            "name": "modelDeploymentId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModelDeployment"
                }
              }
            },
            "description": "Model Deployment with the requested id."
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Retrieve a specific Model Deployment",
        "tags": [
          "ModelDeployment"
        ]
      },
      "patch": {
        "description": "Update fields of a Model Deployment entity by id.",
        "operationId": "updateModelDeployment",
        "parameters": [
          {
            "description": "The id of the Model Deployment to update",
            "in": "path",
            "name": "modelDeploymentId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatedModelDeployment"
              }
            }
          },
          "description": "Details of the Model Deployment to update.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModelDeployment"
                }
              }
            },
            "description": "Model Deployment updated successfully."
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Update a Model Deployment",
        "tags": [
          "ModelDeployment"
        ]
      }
    },
    "/api/modelServing/v1/modelDeployments/{modelDeploymentId}/credentials": {
      "get": {
        "description": "Retrieves summary information for all available temporary credentials of a Model Deployment.",
        "operationId": "getModelDeploymentCredentials",
        "parameters": [
          {
            "description": "The id of the Model Deployment from which to retrieve credentials",
            "in": "path",
            "name": "modelDeploymentId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModelDeploymentCredentialsList"
                }
              }
            },
            "description": "A non-paginated list of all Model Deployment credentials for a specific Model Deployment."
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Retrieve all temporary credentials for a specific Model Deployment",
        "tags": [
          "ModelDeployment"
        ]
      }
    },
    "/api/modelServing/v1/modelDeployments/{modelDeploymentId}/credentials/{operationType}": {
      "get": {
        "description": "Retrieves information for available temporary credentials of a Model Deployment for a specific operation type.",
        "operationId": "getModelDeploymentCredentialByOperationType",
        "parameters": [
          {
            "description": "The id of the Model Deployment",
            "in": "path",
            "name": "modelDeploymentId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The operation type of the credentials",
            "in": "path",
            "name": "operationType",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModelDeploymentCredentials"
                }
              }
            },
            "description": "Credentials for the specific operation type"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Retrieve temporary credentials of a specific Model Deployment for a specific operation type",
        "tags": [
          "ModelDeployment"
        ]
      }
    },
    "/api/modelServing/v1/modelDeployments/{modelDeploymentId}/logs/{logSuffix}": {
      "get": {
        "description": "Retrieves the logs for a specific Model Deployment entity by id.",
        "operationId": "getModelDeploymentLogsById",
        "parameters": [
          {
            "description": "The id of the Model Deployment whose logs to retrieve",
            "in": "path",
            "name": "modelDeploymentId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Generated suffix for the log key corresponding to the requested logs",
            "in": "path",
            "name": "logSuffix",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ModelDeploymentLogLine"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Logs of the Model Deployment with the requested id."
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Retrieve the logs for a specific Model Deployment",
        "tags": [
          "ModelDeployment"
        ]
      }
    },
    "/api/modelServing/v1/modelDeployments/{modelDeploymentId}/start": {
      "post": {
        "description": "Starts a Stopped or Failed Model Deployment.",
        "operationId": "startModelDeployment",
        "parameters": [
          {
            "description": "The id of the Model Deployment to start.",
            "in": "path",
            "name": "modelDeploymentId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully started the Model Deployment."
          }
        },
        "tags": [
          "ModelDeployment"
        ]
      }
    },
    "/api/modelServing/v1/modelDeployments/{modelDeploymentId}/stop": {
      "post": {
        "description": "Stops a Running Model Deployment.",
        "operationId": "stopModelDeployment",
        "parameters": [
          {
            "description": "The id of the Model Deployment to stop.",
            "in": "path",
            "name": "modelDeploymentId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully stopped the Model Deployment."
          }
        },
        "tags": [
          "ModelDeployment"
        ]
      }
    },
    "/api/modelServing/v1/modelDeployments/{modelDeploymentId}/versions": {
      "get": {
        "description": "Retrieves summary information for all historical versions of a Model Deployment.",
        "operationId": "getModelDeploymentVersions",
        "parameters": [
          {
            "description": "The id of the Model Deployment to update",
            "in": "path",
            "name": "modelDeploymentId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The number of result to retrieve. Defaults to 25.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "The offset from the first element to start retrieving from.",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "default": 25,
              "type": "integer"
            }
          },
          {
            "description": "Field to order results by. Format is the name of the field optionally followed by a space and either ASC or DESC. Field name can be name, type, status, creationTimestamp, or updateTimestamp. If not specified, defaults to \"name ASC\".",
            "in": "query",
            "name": "orderBy",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModelDeploymentPaginatedList"
                }
              }
            },
            "description": "A paginated list of all Model Deployment versions for a specific Model Deployment."
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Retrieve all versions of a specific Model Deployment",
        "tags": [
          "ModelDeployment"
        ]
      }
    },
    "/api/modelServing/v1/modelDeployments/{modelDeploymentId}/versions/{version}": {
      "get": {
        "description": "Retrieves a specific historical version (Model Deployment entity) of a Model Deployment.",
        "operationId": "getModelDeploymentVersionById",
        "parameters": [
          {
            "description": "The id of the Model Deployment",
            "in": "path",
            "name": "modelDeploymentId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Version number of the Model Deployment",
            "in": "path",
            "name": "version",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModelDeployment"
                }
              }
            },
            "description": "Historical version of the Model Deployment found."
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Retrieve a specific version of a Model Deployment",
        "tags": [
          "ModelDeployment"
        ]
      }
    },
    "/api/organizations/v1/organizations": {
      "get": {
        "description": "Retrieve all Organizations of which this user is a member. Required permissions: `None`",
        "operationId": "getUserOrgs",
        "parameters": [
          {
            "description": "Optional value to filter organization names with. Must exactly match organization name.",
            "in": "query",
            "name": "nameFilter",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "How many orgs from the start to skip. Defaults to 0.",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Max number of orgs to fetch. Defaults to 10.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedOrganizationEnvelopeV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Get the Organizations for a user",
        "tags": [
          "Organizations"
        ]
      },
      "post": {
        "description": "Create a new Organization. Required permissions: `Must be logged in user`",
        "operationId": "createOrg",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewOrganizationV1"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationEnvelopeV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Create an organization",
        "tags": [
          "Organizations"
        ]
      }
    },
    "/api/organizations/v1/organizations/all": {
      "get": {
        "description": "Get all organizations. Required permissions: `ManageOrganizations`",
        "operationId": "getAllOrgs",
        "parameters": [
          {
            "description": "Optional value to filter organization names with.",
            "in": "query",
            "name": "nameFilter",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "How many orgs from the start to skip. Defaults to 0.",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Max number of orgs to fetch. Defaults to 10.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedOrganizationEnvelopeV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Get all organizations. Only accessible to admin users.",
        "tags": [
          "Organizations"
        ]
      }
    },
    "/api/organizations/v1/organizations/{organizationId}": {
      "get": {
        "description": "Retrieve an Organization by its Id. Required permissions: `ViewOrganization`",
        "operationId": "getOrg",
        "parameters": [
          {
            "description": "Id of organization to retrieve. This is the id of the org in the users collection, not the organizations collection.",
            "in": "path",
            "name": "organizationId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationEnvelopeV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Get an organization by Id",
        "tags": [
          "Organizations"
        ]
      }
    },
    "/api/organizations/v1/organizations/{organizationId}/user": {
      "delete": {
        "description": "Remove a user from an Organization. Required permissions: `EditMembers`",
        "operationId": "removeUserFromOrg",
        "parameters": [
          {
            "description": "Id of organization to add a user to. This is the id of the org in the users collection, not the organizations collection.",
            "in": "path",
            "name": "organizationId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Id of user to remove from org.",
            "in": "query",
            "name": "memberToRemoveId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationEnvelopeV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Remove a user from an org",
        "tags": [
          "Organizations"
        ]
      },
      "put": {
        "description": "Add a new user to an Organization. Required permissions: `EditMembers`",
        "operationId": "addUserToOrg",
        "parameters": [
          {
            "description": "Id of organization to add a user to. This is the id of the org in the users collection, not the organizations collection.",
            "in": "path",
            "name": "organizationId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationMemberV1"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationEnvelopeV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Add a user to an org",
        "tags": [
          "Organizations"
        ]
      }
    },
    "/api/projects/beta/projects": {
      "get": {
        "description": "Get projects that a user can see. Required permissions: `ListProject`. *Note:* This is a beta endpoint with known limitations.",
        "operationId": "getProjects",
        "parameters": [
          {
            "description": "How many Projects from the start to skip. Defaults to 0.",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Max number of Projects to fetch. Defaults to 10.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedProjectsEnvelopeV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Get Projects visible to user",
        "tags": [
          "Projects"
        ]
      },
      "post": {
        "description": "Create a project. Required permissions: `CreateProject, UseFileStorage`. *Note:* This is a beta endpoint with known limitations.",
        "operationId": "createProject",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewProjectV1"
              }
            }
          },
          "description": "Project to create",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectEnvelopeV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Create a project",
        "tags": [
          "Projects"
        ]
      }
    },
    "/api/projects/beta/projects/{projectId}": {
      "delete": {
        "description": "Archive a project by id. Required permissions: `ArchiveProject`. *Note:* This is a beta endpoint with known limitations.",
        "operationId": "archiveProject",
        "parameters": [
          {
            "description": "ID of the project to retrieve",
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteEnvelopeV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Archive project by id",
        "tags": [
          "Projects"
        ]
      }
    },
    "/api/projects/beta/projects/{projectId}/files/{commitId}/{path}/content": {
      "get": {
        "description": "Return the raw contents of a file in a project at given commit.",
        "operationId": "getProjectFileContentsDeprecated",
        "parameters": [
          {
            "description": "Id of the project to return files for",
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Id of a commit in the project repository to list files from",
            "in": "path",
            "name": "commitId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Path in the project's repository to the file. It must be url-encoded and is case-sensitive.",
            "example": "nested%2Ffolder%2Ffile.ext",
            "in": "path",
            "name": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": "Success. It returns a stream of data with the file content, specifying the appropriate\nmedia type based on the file extension in a best-effort basis.\n",
            "x-domino-binary-stream": true
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Returns the contents of a file (deprecated, use v1 endpoint instead)",
        "tags": [
          "ProjectsFiles"
        ]
      }
    },
    "/api/projects/beta/projects/{projectId}/results-settings": {
      "get": {
        "operationId": "getProjectResultSettings",
        "parameters": [
          {
            "description": "Project ID",
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectResultsSettingsEnvelopeV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Get project result settings",
        "tags": [
          "Projects"
        ]
      },
      "put": {
        "operationId": "updateProjectResultSettings",
        "parameters": [
          {
            "description": "Project ID",
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectResultsSettingsV1"
              }
            }
          },
          "description": "Project status",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectResultsSettingsEnvelopeV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Update project result settings",
        "tags": [
          "Projects"
        ]
      }
    },
    "/api/projects/v1/projects/{projectId}": {
      "get": {
        "description": "Get project by id. Required permissions: `ListProject`",
        "operationId": "getProjectById",
        "parameters": [
          {
            "description": "ID of the project to retrieve",
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectEnvelopeV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Get Project by Id",
        "tags": [
          "Projects"
        ]
      }
    },
    "/api/projects/v1/projects/{projectId}/collaborators": {
      "post": {
        "description": "Add a collaborator to this project. Required permissions: `ManageCollaborators`",
        "operationId": "addCollaboratorToProject",
        "parameters": [
          {
            "description": "Project ID",
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectCollaboratorV1"
              }
            }
          },
          "description": "Collaborator ID",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectCollaboratorEnvelopeV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Add a collaborator to this project",
        "tags": [
          "Projects"
        ]
      }
    },
    "/api/projects/v1/projects/{projectId}/collaborators/{collaboratorId}": {
      "delete": {
        "description": "Remove a collaborator from the project. Required permissions: `ManageCollaborators`",
        "operationId": "removeCollaboratorFromProject",
        "parameters": [
          {
            "description": "ID of the project to remove collaborator from",
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "ID of the collaborator to remove",
            "in": "path",
            "name": "collaboratorId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteEnvelopeV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Remove a collaborator from project",
        "tags": [
          "Projects"
        ]
      }
    },
    "/api/projects/v1/projects/{projectId}/copy-project": {
      "post": {
        "description": "Create a new project by copying an existing project and providing optional overrides. Specify a git repository to link to the copied project or copy the original project's git repository for the copied project.",
        "operationId": "copyProject",
        "parameters": [
          {
            "description": "Project ID",
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CopyProjectSpecV1"
              }
            }
          },
          "description": "Information needed in order to copy a project.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectCopyResultEnvelopeV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Create a new project by copying an existing project and providing optional overrides.",
        "tags": [
          "Projects"
        ]
      }
    },
    "/api/projects/v1/projects/{projectId}/files/{commitId}/{path}/content": {
      "get": {
        "description": "Return the raw contents of a file in a project at given commit.",
        "operationId": "getProjectFileContents",
        "parameters": [
          {
            "description": "Id of the project to return files for",
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Id of a commit in the project repository to list files from",
            "in": "path",
            "name": "commitId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Path in the project's repository to the file. It must be url-encoded and is case-sensitive.",
            "example": "nested%2Ffolder%2Ffile.ext",
            "in": "path",
            "name": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": "Success. It returns a stream of data with the file content, specifying the appropriate\nmedia type based on the file extension in a best-effort basis.\n",
            "x-domino-binary-stream": true
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Returns the contents of a file",
        "tags": [
          "ProjectsFiles"
        ]
      }
    },
    "/api/projects/v1/projects/{projectId}/goals": {
      "get": {
        "description": "Get goals in this project. Required permissions: `ListProject`",
        "operationId": "getProjectGoals",
        "parameters": [
          {
            "description": "Project ID",
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectGoalsEnvelopeV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Get goals in this project",
        "tags": [
          "Projects"
        ]
      },
      "post": {
        "description": "Add a goal to this project. Required permissions: `Edit`",
        "operationId": "addGoalToProject",
        "parameters": [
          {
            "description": "Project ID",
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewProjectGoalV1"
              }
            }
          },
          "description": "Goal to add",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectGoalEnvelopeV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Add a goal to this project",
        "tags": [
          "Projects"
        ]
      }
    },
    "/api/projects/v1/projects/{projectId}/goals/{goalId}": {
      "delete": {
        "description": "Delete a project goal. Required permissions: `Edit`",
        "operationId": "deleteProjectGoal",
        "parameters": [
          {
            "description": "ID of the project to delete goal from",
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "ID of the goal to delete",
            "in": "path",
            "name": "goalId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteEnvelopeV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Delete a project goal",
        "tags": [
          "Projects"
        ]
      },
      "patch": {
        "description": "Update project goal status. Required permissions: `Edit`",
        "operationId": "updateProjectGoal",
        "parameters": [
          {
            "description": "Project ID of the goal",
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "ID of the goal to update",
            "in": "path",
            "name": "goalId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectGoalForUpdateV1"
              }
            }
          },
          "description": "Project goal for update",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectGoalEnvelopeV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Update project goal status",
        "tags": [
          "Projects"
        ]
      }
    },
    "/api/projects/v1/projects/{projectId}/repositories": {
      "get": {
        "description": "Get all imported git repositories in this project. Required permissions: `ListProject`",
        "operationId": "getImportedRepos",
        "parameters": [
          {
            "description": "Project ID",
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "How many Projects from the start to skip. Defaults to 0.",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Max number of Projects to fetch. Defaults to 10.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedGitRepositoriesEnvelopeV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Get all imported git repositories in this project",
        "tags": [
          "Projects"
        ]
      },
      "post": {
        "description": "Add an imported git repository to this project. Required permissions: `ChangeProjectSettings`",
        "operationId": "addRepoToProject",
        "parameters": [
          {
            "description": "Project ID",
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewProjectGitRepositoryV1"
              }
            }
          },
          "description": "Repository to add",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectGitRepositoryEnvelopeV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Add an imported git repository to this project",
        "tags": [
          "Projects"
        ]
      }
    },
    "/api/projects/v1/projects/{projectId}/repositories/{repositoryId}": {
      "delete": {
        "description": "Remove an imported repository from the project. Required permissions: `ChangeProjectSettings`",
        "operationId": "removeRepoFromProject",
        "parameters": [
          {
            "description": "ID of the project to remove goal from",
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "ID of the repository to remove",
            "in": "path",
            "name": "repositoryId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteEnvelopeV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Remove an imported repository from project",
        "tags": [
          "Projects"
        ]
      }
    },
    "/api/projects/v1/projects/{projectId}/shared-datasets": {
      "get": {
        "description": "List shared datasets used by a project. Required permissions: `GetDatasetsRw`",
        "operationId": "listProjectSharedDatasets",
        "parameters": [
          {
            "description": "Project ID",
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SharedDatasetsEnvelopeV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Get shared datasets that a project uses",
        "tags": [
          "ProjectSharedDatasets"
        ]
      },
      "post": {
        "description": "Link a shared dataset to this project. Required permissions: `ManageDatasetsRw,UseFileStorage`",
        "operationId": "linkProjectToDataset",
        "parameters": [
          {
            "description": "Project ID",
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DatasetToAddV1"
              }
            }
          },
          "description": "Dataset ID",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SharedDatasetsEnvelopeV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Link a shared dataset to this project",
        "tags": [
          "ProjectSharedDatasets"
        ]
      }
    },
    "/api/projects/v1/projects/{projectId}/shared-datasets/{datasetId}": {
      "delete": {
        "description": "Unlink the dataset with the specified Id from a project. Required permissions: `ManageDatasetsRw,UseFileStorage`",
        "operationId": "unlinkDatasetFromProject",
        "parameters": [
          {
            "description": "Id of project",
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Id of shared dataset to remove",
            "in": "path",
            "name": "datasetId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteEnvelopeV1"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Unlink a shared dataset from this project",
        "tags": [
          "ProjectSharedDatasets"
        ]
      }
    },
    "/api/projects/v1/projects/{projectId}/status": {
      "put": {
        "description": "Update the status of a project. Required permissions: `Edit`",
        "operationId": "updateProjectStatus",
        "parameters": [
          {
            "description": "Project ID",
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectStatusV1"
              }
            }
          },
          "description": "Project status",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectStatusEnvelopeV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Update project status",
        "tags": [
          "Projects"
        ]
      }
    },
    "/api/projects/v1/projects/{projectId}/workspaces/{workspaceId}/sessions": {
      "post": {
        "description": "Creates a new session given an existing workspace. Required permissions: `OpenWorkspace`, `UseGlobalCompute`",
        "operationId": "createWorkspaceSession",
        "parameters": [
          {
            "description": "Project ID",
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Workspace ID",
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewWorkspaceSessionV1"
              }
            }
          },
          "description": "New session parameters",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkspaceSessionCreatedEnvelopeV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Create workspace session",
        "tags": [
          "Workspaces"
        ]
      }
    },
    "/api/projects/v2/projects": {
      "post": {
        "description": "Create a project. Required permissions: `CreateProject, UseFileStorage`.",
        "operationId": "createProjectV2",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewProjectV2"
              }
            }
          },
          "description": "Project to create",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectEnvelopeV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Create a project",
        "tags": [
          "Projects"
        ]
      }
    },
    "/api/registeredmodels/v1": {
      "get": {
        "description": "Get registered models that a user can see.",
        "operationId": "getRegisteredModels",
        "parameters": [
          {
            "description": "Project ID of requested models.",
            "in": "query",
            "name": "projectId",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Search parameter to retrieve models from Mlflow (currently supports name and tags)",
            "in": "query",
            "name": "searchPattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Pagination token to go to the next page based on a previous search query.",
            "in": "query",
            "name": "pageToken",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Max number of Registered Models to fetch. Defaults to 25.",
            "in": "query",
            "name": "maxResults",
            "required": false,
            "schema": {
              "default": 25,
              "type": "integer"
            }
          },
          {
            "description": "List of columns for ordering search results, which can include model name and last updated timestamp with an optional \"DESC\" or \"ASC\" annotation, where \"ASC\" is the default. Tiebreaks are done by model name ASC.",
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedRegisteredModelsEnvelopeV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Get Registered Models visible to user",
        "tags": [
          "RegisteredModels"
        ]
      },
      "post": {
        "description": "Create a new a Registered Model from an experiment run",
        "operationId": "createRegisteredModelFromRun",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewRegisteredModelV1"
              }
            }
          },
          "description": "Details of the registered model to create",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegisteredModelV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Create a new a Registered Model from an experiment run",
        "tags": [
          "RegisteredModels"
        ]
      }
    },
    "/api/registeredmodels/v1/access/{projectId}": {
      "post": {
        "description": "Request access to a project",
        "operationId": "requestProjectAccess",
        "parameters": [
          {
            "description": "Project ID",
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Request access to a project",
        "tags": [
          "RegisteredModels"
        ]
      }
    },
    "/api/registeredmodels/v1/names": {
      "get": {
        "description": "Get a list of Registered Models' names visible to user.",
        "operationId": "getRegisteredModelNames",
        "parameters": [
          {
            "description": "Search filter by model name",
            "in": "query",
            "name": "search",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "How many Registered Models from the start to skip. Defaults to 0.",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "default": 0,
              "type": "integer"
            }
          },
          {
            "description": "Max number of Registered Models to fetch. Defaults to 10.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "default": 10,
              "type": "integer"
            }
          },
          {
            "description": "Project ID of requested models.",
            "in": "query",
            "name": "projectId",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedRegisteredModelNamesV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Get a list of Registered Models' names visible to user",
        "tags": [
          "RegisteredModels"
        ]
      }
    },
    "/api/registeredmodels/v1/ui": {
      "get": {
        "description": "Get registered models that a user can see.",
        "operationId": "getRegisteredModelsForUI",
        "parameters": [
          {
            "description": "Project ID of requested models.",
            "in": "query",
            "name": "projectId",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Search parameter to retrieve models from Mlflow (currently supports name and tags)",
            "in": "query",
            "name": "searchPattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "globallyDiscoverable flag to indicate if we want to return globally discoverable models. Defaults to false.",
            "in": "query",
            "name": "globallyDiscoverable",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Pagination token to go to the next page based on a previous search query.",
            "in": "query",
            "name": "pageToken",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Max number of Registered Models to fetch. Defaults to 25.",
            "in": "query",
            "name": "maxResults",
            "required": false,
            "schema": {
              "default": 25,
              "type": "integer"
            }
          },
          {
            "description": "List of columns for ordering search results, which can include model name and last updated timestamp with an optional \"DESC\" or \"ASC\" annotation, where \"ASC\" is the default.",
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedRegisteredModelsForUIEnvelopeV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Get Registered Models visible to user",
        "tags": [
          "RegisteredModels"
        ]
      }
    },
    "/api/registeredmodels/v1/{modelName}": {
      "get": {
        "description": "Get a specific Registered Model",
        "operationId": "getRegisteredModelByName",
        "parameters": [
          {
            "description": "Registered model name",
            "in": "path",
            "name": "modelName",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegisteredModelV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Get a specific Registered Model",
        "tags": [
          "RegisteredModels"
        ]
      },
      "patch": {
        "description": "Update a Registered Model",
        "operationId": "patchRegisteredModelByName",
        "parameters": [
          {
            "description": "Registered model name",
            "in": "path",
            "name": "modelName",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchRegisteredModelV1"
              }
            }
          },
          "description": "Details of the model to update",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegisteredModelV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Update a Registered Model",
        "tags": [
          "RegisteredModels"
        ]
      }
    },
    "/api/registeredmodels/v1/{modelName}/modelapis": {
      "get": {
        "description": "Gets all active model Apis that were deployed from a given Registered Model",
        "operationId": "getModelApisFromRegisteredModel",
        "parameters": [
          {
            "description": "Registered model name",
            "in": "path",
            "name": "modelName",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedRegisteredModelVersionModelApiEnvelopeV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Returns list of Model APIs deployed from a specific Registered Model",
        "tags": [
          "RegisteredModels"
        ]
      }
    },
    "/api/registeredmodels/v1/{modelName}/versions": {
      "get": {
        "description": "Get all versions of a Registered Model",
        "operationId": "getRegisteredModelVersions",
        "parameters": [
          {
            "description": "Registered model name",
            "in": "path",
            "name": "modelName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Offset for pagination from the start to skip. Defaults to 0.",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "default": 0,
              "type": "integer"
            }
          },
          {
            "description": "Max number of Registered Models to fetch. Defaults to 20",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "default": 20,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedRegisteredModelVersionOverviewEnvelopeV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Get all versions of a Registered Model",
        "tags": [
          "RegisteredModels"
        ]
      },
      "post": {
        "description": "Create a new version of a Registered Model",
        "operationId": "createRegisteredModelVersionFromRun",
        "parameters": [
          {
            "description": "Registered model name",
            "in": "path",
            "name": "modelName",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewRegisteredModelVersionV1"
              }
            }
          },
          "description": "Details of the model version to create",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegisteredModelVersionDetailsV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Create a new version of a Registered Model",
        "tags": [
          "RegisteredModels"
        ]
      }
    },
    "/api/registeredmodels/v1/{modelName}/versions/{version}": {
      "get": {
        "description": "Get a specific version of a Registered Model",
        "operationId": "getRegisteredModelVersion",
        "parameters": [
          {
            "description": "Registered model name",
            "in": "path",
            "name": "modelName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Version of the registered model",
            "in": "path",
            "name": "version",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegisteredModelVersionDetailsV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Get a specific version of a Registered Model",
        "tags": [
          "RegisteredModels"
        ]
      }
    },
    "/api/registeredmodels/v1/{modelName}/versions/{version}/modelapis": {
      "get": {
        "description": "Gets all active model Apis that were deployed from a given Registered Model Version",
        "operationId": "getModelApisFromRegisteredModelVersion",
        "parameters": [
          {
            "description": "Registered model name",
            "in": "path",
            "name": "modelName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Version of the registered model",
            "in": "path",
            "name": "version",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedRegisteredModelVersionModelApiEnvelopeV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Returns list of Model APIs deployed from a specific Registered Model Version",
        "tags": [
          "RegisteredModels"
        ]
      }
    },
    "/api/users/beta/credentials/{userId}": {
      "get": {
        "description": "Retrieve a users git credentials. Required permissions: `UpdateUser`. *Note:* This is a beta endpoint with known limitations.",
        "operationId": "getUserGitCreds",
        "parameters": [
          {
            "description": "Id of the User to fetch creds for",
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedGitCredentialsAccessorEnvelopeV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Get git credential accessor for a User",
        "tags": [
          "Users"
        ]
      }
    },
    "/api/users/v1/self": {
      "get": {
        "description": "Retrieve the current user. Required permissions: `None`",
        "operationId": "getCurrentUser",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserEnvelopeV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Get the current user",
        "tags": [
          "Users"
        ]
      }
    },
    "/api/users/v1/users": {
      "get": {
        "description": "Retrieves all users visible to the current user. Required permissions: `None`",
        "operationId": "getVisibleUsers",
        "parameters": [
          {
            "description": "How many users from the start to skip. Defaults to 0.",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Max number of users to fetch. Defaults to 10.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedUserEnvelopeV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Get all users visible to the current user",
        "tags": [
          "Users"
        ]
      }
    },
    "/auditevents": {
      "get": {
        "operationId": "fetchAuditEvents",
        "parameters": [
          {
            "description": "unix timestamp in milliseconds",
            "in": "query",
            "name": "startTimestamp",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "unix timestamp in milliseconds",
            "in": "query",
            "name": "endTimestamp",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "actorId",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "actorName",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "event",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "all events in which the target's type matches",
            "example": "dataset",
            "in": "query",
            "name": "targetType",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "all events in which the target's id matches",
            "example": "dataset_id",
            "in": "query",
            "name": "targetId",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "all events in which the target's name matches",
            "example": "my_dataset_name",
            "in": "query",
            "name": "targetName",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "events that occurred within the context of a project with this id",
            "in": "query",
            "name": "withinProjectId",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "events that occurred within the context of a project with this name",
            "in": "query",
            "name": "withinProjectName",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "a comma separated list of fields, each prefixed with either a + or - to indicates asc or desc (no prefix defaults to asc). The list of supported sort fields are timestamp, actorId, actorName, withinProjectId, withinProjectName, event, targetType, and targetName",
            "example": "-timestamp,+actorId",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Maximum number of records to return.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "default": 50,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Zero-based; indicates how many events to skip over before",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "default": 0,
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuditEventsResponse"
                }
              },
              "text/csv": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Provides audit events matching the specified filters and within the specified offset and limit"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Bad request"
          }
        }
      }
    }
  },
  "components": {
    "responses": {
      "400": {
        "content": {
          "application/json": {
            "schema": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/FailureEnvelopeV1"
                },
                {
                  "$ref": "#/components/schemas/InvalidBodyEnvelopeV1"
                }
              ]
            }
          }
        },
        "description": "The server could not understand the request due to malformed syntax"
      },
      "401": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/FailureEnvelopeV1"
            }
          }
        },
        "description": "The current user cannot perform this operation because they are not logged in"
      },
      "403": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/FailureEnvelopeV1"
            }
          }
        },
        "description": "The current user is not authorized to perform this operation"
      },
      "404": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/FailureEnvelopeV1"
            }
          }
        },
        "description": "The server could not find the requested resource"
      },
      "413": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/FailureEnvelopeV1"
            }
          }
        },
        "description": "Request entity is larger than limits defined by server."
      },
      "422": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/FailureEnvelopeV1"
            }
          }
        },
        "description": "The server understands the content type of the request entity, and the syntax of the request entity is correct, but it was unable to process the contained instructions."
      },
      "429": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/FailureEnvelopeV1"
            }
          }
        },
        "description": "The user has sent too many requests in a given amount of time."
      },
      "500": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/FailureEnvelopeV1"
            }
          }
        },
        "description": "An internal error prevented the server from performing this action"
      }
    },
    "schemas": {
      "AIGatewayAuditDataV1": {
        "properties": {
          "endpointId": {
            "description": "Endpoint ID",
            "type": "string"
          },
          "endpointType": {
            "description": "Endpoint type",
            "type": "string"
          },
          "eventKind": {
            "description": "Event kind",
            "type": "string"
          },
          "metadata": {
            "$ref": "#/components/schemas/AIGatewayAuditMetadataV1"
          },
          "performedBy": {
            "description": "ID of user who performed the event",
            "type": "string"
          },
          "timestamp": {
            "description": "timestamp of when event was performed",
            "example": "1996-07-19T03:13:44.467Z",
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "endpointId",
          "endpointType",
          "eventKind",
          "metadata",
          "performedBy",
          "timestamp"
        ],
        "type": "object"
      },
      "AIGatewayAuditMetadataV1": {
        "additionalProperties": {
          "type": "string"
        },
        "description": "A map of string -> string",
        "example": {
          "foo": "bar"
        },
        "type": "object"
      },
      "AIGatewayEnvelopeV1": {
        "properties": {
          "endpoints": {
            "items": {
              "$ref": "#/components/schemas/EndpointEnvelopeV1"
            },
            "type": "array"
          },
          "metadata": {
            "$ref": "#/components/schemas/PaginatedMetadataV1"
          }
        },
        "required": [
          "endpoints",
          "metadata"
        ],
        "type": "object"
      },
      "Action": {
        "properties": {
          "eventName": {
            "type": "string"
          },
          "traceId": {
            "type": "string"
          },
          "using": {
            "$ref": "#/components/schemas/UsingList"
          }
        },
        "required": [
          "eventName",
          "using"
        ],
        "type": "object"
      },
      "Actor": {
        "properties": {
          "id": {
            "type": "string"
          },
          "idpId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "id"
        ]
      },
      "Affecting": {
        "items": {
          "$ref": "#/components/schemas/Entity"
        },
        "type": "array"
      },
      "AsyncPredictionEnvelopeV1": {
        "properties": {
          "asyncPredictionId": {
            "description": "Id of the Async Prediction",
            "type": "string"
          },
          "errors": {
            "description": "Errors that caused the prediction to fail",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "result": {
            "description": "The prediction result",
            "type": "object"
          },
          "status": {
            "description": "Status of the Async Prediction Request (Pending, Processing, Succeeded, Failed)",
            "type": "string"
          }
        },
        "required": [
          "asyncPredictionId",
          "status"
        ],
        "type": "object"
      },
      "AsyncPredictionRequestEnvelopeV1": {
        "properties": {
          "asyncPredictionId": {
            "description": "Id of the created Async Prediction",
            "type": "string"
          }
        },
        "required": [
          "asyncPredictionId"
        ],
        "type": "object"
      },
      "AthenaBillingConfigsV1": {
        "properties": {
          "athenaBucketName": {
            "type": "string"
          },
          "athenaDatabase": {
            "type": "string"
          },
          "athenaRegion": {
            "type": "string"
          },
          "athenaTable": {
            "type": "string"
          },
          "projectID": {
            "type": "string"
          },
          "serviceKeyName": {
            "type": "string"
          },
          "serviceKeySecret": {
            "type": "string"
          }
        },
        "required": [
          "athenaRegion",
          "athenaDatabase",
          "athenaTable",
          "athenaBucketName",
          "projectID",
          "serviceKeyName",
          "serviceKeySecret"
        ],
        "type": "object"
      },
      "AuditEvent": {
        "properties": {
          "action": {
            "$ref": "#/components/schemas/Action"
          },
          "actor": {
            "$ref": "#/components/schemas/Actor"
          },
          "affecting": {
            "$ref": "#/components/schemas/Affecting"
          },
          "from": {
            "$ref": "#/components/schemas/Entity"
          },
          "in": {
            "$ref": "#/components/schemas/Entity"
          },
          "metadata": {
            "$ref": "#/components/schemas/StringStringMap"
          },
          "targets": {
            "$ref": "#/components/schemas/TargetList"
          },
          "timestamp": {
            "format": "int64",
            "type": "integer"
          },
          "to": {
            "$ref": "#/components/schemas/Entity"
          }
        },
        "required": [
          "timestamp",
          "actor",
          "action",
          "targets",
          "affecting",
          "metadata"
        ],
        "type": "object"
      },
      "AuditEventsResponse": {
        "properties": {
          "events": {
            "items": {
              "$ref": "#/components/schemas/AuditEvent"
            },
            "type": "array"
          },
          "total": {
            "type": "integer"
          }
        },
        "required": [
          "estimatedMatches",
          "events"
        ],
        "type": "object"
      },
      "BillingTagEnvelopeV1": {
        "properties": {
          "billingTag": {
            "$ref": "#/components/schemas/BillingTagWithStatusV1"
          }
        },
        "required": [
          "billingTag"
        ],
        "type": "object"
      },
      "BillingTagV1": {
        "description": "Billing Tag to assign to projects for cost aggregation",
        "properties": {
          "tag": {
            "description": "The tag to be assigned to projects.",
            "type": "string"
          }
        },
        "required": [
          "tag"
        ],
        "type": "object"
      },
      "BillingTagWithStatusV1": {
        "properties": {
          "active": {
            "type": "boolean"
          },
          "tag": {
            "type": "string"
          },
          "tagId": {
            "type": "string"
          }
        },
        "required": [
          "tag",
          "tagId",
          "active"
        ],
        "type": "object"
      },
      "BillingTagsEnvelopeV1": {
        "properties": {
          "billingTags": {
            "items": {
              "$ref": "#/components/schemas/BillingTagV1"
            },
            "type": "array"
          }
        },
        "required": [
          "billingTags"
        ],
        "type": "object"
      },
      "BillingTagsModeEnvelopeV1": {
        "properties": {
          "mode": {
            "$ref": "#/components/schemas/BillingTagsSettingModeV1"
          }
        },
        "required": [
          "mode"
        ],
        "type": "object"
      },
      "BillingTagsModeV1": {
        "properties": {
          "mode": {
            "$ref": "#/components/schemas/BillingTagsSettingModeV1"
          }
        },
        "required": [
          "mode"
        ],
        "type": "object"
      },
      "BillingTagsNotificationsEnvelopeV1": {
        "properties": {
          "notifications": {
            "$ref": "#/components/schemas/BillingTagsSettingNotificationsV1"
          }
        },
        "required": [
          "notifications"
        ],
        "type": "object"
      },
      "BillingTagsNotificationsV1": {
        "properties": {
          "notifications": {
            "$ref": "#/components/schemas/BillingTagsSettingNotificationsV1"
          }
        },
        "required": [
          "notifications"
        ],
        "type": "object"
      },
      "BillingTagsSettingModeV1": {
        "description": "Billing tags functionality mode",
        "enum": [
          "required",
          "optional",
          "disabled"
        ],
        "type": "string"
      },
      "BillingTagsSettingNotificationsV1": {
        "description": "Billing tags notifications setting",
        "type": "boolean"
      },
      "BillingTagsSettingsEnvelopeV1": {
        "properties": {
          "mode": {
            "$ref": "#/components/schemas/BillingTagsSettingModeV1"
          },
          "notifications": {
            "$ref": "#/components/schemas/BillingTagsSettingNotificationsV1"
          }
        },
        "required": [
          "mode",
          "notifications"
        ],
        "type": "object"
      },
      "BillingTagsSettingsV1": {
        "properties": {
          "mode": {
            "$ref": "#/components/schemas/BillingTagsSettingModeV1"
          },
          "notifications": {
            "$ref": "#/components/schemas/BillingTagsSettingNotificationsV1"
          }
        },
        "required": [
          "mode",
          "notifications"
        ],
        "type": "object"
      },
      "CloudCostMetricsV1": {
        "description": "Determines which cloud cost metric type will be returned",
        "enum": [
          "AmortizedNetCost",
          "InvoicedCost",
          "ListCost",
          "NetCost"
        ],
        "type": "string"
      },
      "ClusterTypeV1": {
        "description": "Type of compute cluster",
        "enum": [
          "dask",
          "mpi",
          "ray",
          "spark"
        ],
        "type": "string"
      },
      "CommitDetailsV1": {
        "properties": {
          "inputCommitId": {
            "description": "CommitId at execution start.",
            "example": "f1dafe322c7d4a6720f652c330fe33b014720e46",
            "type": "string"
          },
          "outputCommitId": {
            "description": "CommitId at execution end. May be empty if execution caused no new commits.",
            "example": "e1f06e5f64cfc26c2b70e405f70b7c8300d8a4ed",
            "type": "string"
          }
        },
        "required": [
          "inputCommitId"
        ],
        "type": "object"
      },
      "ComputeClusterConfigV1": {
        "properties": {
          "clusterType": {
            "$ref": "#/components/schemas/ClusterTypeV1"
          },
          "computeEnvironmentId": {
            "description": "Id of compute environment to use.",
            "example": "623139857a0af0281c01a6a4",
            "type": "string"
          },
          "computeEnvironmentRevisionSpec": {
            "$ref": "#/components/schemas/EnvironmentRevisionSpecV1"
          },
          "masterHardwareTierId": {
            "description": "Hardware tier to use for master node in compute cluster.",
            "example": "medium-k8s",
            "type": "string"
          },
          "maxWorkerCount": {
            "description": "Max number of workers to use in compute cluster. Enables auto-scaling for cluster when present.",
            "example": 10,
            "type": "integer"
          },
          "workerCount": {
            "description": "Number of workers to use in compute cluster. Used as min number of workers in maxWorkerCount is set.",
            "example": 4,
            "type": "integer"
          },
          "workerHardwareTier": {
            "description": "Hardware tier to use for workers in compute cluster.",
            "example": "large-k8s",
            "type": "string"
          },
          "workerStorageMB": {
            "description": "Disk size in MB for each worker.",
            "example": 5,
            "type": "number"
          }
        },
        "required": [
          "clusterType",
          "computeEnvironmentId",
          "workerCount",
          "workerHardwareTier"
        ],
        "type": "object"
      },
      "CopyProjectSpecV1": {
        "properties": {
          "billingTag": {
            "$ref": "#/components/schemas/BillingTagV1"
          },
          "copyDatasets": {
            "description": "Whether to copy the Project's datasets or not",
            "type": "boolean"
          },
          "gitCodeRepoSpec": {
            "$ref": "#/components/schemas/GitCodeRepoSpecV1"
          },
          "importedGitReposCredentialId": {
            "description": "The Domino ID of the PAT credential, which will be used to access the Imported Git Repos on the new project.",
            "type": "string"
          },
          "name": {
            "description": "The name of the new Domino Project.",
            "type": "string"
          },
          "ownerId": {
            "description": "The Domino ID of owner of the copied project.",
            "type": "string"
          },
          "visibility": {
            "$ref": "#/components/schemas/ProjectVisibilityV1",
            "description": "The visibility of the new Project."
          }
        },
        "required": [
          "copyDatasets"
        ],
        "type": "object"
      },
      "CostAllocationEnvelopeV1": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/CostAllocationV1"
            },
            "type": "array"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "CostAllocationV1": {
        "properties": {
          "cpuCoreHours": {
            "format": "double",
            "type": "number"
          },
          "cpuCoreRequestAverage": {
            "format": "double",
            "type": "number"
          },
          "cpuCoreUsageAverage": {
            "format": "double",
            "type": "number"
          },
          "cpuCores": {
            "format": "double",
            "type": "number"
          },
          "cpuCost": {
            "format": "double",
            "type": "number"
          },
          "cpuCostAdjustment": {
            "format": "double",
            "type": "number"
          },
          "cpuEfficincy": {
            "format": "double",
            "type": "number"
          },
          "discount": {
            "format": "double",
            "type": "number"
          },
          "gpuCost": {
            "format": "double",
            "type": "number"
          },
          "gpuCostAdjustment": {
            "format": "double",
            "type": "number"
          },
          "gpuCount": {
            "format": "double",
            "type": "number"
          },
          "gpuHours": {
            "format": "double",
            "type": "number"
          },
          "labels": {
            "properties": {
              "billing_tag": {
                "type": "string"
              },
              "organization_id": {
                "type": "string"
              },
              "organization_name": {
                "type": "string"
              },
              "project_id": {
                "type": "string"
              },
              "project_name": {
                "type": "string"
              },
              "project_owner_id": {
                "type": "string"
              },
              "project_owner_name": {
                "type": "string"
              },
              "starting_user_id": {
                "type": "string"
              },
              "starting_user_name": {
                "type": "string"
              },
              "workload_id": {
                "type": "string"
              },
              "workload_type": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "loadBalancerCost": {
            "format": "double",
            "type": "number"
          },
          "loadBalancerCostAdjustment": {
            "format": "double",
            "type": "number"
          },
          "name": {
            "type": "string"
          },
          "nodeType": {
            "type": "string"
          },
          "pv": {
            "properties": {
              "pvByteHours": {
                "format": "double",
                "type": "number"
              },
              "pvBytes": {
                "format": "double",
                "type": "number"
              },
              "pvCost": {
                "format": "double",
                "type": "number"
              },
              "pvCostAdjustment": {
                "format": "double",
                "type": "number"
              },
              "pvs": {
                "additionalProperties": {
                  "properties": {
                    "byteHours": {
                      "format": "double",
                      "type": "number"
                    },
                    "cost": {
                      "format": "double",
                      "type": "number"
                    }
                  },
                  "type": "object"
                },
                "type": "object"
              }
            },
            "type": "object"
          },
          "ramCost": {
            "format": "double",
            "type": "number"
          },
          "ramCostAdjustment": {
            "format": "double",
            "type": "number"
          },
          "totalCost": {
            "format": "double",
            "type": "number"
          },
          "window": {
            "properties": {
              "end": {
                "type": "string"
              },
              "minutes": {
                "format": "double",
                "type": "number"
              },
              "start": {
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "CostAssetsEnvelopeV1": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/CostAssetsV1"
            },
            "type": "array"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "CostAssetsV1": {
        "properties": {
          "cpuCost": {
            "format": "double",
            "type": "number"
          },
          "gpuCost": {
            "format": "double",
            "type": "number"
          },
          "labels": {
            "properties": {
              "instance": {
                "type": "string"
              },
              "job": {
                "type": "string"
              },
              "label_dominodatalab_com_domino_node": {
                "type": "string"
              },
              "label_dominodatalab_com_node_pool": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "name": {
            "type": "string"
          },
          "properties": {
            "properties": {
              "category": {
                "type": "string"
              },
              "cluster": {
                "type": "string"
              },
              "provider": {
                "type": "string"
              },
              "providerId": {
                "type": "string"
              },
              "service": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "ramCost": {
            "format": "double",
            "type": "number"
          },
          "totalCost": {
            "format": "double",
            "type": "number"
          },
          "type": {
            "type": "string"
          },
          "window": {
            "$ref": "#/components/schemas/CostAssetsV1Window",
            "type": "object"
          }
        },
        "type": "object"
      },
      "CostAssetsV1Window": {
        "properties": {
          "end": {
            "type": "string"
          },
          "minutes": {
            "format": "double",
            "type": "number"
          },
          "start": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "CreatorInfo": {
        "description": "Information about the creator of a Model Deployment",
        "properties": {
          "id": {
            "description": "Id of the creator",
            "example": "ABC-123",
            "nullable": false,
            "type": "string"
          },
          "username": {
            "description": "Username of the creator",
            "example": "Production",
            "nullable": false,
            "type": "string"
          }
        },
        "required": [
          "id",
          "username"
        ],
        "type": "object"
      },
      "CredentialsType": {
        "description": "This field identifies the type of credential.  The `enum` value limits the possibilities to what this model deployment supports.",
        "enum": [
          "AWS",
          "HMAC"
        ],
        "type": "string"
      },
      "CustomerTemplate": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ProjectTemplate"
          },
          {
            "properties": {
              "definition": {
                "$ref": "#/components/schemas/ProjectTemplateDefinition"
              },
              "isArchived": {
                "type": "boolean"
              },
              "isCompanyOfficial": {
                "type": "boolean"
              },
              "sourceProject": {
                "$ref": "#/components/schemas/ProjectTemplateSourceProject"
              }
            },
            "required": [
              "sourceProject",
              "definition",
              "isArchived",
              "isCompanyOfficial"
            ],
            "type": "object"
          }
        ]
      },
      "DataSourceAuditDataV1": {
        "properties": {
          "dataSourceId": {
            "description": "ID of the Data Source",
            "type": "string"
          },
          "dataSourceName": {
            "description": "name of the Data Source",
            "type": "string"
          },
          "dataSourceType": {
            "$ref": "#/components/schemas/DataSourceTypeV1"
          },
          "eventKind": {
            "$ref": "#/components/schemas/DataSourceAuditEventKindV1"
          },
          "metadata": {
            "$ref": "#/components/schemas/DataSourceAuditMetadataV1"
          },
          "performedBy": {
            "description": "ID of user who performed the event",
            "type": "string"
          },
          "timestamp": {
            "description": "timestamp of when event was performed",
            "example": "1996-07-19T03:13:44.467Z",
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "dataSourceId",
          "dataSourceName",
          "dataSourceType",
          "eventKind",
          "metadata",
          "performedBy",
          "timestamp"
        ],
        "type": "object"
      },
      "DataSourceAuditEventKindV1": {
        "description": "Kinds of Data Source audit events",
        "enum": [
          "AccessDataSource",
          "CreateDataSource",
          "DataSourceAssociatedToProject",
          "DataSourceDissociatedFromProject",
          "DataSourceChangeOfOwnership",
          "DataSourceChangeOfPermissions",
          "DeleteDataSource"
        ],
        "type": "string"
      },
      "DataSourceAuditMetadataV1": {
        "additionalProperties": {
          "type": "string"
        },
        "description": "A map of string -> string",
        "example": {
          "foo": "bar"
        },
        "type": "object"
      },
      "DataSourceAuthTypeV1": {
        "description": "The type of Data Source authentication",
        "example": "AzureBasic",
        "type": "string"
      },
      "DataSourceConfigV1": {
        "additionalProperties": {
          "type": "string"
        },
        "description": "A map of configuration name -> value",
        "example": {
          "host": "example-host.com"
        },
        "type": "object"
      },
      "DataSourceCredentialTypeV1": {
        "description": "Whether the credentials is individual to a user or shared",
        "enum": [
          "Individual",
          "Shared"
        ],
        "type": "string"
      },
      "DataSourceCredentialsV1": {
        "properties": {
          "secretCredentials": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Map of secret credentials fields -> value",
            "type": "object"
          },
          "visibleCredentials": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Map of non-secret credentials fields -> value",
            "type": "object"
          }
        },
        "required": [
          "visibleCredentials",
          "secretCredentials"
        ],
        "type": "object"
      },
      "DataSourceEnvelopeV1": {
        "properties": {
          "authType": {
            "$ref": "#/components/schemas/DataSourceAuthTypeV1"
          },
          "config": {
            "$ref": "#/components/schemas/DataSourceConfigV1"
          },
          "credentialType": {
            "$ref": "#/components/schemas/DataSourceCredentialTypeV1"
          },
          "dataSourceType": {
            "$ref": "#/components/schemas/DataSourceTypeV1"
          },
          "description": {
            "description": "Description of the Data Source",
            "example": "My Data Source",
            "type": "string"
          },
          "displayName": {
            "description": "Data Source display name",
            "example": "Azure Data Lake Store",
            "type": "string"
          },
          "id": {
            "description": "ID of the Data Source",
            "example": "62604702b7e5d347dbe7a909",
            "type": "string"
          },
          "lastUpdated": {
            "description": "ISO 8601 formatted time of when the Data Source was last updated",
            "example": "2022-04-23T18:25:43.511Z",
            "format": "date-time",
            "type": "string"
          },
          "name": {
            "description": "User given name of the Data Source",
            "example": "data-source-name",
            "type": "string"
          },
          "ownerId": {
            "description": "ID of the Data Source owner",
            "example": "62604702b7e5d347dbe7a909",
            "type": "string"
          },
          "ownerUsername": {
            "description": "Username of the owner of the Data Source",
            "example": "owner-username",
            "type": "string"
          },
          "permissions": {
            "$ref": "#/components/schemas/DataSourcePermissionsV1"
          }
        },
        "required": [
          "id",
          "name",
          "ownerId",
          "ownerUsername",
          "dataSourceType",
          "authType",
          "credentialType",
          "config",
          "permissions",
          "lastUpdated",
          "displayName"
        ],
        "type": "object"
      },
      "DataSourcePermissionsV1": {
        "properties": {
          "isEveryone": {
            "description": "If the Data Source is accessible by everyone",
            "type": "boolean"
          },
          "userAndOrganizationIds": {
            "description": "User and Organization IDs that can access this Data Source",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "isEveryone",
          "userAndOrganizationIds"
        ],
        "type": "object"
      },
      "DataSourceTypeV1": {
        "description": "The configuration type of the Data Source",
        "example": "ADLSConfig",
        "type": "string"
      },
      "DataSourceUpdateV1": {
        "properties": {
          "config": {
            "$ref": "#/components/schemas/DataSourceConfigV1"
          },
          "credentials": {
            "$ref": "#/components/schemas/DataSourceCredentialsV1"
          },
          "permissions": {
            "$ref": "#/components/schemas/DataSourcePermissionsV1"
          }
        },
        "type": "object"
      },
      "DatasetInfoV1": {
        "properties": {
          "createdAt": {
            "description": "When the dataset was created",
            "example": "2022-03-12T02:13:44.467Z",
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "description": "A description of the dataset",
            "type": "string"
          },
          "id": {
            "description": "Dataset ID",
            "example": "62313ce67a0af0281c01a6a5",
            "type": "string"
          },
          "name": {
            "description": "Name of the dataset",
            "example": "My Dataset",
            "type": "string"
          },
          "projectId": {
            "description": "ID of the project this dataset belongs to",
            "example": "62313ce67a0af0281c01a6a5",
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "createdAt"
        ],
        "type": "object"
      },
      "DatasetMountV1": {
        "properties": {
          "containerPath": {
            "description": "Location dataset is mounted at in the Job.",
            "example": "/domino/datasets/local/quick-start",
            "type": "string"
          },
          "datasetName": {
            "description": "Name of dataset to be mounted.",
            "example": "MyDataset",
            "type": "string"
          },
          "id": {
            "description": "Id of dataset to be mounted.",
            "example": "623137f57a0af0281c01a6a0",
            "type": "string"
          },
          "isInput": {
            "description": "Whether a dataset was an input to be used in the execution, or an output created by the execution.",
            "example": true,
            "type": "boolean"
          },
          "projectId": {
            "description": "Id of project the dataset belongs to.",
            "example": "6231383c7a0af0281c01a6a1",
            "type": "string"
          },
          "snapshotId": {
            "description": "Id of snapshot to mount for this dataset.",
            "example": "623138807a0af0281c01a6a2",
            "type": "string"
          },
          "snapshotVersion": {
            "description": "Version of dataset snapshot to mound.",
            "example": 2,
            "type": "integer"
          }
        },
        "required": [
          "id",
          "datasetName",
          "projectId",
          "isInput"
        ],
        "type": "object"
      },
      "DatasetNotCopiedV1": {
        "properties": {
          "datasetInfo": {
            "$ref": "#/components/schemas/DatasetInfoV1",
            "description": "dataset not copied"
          },
          "errorMessage": {
            "description": "error message explaining why dataset wasn't copied",
            "type": "string"
          }
        },
        "required": [
          "datasetInfo",
          "errorMessage"
        ],
        "type": "object"
      },
      "DatasetRwDetailsV1": {
        "properties": {
          "createdAt": {
            "description": "When the dataset was created",
            "example": "2022-03-12T02:13:44.467Z",
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "description": "A description of the dataset",
            "type": "string"
          },
          "id": {
            "description": "ID of the dataset",
            "example": "62313ce67a0af0281c01a6a5",
            "type": "string"
          },
          "name": {
            "description": "Name of the dataset",
            "example": "My Dataset",
            "type": "string"
          },
          "projectId": {
            "description": "ID of the project this dataset belongs to",
            "example": "62313ce67a0af0281c01a6a5",
            "type": "string"
          },
          "snapshotIds": {
            "description": "List of snapshot IDs belonging to this dataset",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "tags": {
            "$ref": "#/components/schemas/DatasetRwTagsV1"
          }
        },
        "required": [
          "id",
          "name",
          "createdAt",
          "snapshotIds",
          "tags"
        ],
        "type": "object"
      },
      "DatasetRwEnvelopeV1": {
        "properties": {
          "dataset": {
            "$ref": "#/components/schemas/DatasetRwDetailsV1"
          },
          "metadata": {
            "$ref": "#/components/schemas/MetadataV1"
          }
        },
        "required": [
          "dataset",
          "metadata"
        ],
        "type": "object"
      },
      "DatasetRwGrantDetailsEnvelopeV1": {
        "properties": {
          "grantDetails": {
            "items": {
              "$ref": "#/components/schemas/DatasetRwGrantDetailsV1"
            },
            "type": "array"
          },
          "metadata": {
            "$ref": "#/components/schemas/MetadataV1"
          }
        },
        "required": [
          "grantDetails",
          "metadata"
        ],
        "type": "object"
      },
      "DatasetRwGrantDetailsV1": {
        "properties": {
          "isOrganization": {
            "description": "If target id is an organization",
            "type": "boolean"
          },
          "targetId": {
            "description": "ID of the user within the grant",
            "type": "string"
          },
          "targetName": {
            "description": "Username of user within the grant",
            "type": "string"
          },
          "targetRole": {
            "$ref": "#/components/schemas/DatasetRwRoleV1"
          }
        },
        "required": [
          "targetId",
          "targetName",
          "targetRole",
          "isOrganization"
        ],
        "type": "object"
      },
      "DatasetRwGrantEnvelopeV1": {
        "properties": {
          "grants": {
            "items": {
              "$ref": "#/components/schemas/DatasetRwGrantV1"
            },
            "type": "array"
          },
          "metadata": {
            "$ref": "#/components/schemas/MetadataV1"
          }
        },
        "required": [
          "grants",
          "metadata"
        ],
        "type": "object"
      },
      "DatasetRwGrantV1": {
        "properties": {
          "targetId": {
            "description": "ID of the user within the grant",
            "type": "string"
          },
          "targetRole": {
            "$ref": "#/components/schemas/DatasetRwRoleV1"
          }
        },
        "required": [
          "targetId",
          "targetRole"
        ],
        "type": "object"
      },
      "DatasetRwInfoDtoV1": {
        "properties": {
          "dataset": {
            "$ref": "#/components/schemas/DatasetRwDetailsV1"
          },
          "projectInfo": {
            "$ref": "#/components/schemas/DatasetRwProjectInfoDtoV1"
          }
        },
        "required": [
          "dataset"
        ],
        "type": "object"
      },
      "DatasetRwMetadataV1": {
        "properties": {
          "description": {
            "description": "Description of the dataset",
            "type": "string"
          },
          "name": {
            "description": "Name of this dataset. The name must be unique in the same project",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DatasetRwPermissionV1": {
        "description": "Permission within a dataset",
        "enum": [
          "DeleteDatasetRwV2",
          "EditSecurityDatasetRwV2",
          "ListDatasetRwV2",
          "PerformDatasetRwActionsInProjectV2",
          "PermanentDeleteDatasetRwV2",
          "ReadDatasetRwV2",
          "UpdateDatasetRwV2",
          "PerformDatasetRwActionsAsAdminV2"
        ],
        "type": "string"
      },
      "DatasetRwProjectInfoDtoV1": {
        "properties": {
          "projectId": {
            "description": "ID of the project this dataset belongs to",
            "type": "string"
          },
          "projectName": {
            "description": "Name of the project this dataset belongs to",
            "type": "string"
          },
          "projectOwnerUsername": {
            "description": "Username of the project's owner",
            "type": "string"
          }
        },
        "required": [
          "projectId",
          "projectName",
          "projectOwnerUsername"
        ],
        "type": "object"
      },
      "DatasetRwRoleV1": {
        "description": "Role that the user will assume in the dataset. Note that organizations cannot be dataset Owners",
        "enum": [
          "DatasetRwOwner",
          "DatasetRwEditor",
          "DatasetRwReader"
        ],
        "type": "string"
      },
      "DatasetRwTagToAddV1": {
        "properties": {
          "snapshotId": {
            "description": "ID of a snapshot belonging to the dataset",
            "example": "62313ce67a0af0281c01a6a5",
            "type": "string"
          },
          "tagName": {
            "description": "Name of tag to add to a snapshot",
            "example": "MyTag",
            "type": "string"
          }
        },
        "required": [
          "tagName",
          "snapshotId"
        ],
        "type": "object"
      },
      "DatasetRwTagsV1": {
        "additionalProperties": {
          "type": "string"
        },
        "description": "A map of tagName -> snapshotId",
        "example": {
          "bar": "62313ce67a0af0281c01a6a5",
          "foo": "62313ce67a0af0281c01a6a5"
        },
        "type": "object"
      },
      "DatasetToAddV1": {
        "properties": {
          "datasetId": {
            "description": "ID of shared dataset to link with this project",
            "example": "62313ce67a0af0281c01a6a5",
            "type": "string"
          }
        },
        "required": [
          "datasetId"
        ],
        "type": "object"
      },
      "DeepCopyGitRepoSpecV1": {
        "description": "Data which specifies what the copied repository will look like.",
        "properties": {
          "newRepoName": {
            "description": "The name of the new repository.",
            "type": "string"
          },
          "newRepoOwnerName": {
            "description": "The name of the user who will own the new repository in the git service provider.",
            "type": "string"
          },
          "visibility": {
            "$ref": "#/components/schemas/ProviderRepoVisibilityV1"
          }
        },
        "required": [
          "newRepoName",
          "newRepoOwnerName",
          "visibility"
        ],
        "type": "object"
      },
      "DeleteEnvelopeV1": {
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/MetadataV1"
          },
          "success": {
            "type": "boolean"
          }
        },
        "required": [
          "success",
          "metadata"
        ],
        "type": "object"
      },
      "DeploymentCustomResourceDefinition": {
        "description": "Custom Resource Definition for Model Deployment",
        "properties": {
          "group": {
            "description": "The group of the Custom Resource Definition",
            "type": "string"
          },
          "kind": {
            "description": "The kind of the Custom Resource Definition",
            "type": "string"
          },
          "version": {
            "description": "The version of the Custom Resource Definition",
            "type": "string"
          }
        },
        "required": [
          "group",
          "kind",
          "version"
        ],
        "type": "object"
      },
      "DeploymentTarget": {
        "description": "Deployment Target",
        "example": {
          "configuration": {
            "credentials": {
              "account": 1234,
              "credentials": "vault-secret-name"
            },
            "sagemaker": {
              "ecrUrl": "399181051250.dkr.ecr.us-east-1.amazonaws.com/rf-regression-juno:mlflow",
              "executionRoleArn": "arn:aws:iam::1234567890:role/service-role/AmazonSageMaker-ExecutionRole",
              "region": "us-east-1",
              "sagemakerS3ModelsBucket": "domino-sagemaker"
            }
          },
          "deploymentTargetTypeId": 0,
          "deploymentTargetTypeName": "AWS",
          "id": 1,
          "name": "Local Dataplane Sagemaker",
          "resourceConfigurations": [
            {
              "configuration": {
                "instanceType": "m7g.medium"
              },
              "deploymentTargetId": 1,
              "description": "Medium AWS Instance",
              "id": 2,
              "name": "Medium"
            },
            {
              "configuration": {
                "instanceType": "m7g.large"
              },
              "deploymentTargetId": 1,
              "description": "Large AWS Instance",
              "id": 3,
              "name": "Large"
            }
          ],
          "userAndOrganizationIds": []
        },
        "properties": {
          "configuration": {
            "description": "Configuration of this Deployment Target following the schema in its Deployment Target Type",
            "type": "object"
          },
          "defaultResourceConfigurationId": {
            "description": "The ID of the default resource configuration",
            "type": "string"
          },
          "deploymentTargetTypeId": {
            "description": "ID of the Deployment Target Type this Deployment Target belongs to",
            "type": "string"
          },
          "deploymentTargetTypeName": {
            "description": "Name of the Deployment Target Type this Deployment Target belongs to",
            "type": "string"
          },
          "id": {
            "description": "UUID for the Deployment Target",
            "type": "string"
          },
          "isGloballyAccessible": {
            "description": "Whether or not the Deployment Target is globally accessible",
            "type": "boolean"
          },
          "lastModified": {
            "description": "Timestamp of the last update to the deployment target (will be the creation timestamp on creation)",
            "format": "date-time",
            "type": "string"
          },
          "name": {
            "description": "Internal name for the Deployment Target",
            "example": "Production",
            "type": "string"
          },
          "resourceConfigurations": {
            "items": {
              "$ref": "#/components/schemas/ResourceConfiguration"
            },
            "type": "array"
          },
          "userAndOrganizationIds": {
            "description": "User and Organization IDs that can use this Deployment Target",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "id",
          "name",
          "deploymentTargetTypeId",
          "deploymentTargetTypeName",
          "isGloballyAccessible",
          "userAndOrganizationIds",
          "configuration",
          "lastModified"
        ],
        "type": "object"
      },
      "DeploymentTargetConfiguration": {
        "description": "The Deployment Target configuration values for the Deployment Target and Resource Configuration",
        "properties": {
          "resourceConfig": {
            "type": "object"
          },
          "targetConfig": {
            "type": "object"
          }
        },
        "required": [
          "targetConfig",
          "resourceConfig"
        ],
        "type": "object"
      },
      "DeploymentTargetConfigurationSchemas": {
        "description": "The Deployment Target configuration schemas.  Each configuration can have properties that are direct children or one layer deep.  Two or more layers of nesting is not supported.",
        "properties": {
          "defaultResourceConfigs": {
            "additionalProperties": {
              "type": "object"
            },
            "type": "object"
          },
          "resourceConfigSchema": {
            "$ref": "#/components/schemas/JSONSchema"
          },
          "targetConfigSchema": {
            "$ref": "#/components/schemas/JSONSchema"
          }
        },
        "required": [
          "targetConfigSchema",
          "resourceConfigSchema",
          "defaultResourceConfigs"
        ],
        "type": "object"
      },
      "DeploymentTargetInfo": {
        "description": "Information about a Deployment Target and its corresponding Deployment Target Type",
        "properties": {
          "id": {
            "description": "Id of the Deployment Target",
            "example": "ABC-123",
            "nullable": false,
            "type": "string"
          },
          "name": {
            "description": "Name of the Deployment Target",
            "example": "Production",
            "nullable": false,
            "type": "string"
          },
          "typeName": {
            "description": "Name of the Deployment Target Type",
            "example": "AWS SageMaker",
            "nullable": false,
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "typeName"
        ],
        "type": "object"
      },
      "DeploymentTargetType": {
        "description": "Deployment Target Type.  Each specific schema can have properties that are direct children or one layer deep.  Two or more layers of nesting is not supported.",
        "example": {
          "dataPlaneId": 0,
          "deploymentTargetConfigurationSchemas": {
            "defaultResourceConfigs": {
              "Cheap": {
                "instanceType": "ml.t2.medium"
              },
              "Expensive": {
                "instanceType": "ml.c5.2xlarge"
              }
            },
            "resourceConfigSchema": {
              "properties": {
                "instanceType": {
                  "description": "AWS compute instance type",
                  "title": "Instance Type",
                  "type": "string"
                }
              },
              "required": [
                "instanceType"
              ],
              "type": "object"
            },
            "targetConfigSchema": {
              "properties": {
                "credentials": {
                  "properties": {
                    "account": {
                      "description": "AWS Account ID",
                      "title": "Account",
                      "type": "string"
                    },
                    "credentials": {
                      "description": "AWS Credentials File",
                      "format": "password",
                      "title": "Credentials",
                      "type": "string"
                    }
                  },
                  "required": [
                    "account",
                    "credentials"
                  ],
                  "type": "object"
                },
                "sagemaker": {
                  "properties": {
                    "ecrUrl": {
                      "description": "Amazon Elastic Container Registry URL for model images",
                      "title": "ECR URL",
                      "type": "string"
                    },
                    "executionRoleArn": {
                      "description": "The Amazon Resource Name (ARN) of the task execution role that grants the Amazon ECS container agent permission to make AWS API calls on your behalf.",
                      "title": "Execution Role ARN",
                      "type": "string"
                    },
                    "region": {
                      "description": "AWS Region",
                      "title": "Region",
                      "type": "string"
                    },
                    "sagemakerS3ModelsBucket": {
                      "description": "S3 bucket for storing model artifacts",
                      "title": "Sagemaker S3 Models Bucket",
                      "type": "string"
                    }
                  },
                  "required": [
                    "region",
                    "executionRoleArn"
                  ],
                  "type": "object"
                }
              },
              "type": "object"
            }
          },
          "id": 0,
          "modelDeploymentConfigurationSchemas": {
            "modelSpecificSchema": {
              "properties": {
                "autoscaling": {
                  "properties": {
                    "enabled": {
                      "default": false,
                      "description": "Enable autoscaling",
                      "title": "Autoscaling Enabled",
                      "type": "Boolean"
                    },
                    "maxInstances": {
                      "default": 4,
                      "description": "Maximum number of instances running at any time",
                      "minimum": 0,
                      "title": "Max Instances",
                      "type": "Integer"
                    },
                    "minInstances": {
                      "default": 0,
                      "description": "Minimum number of instances running at any time",
                      "minimum": 0,
                      "title": "Min Instances",
                      "type": "Integer"
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            },
            "sharedSchema": {
              "properties": {
                "enableExplanations": {
                  "default": false,
                  "description": "Turn on Explainer",
                  "title": "Enable Explanations",
                  "type": "Boolean"
                }
              },
              "type": "object"
            }
          },
          "modelDeploymentCustomResourceDefinition": {
            "group": "modelserving.dominodatalab.com",
            "kind": "SagemakerModelDeployment",
            "version": "v1alpha1"
          },
          "modelDeploymentStateSchemas": {
            "modelSpecificSchema": {},
            "sharedSchema": {}
          },
          "modelDeploymentSupportedModelSources": [
            "MODELREGISTRY"
          ],
          "modelDeploymentTypeConfigurationSchemas": {
            "ASYNC_ENDPOINT": {
              "modelSpecificSchema": {
                "properties": {
                  "requestTimeoutSeconds": {
                    "default": 60,
                    "maximum": 1800,
                    "minimum": 1,
                    "title": "Request Timeout",
                    "type": "Integer"
                  }
                },
                "type": "object"
              },
              "sharedSchema": {
                "properties": {
                  "maximumQueuedRequests": {
                    "default": 1000,
                    "maximum": 10000,
                    "minimum": 100,
                    "title": "Maximum queued requests",
                    "type": "Integer"
                  }
                },
                "type": "object"
              }
            },
            "SYNC_ENDPOINT": {
              "modelSpecificSchema": {
                "properties": {
                  "serverless": {
                    "default": false,
                    "title": "Serverless",
                    "type": "Boolean"
                  }
                },
                "type": "object"
              },
              "sharedSchema": {
                "properties": {
                  "healthcheck": {
                    "properties": {
                      "failureThresholdCount": {
                        "default": 3,
                        "description": "(count)",
                        "minimum": 1,
                        "title": "Failure Threshold",
                        "type": "Integer"
                      },
                      "initialDelaySeconds": {
                        "default": 60,
                        "description": "(seconds)",
                        "minimum": 0,
                        "title": "Initial Delay",
                        "type": "Integer"
                      },
                      "periodSeconds": {
                        "default": 60,
                        "description": "(seconds)",
                        "minimum": 5,
                        "title": "Health check period",
                        "type": "Integer"
                      },
                      "timeoutSeconds": {
                        "default": 300,
                        "description": "(seconds)",
                        "minimum": 1,
                        "title": "Health check timeout",
                        "type": "Integer"
                      }
                    },
                    "title": "HealthCheck Fields",
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          },
          "modelDeploymentTypeStateSchemas": {
            "ASYNC_ENDPOINT": {
              "modelSpecificSchema": {},
              "sharedSchema": {}
            },
            "SYNC_ENDPOINT": {
              "modelSpecificSchema": {},
              "sharedSchema": {}
            }
          },
          "name": "SagemakerModelDeployment",
          "operatorVersion": 1
        },
        "properties": {
          "dataPlaneId": {
            "description": "ID of the data plane where the operator is deployed",
            "type": "string"
          },
          "deploymentTargetConfigurationSchemas": {
            "$ref": "#/components/schemas/DeploymentTargetConfigurationSchemas"
          },
          "id": {
            "description": "UUID for the Deployment Target Type",
            "type": "string"
          },
          "logoUrl": {
            "description": "Url to pull logo image from",
            "type": "string"
          },
          "modelDeploymentConfigurationSchemas": {
            "$ref": "#/components/schemas/SharedAndModelSpecificSchemas"
          },
          "modelDeploymentCustomResourceDefinition": {
            "$ref": "#/components/schemas/DeploymentCustomResourceDefinition"
          },
          "modelDeploymentStateSchemas": {
            "$ref": "#/components/schemas/SharedAndModelSpecificSchemas"
          },
          "modelDeploymentSupportedModelSources": {
            "description": "Model sources supported by Domino",
            "example": [
              "MODELREGISTRY"
            ],
            "items": {
              "$ref": "#/components/schemas/ModelSource"
            },
            "type": "array"
          },
          "modelDeploymentTypeConfigurationSchemas": {
            "$ref": "#/components/schemas/DeploymentTypeSpecificSchemas"
          },
          "modelDeploymentTypeStateSchemas": {
            "$ref": "#/components/schemas/DeploymentTypeSpecificSchemas"
          },
          "name": {
            "description": "Internal name for the Deployment Target Type",
            "example": "aws",
            "type": "string"
          },
          "operatorVersion": {
            "description": "Version of the operator",
            "example": "1.0.2",
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "operatorVersion",
          "dataPlaneId",
          "modelDeploymentSupportedModelSources",
          "modelDeploymentCustomResourceDefinition",
          "deploymentTargetConfigurationSchemas",
          "modelDeploymentConfigurationSchemas",
          "modelDeploymentTypeConfigurationSchemas",
          "modelDeploymentStateSchemas",
          "modelDeploymentTypeStateSchemas"
        ],
        "type": "object"
      },
      "DeploymentTypeSpecificSchemas": {
        "additionalProperties": {
          "$ref": "#/components/schemas/SharedAndModelSpecificSchemas"
        },
        "description": "The supported deployment types.  There must be one property present for each deployment type.",
        "type": "object"
      },
      "DominoStatsV1": {
        "properties": {
          "name": {
            "description": "The key name in the domino stats.",
            "example": "R-squared",
            "type": "string"
          },
          "value": {
            "description": "The value for the key in the domino stats",
            "example": 0.89,
            "type": "string"
          }
        },
        "required": [
          "name",
          "value"
        ],
        "type": "object"
      },
      "EffectiveModelDeploymentSchema": {
        "description": "Effective Model Deployment Schema",
        "properties": {
          "dataPlaneId": {
            "description": "ID of the data plane where the operator is deployed",
            "type": "string"
          },
          "deploymentTargetConfiguration": {
            "$ref": "#/components/schemas/DeploymentTargetConfiguration"
          },
          "deploymentTargetLastModified": {
            "description": "Timestamp of the last update to the deployment target (will be the creation timestamp on creation)",
            "format": "date-time",
            "type": "string"
          },
          "deploymentTargetTypeId": {
            "description": "UUID for the Deployment Target Type",
            "type": "string"
          },
          "deploymentTargetTypeName": {
            "description": "Internal name for the Deployment Target Type",
            "example": "aws",
            "type": "string"
          },
          "deploymentTargetTypeOperatorVersion": {
            "description": "Version of the operator",
            "example": "1.0.2",
            "type": "string"
          },
          "modelDeploymentConfigurationSchemas": {
            "$ref": "#/components/schemas/SharedAndModelSpecificSchemas"
          },
          "modelDeploymentCustomResourceDefinition": {
            "$ref": "#/components/schemas/DeploymentCustomResourceDefinition"
          },
          "modelDeploymentStateSchemas": {
            "$ref": "#/components/schemas/SharedAndModelSpecificSchemas"
          },
          "modelDeploymentSupportedModelSources": {
            "description": "Model sources supported by Domino",
            "example": [
              "MODELREGISTRY"
            ],
            "items": {
              "$ref": "#/components/schemas/ModelSource"
            },
            "type": "array"
          },
          "modelDeploymentTypeConfigurationSchemas": {
            "$ref": "#/components/schemas/DeploymentTypeSpecificSchemas"
          },
          "modelDeploymentTypeStateSchemas": {
            "$ref": "#/components/schemas/DeploymentTypeSpecificSchemas"
          },
          "resourceConfigurationLastModified": {
            "description": "Timestamp of the last update to the resource configuration (will be the creation timestamp on creation)",
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "deploymentTargetTypeId",
          "deploymentTargetTypeName",
          "deploymentTargetTypeOperatorVersion",
          "dataPlaneId",
          "deploymentTargetConfiguration",
          "deploymentTargetLastModified",
          "resourceConfigurationLastModified",
          "modelDeploymentSupportedModelSources",
          "modelDeploymentCustomResourceDefinition",
          "modelDeploymentConfigurationSchemas",
          "modelDeploymentTypeConfigurationSchemas",
          "modelDeploymentStateSchemas",
          "modelDeploymentTypeStateSchemas"
        ],
        "type": "object"
      },
      "EndpointEnvelopeV1": {
        "properties": {
          "creationDate": {
            "description": "ISO 8601 formatted time of when the Endpoint was created",
            "example": "2022-04-23T18:25:43.511Z",
            "format": "date-time",
            "type": "string"
          },
          "endpointId": {
            "description": "ID of the endpoint",
            "example": "62604702b7e5d347dbe7a909",
            "type": "string"
          },
          "endpointName": {
            "description": "Valid name of the endpoint",
            "example": "completions",
            "type": "string"
          },
          "endpointType": {
            "description": "Type of the endpoint",
            "example": "llm/v1/completions",
            "type": "string"
          },
          "modelConfig": {
            "$ref": "#/components/schemas/ModelConfigV1"
          },
          "modelName": {
            "description": "Name of the model",
            "example": "gpt-4",
            "type": "string"
          },
          "modelProvider": {
            "description": "Provider of the model",
            "example": "openai",
            "type": "string"
          }
        },
        "required": [
          "endpointId",
          "endpointName",
          "endpointType",
          "modelProvider",
          "modelName",
          "modelConfig",
          "creationDate"
        ],
        "type": "object"
      },
      "EndpointPermissionsDtoV1": {
        "properties": {
          "isEveryoneAllowed": {
            "description": "If the endpoint is accessible by everyone",
            "type": "boolean"
          },
          "userIds": {
            "description": "User IDs that can access this endpoint",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "isEveryoneAllowed",
          "userIds"
        ],
        "type": "object"
      },
      "Entity": {
        "properties": {
          "entityType": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "entityType",
          "tags"
        ],
        "type": "object"
      },
      "Environment": {
        "properties": {
          "id": {
            "pattern": "^[0-9a-f]{24}$",
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name"
        ],
        "type": "object"
      },
      "EnvironmentEnvelopeV1": {
        "properties": {
          "environment": {
            "$ref": "#/components/schemas/EnvironmentV1"
          },
          "metadata": {
            "$ref": "#/components/schemas/MetadataV1"
          }
        },
        "required": [
          "environment",
          "metadata"
        ],
        "type": "object"
      },
      "EnvironmentOwnerTypeV1": {
        "description": "Type of owner for an Environment. Environments can either be owned by a normal user or by an Organization.",
        "enum": [
          "individual",
          "organization"
        ],
        "type": "string"
      },
      "EnvironmentOwnerV1": {
        "properties": {
          "id": {
            "description": "Id of owner of an environment.",
            "example": "6231327c7a0af0281c01a69b",
            "type": "string"
          },
          "ownerType": {
            "$ref": "#/components/schemas/EnvironmentOwnerTypeV1"
          },
          "username": {
            "description": "Username of owner of an environment.",
            "example": "OrgOwner",
            "type": "string"
          }
        },
        "required": [
          "id",
          "username",
          "ownerType"
        ],
        "type": "object"
      },
      "EnvironmentRevision": {
        "properties": {
          "environment": {
            "$ref": "#/components/schemas/Environment"
          },
          "id": {
            "pattern": "^[0-9a-f]{24}$",
            "type": "string"
          }
        },
        "required": [
          "id",
          "environment"
        ],
        "type": "object"
      },
      "EnvironmentRevisionBuildStatusV1": {
        "description": "Status of the build for an Environment Revision.",
        "enum": [
          "queued",
          "starting",
          "pulling",
          "building",
          "pushing",
          "succeeded",
          "failed",
          "killed"
        ],
        "type": "string"
      },
      "EnvironmentRevisionEnvelopeV1": {
        "properties": {
          "environmentRevision": {
            "$ref": "#/components/schemas/EnvironmentRevisionV1"
          },
          "metadata": {
            "$ref": "#/components/schemas/MetadataV1"
          }
        },
        "required": [
          "environmentRevision",
          "metadata"
        ],
        "type": "object"
      },
      "EnvironmentRevisionSpecV1": {
        "description": "Specification describing which environment revision to use. Defaults to \"ActiveRevision\"",
        "example": "ActiveRevision | LatestRevision | SomeRevision(623131577a0af0281c01a69a)",
        "type": "string"
      },
      "EnvironmentRevisionUpdateEnvelopeV1": {
        "properties": {
          "id": {
            "type": "string"
          }
        },
        "required": [
          "id"
        ],
        "type": "object"
      },
      "EnvironmentRevisionV1": {
        "properties": {
          "availableTools": {
            "items": {
              "$ref": "#/components/schemas/EnvironmentToolV1"
            },
            "type": "array"
          },
          "id": {
            "description": "Id of Environment Revision.",
            "example": "62313cfd7a0af0281c01a6a6",
            "type": "string"
          },
          "number": {
            "description": "Revision number, increasing sequentially with each revision.",
            "example": 4,
            "type": "integer"
          },
          "status": {
            "$ref": "#/components/schemas/EnvironmentRevisionBuildStatusV1"
          }
        },
        "required": [
          "id",
          "number",
          "availableTools"
        ],
        "type": "object"
      },
      "EnvironmentToolV1": {
        "properties": {
          "iconUrl": {
            "description": "Url to pull icon image from",
            "example": "/assets/images/workspace-logos/Jupyter.svg",
            "type": "string"
          },
          "name": {
            "description": "Name of environment tool",
            "example": "Jupyter",
            "type": "string"
          },
          "proxyConfig": {
            "$ref": "#/components/schemas/ProxyConfigV1"
          },
          "startScripts": {
            "items": {
              "description": "Scripts to run on workspace start.",
              "example": "echo hello",
              "type": "string"
            },
            "type": "array"
          },
          "supportedFileExtensions": {
            "items": {
              "description": "File extensions this tool supports.",
              "example": ".ipynb",
              "type": "string"
            },
            "type": "array"
          },
          "title": {
            "description": "Title of environment tool.",
            "example": "Jupyter",
            "type": "string"
          }
        },
        "required": [
          "name",
          "title",
          "startScripts"
        ],
        "type": "object"
      },
      "EnvironmentV1": {
        "properties": {
          "activeRevisionTags": {
            "description": "The tags on the active revision for this environment",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "archived": {
            "description": "Whether the environment is archived",
            "example": false,
            "type": "boolean"
          },
          "id": {
            "description": "Id of environment",
            "example": "623132867a0af0281c01a69c",
            "type": "string"
          },
          "internalTags": {
            "description": "The internal tags specifying if this environment is restricted",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "isCurated": {
            "description": "Whether or not the environment is curated for a deployment",
            "type": "boolean"
          },
          "latestRevision": {
            "$ref": "#/components/schemas/EnvironmentRevisionV1"
          },
          "name": {
            "example": "MyOrg",
            "type": "string"
          },
          "owner": {
            "$ref": "#/components/schemas/EnvironmentOwnerV1"
          },
          "restrictedRevision": {
            "$ref": "#/components/schemas/EnvironmentRevisionV1"
          },
          "selectedRevision": {
            "$ref": "#/components/schemas/EnvironmentRevisionV1"
          },
          "supportedClusters": {
            "items": {
              "$ref": "#/components/schemas/ClusterTypeV1"
            },
            "type": "array"
          },
          "visibility": {
            "$ref": "#/components/schemas/EnvironmentVisibilityV1"
          }
        },
        "required": [
          "id",
          "name",
          "visibility",
          "supportedClusters",
          "archived"
        ],
        "type": "object"
      },
      "EnvironmentVariableV1": {
        "description": "Key-value pair that defines an environment variable name and value",
        "properties": {
          "key": {
            "example": "USERNAME",
            "type": "string"
          },
          "value": {
            "example": "my_name",
            "type": "string"
          }
        },
        "required": [
          "key",
          "value"
        ],
        "type": "object"
      },
      "EnvironmentVisibilityV1": {
        "description": "Visibility of an environment. Private Environments are only visible to the creating user, whereas Organization owned Environments can be seen by all Org members.",
        "enum": [
          "global",
          "private",
          "organization"
        ],
        "type": "string"
      },
      "Error": {
        "allOf": [
          {
            "properties": {
              "errors": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            "required": [
              "errors"
            ]
          }
        ]
      },
      "ExternalVolumeMountV1": {
        "properties": {
          "mountPath": {
            "description": "Path to mount the external volume at.",
            "example": "/path/to/my/volume",
            "type": "string"
          },
          "name": {
            "description": "Name of external volume to mount.",
            "example": "MyExternalVolume",
            "type": "string"
          },
          "readOnly": {
            "description": "Whether to mount the volume as read only.",
            "example": false,
            "type": "boolean"
          },
          "subPath": {
            "description": "Path within the external volume to mount. The entire volume will be mounted if not specified.",
            "example": "/mypath",
            "type": "string"
          }
        },
        "required": [
          "name",
          "mountPath",
          "readOnly"
        ],
        "type": "object"
      },
      "FailureEnvelopeV1": {
        "properties": {
          "errors": {
            "description": "Errors that caused a request to fail",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "requestId": {
            "description": "Id used to correlate a request with server actions.",
            "example": "bbd78579-93c4-45ee-a983-0d5c8da6d5b1",
            "type": "string"
          }
        },
        "required": [
          "requestId",
          "errors"
        ],
        "type": "object"
      },
      "FieldStateChange": {
        "properties": {
          "fieldName": {
            "type": "string"
          },
          "fieldType": {
            "$ref": "#/components/schemas/FieldType"
          }
        },
        "type": "object"
      },
      "FieldType": {
        "enum": [
          "scalar",
          "sequence"
        ],
        "type": "string"
      },
      "FreeFormJsonObjectV1": {
        "additionalProperties": true,
        "description": "Cloud Cost data",
        "type": "object"
      },
      "GitCodeRepoSpecV1": {
        "description": "Details needed in order to copy the code repository of a Git-backed project.",
        "properties": {
          "credentialId": {
            "description": "The Domino ID of the PAT credential, which will be used to copy and/or read from the code repository on the new project.",
            "type": "string"
          },
          "deepCopy": {
            "$ref": "#/components/schemas/DeepCopyGitRepoSpecV1"
          },
          "importFilesTarget": {
            "$ref": "#/components/schemas/ImportFilesRepoTargetV1"
          },
          "referenceCopy": {
            "$ref": "#/components/schemas/ReferenceCopyGitRepoSpecV1"
          }
        },
        "required": [
          "credentialId"
        ],
        "type": "object"
      },
      "GitCredentialsAccessorV1": {
        "properties": {
          "domain": {
            "description": "The domain these credentials apply to",
            "example": "github.com",
            "type": "string"
          },
          "fingerprint": {
            "example": "ba:78:09:d8:4b:3b:09:9b:43:bf:9b:5a:34:f7:3f:28",
            "type": "string"
          },
          "gitServiceProvider": {
            "$ref": "#/components/schemas/GitServiceProviderV1"
          },
          "id": {
            "description": "Id for these git credentials",
            "type": "string"
          },
          "name": {
            "description": "Name for these git credentials",
            "example": "My creds",
            "type": "string"
          },
          "protocol": {
            "example": "https",
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "gitServiceProvider",
          "domain",
          "fingerprint",
          "protocol"
        ],
        "type": "object"
      },
      "GitRefV1": {
        "properties": {
          "refType": {
            "description": "The type of git reference being used.",
            "example": "head | commitId | tags | branches",
            "type": "string"
          },
          "value": {
            "description": "The value of the git reference. Only necessary for relevant git ref types.",
            "example": "my-test-branch",
            "type": "string"
          }
        },
        "required": [
          "refType"
        ],
        "type": "object"
      },
      "GitReferenceTypeV1": {
        "enum": [
          "head",
          "branch",
          "tag",
          "commit"
        ],
        "type": "string"
      },
      "GitServiceProviderV1": {
        "description": "Git service provider",
        "enum": [
          "bitbucket",
          "bitbucketServer",
          "github",
          "githubEnterprise",
          "gitLab",
          "gitLabEnterprise",
          "unknown"
        ],
        "type": "string"
      },
      "GoalEnvelopeV1": {
        "properties": {
          "goal": {
            "$ref": "#/components/schemas/LinkedGoalV1"
          },
          "metadata": {
            "$ref": "#/components/schemas/MetadataV1"
          }
        },
        "required": [
          "goal",
          "metadata"
        ],
        "type": "object"
      },
      "GoalToLinkV1": {
        "properties": {
          "goalId": {
            "description": "Id of Goal to link to Job.",
            "example": "62313cfd7a0af0281c01a6a6",
            "type": "string"
          }
        },
        "required": [
          "goalId"
        ],
        "type": "object"
      },
      "HardwareTier": {
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name"
        ],
        "type": "object"
      },
      "HardwareTierCapacityV1": {
        "description": "Current capacity information for a hardware tier. Note: Not necessary on requests to update a hardware tier.",
        "properties": {
          "availableCapacityWithoutLaunching": {
            "type": "integer"
          },
          "capacityLevel": {
            "enum": [
              "CanExecuteWithCurrentInstances",
              "RequiresLaunchingInstance",
              "Full",
              "Unknown"
            ],
            "type": "string"
          },
          "executingRuns": {
            "type": "integer"
          },
          "maxAvailableCapacity": {
            "type": "integer"
          },
          "maxConcurrentRuns": {
            "type": "integer"
          },
          "maxNumberOfExecutors": {
            "type": "integer"
          },
          "numberOfExecutors": {
            "type": "integer"
          },
          "queuedRuns": {
            "type": "integer"
          }
        },
        "required": [
          "numberOfExecutors",
          "maxNumberOfExecutors",
          "executingRuns",
          "queuedRuns",
          "maxConcurrentRuns",
          "availableCapacityWithoutLaunching",
          "maxAvailableCapacity",
          "capacityLevel"
        ],
        "type": "object"
      },
      "HardwareTierComputeClusterRestrictionsV1": {
        "description": "Details about specific compute clusters a hardware tier is restricted to",
        "properties": {
          "restrictToDask": {
            "type": "boolean"
          },
          "restrictToMpi": {
            "type": "boolean"
          },
          "restrictToRay": {
            "type": "boolean"
          },
          "restrictToSpark": {
            "type": "boolean"
          }
        },
        "required": [
          "restrictToSpark",
          "restrictToRay",
          "restrictToDask",
          "restrictToMpi"
        ],
        "type": "object"
      },
      "HardwareTierEnvelopeV1": {
        "properties": {
          "hardwareTier": {
            "$ref": "#/components/schemas/HardwareTierV1"
          },
          "metadata": {
            "$ref": "#/components/schemas/MetadataV1"
          }
        },
        "required": [
          "hardwareTier",
          "metadata"
        ],
        "type": "object"
      },
      "HardwareTierFlagsV1": {
        "description": "Boolean flags for a hardware tier",
        "properties": {
          "isArchived": {
            "type": "boolean"
          },
          "isDataAnalystTier": {
            "type": "boolean"
          },
          "isDefault": {
            "type": "boolean"
          },
          "isDefaultForModelApi": {
            "type": "boolean"
          },
          "isGlobal": {
            "type": "boolean"
          },
          "isModelApiTier": {
            "type": "boolean"
          },
          "isVisible": {
            "type": "boolean"
          }
        },
        "required": [
          "isDefault",
          "isVisible",
          "isGlobal",
          "isArchived",
          "isDataAnalystTier"
        ],
        "type": "object"
      },
      "HardwareTierGpuConfigurationV1": {
        "description": "Gpu configuration for a hardware tier",
        "properties": {
          "gpuKey": {
            "type": "string"
          },
          "numberOfGpus": {
            "type": "integer"
          }
        },
        "required": [
          "numberOfGpus",
          "gpuKey"
        ],
        "type": "object"
      },
      "HardwareTierOverProvisioningV1": {
        "description": "Over provisioning settings for a hardware tier",
        "properties": {
          "daysOfWeek": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "fromTime": {
            "type": "string"
          },
          "instances": {
            "type": "integer"
          },
          "schedulingEnabled": {
            "type": "boolean"
          },
          "timezone": {
            "type": "string"
          },
          "toTime": {
            "type": "string"
          }
        },
        "required": [
          "instances",
          "schedulingEnabled",
          "daysOfWeek",
          "timezone",
          "fromTime",
          "toTime"
        ],
        "type": "object"
      },
      "HardwareTierPodCustomizationV1": {
        "description": "Custom fields for hardwareTier",
        "properties": {
          "additionalAnnotations": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          },
          "additionalLabels": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          },
          "additionalLimits": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          },
          "additionalRequests": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          },
          "capabilities": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "hugepages": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "HardwareTierResourcesV1": {
        "description": "Compute resources for a hardware tier",
        "properties": {
          "allowSharedMemoryToExceedDefault": {
            "type": "boolean"
          },
          "cores": {
            "example": 1,
            "format": "double",
            "type": "number"
          },
          "coresLimit": {
            "format": "double",
            "type": "number"
          },
          "memory": {
            "$ref": "#/components/schemas/InformationV1"
          },
          "memoryLimit": {
            "$ref": "#/components/schemas/InformationV1"
          },
          "memorySwapLimit": {
            "$ref": "#/components/schemas/InformationV1"
          },
          "sharedMemoryLimit": {
            "$ref": "#/components/schemas/InformationV1"
          }
        },
        "required": [
          "cores",
          "memory",
          "allowSharedMemoryToExceedDefault"
        ],
        "type": "object"
      },
      "HardwareTierV1": {
        "properties": {
          "availabilityZones": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "capacity": {
            "$ref": "#/components/schemas/HardwareTierCapacityV1"
          },
          "centsPerMinute": {
            "description": "Cost per minute of using this hardware tier as defined by an Admin.",
            "format": "double",
            "type": "number"
          },
          "computeClusterRestrictions": {
            "$ref": "#/components/schemas/HardwareTierComputeClusterRestrictionsV1"
          },
          "creationTime": {
            "description": "When the hardware tier was created",
            "example": "2022-03-12T02:13:44.467Z",
            "format": "date-time",
            "type": "string"
          },
          "dataPlaneId": {
            "type": "string"
          },
          "flags": {
            "$ref": "#/components/schemas/HardwareTierFlagsV1"
          },
          "gpuConfiguration": {
            "$ref": "#/components/schemas/HardwareTierGpuConfigurationV1"
          },
          "id": {
            "example": "small-k8s",
            "type": "string"
          },
          "maxSimultaneousExecutions": {
            "type": "integer"
          },
          "metadata": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          },
          "name": {
            "example": "My-HardwareTier",
            "type": "string"
          },
          "nodePool": {
            "type": "string"
          },
          "overProvisioning": {
            "$ref": "#/components/schemas/HardwareTierOverProvisioningV1"
          },
          "podCustomization": {
            "$ref": "#/components/schemas/HardwareTierPodCustomizationV1"
          },
          "resources": {
            "$ref": "#/components/schemas/HardwareTierResourcesV1"
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "updateTime": {
            "description": "When the hardwareTier was last updated",
            "example": "2022-03-12T02:13:44.467Z",
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "resources",
          "flags",
          "centsPerMinute",
          "creationTime",
          "updateTime",
          "podCustomization",
          "metadata"
        ],
        "type": "object"
      },
      "HealthCheck": {
        "properties": {
          "commit": {
            "type": "string"
          },
          "kubecostStatus": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "version": {
            "type": "string"
          }
        },
        "required": [
          "status",
          "version"
        ],
        "type": "object"
      },
      "ImportFilesRepoTargetV1": {
        "description": "Specifies what git repository to import the source project files into",
        "properties": {
          "force": {
            "description": "Whether or not to overwrite all files and git history in the repository",
            "type": "boolean"
          },
          "repoName": {
            "description": "The name of the git repository to import the project files into",
            "type": "string"
          },
          "repoOwnerName": {
            "description": "The name of the target git repository's owner",
            "type": "string"
          }
        },
        "required": [
          "repoName",
          "repoOwnerName"
        ],
        "type": "object"
      },
      "InformationV1": {
        "properties": {
          "units": {
            "enum": [
              "MB",
              "MiB",
              "GB",
              "GiB"
            ],
            "type": "string"
          },
          "value": {
            "format": "double",
            "type": "number"
          }
        },
        "required": [
          "value",
          "units"
        ],
        "type": "object"
      },
      "InvalidBodyEnvelopeV1": {
        "properties": {
          "message": {
            "description": "Error message when request is missing a required field and therefore cannot be handled.",
            "type": "string"
          }
        },
        "required": [
          "message"
        ],
        "type": "object"
      },
      "JSONSchema": {
        "description": "Core schema meta-schema",
        "properties": {
          "additionalProperties": {
            "$ref": "#/components/schemas/JSONSchema"
          },
          "default": {},
          "description": {
            "type": "string"
          },
          "enum": {
            "items": {},
            "minItems": 1,
            "type": "array",
            "uniqueItems": true
          },
          "example": {},
          "format": {
            "description": "Superset of valid JSON Schema and OpenAPI formats.",
            "enum": [
              "date-time",
              "time",
              "date",
              "duration",
              "email",
              "idn-email",
              "hostname",
              "idn-hostname",
              "ipv4",
              "ipv6",
              "uuid",
              "uri",
              "uri-reference",
              "iri",
              "iri-reference",
              "uri-template",
              "json-pointer",
              "relative-json-pointer",
              "regex",
              "float",
              "double",
              "int32",
              "int64",
              "password",
              "byte",
              "binary",
              "multiline",
              "password-multiline"
            ],
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "items": {
            "$ref": "#/components/schemas/JSONSchema"
          },
          "maxItems": {
            "$ref": "#/components/schemas/PositiveInteger"
          },
          "maxLength": {
            "$ref": "#/components/schemas/PositiveInteger"
          },
          "maxProperties": {
            "$ref": "#/components/schemas/PositiveInteger"
          },
          "maximum": {
            "type": "number"
          },
          "minItems": {
            "$ref": "#/components/schemas/PositiveIntegerDefault0"
          },
          "minLength": {
            "$ref": "#/components/schemas/PositiveIntegerDefault0"
          },
          "minProperties": {
            "$ref": "#/components/schemas/PositiveIntegerDefault0"
          },
          "minimum": {
            "type": "number"
          },
          "pattern": {
            "format": "regex",
            "type": "string"
          },
          "properties": {
            "additionalProperties": {
              "$ref": "#/components/schemas/JSONSchema"
            },
            "default": {},
            "type": "object"
          },
          "required": {
            "$ref": "#/components/schemas/StringArray"
          },
          "title": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/JSONSchemaType"
          },
          "uniqueItems": {
            "default": false,
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "JSONSchemaType": {
        "enum": [
          "array",
          "boolean",
          "integer",
          "null",
          "number",
          "object",
          "string"
        ]
      },
      "JobDetailsV1": {
        "properties": {
          "commentsCount": {
            "type": "integer"
          },
          "commitDetails": {
            "$ref": "#/components/schemas/CommitDetailsV1"
          },
          "computeCluster": {
            "$ref": "#/components/schemas/ComputeClusterConfigV1"
          },
          "datasetMounts": {
            "items": {
              "$ref": "#/components/schemas/DatasetMountV1"
            },
            "type": "array"
          },
          "dominoStats": {
            "items": {
              "$ref": "#/components/schemas/DominoStatsV1"
            },
            "type": "array"
          },
          "externalVolumeMounts": {
            "items": {
              "$ref": "#/components/schemas/ExternalVolumeMountV1"
            },
            "type": "array"
          },
          "gitRepos": {
            "items": {
              "$ref": "#/components/schemas/MountedGitRepoV1"
            },
            "type": "array"
          },
          "goalIds": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "id": {
            "type": "string"
          },
          "mainRepoGitRef": {
            "$ref": "#/components/schemas/GitRefV1"
          },
          "number": {
            "type": "integer"
          },
          "projects": {
            "items": {
              "$ref": "#/components/schemas/MountedProjectV1"
            },
            "type": "array"
          },
          "queuedJobStatusDetails": {
            "$ref": "#/components/schemas/QueuedJobStatusDetailsV1"
          },
          "runCommand": {
            "type": "string"
          },
          "runLauncherId": {
            "type": "string"
          },
          "stageTimes": {
            "$ref": "#/components/schemas/StageTimesV1"
          },
          "startedById": {
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/JobStatusV1"
          },
          "tags": {
            "items": {
              "$ref": "#/components/schemas/TagV1"
            },
            "type": "array"
          },
          "title": {
            "type": "string"
          },
          "usage": {
            "$ref": "#/components/schemas/JobUsageV1"
          }
        },
        "required": [
          "id",
          "number",
          "stageTimes",
          "tags",
          "runCommand",
          "commentsCount",
          "commitDetails",
          "dominoStats",
          "status",
          "projects",
          "gitRepos",
          "datasetMounts",
          "externalVolumeMounts",
          "goalIds"
        ],
        "type": "object"
      },
      "JobEnvelopeV1": {
        "properties": {
          "job": {
            "$ref": "#/components/schemas/JobDetailsV1"
          },
          "metadata": {
            "$ref": "#/components/schemas/MetadataV1"
          }
        },
        "required": [
          "job",
          "metadata"
        ],
        "type": "object"
      },
      "JobLogsV1": {
        "properties": {
          "helpLink": {
            "description": "Suggestion link for helpful resources.",
            "example": "Error. No such file or directory.",
            "type": "string"
          },
          "isComplete": {
            "description": "Whether all logs for the job have been retrieved.",
            "example": true,
            "type": "boolean"
          },
          "logContent": {
            "items": {
              "$ref": "#/components/schemas/LogContentV1"
            },
            "type": "array"
          },
          "problem": {
            "description": "Description of issue that occurred in a job.",
            "example": "python: can't open file 'invalid.py': [Errno 2] No such file or directory",
            "type": "string"
          }
        },
        "required": [
          "logContent",
          "isComplete"
        ],
        "type": "object"
      },
      "JobStatusV1": {
        "properties": {
          "executionStatus": {
            "description": "Current status of the job.",
            "example": "Succeeded",
            "type": "string"
          },
          "isArchived": {
            "description": "Whether a job is archived.",
            "example": false,
            "type": "boolean"
          },
          "isCompleted": {
            "description": "Whether a job is complete.",
            "example": true,
            "type": "boolean"
          },
          "isScheduled": {
            "description": "Whether a job was started by a scheduled trigger.",
            "example": false,
            "type": "boolean"
          }
        },
        "required": [
          "isCompleted",
          "isArchived",
          "isScheduled",
          "executionStatus"
        ],
        "type": "object"
      },
      "JobUsageV1": {
        "properties": {
          "cpuPercentage": {
            "description": "Max cpu usage for a job as a percentage of the total available cpu.",
            "example": 5,
            "type": "number"
          },
          "memoryGiB": {
            "description": "Max memory usage for a job in GiB.",
            "example": 0.73,
            "type": "number"
          }
        },
        "required": [
          "cpuPercentage",
          "memoryGiB"
        ],
        "type": "object"
      },
      "JobV1": {
        "properties": {
          "commitDetails": {
            "$ref": "#/components/schemas/CommitDetailsV1"
          },
          "computeCluster": {
            "$ref": "#/components/schemas/ComputeClusterConfigV1"
          },
          "datasetMounts": {
            "items": {
              "$ref": "#/components/schemas/DatasetMountV1"
            },
            "type": "array"
          },
          "dominoStats": {
            "items": {
              "$ref": "#/components/schemas/DominoStatsV1"
            },
            "type": "array"
          },
          "externalVolumeMounts": {
            "items": {
              "$ref": "#/components/schemas/ExternalVolumeMountV1"
            },
            "type": "array"
          },
          "gitRepos": {
            "items": {
              "$ref": "#/components/schemas/MountedGitRepoV1"
            },
            "type": "array"
          },
          "id": {
            "type": "string"
          },
          "mainRepoGitRef": {
            "$ref": "#/components/schemas/GitRefV1"
          },
          "number": {
            "type": "integer"
          },
          "projects": {
            "items": {
              "$ref": "#/components/schemas/MountedProjectV1"
            },
            "type": "array"
          },
          "runCommand": {
            "type": "string"
          },
          "runLauncherId": {
            "type": "string"
          },
          "stageTimes": {
            "$ref": "#/components/schemas/StageTimesV1"
          },
          "startedById": {
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/JobStatusV1"
          },
          "title": {
            "type": "string"
          },
          "usage": {
            "$ref": "#/components/schemas/JobUsageV1"
          }
        },
        "required": [
          "id",
          "number",
          "stageTimes",
          "runCommand",
          "commitDetails",
          "dominoStats",
          "status",
          "projects",
          "gitRepos",
          "datasetMounts",
          "externalVolumeMounts"
        ],
        "type": "object"
      },
      "KubecostLicenseResponseV1": {
        "properties": {
          "description": {
            "type": "string"
          },
          "key": {
            "description": "License Key set on Kubecost",
            "type": "string"
          }
        },
        "required": [
          "key"
        ],
        "type": "object"
      },
      "KubecostLicenseV1": {
        "properties": {
          "key": {
            "description": "License Key to be set on Kubecost",
            "type": "string"
          }
        },
        "required": [
          "key"
        ],
        "type": "object"
      },
      "LinkedGoalV1": {
        "properties": {
          "currentStage": {
            "description": "The stage this goal is currently assigned.",
            "example": "Ideation",
            "type": "string"
          },
          "description": {
            "description": "Description of the Goal.",
            "example": "Develop a better performing model",
            "type": "string"
          },
          "goalId": {
            "description": "Id of Goal linked to Job.",
            "example": "62313cfd7a0af0281c01a6a6",
            "type": "string"
          },
          "jobId": {
            "description": "Id of Job linked to Goal.",
            "example": "62313d207a0af0281c01a6a7",
            "type": "string"
          },
          "projectId": {
            "description": "Id of project resources belong to.",
            "example": "62313d377a0af0281c01a6a8",
            "type": "string"
          },
          "title": {
            "description": "Name of goal.",
            "example": "MyGoal",
            "type": "string"
          }
        },
        "required": [
          "goalId",
          "jobId",
          "projectId",
          "title",
          "currentStage"
        ],
        "type": "object"
      },
      "LogContentV1": {
        "properties": {
          "log": {
            "description": "Log message",
            "example": "Pulling image \"172.20.22.242:5000/noahjax11699-compute/environment:622a6879dde1a920fcccfef5-1\"",
            "type": "string"
          },
          "logType": {
            "$ref": "#/components/schemas/LogTypeV1"
          },
          "size": {
            "description": "Length of log line.",
            "example": 94,
            "type": "integer"
          },
          "timestamp": {
            "description": "Time logs were written.",
            "example": "2022-03-12T02:13:51.616Z",
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "timestamp",
          "logType",
          "log",
          "size"
        ],
        "type": "object"
      },
      "LogTypeV1": {
        "description": "Type of log. Complete includes all log types.",
        "enum": [
          "stdOut",
          "stdErr",
          "prepareOutput",
          "complete"
        ],
        "type": "string"
      },
      "LogsEnvelopeV1": {
        "properties": {
          "logs": {
            "$ref": "#/components/schemas/JobLogsV1"
          },
          "metadata": {
            "properties": {
              "notices": {
                "description": "Notices relating to the request",
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "pagination": {
                "$ref": "#/components/schemas/LogsPaginationV1"
              },
              "requestId": {
                "description": "Id used to correlate a request with server actions.",
                "example": "bbd78579-93c4-45ee-a983-0d5c8da6d5b1",
                "type": "string"
              }
            },
            "required": [
              "pagination",
              "requestId",
              "notices"
            ],
            "type": "object"
          }
        },
        "required": [
          "logs",
          "metadata"
        ],
        "type": "object"
      },
      "LogsPaginationV1": {
        "properties": {
          "latestTimeNano": {
            "description": "Time of last log. Can be used to specify only logs after a certain time.",
            "example": "1647051415275957459",
            "type": "string"
          },
          "limit": {
            "description": "Max number of log messages to retrieve.",
            "example": 10,
            "type": "integer"
          }
        },
        "required": [
          "limit"
        ],
        "type": "object"
      },
      "MetadataV1": {
        "properties": {
          "notices": {
            "description": "Notices relating to the request",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "requestId": {
            "type": "string"
          }
        },
        "required": [
          "requestId",
          "notices"
        ],
        "type": "object"
      },
      "MetricAlertRequestV1": {
        "properties": {
          "description": {
            "description": "Optional text to append to the metric alert message",
            "type": "string"
          },
          "metric": {
            "description": "Name of the metric to send alert for",
            "type": "string"
          },
          "modelMonitoringId": {
            "description": "ID of the monitored model to send metric alerts for",
            "type": "string"
          },
          "targetRange": {
            "$ref": "#/components/schemas/TargetRangeV1"
          },
          "value": {
            "description": "Value of the metric",
            "type": "number"
          }
        },
        "required": [
          "modelMonitoringId",
          "metric",
          "value",
          "targetRange"
        ],
        "type": "object"
      },
      "MetricTagV1": {
        "properties": {
          "key": {
            "description": "Key for the metric tag",
            "type": "string"
          },
          "value": {
            "description": "Value for the metric tag",
            "type": "string"
          }
        },
        "required": [
          "key",
          "value"
        ],
        "type": "object"
      },
      "MetricValueV1": {
        "properties": {
          "referenceTimestamp": {
            "description": "Timestamp associated with the metric log entry",
            "type": "string"
          },
          "tags": {
            "description": "List of tags associated with the metric",
            "items": {
              "$ref": "#/components/schemas/MetricTagV1"
            },
            "type": "array"
          },
          "value": {
            "description": "Value of the metric",
            "type": "number"
          }
        },
        "required": [
          "value",
          "referenceTimestamp",
          "tags"
        ],
        "type": "object"
      },
      "MetricValuesEnvelopeV1": {
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/MetadataV1"
          },
          "metricValues": {
            "items": {
              "$ref": "#/components/schemas/MetricValueV1"
            },
            "type": "array"
          }
        },
        "required": [
          "metricValues",
          "metadata"
        ],
        "type": "object"
      },
      "ModelApi": {
        "properties": {
          "access": {
            "$ref": "#/components/schemas/ModelApiAccessConfiguration"
          },
          "activeVersion": {
            "$ref": "#/components/schemas/ModelApiVersionSummary"
          },
          "collaborators": {
            "description": "The collaborators of the Model API.",
            "items": {
              "$ref": "#/components/schemas/ModelApiCollaboratorRole"
            },
            "nullable": false,
            "type": "array"
          },
          "description": {
            "description": "The description of the Model API.",
            "nullable": false,
            "type": "string"
          },
          "environmentId": {
            "description": "The id of the environment the Model API is deployed to.",
            "nullable": false,
            "type": "string"
          },
          "hardwareTierId": {
            "description": "The id of the hardware tier the Model API is deployed with.",
            "nullable": true,
            "type": "string"
          },
          "healthCheck": {
            "$ref": "#/components/schemas/ModelApiHealthCheckConfiguration"
          },
          "id": {
            "description": "The id of the Model API.",
            "nullable": false,
            "type": "string"
          },
          "isArchived": {
            "description": "Whether the Model API is archived.",
            "nullable": false,
            "type": "boolean"
          },
          "isAsync": {
            "description": "Whether the Model API is async.",
            "nullable": false,
            "type": "boolean"
          },
          "metadata": {
            "$ref": "#/components/schemas/ModelApiMetadata"
          },
          "name": {
            "description": "The name of the Model API.",
            "nullable": false,
            "type": "string"
          },
          "overrideRequestTimeoutSecs": {
            "description": "The request timeout configuration of the Model API.",
            "nullable": true,
            "type": "integer"
          },
          "replicas": {
            "description": "The number of replicas of the Model API.",
            "nullable": false,
            "type": "integer"
          },
          "resourceQuotaId": {
            "description": "The id of the resource quota the Model API is deployed with.",
            "nullable": true,
            "type": "string"
          },
          "routingMode": {
            "description": "The routing mode of the Model API.",
            "nullable": false,
            "type": "string"
          },
          "strictNodeAntiAffinity": {
            "description": "Whether the Model API has strict node anti affinity.",
            "nullable": false,
            "type": "boolean"
          },
          "volumes": {
            "description": "The volumes of the Model API.",
            "items": {
              "$ref": "#/components/schemas/ModelApiVolume"
            },
            "nullable": false,
            "type": "array"
          }
        },
        "required": [
          "id",
          "name",
          "description",
          "isArchived",
          "environmentId",
          "replicas",
          "routingMode",
          "isAsync",
          "strictNodeAntiAffinity",
          "access",
          "healthCheck",
          "collaborators",
          "volumes",
          "metadata"
        ]
      },
      "ModelApiAccessConfiguration": {
        "properties": {
          "accessTokens": {
            "description": "The access tokens of the Model API.",
            "items": {
              "$ref": "#/components/schemas/ModelApiAccessToken"
            },
            "nullable": false,
            "type": "array"
          },
          "isPublic": {
            "description": "Whether the Model API is public.",
            "nullable": false,
            "type": "boolean"
          }
        },
        "required": [
          "isPublic",
          "accessTokens"
        ]
      },
      "ModelApiAccessToken": {
        "properties": {
          "created": {
            "description": "The creation date for the access token.",
            "nullable": false,
            "type": "number"
          },
          "createdBy": {
            "description": "The id of the user that created the access token.",
            "nullable": false,
            "type": "string"
          },
          "id": {
            "description": "The id of the access token.",
            "nullable": false,
            "type": "string"
          },
          "lastGenerated": {
            "description": "The date the access token was last generated.",
            "nullable": false,
            "type": "number"
          },
          "lastGeneratedBy": {
            "description": "The id of the user that last generated the access token.",
            "nullable": false,
            "type": "string"
          },
          "name": {
            "description": "The name of the access token.",
            "nullable": false,
            "type": "string"
          }
        },
        "required": [
          "id",
          "created",
          "createdBy",
          "lastGenerated",
          "lastGeneratedBy"
        ]
      },
      "ModelApiAccessTokenCreationRequest": {
        "properties": {
          "name": {
            "description": "The name of the access token to create.",
            "nullable": false,
            "type": "string"
          }
        }
      },
      "ModelApiCollaboratorRole": {
        "properties": {
          "collaborator": {
            "description": "The reference of the collaborator.",
            "nullable": false,
            "type": "string"
          },
          "role": {
            "description": "The role of the collaborator.",
            "nullable": false,
            "type": "string"
          }
        },
        "required": [
          "collaborator",
          "role"
        ]
      },
      "ModelApiCreationRequest": {
        "properties": {
          "description": {
            "description": "The description of the Model API to create.",
            "nullable": false,
            "type": "string"
          },
          "environmentId": {
            "description": "The id of the environment the Model API to create should be deployed to.",
            "nullable": false,
            "type": "string"
          },
          "environmentVariables": {
            "description": "The environment variables of the Model API to create.",
            "items": {
              "$ref": "#/components/schemas/ModelApiEnvironmentVariable"
            },
            "type": "array"
          },
          "hardwareTierId": {
            "description": "The id of the hardware tier the Model API to create should be deployed with.",
            "nullable": true,
            "type": "string"
          },
          "isAsync": {
            "description": "Whether the Model API to create should be async.",
            "nullable": false,
            "type": "boolean"
          },
          "name": {
            "description": "The name of the Model API to create.",
            "nullable": false,
            "type": "string"
          },
          "replicas": {
            "description": "The number of replicas of the Model API should be created with.",
            "nullable": false,
            "type": "integer"
          },
          "resourceQuotaId": {
            "description": "The id of the resource quota the Model API to create should be deployed with.",
            "nullable": true,
            "type": "string"
          },
          "strictNodeAntiAffinity": {
            "description": "Whether the Model API to create should have strict node anti affinity.",
            "nullable": false,
            "type": "boolean"
          },
          "version": {
            "$ref": "#/components/schemas/ModelApiVersionCreationRequest"
          }
        },
        "required": [
          "name",
          "description",
          "environmentId",
          "isAsync",
          "strictNodeAntiAffinity",
          "environmentVariables",
          "version"
        ]
      },
      "ModelApiEnvironmentVariable": {
        "properties": {
          "key": {
            "description": "The name of the environment variable.",
            "nullable": false,
            "type": "string"
          },
          "value": {
            "description": "The value of the environment variable.",
            "nullable": false,
            "type": "string"
          }
        },
        "required": [
          "key",
          "value"
        ]
      },
      "ModelApiHealthCheckConfiguration": {
        "properties": {
          "failureThreshold": {
            "description": "The threshold of health check failures for the Model API.",
            "nullable": false,
            "type": "integer"
          },
          "initialDelaySeconds": {
            "description": "The initial delay of the health check for the Model API.",
            "nullable": false,
            "type": "integer"
          },
          "periodSeconds": {
            "description": "The health check period for the Model API.",
            "nullable": false,
            "type": "integer"
          },
          "timeoutSeconds": {
            "description": "The health check timeout for the Model API.",
            "nullable": false,
            "type": "integer"
          }
        },
        "required": [
          "failureThreshold",
          "initialDelaySeconds",
          "periodSeconds",
          "timeoutSeconds"
        ]
      },
      "ModelApiMetadata": {
        "properties": {
          "created": {
            "description": "The date when the Model API was created.",
            "nullable": false,
            "type": "number"
          },
          "createdBy": {
            "description": "The id of the user that created the Model API.",
            "nullable": false,
            "type": "string"
          },
          "lastModified": {
            "description": "The date when the Model API was last modified.",
            "nullable": false,
            "type": "number"
          }
        },
        "required": [
          "created",
          "createdBy",
          "lastModified"
        ]
      },
      "ModelApiPaginatedList": {
        "properties": {
          "items": {
            "description": "The Model APIs in the paginated list.",
            "items": {
              "$ref": "#/components/schemas/ModelApi"
            },
            "type": "array"
          },
          "metadata": {
            "$ref": "#/components/schemas/PaginatedMetadataV1"
          }
        },
        "required": [
          "items",
          "metadata"
        ]
      },
      "ModelApiSource": {
        "properties": {
          "excludeFiles": {
            "description": "The files excluded from the Model API.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "file": {
            "description": "The name of the source file of the model served by the Model API.",
            "nullable": false,
            "type": "string"
          },
          "function": {
            "description": "The function used to call the model served by the Model API.",
            "nullable": false,
            "type": "string"
          },
          "registeredModelName": {
            "description": "The name of the registered model served by the Model API.",
            "nullable": false,
            "type": "string"
          },
          "registeredModelVersion": {
            "description": "The version of the registered model served by the Model API.",
            "nullable": false,
            "type": "integer"
          },
          "type": {
            "description": "The type of source of the Model API.",
            "enum": [
              "File",
              "Registry"
            ],
            "nullable": false,
            "type": "string"
          }
        },
        "required": [
          "type"
        ]
      },
      "ModelApiUpdateRequest": {
        "properties": {
          "description": {
            "description": "The new description for the Model API.",
            "type": "string"
          },
          "environmentId": {
            "description": "The id of the new environment to deploy the Model API with.",
            "nullable": false,
            "type": "string"
          },
          "hardwareTierId": {
            "description": "The id of the new hardware tier to deploy the Model API with.",
            "nullable": true,
            "type": "string"
          },
          "name": {
            "description": "The new name for the Model API.",
            "nullable": false,
            "type": "string"
          },
          "replicas": {
            "description": "The new number of replicas of the Model API.",
            "nullable": false,
            "type": "integer"
          },
          "resourceQuotaId": {
            "description": "The id of the new resource quota to deploy the Model API with.",
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "name",
          "description",
          "replicas",
          "environmentId"
        ]
      },
      "ModelApiVersion": {
        "properties": {
          "commitId": {
            "description": "The id of the commit of the Model API Version.",
            "nullable": false,
            "type": "string"
          },
          "dataPlaneId": {
            "description": "The id of the data plane the Model API Version is deployed to.",
            "nullable": false,
            "type": "string"
          },
          "deployment": {
            "$ref": "#/components/schemas/ModelApiVersionDeployment"
          },
          "description": {
            "description": "The description of the Model API Version.",
            "nullable": false,
            "type": "string"
          },
          "environmentRevisionId": {
            "description": "The id of the environment revision the Model API Version is deployed on.",
            "nullable": false,
            "type": "string"
          },
          "id": {
            "description": "The id of the Model API Version.",
            "nullable": false,
            "type": "string"
          },
          "labels": {
            "description": "The labels of the Model API Version.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "logHttpRequestResponse": {
            "description": "Whether the Model API Version should log the HTTP requests and responses.",
            "nullable": false,
            "type": "boolean"
          },
          "metadata": {
            "$ref": "#/components/schemas/ModelApiVersionMetadata"
          },
          "modelApiId": {
            "description": "The id of the Model API the version belongs to.",
            "nullable": false,
            "type": "string"
          },
          "monitoringEnabled": {
            "description": "Whether monitoring is enabled for the Mode API Version.",
            "nullable": false,
            "type": "boolean"
          },
          "number": {
            "description": "The version number of the Model API Version.",
            "nullable": false,
            "type": "integer"
          },
          "predictionDatasetResourceId": {
            "description": "The id of the prediction dataset used by the Model API Version.",
            "nullable": true,
            "type": "string"
          },
          "projectId": {
            "description": "The id of the project the Model API Version belongs to.",
            "nullable": false,
            "type": "string"
          },
          "provenanceCheckpointId": {
            "description": "The id of the provenance checkpoint of the Model API Version.",
            "nullable": true,
            "type": "string"
          },
          "recordInvocation": {
            "description": "Whether the Model API Version should record invocations.",
            "nullable": false,
            "type": "boolean"
          },
          "source": {
            "$ref": "#/components/schemas/ModelApiSource"
          }
        },
        "required": [
          "id",
          "modelApiId",
          "projectId",
          "source",
          "commitId",
          "dataPlaneId",
          "environmentRevisionId",
          "logHttpRequestResponse",
          "monitoringEnabled",
          "recordInvocation",
          "labels",
          "metadata"
        ]
      },
      "ModelApiVersionBuildLogs": {
        "properties": {
          "logs": {
            "description": "The build logs.",
            "items": {
              "$ref": "#/components/schemas/ModelApiVersionLogLine"
            },
            "nullable": false,
            "type": "array"
          },
          "status": {
            "description": "The status of the build.",
            "nullable": false,
            "type": "string"
          }
        }
      },
      "ModelApiVersionCreationRequest": {
        "properties": {
          "commitId": {
            "description": "The id of the commit id of the Model API Version to create.",
            "nullable": false,
            "type": "string"
          },
          "description": {
            "description": "The description for the Model API Version to create.",
            "nullable": false,
            "type": "string"
          },
          "environmentId": {
            "description": "The id of the environment to deploy the Model API Version with.",
            "nullable": false,
            "type": "string"
          },
          "logHttpRequestResponse": {
            "description": "Whether the Model API Version to create should log HTTP requests and responses.",
            "nullable": false,
            "type": "boolean"
          },
          "monitoringEnabled": {
            "description": "Whether the Model API Version to create should have monitoring enabled.",
            "nullable": false,
            "type": "boolean"
          },
          "predictionDatasetResourceId": {
            "description": "The id of the prediction dataset to be used by the Model API Version to create.",
            "nullable": true,
            "type": "string"
          },
          "projectId": {
            "description": "The id of the project the Model API Version to create should belong to.",
            "nullable": false,
            "type": "string"
          },
          "provenanceCheckpointId": {
            "description": "The id of the provenance checkpoint of the Model API Version to create.",
            "nullable": false,
            "type": "string"
          },
          "recordInvocation": {
            "description": "Whether the Model API Version to create should record invocations.",
            "nullable": false,
            "type": "boolean"
          },
          "shouldDeploy": {
            "description": "Whether the Model API Version to create should be deployed.",
            "nullable": false,
            "type": "boolean"
          },
          "source": {
            "$ref": "#/components/schemas/ModelApiSource"
          }
        },
        "required": [
          "projectId",
          "source",
          "logHttpRequestResponse",
          "monitoringEnabled"
        ]
      },
      "ModelApiVersionDeployment": {
        "properties": {
          "isPending": {
            "description": "Whether the Model API Version deployment is pending.",
            "nullable": false,
            "type": "boolean"
          },
          "status": {
            "description": "The status of the Model API Version deployment.",
            "nullable": false,
            "type": "string"
          }
        },
        "required": [
          "status",
          "isPending"
        ]
      },
      "ModelApiVersionDeploymentLogs": {
        "properties": {
          "logs": {
            "description": "The deployment logs.",
            "items": {
              "$ref": "#/components/schemas/ModelApiVersionLogLine"
            },
            "nullable": false,
            "type": "array"
          },
          "status": {
            "description": "The status of the deployment.",
            "nullable": false,
            "type": "string"
          }
        }
      },
      "ModelApiVersionExportLogs": {
        "properties": {
          "logs": {
            "description": "The export logs.",
            "items": {
              "$ref": "#/components/schemas/ModelApiVersionLogLine"
            },
            "nullable": false,
            "type": "array"
          },
          "sinceTimeNano": {
            "description": "The start date of the logs.",
            "nullable": false,
            "type": "integer"
          },
          "status": {
            "description": "The status of the export.",
            "nullable": false,
            "type": "string"
          }
        }
      },
      "ModelApiVersionInstanceLogs": {
        "properties": {
          "containerName": {
            "description": "The name of the container the Model API Version is deployed to.",
            "type": "string"
          },
          "logs": {
            "description": "The instance logs.",
            "items": {
              "$ref": "#/components/schemas/ModelApiVersionLogLine"
            },
            "nullable": false,
            "type": "array"
          },
          "podName": {
            "description": "The name of the pod the Model API Version is deployed to.",
            "type": "string"
          },
          "sinceTimeNano": {
            "description": "The start date of the logs.",
            "nullable": false,
            "type": "integer"
          },
          "status": {
            "description": "The status of the instance.",
            "nullable": false,
            "type": "string"
          }
        }
      },
      "ModelApiVersionLogLine": {
        "properties": {
          "log": {
            "description": "The content of the log line.",
            "nullable": false,
            "type": "string"
          },
          "streamType": {
            "description": "The type of stream the log line is sourced from.",
            "nullable": false,
            "type": "string"
          },
          "tags": {
            "description": "The tags of the log line.",
            "items": {
              "$ref": "#/components/schemas/ModelApiVersionLogTag"
            },
            "type": "array"
          },
          "timeNano": {
            "description": "The time in nanoseconds of the log line.",
            "nullable": false,
            "type": "integer"
          },
          "timestamp": {
            "description": "The timestamp of the log line.",
            "nullable": false,
            "type": "integer"
          }
        }
      },
      "ModelApiVersionLogTag": {
        "properties": {
          "key": {
            "description": "The name of the log tag.",
            "nullable": false,
            "type": "string"
          },
          "value": {
            "description": "The value of the log tag.",
            "nullable": false,
            "type": "string"
          }
        }
      },
      "ModelApiVersionMetadata": {
        "properties": {
          "created": {
            "description": "The date when the Model API was created Version.",
            "nullable": false,
            "type": "number"
          },
          "createdBy": {
            "description": "The id of the user that created the Model API Version.",
            "nullable": false,
            "type": "string"
          },
          "summary": {
            "description": "The summary of the Model API Version.",
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "created",
          "createdBy"
        ]
      },
      "ModelApiVersionProductionLabel": {
        "properties": {
          "isProd": {
            "description": "Whether the Model API Version should be the production version.",
            "nullable": false,
            "type": "boolean"
          }
        },
        "required": [
          "isProd"
        ]
      },
      "ModelApiVersionSummary": {
        "properties": {
          "dataPlaneId": {
            "description": "The id of the data plane the Model API Version is deployed to.",
            "nullable": false,
            "type": "string"
          },
          "deployment": {
            "$ref": "#/components/schemas/ModelApiVersionDeployment"
          },
          "id": {
            "description": "The id of the Model API Version.",
            "nullable": false,
            "type": "string"
          },
          "number": {
            "description": "The version number of the Model API Version.",
            "nullable": false,
            "type": "integer"
          }
        },
        "required": [
          "id",
          "dataPlaneId"
        ]
      },
      "ModelApiVersionTargetState": {
        "properties": {
          "isRunning": {
            "description": "Whether the Model API Version should be running.",
            "nullable": false,
            "type": "boolean"
          }
        },
        "required": [
          "isRunning"
        ]
      },
      "ModelApiVolume": {
        "properties": {
          "mountPath": {
            "description": "The mount path of the volume.",
            "nullable": false,
            "type": "string"
          },
          "name": {
            "description": "The name of the volume.",
            "nullable": false,
            "type": "string"
          },
          "readOnly": {
            "description": "Whether the volume is read only.",
            "nullable": false,
            "type": "boolean"
          },
          "volumeType": {
            "description": "The type of volume.",
            "nullable": false,
            "type": "string"
          }
        },
        "required": [
          "name",
          "mountPath",
          "volumeType",
          "readOnly"
        ]
      },
      "ModelConfigV1": {
        "additionalProperties": {
          "type": "string"
        },
        "description": "Configuration for the model",
        "example": {
          "openai_api_key": "58utu49034093nc9cc9n"
        },
        "type": "object"
      },
      "ModelDeployment": {
        "description": "Model Deployment",
        "properties": {
          "collaborators": {
            "description": "List of collaborators, if any",
            "items": {
              "$ref": "#/components/schemas/ModelDeploymentCollaborator"
            },
            "type": "array"
          },
          "configuration": {
            "$ref": "#/components/schemas/ModelDeploymentConfiguration"
          },
          "creationTimestamp": {
            "example": "2023-07-15T14:35:47.89Z",
            "format": "date-time",
            "type": "string"
          },
          "creatorInfo": {
            "$ref": "#/components/schemas/CreatorInfo"
          },
          "deploymentTargetInfo": {
            "$ref": "#/components/schemas/DeploymentTargetInfo"
          },
          "description": {
            "example": "This endpoint is designed to provide businesses with insights into their customer retention patterns.",
            "type": "string"
          },
          "id": {
            "description": "The id of the Model Deployment.",
            "example": "614e40a7-0509-4cae-89af-55e2097b817d",
            "nullable": false,
            "type": "string"
          },
          "isGloballyAccessible": {
            "description": "Whether the Model Deployment is viewable by Domino Users who are not collaborators",
            "type": "boolean"
          },
          "models": {
            "description": "Models associated with this Model Deployment.",
            "items": {
              "$ref": "#/components/schemas/ModelDetail"
            },
            "type": "array"
          },
          "name": {
            "example": "Income Classifier Deployment",
            "nullable": false,
            "type": "string"
          },
          "remoteUpdateTimestamp": {
            "example": "2023-07-16T19:20:30.45Z",
            "format": "date-time",
            "type": "string"
          },
          "resourceConfigurationInfo": {
            "$ref": "#/components/schemas/ResourceConfigurationInfo"
          },
          "status": {
            "$ref": "#/components/schemas/ModelDeploymentStatus"
          },
          "version": {
            "example": 23,
            "nullable": false,
            "type": "integer"
          }
        },
        "required": [
          "id",
          "name",
          "description",
          "version",
          "creatorInfo",
          "collaborators",
          "isGloballyAccessible",
          "deploymentTargetInfo",
          "resourceConfigurationInfo",
          "models",
          "configuration",
          "deploymentType",
          "creationTimestamp"
        ],
        "type": "object"
      },
      "ModelDeploymentCollaborator": {
        "properties": {
          "id": {
            "description": "Id of collaborating user or organization",
            "example": "66a84107c774610134ae3a28",
            "type": "string"
          },
          "role": {
            "description": "Collaborator's role in the project",
            "enum": [
              "CONSUMER",
              "OWNER"
            ],
            "type": "string"
          }
        },
        "required": [
          "id",
          "role"
        ],
        "type": "object"
      },
      "ModelDeploymentConfiguration": {
        "description": "The Model Deployment configuration",
        "properties": {
          "deploymentType": {
            "description": "The deployment type specific configuration",
            "properties": {
              "modelConfigs": {
                "additionalProperties": {
                  "type": "object"
                },
                "description": "The model-specific configurations",
                "type": "object"
              },
              "sharedConfig": {
                "description": "The configurations shared by all models in the deployment",
                "type": "object"
              },
              "type": {
                "description": "The type of the deployment",
                "enum": [
                  "SYNC_ENDPOINT",
                  "ASYNC_ENDPOINT"
                ],
                "example": "SYNC_ENDPOINT",
                "type": "string"
              }
            },
            "required": [
              "type",
              "sharedConfig",
              "modelConfigs"
            ],
            "type": "object"
          },
          "modelConfigs": {
            "additionalProperties": {
              "type": "object"
            },
            "description": "The model-specific configurations",
            "type": "object"
          },
          "sharedConfig": {
            "description": "The configurations shared by all models in the deployment",
            "type": "object"
          }
        },
        "required": [
          "sharedConfig",
          "modelConfigs",
          "deploymentType"
        ],
        "type": "object"
      },
      "ModelDeploymentCredentials": {
        "description": "Model Deployment Credentials",
        "properties": {
          "credentials": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "The actual credentials represented as key value pairs",
            "example": {
              "AWS_ACCESS_KEY_ID": 1234,
              "AWS_SECRET_ACCESS_KEY": 5678,
              "AWS_SESSION_TOKEN": "0123token"
            },
            "type": "object"
          },
          "credentialsType": {
            "$ref": "#/components/schemas/CredentialsType"
          },
          "expirationTime": {
            "example": "2023-07-15T14:35:47.89Z",
            "format": "date-time",
            "type": "string"
          },
          "operationType": {
            "example": "INVOKE_ENDPOINT",
            "type": "string"
          }
        },
        "required": [
          "operationType",
          "credentialsType",
          "expirationTime",
          "credentials"
        ],
        "type": "object"
      },
      "ModelDeploymentCredentialsList": {
        "properties": {
          "items": {
            "description": "The Model Deployments Credentials in the list",
            "items": {
              "$ref": "#/components/schemas/ModelDeploymentCredentials"
            },
            "type": "array"
          }
        },
        "required": [
          "items"
        ]
      },
      "ModelDeploymentLogLine": {
        "properties": {
          "log": {
            "description": "The content of the log line.",
            "type": "string"
          },
          "streamType": {
            "description": "The type of stream the log line is sourced from.",
            "type": "string"
          },
          "tags": {
            "description": "The tags of the log line.",
            "items": {
              "$ref": "#/components/schemas/ModelDeploymentLogTag"
            },
            "type": "array"
          },
          "timeNano": {
            "description": "The time in nanoseconds of the log line.",
            "type": "string"
          },
          "timestamp": {
            "description": "The timestamp of the log line.",
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "timestamp",
          "timeNano",
          "log",
          "streamType",
          "tags"
        ]
      },
      "ModelDeploymentLogTag": {
        "properties": {
          "key": {
            "description": "The name of the log tag.",
            "type": "string"
          },
          "value": {
            "description": "The value of the log tag.",
            "type": "string"
          }
        },
        "required": [
          "key",
          "value"
        ]
      },
      "ModelDeploymentPaginatedList": {
        "properties": {
          "items": {
            "description": "The Model Deployments in the paginated list.",
            "items": {
              "$ref": "#/components/schemas/ModelDeployment"
            },
            "type": "array"
          },
          "metadata": {
            "$ref": "#/components/schemas/PaginatedMetadataV1"
          }
        },
        "required": [
          "items",
          "metadata"
        ]
      },
      "ModelDeploymentStatus": {
        "description": "The Model Deployment status",
        "properties": {
          "message": {
            "description": "Message indicating error or other status information about the most recent operation. This field is required in this location for Domino model deployment schemas.",
            "type": "string"
          },
          "modelOperations": {
            "additionalProperties": {
              "items": {
                "$ref": "#/components/schemas/ModelDeploymentStatusOperation"
              },
              "type": "array"
            },
            "description": "Model-specific operations supported by this model deployment. This field is required with this structure in this location for Domino model deployment schemas.",
            "type": "object"
          },
          "modelStates": {
            "additionalProperties": {
              "type": "object"
            },
            "description": "The model-specific states",
            "type": "object"
          },
          "sharedOperations": {
            "description": "Operations supported by this model deployment. This field is required with this structure in this location for Domino model deployment schemas.",
            "items": {
              "$ref": "#/components/schemas/ModelDeploymentStatusOperation"
            },
            "type": "array"
          },
          "sharedState": {
            "description": "The state shared by all models in the deployment",
            "type": "object"
          },
          "state": {
            "description": "Standard Domino state value. This field is required in this location for Domino model deployment schemas.",
            "enum": [
              "STARTING",
              "RUNNING",
              "UPDATING",
              "STOPPING",
              "STOPPED",
              "FAILED",
              "DELETING",
              "DELETED"
            ],
            "type": "string"
          }
        },
        "required": [
          "state"
        ],
        "type": "object"
      },
      "ModelDeploymentStatusOperation": {
        "properties": {
          "credentials": {
            "properties": {
              "expirationTime": {
                "format": "date-time",
                "type": "string"
              },
              "keys": {
                "description": "This field provides the names of properties provided by this credential.",
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "type": {
                "$ref": "#/components/schemas/CredentialsType"
              }
            },
            "required": [
              "type",
              "keys",
              "expirationTime"
            ],
            "type": "object"
          },
          "examplePayload": {
            "format": "json",
            "type": "string"
          },
          "examples": {
            "items": {
              "properties": {
                "code": {
                  "type": "string"
                },
                "format": {
                  "type": "string"
                },
                "language": {
                  "type": "string"
                },
                "request": {
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "fields": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          },
          "metadata": {
            "description": "This field provides metadata needed for an API user to invoke the operation.",
            "properties": {
              "operations": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "service": {
                "type": "string"
              },
              "type": {
                "type": "string"
              }
            },
            "required": [
              "type",
              "operations"
            ],
            "type": "object"
          },
          "type": {
            "description": "This field provides identifiers for the operations supported by this type of model deployment.",
            "type": "string"
          }
        },
        "required": [
          "type",
          "metadata",
          "fields"
        ],
        "type": "object"
      },
      "ModelDetail": {
        "properties": {
          "environmentId": {
            "description": "The id of the Domino environment.",
            "type": "string"
          },
          "environmentName": {
            "description": "The name of the Domino environment.",
            "type": "string"
          },
          "name": {
            "example": "XYZ Model",
            "nullable": false,
            "type": "string"
          },
          "projectId": {
            "description": "The id of the Domino project the source belongs to.",
            "type": "string"
          },
          "source": {
            "$ref": "#/components/schemas/ModelDetailSource"
          }
        },
        "required": [
          "name",
          "environmentId",
          "environmentName",
          "projectId",
          "source"
        ]
      },
      "ModelDetailSource": {
        "description": "Model Deployment Model Detail Source",
        "properties": {
          "registeredModelName": {
            "description": "The name of the registered model served by this source.",
            "example": "Growth Forecasting Model",
            "nullable": false,
            "type": "string"
          },
          "registeredModelType": {
            "description": "The type of this model source.",
            "enum": [
              "MODELREGISTRY"
            ],
            "example": "MODELREGISTRY",
            "type": "string"
          },
          "registeredModelVersion": {
            "description": "The version of the registered model served by this source.",
            "example": 3,
            "nullable": false,
            "type": "integer"
          }
        },
        "required": [
          "registeredModelName",
          "registeredModelVersion",
          "registeredModelType"
        ]
      },
      "ModelSource": {
        "enum": [
          "MODELREGISTRY"
        ],
        "type": "string"
      },
      "MountedGitRepoV1": {
        "properties": {
          "endingBranch": {
            "description": "Branch this git repo ended at.",
            "example": "final-branch",
            "type": "string"
          },
          "endingCommitId": {
            "description": "Ending commitId for this git repo.",
            "example": "dff155c9a736f9cd230eac420e3c1ef3daa0ad7e",
            "type": "string"
          },
          "id": {
            "description": "Id of the git repo mounted to the Job.",
            "example": "6231365e7a0af0281c01a69f",
            "type": "string"
          },
          "name": {
            "description": "Name of the git repo mounted to the Job.",
            "example": "MyRepo",
            "type": "string"
          },
          "ref": {
            "type": "string"
          },
          "serviceProvider": {
            "$ref": "#/components/schemas/GitServiceProviderV1"
          },
          "startingBranch": {
            "description": "Branch this git repo started at.",
            "example": "init-test-branch",
            "type": "string"
          },
          "startingCommitId": {
            "description": "CommitId the git repo should be mounted at.",
            "example": "4f2d5c2f54db4fbb16a093d4fb11fdb1fe0794c7",
            "type": "string"
          },
          "uri": {
            "description": "Uri for the repo being mounted.",
            "example": "git@github.com:apache/spark.git",
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "uri",
          "ref",
          "serviceProvider"
        ],
        "type": "object"
      },
      "MountedProjectV1": {
        "properties": {
          "commitId": {
            "description": "CommitId to use for project being mounted.",
            "example": "7f8e3908f129c0ca6529028618e6f10b3d2f315a",
            "type": "string"
          },
          "projectId": {
            "description": "Id of project to mount.",
            "example": "623138c87a0af0281c01a6a3",
            "type": "string"
          }
        },
        "required": [
          "projectId",
          "commitId"
        ],
        "type": "object"
      },
      "NewAsyncPredictionV1": {
        "properties": {
          "parameters": {
            "description": "Parameters that will be passed to Async Model predict function",
            "type": "object"
          }
        },
        "required": [
          "parameters"
        ],
        "type": "object"
      },
      "NewBillingTagsV1": {
        "properties": {
          "billingTags": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "billingTags"
        ],
        "type": "object"
      },
      "NewCustomerTemplate": {
        "properties": {
          "access": {
            "$ref": "#/components/schemas/ProjectTemplateAccess"
          },
          "billingTag": {
            "$ref": "#/components/schemas/BillingTagV1"
          },
          "definition": {
            "$ref": "#/components/schemas/NewProjectTemplateDefinition"
          },
          "description": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "sourceProject": {
            "$ref": "#/components/schemas/NewProjectTemplateSourceProject"
          }
        },
        "required": [
          "name",
          "access",
          "sourceProject",
          "definition"
        ],
        "type": "object"
      },
      "NewDataSourceV1": {
        "properties": {
          "authType": {
            "$ref": "#/components/schemas/DataSourceAuthTypeV1"
          },
          "config": {
            "$ref": "#/components/schemas/DataSourceConfigV1"
          },
          "credentialType": {
            "$ref": "#/components/schemas/DataSourceCredentialTypeV1"
          },
          "credentials": {
            "$ref": "#/components/schemas/DataSourceCredentialsV1"
          },
          "dataSourceType": {
            "$ref": "#/components/schemas/DataSourceTypeV1"
          },
          "description": {
            "description": "Description of the Data Source",
            "example": "My Data Source",
            "type": "string"
          },
          "name": {
            "description": "User given name of the Data Source",
            "example": "data-source-name",
            "type": "string"
          },
          "permissions": {
            "$ref": "#/components/schemas/DataSourcePermissionsV1"
          }
        },
        "required": [
          "name",
          "dataSourceType",
          "authType",
          "credentialType",
          "credentials",
          "config",
          "permissions"
        ],
        "type": "object"
      },
      "NewDatasetRwV1": {
        "properties": {
          "description": {
            "description": "Description of the dataset",
            "type": "string"
          },
          "grants": {
            "description": "Permission grants to be assigned for this newly created dataset. Note that permissions can be edited after creation. If snapshotId is passed in, this parameter won't have any effect and caller will be assigned dataset Ownership.",
            "items": {
              "$ref": "#/components/schemas/DatasetRwGrantV1"
            },
            "type": "array"
          },
          "name": {
            "description": "Name of this dataset. The name must be unique in the same project",
            "type": "string"
          },
          "projectId": {
            "description": "ID of the project this dataset belongs to. Either projectId or snapshotId must be provided",
            "type": "string"
          },
          "snapshotId": {
            "description": "ID of an existing snapshot to create a new dataset from. Either snapshotId or projectId must be provided.",
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "NewDeploymentTarget": {
        "description": "Deployment Target creation request",
        "properties": {
          "configuration": {
            "description": "Configuration of this Deployment Target following the schema in its Deployment Target Type",
            "example": {
              "credentials": {
                "account": 1234,
                "credentials": "AWS_ACCESS_KEY_ID: 1234\nAWS_SECRET_ACCESS_KEY: itsasecret\n"
              },
              "sagemaker": {
                "ecrUrl": "anURL",
                "region": "us-east-1",
                "sagemakerS3ModelsBucket": "domino-sagemaker"
              }
            },
            "type": "object"
          },
          "deploymentTargetTypeId": {
            "description": "ID of the Deployment Target Type this Deployment Target belongs to",
            "type": "string"
          },
          "isGloballyAccessible": {
            "description": "Whether or not the Deployment Target is globally accessible",
            "type": "boolean"
          },
          "name": {
            "description": "Internal name for the Deployment Target",
            "example": "Production",
            "type": "string"
          },
          "resourceConfigurations": {
            "items": {
              "$ref": "#/components/schemas/NewResourceConfiguration"
            },
            "type": "array"
          },
          "userAndOrganizationIds": {
            "description": "User and Organization IDs that can use this Deployment Target",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "name",
          "deploymentTargetTypeId",
          "isGloballyAccessible",
          "userAndOrganizationIds",
          "configuration",
          "resourceConfigurations"
        ],
        "type": "object"
      },
      "NewEndpointV1": {
        "properties": {
          "endpointName": {
            "description": "Valid name of the endpoint",
            "example": "completions",
            "type": "string"
          },
          "endpointPermissions": {
            "$ref": "#/components/schemas/EndpointPermissionsDtoV1"
          },
          "endpointType": {
            "description": "Type of the endpoint",
            "example": "llm/v1/completions",
            "type": "string"
          },
          "modelConfig": {
            "$ref": "#/components/schemas/ModelConfigV1"
          },
          "modelName": {
            "description": "Name of the model",
            "example": "gpt-4",
            "type": "string"
          },
          "modelProvider": {
            "description": "Provider of the model",
            "example": "openai",
            "type": "string"
          }
        },
        "required": [
          "endpointName",
          "endpointType",
          "endpointPermissions",
          "modelProvider",
          "modelName",
          "modelConfig"
        ],
        "type": "object"
      },
      "NewEnvironmentRevision": {
        "properties": {
          "environmentId": {
            "pattern": "^[0-9a-f]{24}$",
            "type": "string"
          },
          "id": {
            "pattern": "^[0-9a-f]{24}$",
            "type": "string"
          }
        },
        "required": [
          "id",
          "environmentId"
        ],
        "type": "object"
      },
      "NewEnvironmentRevisionV1": {
        "properties": {
          "dockerfileInstructions": {
            "type": "string"
          },
          "environmentVariables": {
            "items": {
              "$ref": "#/components/schemas/EnvironmentVariableV1"
            },
            "type": "array"
          },
          "image": {
            "description": "Environment revision image. Required for creating a new environment",
            "type": "string"
          },
          "postRunScript": {
            "type": "string"
          },
          "postSetupScript": {
            "type": "string"
          },
          "preRunScript": {
            "type": "string"
          },
          "preSetupScript": {
            "type": "string"
          },
          "skipCache": {
            "type": "boolean"
          },
          "summary": {
            "type": "string"
          },
          "supportedClusters": {
            "items": {
              "$ref": "#/components/schemas/ClusterTypeV1"
            },
            "type": "array"
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "useVpn": {
            "type": "boolean"
          },
          "workspaceTools": {
            "items": {
              "$ref": "#/components/schemas/EnvironmentToolV1"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "NewEnvironmentV1": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NewEnvironmentRevisionV1"
          },
          {
            "properties": {
              "addBaseDependencies": {
                "description": "Required for creating a new environment",
                "type": "boolean"
              },
              "description": {
                "type": "string"
              },
              "duplicateFromEnvironmentId": {
                "description": "The id of the environment to duplicate. When specifying this property, no other properties in the payload must be set.",
                "type": "string"
              },
              "isCurated": {
                "type": "boolean"
              },
              "isRestricted": {
                "description": "Specifies if an environment is restricted. Only users with ClassifyEnvironments permission can set this to true",
                "type": "boolean"
              },
              "name": {
                "description": "Environment name. Required for creating a new environment",
                "type": "string"
              },
              "orgOwnerId": {
                "description": "Sets an Organization as the Environment owner. Only used if visibility is 'Private', as 'Global' environments don't have owners.",
                "type": "string"
              },
              "visibility": {
                "$ref": "#/components/schemas/NewEnvironmentVisibilityV1"
              }
            },
            "type": "object"
          }
        ]
      },
      "NewEnvironmentVisibilityV1": {
        "description": "Environment visibility. Required for creating a new environment",
        "enum": [
          "global",
          "private"
        ],
        "type": "string"
      },
      "NewHardwareTier": {
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name"
        ],
        "type": "object"
      },
      "NewHardwareTierFlagsV1": {
        "description": "Boolean flags for creating a new hardware tier",
        "properties": {
          "isDataAnalystTier": {
            "default": false,
            "type": "boolean"
          },
          "isDefault": {
            "default": false,
            "type": "boolean"
          },
          "isDefaultForModelApi": {
            "type": "boolean"
          },
          "isGlobal": {
            "default": true,
            "type": "boolean"
          },
          "isModelApiTier": {
            "type": "boolean"
          },
          "isVisible": {
            "default": true,
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "NewHardwareTierV1": {
        "properties": {
          "availabilityZones": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "centsPerMinute": {
            "description": "Cost per minute of using this hardware tier as defined by an Admin.",
            "format": "double",
            "type": "number"
          },
          "computeClusterRestrictions": {
            "$ref": "#/components/schemas/HardwareTierComputeClusterRestrictionsV1"
          },
          "dataPlaneId": {
            "type": "string"
          },
          "flags": {
            "$ref": "#/components/schemas/NewHardwareTierFlagsV1"
          },
          "gpuConfiguration": {
            "$ref": "#/components/schemas/HardwareTierGpuConfigurationV1"
          },
          "id": {
            "example": "small-k8s",
            "type": "string"
          },
          "maxSimultaneousExecutions": {
            "type": "integer"
          },
          "name": {
            "example": "My-HardwareTier",
            "type": "string"
          },
          "nodePool": {
            "type": "string"
          },
          "overProvisioning": {
            "$ref": "#/components/schemas/HardwareTierOverProvisioningV1"
          },
          "podCustomization": {
            "$ref": "#/components/schemas/HardwareTierPodCustomizationV1"
          },
          "resources": {
            "$ref": "#/components/schemas/HardwareTierResourcesV1"
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "id",
          "name",
          "resources",
          "nodePool"
        ],
        "type": "object"
      },
      "NewJobV1": {
        "properties": {
          "commitId": {
            "description": "Git commitId to start job from. Defaults to head commitId for the project.",
            "example": "960a4c99a4cc38194cbacbcce41caa68ba5369ea",
            "type": "string"
          },
          "computeCluster": {
            "$ref": "#/components/schemas/ComputeClusterConfigV1"
          },
          "environmentId": {
            "description": "Id of environment to use when creating job. Defaults to project default environment.",
            "example": "623131507a0af0281c01a699",
            "type": "string"
          },
          "environmentRevisionSpec": {
            "$ref": "#/components/schemas/EnvironmentRevisionSpecV1"
          },
          "externalVolumeMountIds": {
            "description": "Id's of external volumes to be mounted on this job.",
            "example": [
              "6231327c7a0af0281c01a69b",
              "623132867a0af0281c01a69c"
            ],
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "hardwareTier": {
            "description": "Hardware tier to use for this job. Defaults to project default hardware tier.",
            "example": "small-k8s",
            "type": "string"
          },
          "mainRepoGitRef": {
            "$ref": "#/components/schemas/GitRefV1"
          },
          "projectId": {
            "description": "Id of project to create job in.",
            "example": "623130ad7a0af0281c01a698",
            "type": "string"
          },
          "runCommand": {
            "description": "Command for job to run",
            "example": "main.py",
            "type": "string"
          },
          "snapshotDatasetsOnCompletion": {
            "description": "Whether to snapshot datasets mounted on the Job when the Job completes.",
            "type": "boolean"
          },
          "title": {
            "description": "Name of job to start",
            "example": "K-means clustering",
            "type": "string"
          }
        },
        "required": [
          "projectId",
          "runCommand"
        ],
        "type": "object"
      },
      "NewMetricValueV1": {
        "properties": {
          "metric": {
            "description": "Name of the metric to log values for",
            "type": "string"
          },
          "modelMonitoringId": {
            "description": "ID of the monitored model to log metric values for",
            "type": "string"
          },
          "referenceTimestamp": {
            "description": "Timestamp to associate the metric log entry with. Timestamp should follow the RFC3339 format with timezone e.g. 2013-07-01T17:55:13-07:00",
            "type": "string"
          },
          "tags": {
            "description": "List of tags associated with the metric",
            "items": {
              "$ref": "#/components/schemas/MetricTagV1"
            },
            "type": "array"
          },
          "value": {
            "description": "Value of the metric",
            "type": "number"
          }
        },
        "required": [
          "modelMonitoringId",
          "metric",
          "value",
          "referenceTimestamp"
        ],
        "type": "object"
      },
      "NewMetricValuesEnvelopeV1": {
        "properties": {
          "newMetricValues": {
            "items": {
              "$ref": "#/components/schemas/NewMetricValueV1"
            },
            "type": "array"
          }
        },
        "required": [
          "newMetricValues"
        ],
        "type": "object"
      },
      "NewModelDeployment": {
        "description": "Model Deployment",
        "properties": {
          "collaborators": {
            "description": "List of collaborators, if any. Will default to empty list if not provided",
            "items": {
              "$ref": "#/components/schemas/ModelDeploymentCollaborator"
            },
            "type": "array"
          },
          "configuration": {
            "$ref": "#/components/schemas/ModelDeploymentConfiguration"
          },
          "deploymentTargetId": {
            "example": "ABC-123",
            "nullable": false,
            "type": "string"
          },
          "description": {
            "example": "This endpoint is designed to provide businesses with insights into their customer retention patterns.",
            "type": "string"
          },
          "isGloballyAccessible": {
            "description": "Whether the Model Deployment is viewable by Domino Users who are not collaborators. Will default to false if not provided",
            "type": "boolean"
          },
          "models": {
            "description": "A list of models associated with this Model Deployment.",
            "items": {
              "$ref": "#/components/schemas/NewOrUpdatedModelDetail"
            },
            "nullable": false,
            "type": "array"
          },
          "name": {
            "description": "The Model Deployment name.",
            "example": "Income Classifier Deployment",
            "nullable": false,
            "type": "string"
          },
          "resourceConfigurationId": {
            "example": "DEF-123",
            "nullable": false,
            "type": "string"
          }
        },
        "required": [
          "name",
          "deploymentTargetId",
          "resourceConfigurationId",
          "models",
          "configuration",
          "deploymentType"
        ],
        "type": "object"
      },
      "NewOrUpdatedModelDetail": {
        "properties": {
          "environmentId": {
            "description": "The id of the Domino environment.",
            "type": "string"
          },
          "name": {
            "example": "XYZ Model",
            "nullable": false,
            "type": "string"
          },
          "source": {
            "$ref": "#/components/schemas/ModelDetailSource"
          }
        },
        "required": [
          "name",
          "environmentId",
          "source"
        ]
      },
      "NewOrUpdatedResourceConfiguration": {
        "description": "Resource Configuration create or update request",
        "properties": {
          "configuration": {
            "description": "Configuration of this Resource Configuration following the schema in its Deployment Target Type",
            "example": {
              "instance_type": "m5.large"
            },
            "type": "object"
          },
          "description": {
            "description": "Description for the Resource Configuration",
            "type": "string"
          },
          "id": {
            "description": "UUID for the Resource Configuration. Must be included if updating an existing Resource Configuration. If missing, a new Resource Configuration is created.",
            "type": "string"
          },
          "isDefault": {
            "description": "Whether the resource configuration is the default one",
            "type": "boolean"
          },
          "name": {
            "description": "Internal name for the Resource Configuration",
            "example": "gpu_large",
            "type": "string"
          }
        },
        "type": "object"
      },
      "NewOrganizationV1": {
        "properties": {
          "members": {
            "items": {
              "$ref": "#/components/schemas/OrganizationMemberV1"
            },
            "type": "array"
          },
          "name": {
            "description": "The name for this organization",
            "example": "MyNewOrg",
            "type": "string"
          }
        },
        "required": [
          "name",
          "members"
        ],
        "type": "object"
      },
      "NewProjectGitRepositoryV1": {
        "properties": {
          "defaultRef": {
            "$ref": "#/components/schemas/ProjectRepositoryReferenceV1"
          },
          "gitCredentialId": {
            "description": "Id of the git creds to use for the repo. Credentials only apply for the current user, and other users will need to add their own unique creds.",
            "type": "string"
          },
          "name": {
            "description": "Optional name of the repository in the project",
            "type": "string"
          },
          "serviceProvider": {
            "$ref": "#/components/schemas/GitServiceProviderV1"
          },
          "uri": {
            "description": "URI of the repository origin",
            "example": "https://github.com/torvalds/linux",
            "type": "string"
          }
        },
        "required": [
          "uri"
        ],
        "type": "object"
      },
      "NewProjectGoalV1": {
        "properties": {
          "assigneeId": {
            "description": "Optional id of the user the goal will be assigned to",
            "type": "string"
          },
          "description": {
            "description": "An optional description of the goal",
            "type": "string"
          },
          "stageId": {
            "description": "Optional id of the stage the goal will be set to",
            "type": "string"
          },
          "title": {
            "description": "Title of the goal",
            "example": "MyGoal",
            "type": "string"
          }
        },
        "required": [
          "title"
        ],
        "type": "object"
      },
      "NewProjectSettings": {
        "properties": {
          "computeClusterEnvironmentRevision": {
            "$ref": "#/components/schemas/NewEnvironmentRevision"
          },
          "defaultEnvironmentRevision": {
            "$ref": "#/components/schemas/NewEnvironmentRevision"
          },
          "defaultHardwareTier": {
            "$ref": "#/components/schemas/NewHardwareTier"
          }
        },
        "required": [
          "defaultEnvironmentRevision",
          "defaultHardwareTier"
        ],
        "type": "object"
      },
      "NewProjectTemplateDefinition": {
        "properties": {
          "settings": {
            "$ref": "#/components/schemas/NewProjectSettings"
          }
        },
        "required": [
          "settings"
        ],
        "type": "object"
      },
      "NewProjectTemplateSourceProject": {
        "properties": {
          "gitProviderCodeSpec": {
            "$ref": "#/components/schemas/TemplateBackingGitCodeSpec"
          },
          "id": {
            "pattern": "^[0-9a-f]{24}$",
            "type": "string"
          },
          "included": {
            "items": {
              "$ref": "#/components/schemas/ProjectTemplateSourceProjectComponent"
            },
            "type": "array"
          }
        },
        "required": [
          "id",
          "included",
          "gitProviderCodeSpec"
        ],
        "type": "object"
      },
      "NewProjectV1": {
        "properties": {
          "billingTag": {
            "$ref": "#/components/schemas/BillingTagV1"
          },
          "description": {
            "description": "Project description.",
            "type": "string"
          },
          "isRestricted": {
            "description": "Optional flag for setting a new project as restricted. ProjectClassifier permission required for use.",
            "type": "boolean"
          },
          "mainRepository": {
            "$ref": "#/components/schemas/NewProjectGitRepositoryV1"
          },
          "name": {
            "description": "Name of this project. The name must be unique and cannot contain white space.",
            "type": "string"
          },
          "ownerId": {
            "description": "Optional Id of a user to own this project. Defaults to the calling user if not provided. Does not currently support creating projects owned by Organizations.",
            "type": "string"
          },
          "repoToCreate": {
            "$ref": "#/components/schemas/RepoToCreateV1"
          },
          "templateDetails": {
            "$ref": "#/components/schemas/ProjectTemplateDetailsV1"
          },
          "visibility": {
            "$ref": "#/components/schemas/ProjectVisibilityV1"
          }
        },
        "required": [
          "name",
          "description",
          "visibility"
        ],
        "type": "object"
      },
      "NewProjectV2": {
        "properties": {
          "billingTag": {
            "$ref": "#/components/schemas/BillingTagV1"
          },
          "description": {
            "description": "Project description.",
            "type": "string"
          },
          "isRestricted": {
            "description": "Optional flag for setting a new project as restricted. ProjectClassifier permission required for use.",
            "type": "boolean"
          },
          "mainRepository": {
            "$ref": "#/components/schemas/NewProjectGitRepositoryV1"
          },
          "name": {
            "description": "Name of this project. The name must be unique and cannot contain white space.",
            "type": "string"
          },
          "ownerId": {
            "description": "Optional Id of a user to own this project. Defaults to the calling user if not provided. Does not currently support creating projects owned by Organizations.",
            "type": "string"
          },
          "repoToCreate": {
            "$ref": "#/components/schemas/RepoToCreateV2"
          },
          "templateDetails": {
            "$ref": "#/components/schemas/ProjectTemplateDetailsV1"
          },
          "visibility": {
            "$ref": "#/components/schemas/ProjectVisibilityV1"
          }
        },
        "required": [
          "name",
          "description",
          "visibility"
        ],
        "type": "object"
      },
      "NewRegisteredModelV1": {
        "properties": {
          "description": {
            "description": "The description of the registered model",
            "example": "This model predicts housing prices",
            "type": "string"
          },
          "discoverable": {
            "description": "Indicates whether this model is publicly discoverable. If true, users who are not project members will see this model in search results and can view basic model details.\n",
            "type": "boolean"
          },
          "experimentRunId": {
            "description": "The id of the experiment run to create the version from",
            "example": "a8ea375c781d4b9c8e58469f0ad738f8",
            "type": "string"
          },
          "modelName": {
            "description": "The name of the registered model",
            "example": "Housing Price Predictor",
            "type": "string"
          },
          "tags": {
            "$ref": "#/components/schemas/RegisteredModelTagsV1"
          }
        },
        "required": [
          "modelName",
          "experimentRunId",
          "discoverable"
        ],
        "type": "object"
      },
      "NewRegisteredModelVersionV1": {
        "properties": {
          "artifact": {
            "description": "The artifact of the run to create the version from",
            "example": "LogisticRegression",
            "type": "string"
          },
          "description": {
            "description": "The description of the registered model version",
            "example": "Logistic regression model version 2",
            "type": "string"
          },
          "experimentRunId": {
            "description": "The id of the experiment run to create the version from",
            "example": "a8ea375c781d4b9c8e58469f0ad738f8",
            "type": "string"
          }
        },
        "required": [
          "description",
          "experimentRunId",
          "artifact"
        ],
        "type": "object"
      },
      "NewResourceConfiguration": {
        "description": "Resource Configuration creation request",
        "properties": {
          "configuration": {
            "description": "Configuration of this Resource Configuration following the schema in its Deployment Target Type",
            "example": {
              "instance_type": "m5.large"
            },
            "type": "object"
          },
          "deploymentTargetId": {
            "description": "ID of the Deployment Target this Resource Configuration belongs to",
            "type": "string"
          },
          "description": {
            "description": "Description for the Resource Configuration",
            "type": "string"
          },
          "isDefault": {
            "description": "Whether the resource configuration is the default one",
            "type": "boolean"
          },
          "name": {
            "description": "Internal name for the Resource Configuration",
            "example": "gpu_large",
            "type": "string"
          }
        },
        "required": [
          "name",
          "configuration"
        ],
        "type": "object"
      },
      "NewSnapshotV1": {
        "properties": {
          "relativeFilePaths": {
            "description": "List of paths to include in snapshot",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "relativeFilePaths"
        ],
        "type": "object"
      },
      "NewWorkspaceSessionV1": {
        "properties": {
          "externalVolumeMounts": {
            "default": [],
            "items": {
              "description": "External volume mount IDs",
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "externalVolumeMounts"
        ],
        "type": "object"
      },
      "OrganizationEnvelopeV1": {
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/MetadataV1"
          },
          "org": {
            "$ref": "#/components/schemas/OrganizationV1"
          }
        },
        "required": [
          "org",
          "metadata"
        ],
        "type": "object"
      },
      "OrganizationMemberV1": {
        "properties": {
          "organizationRole": {
            "$ref": "#/components/schemas/OrganizationRoleV1"
          },
          "userId": {
            "description": "Id of the user in the org.",
            "example": "6234c9542bc6731e3471ade8",
            "type": "string"
          }
        },
        "required": [
          "userId",
          "organizationRole"
        ],
        "type": "object"
      },
      "OrganizationRoleV1": {
        "description": "Role of member in the organization.",
        "enum": [
          "member",
          "admin"
        ],
        "type": "string"
      },
      "OrganizationV1": {
        "properties": {
          "defaultEnvironmentId": {
            "description": "Id of the default environment used in the organization.",
            "example": "6231327c7a0af0281c01a65f",
            "type": "string"
          },
          "id": {
            "description": "Organization identifier in the users collection.",
            "example": "623132867a0af0281c01a69c",
            "type": "string"
          },
          "members": {
            "description": "List of the organization members.",
            "items": {
              "$ref": "#/components/schemas/OrganizationMemberV1"
            },
            "type": "array"
          },
          "name": {
            "description": "Organization name.",
            "example": "MyOrg",
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "members"
        ],
        "type": "object"
      },
      "PaginatedBaseTemplatesCollectionV1": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/ProjectTemplate"
            },
            "type": "array"
          },
          "paginationDetails": {
            "$ref": "#/components/schemas/PaginationFilterV1"
          },
          "totalCount": {
            "type": "integer"
          }
        },
        "required": [
          "items",
          "paginationDetails",
          "totalCount"
        ],
        "type": "object"
      },
      "PaginatedDataSourceEnvelopeV1": {
        "properties": {
          "dataSources": {
            "items": {
              "$ref": "#/components/schemas/DataSourceEnvelopeV1"
            },
            "type": "array"
          },
          "metadata": {
            "$ref": "#/components/schemas/PaginatedMetadataV1"
          }
        },
        "required": [
          "dataSources",
          "metadata"
        ],
        "type": "object"
      },
      "PaginatedDatasetRwEnvelopeV1": {
        "properties": {
          "datasets": {
            "items": {
              "$ref": "#/components/schemas/DatasetRwDetailsV1"
            },
            "type": "array"
          },
          "metadata": {
            "$ref": "#/components/schemas/PaginatedMetadataV1"
          }
        },
        "required": [
          "datasets",
          "metadata"
        ],
        "type": "object"
      },
      "PaginatedDatasetRwEnvelopeV2": {
        "properties": {
          "datasets": {
            "items": {
              "$ref": "#/components/schemas/DatasetRwInfoDtoV1"
            },
            "type": "array"
          },
          "metadata": {
            "$ref": "#/components/schemas/PaginatedMetadataV1"
          }
        },
        "required": [
          "datasets",
          "metadata"
        ],
        "type": "object"
      },
      "PaginatedDeploymentTargets": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/DeploymentTarget"
            },
            "type": "array"
          },
          "metadata": {
            "$ref": "#/components/schemas/PaginatedMetadataV1"
          }
        },
        "required": [
          "items",
          "metadata"
        ],
        "type": "object"
      },
      "PaginatedEnvironmentEnvelopeV1": {
        "properties": {
          "environments": {
            "items": {
              "$ref": "#/components/schemas/EnvironmentV1"
            },
            "type": "array"
          },
          "metadata": {
            "$ref": "#/components/schemas/PaginatedMetadataV1"
          }
        },
        "required": [
          "environments",
          "metadata"
        ],
        "type": "object"
      },
      "PaginatedGitCredentialsAccessorEnvelopeV1": {
        "properties": {
          "credentials": {
            "items": {
              "$ref": "#/components/schemas/GitCredentialsAccessorV1"
            },
            "type": "array"
          },
          "metadata": {
            "$ref": "#/components/schemas/MetadataV1"
          }
        },
        "required": [
          "credentials",
          "metadata"
        ],
        "type": "object"
      },
      "PaginatedGitRepositoriesEnvelopeV1": {
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/PaginatedMetadataV1"
          },
          "repositories": {
            "items": {
              "$ref": "#/components/schemas/ProjectGitRepositoryV1"
            },
            "type": "array"
          }
        },
        "required": [
          "repositories",
          "metadata"
        ],
        "type": "object"
      },
      "PaginatedGoalEnvelopeV1": {
        "properties": {
          "goals": {
            "items": {
              "$ref": "#/components/schemas/LinkedGoalV1"
            },
            "type": "array"
          },
          "metadata": {
            "$ref": "#/components/schemas/MetadataV1"
          }
        },
        "required": [
          "goals",
          "metadata"
        ],
        "type": "object"
      },
      "PaginatedHardwareTierEnvelopeV1": {
        "properties": {
          "hardwareTiers": {
            "items": {
              "$ref": "#/components/schemas/HardwareTierV1"
            },
            "type": "array"
          },
          "metadata": {
            "$ref": "#/components/schemas/PaginatedMetadataV1"
          }
        },
        "required": [
          "hardwareTiers",
          "metadata"
        ],
        "type": "object"
      },
      "PaginatedJobEnvelopeV1": {
        "properties": {
          "jobs": {
            "items": {
              "$ref": "#/components/schemas/JobV1"
            },
            "type": "array"
          },
          "metadata": {
            "$ref": "#/components/schemas/PaginatedMetadataV1"
          }
        },
        "required": [
          "jobs",
          "metadata"
        ],
        "type": "object"
      },
      "PaginatedMetadataV1": {
        "allOf": [
          {
            "$ref": "#/components/schemas/MetadataV1"
          },
          {
            "$ref": "#/components/schemas/PaginationV1"
          }
        ],
        "required": [
          "pagination",
          "requestId",
          "notices"
        ]
      },
      "PaginatedOrganizationEnvelopeV1": {
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/PaginatedMetadataV1"
          },
          "orgs": {
            "items": {
              "$ref": "#/components/schemas/OrganizationV1"
            },
            "type": "array"
          }
        },
        "required": [
          "orgs",
          "metadata"
        ],
        "type": "object"
      },
      "PaginatedProjectsEnvelopeV1": {
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/PaginatedMetadataV1"
          },
          "projects": {
            "items": {
              "$ref": "#/components/schemas/ProjectV1"
            },
            "type": "array"
          }
        },
        "required": [
          "projects",
          "metadata"
        ],
        "type": "object"
      },
      "PaginatedRegisteredModelNamesV1": {
        "properties": {
          "items": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "metadata": {
            "$ref": "#/components/schemas/PaginatedMetadataV1"
          }
        },
        "required": [
          "items",
          "metadata"
        ],
        "type": "object"
      },
      "PaginatedRegisteredModelVersionModelApiEnvelopeV1": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/RegisteredModelVersionModelApiV1"
            },
            "type": "array"
          },
          "metadata": {
            "$ref": "#/components/schemas/PaginatedMetadataV1"
          }
        },
        "required": [
          "items",
          "metadata"
        ],
        "type": "object"
      },
      "PaginatedRegisteredModelVersionOverviewEnvelopeV1": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/RegisteredModelVersionOverviewV1"
            },
            "type": "array"
          },
          "metadata": {
            "$ref": "#/components/schemas/PaginatedMetadataV1"
          }
        },
        "required": [
          "items",
          "metadata"
        ],
        "type": "object"
      },
      "PaginatedRegisteredModelsEnvelopeV1": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/RegisteredModelV1"
            },
            "type": "array"
          },
          "metadata": {
            "$ref": "#/components/schemas/TokenPaginatedMetadataV1"
          }
        },
        "required": [
          "items",
          "metadata"
        ],
        "type": "object"
      },
      "PaginatedRegisteredModelsForUIEnvelopeV1": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/RegisteredModelForUIV1"
            },
            "type": "array"
          },
          "metadata": {
            "$ref": "#/components/schemas/TokenPaginatedMetadataV1"
          }
        },
        "required": [
          "items",
          "metadata"
        ],
        "type": "object"
      },
      "PaginatedResourceConfigurations": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/ResourceConfiguration"
            },
            "type": "array"
          },
          "metadata": {
            "$ref": "#/components/schemas/PaginatedMetadataV1"
          }
        },
        "required": [
          "items",
          "metadata"
        ],
        "type": "object"
      },
      "PaginatedSnapshotEnvelopeV1": {
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/PaginatedMetadataV1"
          },
          "snapshots": {
            "items": {
              "$ref": "#/components/schemas/SnapshotDetailsV1"
            },
            "type": "array"
          }
        },
        "required": [
          "snapshots",
          "metadata"
        ],
        "type": "object"
      },
      "PaginatedUserEnvelopeV1": {
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/PaginatedMetadataV1"
          },
          "users": {
            "items": {
              "$ref": "#/components/schemas/UserV1"
            },
            "type": "array"
          }
        },
        "required": [
          "users",
          "metadata"
        ],
        "type": "object"
      },
      "PaginationFilterV1": {
        "properties": {
          "pageNumber": {
            "type": "integer"
          },
          "pageSize": {
            "type": "integer"
          },
          "sortOrder": {
            "type": "string"
          }
        },
        "required": [
          "pageSize",
          "pageNumber",
          "sortOrder"
        ],
        "type": "object"
      },
      "PaginationV1": {
        "properties": {
          "limit": {
            "description": "Max number of objects returned",
            "type": "integer"
          },
          "offset": {
            "description": "Number of object skipped forward from start of objects",
            "type": "integer"
          },
          "totalCount": {
            "description": "Total number of available objects",
            "type": "integer"
          }
        },
        "required": [
          "offset",
          "limit"
        ],
        "type": "object"
      },
      "PatchRegisteredModelV1": {
        "properties": {
          "description": {
            "description": "The description of the registered model",
            "example": "Logistic regression model",
            "type": "string"
          },
          "discoverable": {
            "description": "Whether this registered model is discoverable",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "PolymorphicFieldStateChange": {
        "discriminator": {
          "mapping": {
            "scalar": "#/components/schemas/ScalarFieldStateChange",
            "sequence": "#/components/schemas/SequenceFieldStateChange"
          },
          "propertyName": "fieldType"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/ScalarFieldStateChange"
          },
          {
            "$ref": "#/components/schemas/SequenceFieldStateChange"
          }
        ]
      },
      "PositiveInteger": {
        "minimum": 0,
        "type": "integer"
      },
      "PositiveIntegerDefault0": {
        "default": 0,
        "minimum": 0,
        "type": "integer"
      },
      "ProjectCollaboratorEnvelopeV1": {
        "properties": {
          "collaborator": {
            "$ref": "#/components/schemas/ProjectCollaboratorV1"
          },
          "metadata": {
            "$ref": "#/components/schemas/MetadataV1"
          }
        },
        "required": [
          "collaborator",
          "metadata"
        ],
        "type": "object"
      },
      "ProjectCollaboratorV1": {
        "properties": {
          "id": {
            "description": "userId of collaborating user or organization",
            "example": "662604702b7e5d347dbe7a908",
            "type": "string"
          },
          "role": {
            "description": "Collaborator's role in the project",
            "enum": [
              "contributor",
              "launcherUser",
              "resultsConsumer",
              "projectImporter"
            ],
            "type": "string"
          }
        },
        "required": [
          "id",
          "role"
        ],
        "type": "object"
      },
      "ProjectCopyResultEnvelopeV1": {
        "properties": {
          "datasetsNotCopied": {
            "items": {
              "$ref": "#/components/schemas/DatasetNotCopiedV1"
            },
            "type": "array"
          },
          "metadata": {
            "$ref": "#/components/schemas/MetadataV1"
          },
          "project": {
            "$ref": "#/components/schemas/ProjectV1"
          }
        },
        "required": [
          "project",
          "metadata"
        ],
        "type": "object"
      },
      "ProjectEnvelopeV1": {
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/MetadataV1"
          },
          "project": {
            "$ref": "#/components/schemas/ProjectV1"
          }
        },
        "required": [
          "project",
          "metadata"
        ],
        "type": "object"
      },
      "ProjectGitRepositoryEnvelopeV1": {
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/MetadataV1"
          },
          "repository": {
            "$ref": "#/components/schemas/ProjectGitRepositoryV1"
          }
        },
        "required": [
          "repository",
          "metadata"
        ],
        "type": "object"
      },
      "ProjectGitRepositoryV1": {
        "properties": {
          "defaultRef": {
            "$ref": "#/components/schemas/ProjectRepositoryReferenceV1"
          },
          "id": {
            "description": "Id of the repository",
            "example": "62604702b7e5d347dbe7a908",
            "type": "string"
          },
          "name": {
            "description": "Optional name of the repository in the project. If not provided, a name will be inferred from the URL",
            "type": "string"
          },
          "serviceProvider": {
            "$ref": "#/components/schemas/GitServiceProviderV1"
          },
          "uri": {
            "description": "URI of the repository origin",
            "example": "https://github.com/torvalds/linux",
            "type": "string"
          }
        },
        "required": [
          "id",
          "uri",
          "defaultRef",
          "serviceProvider"
        ],
        "type": "object"
      },
      "ProjectGoalEnvelopeV1": {
        "properties": {
          "goal": {
            "$ref": "#/components/schemas/ProjectGoalV1"
          },
          "metadata": {
            "$ref": "#/components/schemas/MetadataV1"
          }
        },
        "required": [
          "goal",
          "metadata"
        ],
        "type": "object"
      },
      "ProjectGoalForUpdateV1": {
        "properties": {
          "isComplete": {
            "description": "Flag indicating if the goal is complete",
            "type": "boolean"
          }
        },
        "required": [
          "isComplete"
        ],
        "type": "object"
      },
      "ProjectGoalV1": {
        "properties": {
          "createdAt": {
            "description": "Timestamp at which goal was created",
            "example": "2022-03-12T02:13:44.467Z",
            "format": "date-time",
            "type": "string"
          },
          "creatorId": {
            "description": "User id that created the goal",
            "type": "string"
          },
          "description": {
            "description": "Optional description of project goal",
            "type": "string"
          },
          "id": {
            "description": "The unique project goal id",
            "type": "string"
          },
          "isComplete": {
            "description": "Flag indicating if the goal is complete",
            "type": "boolean"
          },
          "projectId": {
            "description": "Id of project to which the goal belongs",
            "type": "string"
          },
          "title": {
            "description": "The title of project goal",
            "type": "string"
          }
        },
        "required": [
          "id",
          "title",
          "isComplete",
          "projectId",
          "createdAt",
          "creatorId"
        ],
        "type": "object"
      },
      "ProjectGoalsEnvelopeV1": {
        "properties": {
          "goals": {
            "items": {
              "$ref": "#/components/schemas/ProjectGoalV1"
            },
            "type": "array"
          },
          "metadata": {
            "$ref": "#/components/schemas/MetadataV1"
          }
        },
        "required": [
          "goals",
          "metadata"
        ],
        "type": "object"
      },
      "ProjectOwner": {
        "properties": {
          "username": {
            "type": "string"
          }
        },
        "required": [
          "username"
        ],
        "type": "object"
      },
      "ProjectRepositoryReferenceV1": {
        "properties": {
          "refType": {
            "$ref": "#/components/schemas/GitReferenceTypeV1"
          },
          "value": {
            "type": "string"
          }
        },
        "required": [
          "refType"
        ],
        "type": "object"
      },
      "ProjectResultsSettingsEnvelopeV1": {
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/MetadataV1"
          },
          "resultsSettings": {
            "$ref": "#/components/schemas/ProjectResultsSettingsV1"
          }
        },
        "required": [
          "resultsSettings",
          "metadata"
        ],
        "type": "object"
      },
      "ProjectResultsSettingsV1": {
        "properties": {
          "branch": {
            "enum": [
              "isolated",
              "main"
            ],
            "type": "string"
          }
        },
        "required": [
          "branch"
        ],
        "type": "object"
      },
      "ProjectSettings": {
        "properties": {
          "computeClusterEnvironmentRevision": {
            "$ref": "#/components/schemas/EnvironmentRevision"
          },
          "defaultEnvironmentRevision": {
            "$ref": "#/components/schemas/EnvironmentRevision"
          },
          "defaultHardwareTier": {
            "$ref": "#/components/schemas/HardwareTier"
          }
        },
        "required": [
          "defaultEnvironmentRevision",
          "defaultHardwareTier"
        ],
        "type": "object"
      },
      "ProjectStatusEnvelopeV1": {
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/MetadataV1"
          },
          "status": {
            "$ref": "#/components/schemas/ProjectStatusV1"
          }
        },
        "required": [
          "status",
          "metadata"
        ],
        "type": "object"
      },
      "ProjectStatusV1": {
        "properties": {
          "blockedReason": {
            "description": "The reason the project is blocked",
            "type": "string"
          },
          "completedMessage": {
            "description": "The completed project message",
            "type": "string"
          },
          "isBlocked": {
            "description": "Whether or not the project is blocked. If true, it has precedence over the status",
            "type": "boolean"
          },
          "status": {
            "description": "The project status",
            "enum": [
              "active",
              "complete"
            ],
            "type": "string"
          }
        },
        "required": [
          "status",
          "isBlocked"
        ],
        "type": "object"
      },
      "ProjectTemplate": {
        "properties": {
          "access": {
            "$ref": "#/components/schemas/ProjectTemplateAccess"
          },
          "base64Logo": {
            "type": "string"
          },
          "categories": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "created": {
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "isCompanyOfficial": {
            "description": "Whether or not this template is marked as official",
            "type": "boolean"
          },
          "license": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "owner": {
            "$ref": "#/components/schemas/ProjectTemplateOwner"
          },
          "recommended": {
            "type": "boolean"
          },
          "revisionId": {
            "type": "string"
          },
          "templateType": {
            "enum": [
              "customer",
              "ecosystem"
            ],
            "type": "string"
          },
          "updated": {
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "templateType",
          "id",
          "name",
          "created",
          "updated",
          "categories",
          "owner",
          "access"
        ],
        "type": "object"
      },
      "ProjectTemplateAccess": {
        "properties": {
          "collaborators": {
            "items": {
              "$ref": "#/components/schemas/ProjectTemplateCollaborator"
            },
            "type": "array"
          },
          "visibility": {
            "enum": [
              "private",
              "all_non_anonymous_users"
            ],
            "type": "string"
          }
        },
        "required": [
          "visibility",
          "collaborators"
        ],
        "type": "object"
      },
      "ProjectTemplateBackingProject": {
        "properties": {
          "id": {
            "pattern": "^[0-9a-f]{24}$",
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "owner": {
            "$ref": "#/components/schemas/ProjectOwner"
          }
        },
        "required": [
          "id",
          "name",
          "owner"
        ],
        "type": "object"
      },
      "ProjectTemplateCollaborator": {
        "properties": {
          "id": {
            "pattern": "^[0-9a-f]{24}$",
            "type": "string"
          },
          "role": {
            "enum": [
              "template_user"
            ],
            "type": "string"
          }
        },
        "required": [
          "id",
          "role"
        ],
        "type": "object"
      },
      "ProjectTemplateDefinition": {
        "properties": {
          "backingProject": {
            "$ref": "#/components/schemas/ProjectTemplateBackingProject"
          },
          "projectType": {
            "enum": [
              "git_based",
              "dfs"
            ],
            "type": "string"
          },
          "settings": {
            "$ref": "#/components/schemas/ProjectSettings"
          }
        },
        "required": [
          "backingProject",
          "projectType",
          "settings"
        ],
        "type": "object"
      },
      "ProjectTemplateDetailsV1": {
        "properties": {
          "forceImport": {
            "description": "optional flag to force import the template code into the main repo, overwriting all git history",
            "type": "boolean"
          },
          "importToMainRepo": {
            "description": "optional flag to import the template code to the main repo, Github only",
            "type": "boolean"
          },
          "name": {
            "description": "name of the template",
            "example": "ImageNet Classifier",
            "type": "string"
          },
          "templateId": {
            "description": "id of the template",
            "example": "templateId",
            "type": "string"
          },
          "templateRevisionId": {
            "description": "optional id of the revision of the template",
            "type": "string"
          },
          "templateType": {
            "description": "Specifying \"ecosystem\" or \"customer\" template type",
            "type": "string"
          }
        },
        "required": [
          "name",
          "templateId"
        ],
        "type": "object"
      },
      "ProjectTemplateOwner": {
        "properties": {
          "link": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "ProjectTemplateSourceProject": {
        "properties": {
          "id": {
            "pattern": "^[0-9a-f]{24}$",
            "type": "string"
          },
          "included": {
            "items": {
              "$ref": "#/components/schemas/ProjectTemplateSourceProjectComponent"
            },
            "type": "array"
          },
          "name": {
            "type": "string"
          },
          "owner": {
            "$ref": "#/components/schemas/ProjectOwner"
          }
        },
        "required": [
          "id",
          "included",
          "name",
          "owner"
        ],
        "type": "object"
      },
      "ProjectTemplateSourceProjectComponent": {
        "enum": [
          "Artifacts",
          "Integrations",
          "ExternalDataVolumes",
          "Launchers",
          "ImportedProjects",
          "Tags",
          "Datasets",
          "MountedDatasets",
          "Code",
          "FeatureStores",
          "ImportedRepositories",
          "Goals",
          "Apps",
          "DataSources"
        ],
        "type": "string"
      },
      "ProjectV1": {
        "properties": {
          "billingTag": {
            "$ref": "#/components/schemas/BillingTagV1"
          },
          "collaborators": {
            "description": "List of collaborators, if any",
            "items": {
              "$ref": "#/components/schemas/ProjectCollaboratorV1"
            },
            "type": "array"
          },
          "description": {
            "description": "A description of the project",
            "type": "string"
          },
          "id": {
            "description": "Project ID",
            "example": "626046fcb7e5d347dbe7a904",
            "type": "string"
          },
          "internalTags": {
            "description": "Optional list of strings containing internal tags of project",
            "example": [
              "restricted"
            ],
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "isRestricted": {
            "description": "Whether a project is restricted",
            "type": "boolean"
          },
          "mainRepository": {
            "$ref": "#/components/schemas/ProjectGitRepositoryV1"
          },
          "name": {
            "description": "Name of the project",
            "example": "My Project",
            "type": "string"
          },
          "ownerId": {
            "description": "userId of the project owner",
            "example": "662604702b7e5d347dbe7a908",
            "type": "string"
          },
          "ownerUsername": {
            "description": "username of the project owner",
            "example": "steve_holt",
            "type": "string"
          },
          "visibility": {
            "$ref": "#/components/schemas/ProjectVisibilityV1"
          }
        },
        "required": [
          "id",
          "name",
          "description",
          "visibility",
          "ownerId",
          "ownerUsername",
          "collaborators",
          "isRestricted"
        ],
        "type": "object"
      },
      "ProjectVisibilityV1": {
        "description": "Project visibility",
        "enum": [
          "public",
          "searchable",
          "private"
        ],
        "type": "string"
      },
      "ProviderRepoVisibilityV1": {
        "description": "The visibility of the code repo. Internal can only be used for Github Enterprise.",
        "enum": [
          "public",
          "private",
          "internal"
        ],
        "type": "string"
      },
      "ProxyConfigV1": {
        "properties": {
          "internalPath": {
            "description": "Path to find workspace at. Used internally.",
            "example": "/{{ownerUsername}}/{{projectName}}/{{sessionPathComponent}}/{{runId}}/{{#if pathToOpen}}tree/{{pathToOpen}}{{/if}}",
            "type": "string"
          },
          "port": {
            "description": "Port to run this tool on.",
            "example": 8888,
            "type": "integer"
          },
          "requireSubdomain": {
            "description": "Whether workspace requires subdomains. Subdomain workspaces only work if deployment is configured to support subdomains. Defaults to false.",
            "example": false,
            "type": "boolean"
          },
          "rewrite": {
            "description": "If url rewriting is necessary for routing. Defaults to false",
            "example": false,
            "type": "boolean"
          }
        },
        "required": [
          "internalPath",
          "port"
        ],
        "type": "object"
      },
      "QueuedJobStatusDetailsV1": {
        "properties": {
          "expectedWait": {
            "description": "Message describing estimated wait time between state changes.",
            "example": "Now",
            "type": "string"
          },
          "explanation": {
            "description": "Message explaining the wait time",
            "example": "Your run has been assigned to a machine",
            "type": "string"
          },
          "helpText": {
            "description": "Message informing the caller what should be done next",
            "example": "It will start being prepared for execution momentarily",
            "type": "string"
          }
        },
        "required": [
          "expectedWait",
          "explanation",
          "helpText"
        ],
        "type": "object"
      },
      "ReferenceCopyGitRepoSpecV1": {
        "description": "Specifies the git service provider repository to use as the code repository in the new Domino project.",
        "properties": {
          "mainRepoUrl": {
            "description": "The cloneable url for the git service provider repository. Must be a http(s) schema url.",
            "type": "string"
          }
        },
        "required": [
          "mainRepoUrl"
        ],
        "type": "object"
      },
      "RegisteredModelForUIV1": {
        "properties": {
          "createdAt": {
            "description": "When the latest version of the model was created",
            "example": "2022-03-12T02:13:44.467Z",
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "description": "Description of the model",
            "example": "Customer churn model",
            "type": "string"
          },
          "discoverable": {
            "default": false,
            "description": "Indicates whether this model is publicly discoverable. If true, users who are not project members will see this model in search results and can view basic model details.\nThis field may be omitted when false.\n",
            "type": "boolean"
          },
          "latestVersion": {
            "description": "The latest version of the model",
            "example": 1,
            "type": "integer"
          },
          "latestVersionExperimentMetrics": {
            "$ref": "#/components/schemas/RegisteredModelMetricsV1"
          },
          "modelApiCount": {
            "description": "The number of model APIs associated with the latest version of the model",
            "example": 1,
            "type": "integer"
          },
          "name": {
            "description": "Name of the registered model",
            "example": "churn-prediction",
            "type": "string"
          },
          "ownerUsername": {
            "description": "Username of the project owner",
            "example": "martin_hito",
            "type": "string"
          },
          "predictionCount": {
            "description": "The number of predictions captured for the active versions of model APIs associated with the latest version of the model",
            "example": 100,
            "type": "integer"
          },
          "project": {
            "$ref": "#/components/schemas/RegisteredModelProjectSummaryV1"
          },
          "tags": {
            "$ref": "#/components/schemas/RegisteredModelTagsV1"
          },
          "updatedAt": {
            "description": "When the latest version of the model was updated",
            "example": "2022-03-12T02:13:44.467Z",
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "name",
          "description",
          "project",
          "tags",
          "ownerUsername",
          "createdAt",
          "updatedAt",
          "modelApiCount"
        ],
        "type": "object"
      },
      "RegisteredModelMetricsV1": {
        "additionalProperties": {
          "format": "double",
          "type": "number"
        },
        "description": "A map of key -> value",
        "example": {
          "key": 1,
          "key2": 100.4
        },
        "type": "object"
      },
      "RegisteredModelProjectSummaryV1": {
        "description": "type that tracks properties of the project associated with a model",
        "properties": {
          "id": {
            "description": "ID of the project housing the model",
            "example": "62313ce67a0af0281c01a6a5",
            "type": "string"
          },
          "isGitBasedProject": {
            "description": "Whether the project is a git-based project",
            "type": "boolean"
          },
          "name": {
            "description": "Name of the project overview housing the model",
            "example": "TO-DO",
            "type": "string"
          },
          "ownerUsername": {
            "description": "Name of the project owner",
            "example": "TO-DO",
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "ownerUsername",
          "isGitBasedProject"
        ],
        "type": "object"
      },
      "RegisteredModelRequestingUserAccessV1": {
        "description": "Describes the operations that the requesting user has permission to do with this model.",
        "properties": {
          "canEditModel": {
            "description": "True if the requesting user can update this model",
            "type": "boolean"
          },
          "canEditProjectAssets": {
            "description": "True if the requesting user has permissions to edit other assets of the project that this model belongs to.\n",
            "type": "boolean"
          },
          "canViewExperimentRuns": {
            "description": "True if the requesting user can view experiment runs of the project that this model belongs to.\n",
            "type": "boolean"
          },
          "canViewModelApis": {
            "description": "True if the requesting user can view model apis of the project that this model belongs to.\n",
            "type": "boolean"
          },
          "canViewProject": {
            "description": "True if the requesting user can view the project overview of the project that this model belongs to.\n",
            "type": "boolean"
          },
          "canViewProjectFiles": {
            "description": "True if the requesting user can view the files of the project that this model belongs to.\n",
            "type": "boolean"
          }
        },
        "required": [
          "canEditModel",
          "canEditProjectAssets",
          "canViewExperimentRuns",
          "canViewModelApis",
          "canViewProject",
          "canViewProjectFiles"
        ],
        "type": "object"
      },
      "RegisteredModelTagsV1": {
        "additionalProperties": {
          "type": "string"
        },
        "description": "A map of key -> value",
        "example": {
          "key": "value",
          "key2": "anothervalue"
        },
        "type": "object"
      },
      "RegisteredModelV1": {
        "properties": {
          "createdAt": {
            "description": "When the latest version of the model was created",
            "example": "2022-03-12T02:13:44.467Z",
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "description": "Description of the model",
            "example": "Customer churn model",
            "type": "string"
          },
          "discoverable": {
            "default": false,
            "description": "Indicates whether this model is publicly discoverable. If true, users who are not project members will see this model in search results and can view basic model details.\nThis field may be omitted when false.\n",
            "type": "boolean"
          },
          "latestVersion": {
            "description": "The latest version of the model",
            "example": 1,
            "type": "integer"
          },
          "name": {
            "description": "Name of the registered model",
            "example": "churn-prediction",
            "type": "string"
          },
          "ownerUsername": {
            "description": "Username of the model's creator",
            "example": "martin_hito",
            "type": "string"
          },
          "project": {
            "$ref": "#/components/schemas/RegisteredModelProjectSummaryV1"
          },
          "requestingUserAccess": {
            "$ref": "#/components/schemas/RegisteredModelRequestingUserAccessV1"
          },
          "tags": {
            "$ref": "#/components/schemas/RegisteredModelTagsV1"
          },
          "updatedAt": {
            "description": "When the latest version of the model was updated",
            "example": "2022-03-12T02:13:44.467Z",
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "name",
          "description",
          "project",
          "tags",
          "ownerUsername",
          "createdAt",
          "updatedAt",
          "requestingUserAccess"
        ],
        "type": "object"
      },
      "RegisteredModelVersionDataSourceDetailsV1": {
        "properties": {
          "dataSourceType": {
            "description": "The dataSourceType of the datasource",
            "type": "string"
          },
          "id": {
            "description": "The id of the datasource",
            "type": "string"
          },
          "name": {
            "description": "The name of the datasource",
            "type": "string"
          }
        },
        "required": [
          "name",
          "id",
          "dataSourceType"
        ],
        "type": "object"
      },
      "RegisteredModelVersionDatasetDetailsV1": {
        "properties": {
          "id": {
            "description": "The id of the dataset",
            "type": "string"
          },
          "name": {
            "description": "The name of the dataset",
            "type": "string"
          },
          "snapshotId": {
            "description": "The snapshotId of the dataset",
            "type": "string"
          }
        },
        "required": [
          "name",
          "id",
          "snapshotId"
        ],
        "type": "object"
      },
      "RegisteredModelVersionDetailsV1": {
        "properties": {
          "createdAt": {
            "description": "When the latest version of the model was created",
            "example": "2022-03-12T02:13:44.467Z",
            "format": "date-time",
            "type": "string"
          },
          "experimentRunId": {
            "description": "The name of experiment run linked to the model version",
            "example": "db79712b47084c27a463a188bf901943",
            "type": "string"
          },
          "modelName": {
            "description": "Name of the registered model",
            "example": "churn-prediction",
            "type": "string"
          },
          "modelVersion": {
            "description": "The latest version of the model",
            "example": 4,
            "type": "integer"
          },
          "modelVersionDescription": {
            "description": "Description of the model version",
            "example": "Customer churn model V1",
            "type": "string"
          },
          "ownerUsername": {
            "description": "username of the project owner",
            "example": "martin_hito",
            "type": "string"
          },
          "project": {
            "$ref": "#/components/schemas/RegisteredModelProjectSummaryV1"
          },
          "tags": {
            "$ref": "#/components/schemas/RegisteredModelTagsV1"
          },
          "updatedAt": {
            "description": "When the latest version of the model was updated",
            "example": "2022-03-12T02:13:44.467Z",
            "format": "date-time",
            "type": "string"
          },
          "versionUiDetails": {
            "$ref": "#/components/schemas/RegisteredModelVersionUiDetailsV1"
          }
        },
        "required": [
          "modelName",
          "modelVersion",
          "modelVersionDescription",
          "experimentRunId",
          "project",
          "versionUiDetails",
          "tags",
          "ownerUsername",
          "createdAt",
          "updatedAt"
        ],
        "type": "object"
      },
      "RegisteredModelVersionExperimentRunInfoV1": {
        "properties": {
          "metrics": {
            "description": "Run metrics.",
            "items": {
              "$ref": "#/components/schemas/RegisteredModelVersionExperimentRunMetricV1"
            },
            "type": "array"
          },
          "params": {
            "description": "Run parameters.",
            "items": {
              "$ref": "#/components/schemas/RegisteredModelVersionExperimentRunParamV1"
            },
            "type": "array"
          },
          "runUrl": {
            "description": "The snapshotId of the dataset",
            "type": "string"
          }
        },
        "required": [
          "metrics",
          "params",
          "runUrl"
        ],
        "type": "object"
      },
      "RegisteredModelVersionExperimentRunMetricV1": {
        "properties": {
          "key": {
            "description": "Key identifying this metric.",
            "type": "string"
          },
          "timestamp": {
            "description": "The timestamp at which this metric was recorded.",
            "example": "2022-03-12T02:13:44.467Z",
            "format": "date-time",
            "type": "string"
          },
          "value": {
            "description": "Value associated with this metric.",
            "format": "double",
            "type": "number"
          }
        },
        "required": [
          "key",
          "value",
          "timestamp"
        ],
        "type": "object"
      },
      "RegisteredModelVersionExperimentRunParamV1": {
        "properties": {
          "key": {
            "description": "Key identifying this param.",
            "type": "string"
          },
          "value": {
            "description": "Value associated with this param.",
            "type": "string"
          }
        },
        "required": [
          "key",
          "value"
        ],
        "type": "object"
      },
      "RegisteredModelVersionModelApiV1": {
        "properties": {
          "activeModelVersionId": {
            "description": "The id of the Model API",
            "example": "6452f88ac21bd0c60eca087",
            "type": "string"
          },
          "activeVersionNumber": {
            "description": "The active version number of the Model API",
            "example": 2,
            "type": "integer"
          },
          "activeVersionStatus": {
            "description": "The status of the Model API",
            "example": "Running",
            "type": "string"
          },
          "description": {
            "description": "Description of the model",
            "example": "Customer churn model",
            "type": "string"
          },
          "id": {
            "description": "ID of the Model API",
            "example": "6452f88ac21bd0c60eca085",
            "type": "string"
          },
          "name": {
            "description": "Name of the Model API",
            "example": "Test Model API",
            "type": "string"
          },
          "project": {
            "$ref": "#/components/schemas/RegisteredModelProjectSummaryV1"
          },
          "updatedAt": {
            "description": "When the latest version of the model was updated",
            "example": "2022-03-12T02:13:44.467Z",
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "description",
          "project",
          "updatedAt"
        ],
        "type": "object"
      },
      "RegisteredModelVersionOverviewV1": {
        "properties": {
          "createdAt": {
            "description": "When the latest version of the model was created",
            "example": "2022-03-12T02:13:44.467Z",
            "format": "date-time",
            "type": "string"
          },
          "experimentRunId": {
            "description": "The name of experiment run linked to the model version",
            "example": "db79712b47084c27a463a188bf901943",
            "type": "string"
          },
          "modelName": {
            "description": "Name of the registered model",
            "example": "churn-prediction",
            "type": "string"
          },
          "modelVersion": {
            "description": "The latest version of the model",
            "example": 4,
            "type": "integer"
          },
          "ownerUsername": {
            "description": "username of the project owner",
            "example": "martin_hito",
            "type": "string"
          },
          "project": {
            "$ref": "#/components/schemas/RegisteredModelProjectSummaryV1"
          },
          "updatedAt": {
            "description": "When the latest version of the model was updated",
            "example": "2022-03-12T02:13:44.467Z",
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "modelName",
          "modelVersion",
          "experimentRunId",
          "project",
          "ownerUsername",
          "createdAt",
          "updatedAt"
        ],
        "type": "object"
      },
      "RegisteredModelVersionUiDetailsV1": {
        "properties": {
          "experimentRunInfo": {
            "$ref": "#/components/schemas/RegisteredModelVersionExperimentRunInfoV1"
          },
          "modelVersionDataSources": {
            "items": {
              "$ref": "#/components/schemas/RegisteredModelVersionDataSourceDetailsV1"
            },
            "type": "array"
          },
          "modelVersionDatasets": {
            "items": {
              "$ref": "#/components/schemas/RegisteredModelVersionDatasetDetailsV1"
            },
            "type": "array"
          }
        },
        "required": [
          "experimentRunInfo",
          "modelVersionDataSources",
          "modelVersionDatasets"
        ],
        "type": "object"
      },
      "RepoToCreateV1": {
        "description": "An object representing a new git repo to create in a remote repository",
        "properties": {
          "credentialId": {
            "pattern": "^[0-9a-f]{24}$",
            "type": "string"
          },
          "owner": {
            "type": "string"
          },
          "repositoryTemplateName": {
            "type": "string"
          },
          "repositoryToCreateName": {
            "type": "string"
          },
          "serviceProvider": {
            "$ref": "#/components/schemas/GitServiceProviderV1"
          },
          "visibility": {
            "$ref": "#/components/schemas/ProviderRepoVisibilityV1"
          }
        },
        "required": [
          "credentialId",
          "repositoryToCreateName",
          "owner",
          "visibility"
        ],
        "type": "object"
      },
      "RepoToCreateV2": {
        "description": "An object representing a new git repo to create in a remote repository",
        "properties": {
          "credentialId": {
            "pattern": "^[0-9a-f]{24}$",
            "type": "string"
          },
          "owner": {
            "type": "string"
          },
          "repositoryToCreateName": {
            "type": "string"
          },
          "serviceProvider": {
            "$ref": "#/components/schemas/GitServiceProviderV1"
          },
          "visibility": {
            "$ref": "#/components/schemas/ProviderRepoVisibilityV1"
          }
        },
        "required": [
          "credentialId",
          "repositoryToCreateName",
          "owner",
          "visibility"
        ],
        "type": "object"
      },
      "ResourceConfiguration": {
        "description": "Resource Configuration",
        "example": {
          "configuration": {
            "instanceType": "m7g.medium"
          },
          "deploymentTargetId": 1,
          "description": "Medium AWS Instance",
          "id": 2,
          "name": "Medium"
        },
        "properties": {
          "configuration": {
            "description": "Configuration of this Resource Configuration following the schema in its Deployment Target Type",
            "example": {
              "instance_type": "m5.large"
            },
            "type": "object"
          },
          "deploymentTargetId": {
            "description": "ID of the Deployment Target this Resource Configuration belongs to",
            "type": "string"
          },
          "description": {
            "description": "Description for the Resource Configuration",
            "type": "string"
          },
          "id": {
            "description": "UUID for the Resource Configuration",
            "type": "string"
          },
          "lastModified": {
            "description": "Timestamp of the last update to the resource configuration (will be the creation timestamp on creation)",
            "format": "date-time",
            "type": "string"
          },
          "name": {
            "description": "Internal name for the Resource Configuration",
            "example": "gpu_large",
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "deploymentTargetId",
          "configuration",
          "lastModified"
        ],
        "type": "object"
      },
      "ResourceConfigurationInfo": {
        "description": "Information about a Resource Configuration",
        "properties": {
          "configuration": {
            "description": "Configuration of the Resource Configuration following the schema in its Deployment Target Type",
            "example": {
              "instance_type": "m5.large"
            },
            "type": "object"
          },
          "id": {
            "description": "Id of the Resource Configuration",
            "example": "ABC-123",
            "nullable": false,
            "type": "string"
          },
          "name": {
            "description": "Name of the Resource Configuration",
            "example": "Large",
            "nullable": false,
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "configuration"
        ],
        "type": "object"
      },
      "ScalarFieldStateChange": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FieldStateChange"
          }
        ],
        "properties": {
          "after": {
            "type": "string"
          },
          "before": {
            "type": "string"
          },
          "unit": {
            "type": "string"
          }
        }
      },
      "SchemaArray": {
        "items": {
          "$ref": "#/components/schemas/JSONSchema"
        },
        "minItems": 1,
        "type": "array"
      },
      "SequenceFieldStateChange": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FieldStateChange"
          }
        ],
        "properties": {
          "added": {
            "items": {
              "$ref": "#/components/schemas/Entity"
            },
            "type": "array"
          },
          "removed": {
            "items": {
              "$ref": "#/components/schemas/Entity"
            },
            "type": "array"
          }
        }
      },
      "SharedAndModelSpecificSchemas": {
        "description": "Shared and Model Specific configs.",
        "properties": {
          "modelSpecificSchema": {
            "$ref": "#/components/schemas/JSONSchema"
          },
          "sharedSchema": {
            "$ref": "#/components/schemas/JSONSchema"
          }
        },
        "required": [
          "sharedSchema",
          "modelSpecificSchema"
        ],
        "type": "object"
      },
      "SharedDatasetRwEntryV1": {
        "description": "An object describing the shared datasets imported into a project",
        "properties": {
          "projectId": {
            "description": "Id of the project being described.",
            "example": "62313ce67a0af0281c01a6a5",
            "type": "string"
          },
          "sharedDatasetIds": {
            "description": "List of dataset ids shared with this project",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "projectId",
          "sharedDatasetIds"
        ],
        "type": "object"
      },
      "SharedDatasetsEnvelopeV1": {
        "properties": {
          "dataset": {
            "$ref": "#/components/schemas/SharedDatasetRwEntryV1"
          },
          "metadata": {
            "$ref": "#/components/schemas/MetadataV1"
          }
        },
        "required": [
          "dataset",
          "metadata"
        ],
        "type": "object"
      },
      "SnapshotDetailsV1": {
        "properties": {
          "createdAt": {
            "description": "When the snapshot was created",
            "example": "2022-03-12T02:13:44.467Z",
            "format": "date-time",
            "type": "string"
          },
          "creatorId": {
            "description": "ID of the user who created this snapshot",
            "type": "string"
          },
          "datasetId": {
            "description": "ID of the dataset this snapshot belongs to",
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "description": "ID of this snapshot",
            "type": "string"
          },
          "lastMounted": {
            "description": "When the snapshot was last mounted",
            "format": "date-time",
            "type": "string"
          },
          "status": {
            "enum": [
              "active",
              "markForDeletion",
              "deletionInProgress",
              "deleted",
              "pending",
              "failed",
              "copying"
            ],
            "type": "string"
          }
        },
        "required": [
          "id",
          "datasetId",
          "createdAt",
          "status"
        ],
        "type": "object"
      },
      "SnapshotEnvelopeV1": {
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/MetadataV1"
          },
          "snapshot": {
            "$ref": "#/components/schemas/SnapshotDetailsV1"
          }
        },
        "required": [
          "snapshot",
          "metadata"
        ],
        "type": "object"
      },
      "StageTimesV1": {
        "properties": {
          "completedTime": {
            "description": "When the job completed",
            "example": "2022-03-12T02:16:43.127Z",
            "format": "date-time",
            "type": "string"
          },
          "startTime": {
            "description": "When the job started",
            "example": "2022-03-12T02:15:44.848Z",
            "format": "date-time",
            "type": "string"
          },
          "submissionTime": {
            "description": "When the start job request was submitted.",
            "example": "2022-03-12T02:13:44.467Z",
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "submissionTime"
        ],
        "type": "object"
      },
      "StreamedResponseDTO": {
        "description": "An internal DTO to stream responses. Should not be referenced by public OAS files directly.",
        "properties": {
          "contentType": {
            "type": "string"
          },
          "extraHeaders": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          },
          "size": {
            "format": "int64",
            "type": "integer"
          },
          "source": {
            "format": "binary",
            "type": "string",
            "x-domino-binary-stream": true
          }
        },
        "required": [
          "source",
          "size",
          "extraHeaders"
        ],
        "type": "object",
        "x-domino-binary-stream": true
      },
      "StringArray": {
        "items": {
          "type": "string"
        },
        "minItems": 1,
        "type": "array",
        "uniqueItems": true
      },
      "StringStringMap": {
        "additionalProperties": {
          "type": "string"
        },
        "type": "object"
      },
      "TagEnvelopeV1": {
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/MetadataV1"
          },
          "tag": {
            "$ref": "#/components/schemas/TagV1"
          }
        },
        "required": [
          "tag",
          "metadata"
        ],
        "type": "object"
      },
      "TagToAddV1": {
        "properties": {
          "projectId": {
            "description": "Id of project the resource belongs to.",
            "example": "62313ce67a0af0281c01a6a5",
            "type": "string"
          },
          "tagName": {
            "description": "Name of tag to add to a job.",
            "example": "MyTag",
            "type": "string"
          }
        },
        "required": [
          "tagName",
          "projectId"
        ],
        "type": "object"
      },
      "TagV1": {
        "properties": {
          "createdAt": {
            "description": "When the tag was created.",
            "example": "2022-03-15T21:48:36.586Z",
            "format": "date-time",
            "type": "string"
          },
          "creatorId": {
            "description": "Id of the user who created the tag.",
            "example": "6231342b7a0af0281c01a69e",
            "type": "string"
          },
          "id": {
            "description": "Id of the tag.",
            "example": "623133e87a0af0281c01a69d",
            "type": "string"
          },
          "name": {
            "description": "Name of the tag.",
            "example": "KMeansTest",
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "creatorId",
          "createdAt"
        ],
        "type": "object"
      },
      "Target": {
        "properties": {
          "entity": {
            "$ref": "#/components/schemas/Entity"
          },
          "fieldChanges": {
            "items": {
              "$ref": "#/components/schemas/PolymorphicFieldStateChange"
            },
            "type": "array"
          }
        },
        "required": [
          "entity",
          "fieldChanges"
        ]
      },
      "TargetList": {
        "items": {
          "$ref": "#/components/schemas/Target"
        },
        "type": "array"
      },
      "TargetRangeV1": {
        "properties": {
          "condition": {
            "description": "Condition to evaluate metric value against upperLimit/lowerLimit",
            "enum": [
              "lessThan",
              "lessThanEqual",
              "greaterThan",
              "greaterThanEqual",
              "between"
            ],
            "type": "string"
          },
          "lowerLimit": {
            "description": "Lower limit in the target range for a metric; lowerLimit, upperLimit, or both must be provided",
            "type": "number"
          },
          "upperLimit": {
            "description": "Upper limit in the target range for a metric; lowerLimit, upperLimit, or both must be provided",
            "type": "number"
          }
        },
        "required": [
          "condition"
        ],
        "type": "object"
      },
      "TemplateBackingGitCodeSpec": {
        "properties": {
          "credentialId": {
            "pattern": "^[0-9a-f]{24}$",
            "type": "string"
          },
          "repoName": {
            "type": "string"
          },
          "repoOwnerName": {
            "type": "string"
          },
          "visibility": {
            "$ref": "#/components/schemas/ProviderRepoVisibilityV1"
          },
          "writeType": {
            "$ref": "#/components/schemas/WriteTypeV1"
          }
        },
        "required": [
          "credentialId",
          "repoName",
          "repoOwnerName"
        ],
        "type": "object"
      },
      "TokenPaginatedMetadataV1": {
        "allOf": [
          {
            "$ref": "#/components/schemas/MetadataV1"
          },
          {
            "$ref": "#/components/schemas/TokenPaginationV1"
          }
        ],
        "required": [
          "pagination",
          "requestId",
          "notices"
        ]
      },
      "TokenPaginationV1": {
        "properties": {
          "nextPageToken": {
            "description": "Pagination token to request the next page of objects",
            "type": "string"
          }
        },
        "type": "object"
      },
      "UpdateCustomerTemplate": {
        "properties": {
          "collaborators": {
            "description": "The updated list of collaborators for the template. Will overwrite the existing list.",
            "items": {
              "$ref": "#/components/schemas/ProjectTemplateCollaborator"
            },
            "type": "array"
          },
          "description": {
            "description": "The new description for the template",
            "type": "string"
          },
          "isCompanyOfficial": {
            "description": "Whether or not to mark this template as official, indicating that it has been vetted by your company.",
            "type": "boolean"
          },
          "name": {
            "description": "The new name for the template",
            "type": "string"
          },
          "tagNames": {
            "description": "The updated list of tags for the template. Will overwrite the existing list.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "visibility": {
            "description": "The new visibility for the template",
            "enum": [
              "private",
              "all_non_anonymous_users"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "UpdateEnvironmentRevisionV1": {
        "properties": {
          "isRestricted": {
            "description": "Boolean determining if revision is restricted",
            "type": "boolean"
          }
        },
        "required": [
          "isRestricted"
        ],
        "type": "object"
      },
      "UpdatedDeploymentTarget": {
        "description": "Deployment Target update request",
        "properties": {
          "configuration": {
            "description": "Configuration of this Deployment Target following the schema in its Deployment Target Type",
            "example": {
              "credentials": {
                "account": 1234,
                "credentials": "AWS_ACCESS_KEY_ID: 1234\nAWS_SECRET_ACCESS_KEY: itsasecret\n"
              },
              "sagemaker": {
                "ecrUrl": "anURL",
                "region": "us-east-1",
                "sagemakerS3ModelsBucket": "domino-sagemaker"
              }
            },
            "type": "object"
          },
          "isGloballyAccessible": {
            "description": "Whether or not the Deployment Target is globally accessible",
            "type": "boolean"
          },
          "name": {
            "description": "Internal name for the Deployment Target",
            "example": "Production",
            "type": "string"
          },
          "resourceConfigurations": {
            "description": "Updated Resource Configurations - updates existing resource configurations for values with specified id fields - creates new resource configurations for values without specified id fields - deletes existing resource configurations not specified in the array",
            "items": {
              "$ref": "#/components/schemas/NewOrUpdatedResourceConfiguration"
            },
            "type": "array"
          },
          "userAndOrganizationIds": {
            "description": "User and Organization IDs that can use this Deployment Target",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "UpdatedEndpointPermissionsV1": {
        "properties": {
          "isEveryoneAllowed": {
            "description": "If the endpoint is accessible by everyone",
            "type": "boolean"
          },
          "userIds": {
            "description": "User IDs that can access this endpoint",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "UpdatedEndpointV1": {
        "properties": {
          "endpointName": {
            "description": "Valid name of the endpoint",
            "example": "completions-1",
            "type": "string"
          },
          "endpointType": {
            "description": "Type of the endpoint",
            "example": "llm/v1/completions",
            "type": "string"
          },
          "modelConfig": {
            "$ref": "#/components/schemas/ModelConfigV1"
          },
          "modelName": {
            "description": "Name of the model",
            "example": "gpt-3.5",
            "type": "string"
          },
          "modelProvider": {
            "description": "Provider of the model",
            "example": "openai",
            "type": "string"
          }
        },
        "type": "object"
      },
      "UpdatedModelDeployment": {
        "description": "Model Deployment",
        "properties": {
          "collaborators": {
            "description": "List of collaborators, if any",
            "items": {
              "$ref": "#/components/schemas/ModelDeploymentCollaborator"
            },
            "type": "array"
          },
          "configuration": {
            "$ref": "#/components/schemas/ModelDeploymentConfiguration"
          },
          "deploymentTargetId": {
            "description": "Id of the deployment target",
            "type": "string"
          },
          "description": {
            "example": "This endpoint is designed to provide businesses with insights into their customer retention patterns.",
            "type": "string"
          },
          "isGloballyAccessible": {
            "description": "Whether the Model Deployment is viewable by Domino Users who are not collaborators.",
            "type": "boolean"
          },
          "models": {
            "description": "A list of models associated with this Model Deployment.",
            "items": {
              "$ref": "#/components/schemas/NewOrUpdatedModelDetail"
            },
            "type": "array"
          },
          "name": {
            "description": "The Model Deployment name.",
            "example": "Income Classifier Deployment",
            "type": "string"
          },
          "resourceConfigurationId": {
            "description": "Id of the resource configuration",
            "type": "string"
          }
        },
        "type": "object"
      },
      "UpdatedResourceConfiguration": {
        "description": "Resource Configuration update request",
        "properties": {
          "configuration": {
            "description": "Configuration of this Resource Configuration following the schema in its Deployment Target Type",
            "example": {
              "instance_type": "m5.large"
            },
            "type": "object"
          },
          "description": {
            "description": "Description for the Resource Configuration",
            "type": "string"
          },
          "id": {
            "description": "UUID for the Resource Configuration",
            "type": "string"
          },
          "name": {
            "description": "Internal name for the Resource Configuration",
            "example": "gpu_large",
            "type": "string"
          }
        },
        "required": [
          "id"
        ],
        "type": "object"
      },
      "UserEnvelopeV1": {
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/MetadataV1"
          },
          "user": {
            "$ref": "#/components/schemas/UserV1"
          }
        },
        "required": [
          "user",
          "metadata"
        ],
        "type": "object"
      },
      "UserV1": {
        "properties": {
          "avatarUrl": {
            "type": "string"
          },
          "companyName": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "fullName": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "phoneNumber": {
            "type": "string"
          },
          "userName": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "firstName",
          "lastName",
          "fullName",
          "userName",
          "avatarUrl"
        ],
        "type": "object"
      },
      "UsingList": {
        "items": {
          "$ref": "#/components/schemas/Entity"
        },
        "type": "array"
      },
      "WorkspaceSessionCreatedEnvelopeV1": {
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/MetadataV1"
          },
          "workspaceSession": {
            "$ref": "#/components/schemas/WorkspaceSessionCreatedV1"
          }
        },
        "required": [
          "workspaceSession",
          "metadata"
        ],
        "type": "object"
      },
      "WorkspaceSessionCreatedV1": {
        "properties": {
          "executionId": {
            "description": "ID of the underlying execution serving the workspace session.",
            "type": "string"
          },
          "id": {
            "description": "ID of the newly created workspace session.",
            "type": "string"
          }
        },
        "required": [
          "id",
          "executionId"
        ],
        "type": "object"
      },
      "WriteTypeV1": {
        "description": "The kind of repo to use as the code repo in a template",
        "enum": [
          "Create",
          "Import",
          "ForceImport"
        ],
        "type": "string"
      }
    },
    "securitySchemes": {
      "DominoApiKey": {
        "in": "header",
        "name": "X-Domino-Api-Key",
        "type": "apiKey"
      },
      "BearerAuthentication": {
        "in": "header",
        "name": "Authorization",
        "type": "apiKey"
      }
    }
  }
}