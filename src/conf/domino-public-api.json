{
  "components": {
    "responses": {
      "400": {
        "content": {
          "application/json": {
            "schema": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/FailureEnvelopeV1"
                },
                {
                  "$ref": "#/components/schemas/InvalidBodyEnvelopeV1"
                }
              ]
            }
          }
        },
        "description": "The server could not understand the request due to malformed syntax"
      },
      "401": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/FailureEnvelopeV1"
            }
          }
        },
        "description": "The current user cannot perform this operation because they are not logged in"
      },
      "403": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/FailureEnvelopeV1"
            }
          }
        },
        "description": "The current user is not authorized to perform this operation"
      },
      "404": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/FailureEnvelopeV1"
            }
          }
        },
        "description": "The server could not find the requested resource"
      },
      "413": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/FailureEnvelopeV1"
            }
          }
        },
        "description": "Request entity is larger than limits defined by server."
      },
      "422": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/FailureEnvelopeV1"
            }
          }
        },
        "description": "The server understands the content type of the request entity, and the syntax of the request entity is correct, but it was unable to process the contained instructions."
      },
      "429": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/FailureEnvelopeV1"
            }
          }
        },
        "description": "The user has sent too many requests in a given amount of time."
      },
      "500": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/FailureEnvelopeV1"
            }
          }
        },
        "description": "An internal error prevented the server from performing this action"
      }
    },
    "schemas": {
      "AsyncPredictionEnvelopeV1": {
        "properties": {
          "asyncPredictionId": {
            "description": "Id of the Async Prediction",
            "type": "string"
          },
          "errors": {
            "description": "Errors that caused the prediction to fail",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "result": {
            "description": "The prediction result",
            "type": "object"
          },
          "status": {
            "description": "Status of the Async Prediction Request (Pending, Processing, Succeeded, Failed)",
            "type": "string"
          }
        },
        "required": [
          "asyncPredictionId",
          "status"
        ],
        "type": "object"
      },
      "AsyncPredictionRequestEnvelopeV1": {
        "properties": {
          "asyncPredictionId": {
            "description": "Id of the created Async Prediction",
            "type": "string"
          }
        },
        "required": [
          "asyncPredictionId"
        ],
        "type": "object"
      },
      "AthenaBillingConfigsV1": {
        "properties": {
          "athenaBucketName": {
            "type": "string"
          },
          "athenaDatabase": {
            "type": "string"
          },
          "athenaRegion": {
            "type": "string"
          },
          "athenaTable": {
            "type": "string"
          },
          "projectID": {
            "type": "string"
          },
          "serviceKeyName": {
            "type": "string"
          },
          "serviceKeySecret": {
            "type": "string"
          }
        },
        "required": [
          "athenaRegion",
          "athenaDatabase",
          "athenaTable",
          "athenaBucketName",
          "projectID",
          "serviceKeyName",
          "serviceKeySecret"
        ],
        "type": "object"
      },
      "ClusterTypeV1": {
        "description": "Type of compute cluster",
        "enum": [
          "dask",
          "mpi",
          "ray",
          "spark"
        ],
        "type": "string"
      },
      "CommitDetailsV1": {
        "properties": {
          "inputCommitId": {
            "description": "CommitId at execution start.",
            "example": "f1dafe322c7d4a6720f652c330fe33b014720e46",
            "type": "string"
          },
          "outputCommitId": {
            "description": "CommitId at execution end. May be empty if execution caused no new commits.",
            "example": "e1f06e5f64cfc26c2b70e405f70b7c8300d8a4ed",
            "type": "string"
          }
        },
        "required": [
          "inputCommitId"
        ],
        "type": "object"
      },
      "ComputeClusterConfigV1": {
        "properties": {
          "clusterType": {
            "$ref": "#/components/schemas/ClusterTypeV1"
          },
          "computeEnvironmentId": {
            "description": "Id of compute environment to use.",
            "example": "623139857a0af0281c01a6a4",
            "type": "string"
          },
          "computeEnvironmentRevisionSpec": {
            "$ref": "#/components/schemas/EnvironmentRevisionSpecV1"
          },
          "masterHardwareTierId": {
            "description": "Hardware tier to use for master node in compute cluster.",
            "example": "medium-k8s",
            "type": "string"
          },
          "maxWorkerCount": {
            "description": "Max number of workers to use in compute cluster. Enables auto-scaling for cluster when present.",
            "example": 10,
            "type": "integer"
          },
          "workerCount": {
            "description": "Number of workers to use in compute cluster. Used as min number of workers in maxWorkerCount is set.",
            "example": 4,
            "type": "integer"
          },
          "workerHardwareTier": {
            "description": "Hardware tier to use for workers in compute cluster.",
            "example": "large-k8s",
            "type": "string"
          },
          "workerStorageMB": {
            "description": "Disk size in MB for each worker.",
            "example": 5,
            "type": "number"
          }
        },
        "required": [
          "clusterType",
          "computeEnvironmentId",
          "workerCount",
          "workerHardwareTier"
        ],
        "type": "object"
      },
      "CopyProjectSpecBeta": {
        "properties": {
          "copyDatasets": {
            "description": "Whether to copy the Project's datasets or not",
            "type": "boolean"
          },
          "gitCodeRepoSpec": {
            "$ref": "#/components/schemas/GitCodeRepoSpecBeta"
          },
          "importedGitReposCredentialId": {
            "description": "The Domino ID of the PAT credential, which will be used to access the Imported Git Repos on the new project.",
            "type": "string"
          },
          "name": {
            "description": "The name of the new Domino Project.",
            "type": "string"
          },
          "ownerId": {
            "description": "The Domino ID of owner of the copied project.",
            "type": "string"
          },
          "visibility": {
            "$ref": "#/components/schemas/ProjectVisibilityV1",
            "description": "The visibility of the new Project."
          }
        },
        "required": [
          "copyDatasets"
        ],
        "type": "object"
      },
      "CopyProjectSpecV1": {
        "properties": {
          "copyDatasets": {
            "description": "Whether to copy the Project's datasets or not",
            "type": "boolean"
          },
          "gitCodeRepoSpec": {
            "$ref": "#/components/schemas/GitCodeRepoSpecV1"
          },
          "importedGitReposCredentialId": {
            "description": "The Domino ID of the PAT credential, which will be used to access the Imported Git Repos on the new project.",
            "type": "string"
          },
          "name": {
            "description": "The name of the new Domino Project.",
            "type": "string"
          },
          "ownerId": {
            "description": "The Domino ID of owner of the copied project.",
            "type": "string"
          },
          "visibility": {
            "$ref": "#/components/schemas/ProjectVisibilityV1",
            "description": "The visibility of the new Project."
          }
        },
        "required": [
          "copyDatasets"
        ],
        "type": "object"
      },
      "CostAllocationEnvelopeV1": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/CostAllocationV1"
            },
            "type": "array"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "CostAllocationV1": {
        "properties": {
          "cpuCoreHours": {
            "format": "double",
            "type": "integer"
          },
          "cpuCoreRequestAverage": {
            "format": "double",
            "type": "integer"
          },
          "cpuCoreUsageAverage": {
            "format": "double",
            "type": "integer"
          },
          "cpuCores": {
            "format": "double",
            "type": "integer"
          },
          "cpuCost": {
            "format": "double",
            "type": "integer"
          },
          "cpuCostAdjustment": {
            "format": "double",
            "type": "integer"
          },
          "cpuEfficincy": {
            "format": "double",
            "type": "integer"
          },
          "discount": {
            "format": "double",
            "type": "integer"
          },
          "gpuCount": {
            "format": "double",
            "type": "integer"
          },
          "gpuHours": {
            "format": "double",
            "type": "integer"
          },
          "gpucost": {
            "format": "double",
            "type": "integer"
          },
          "gpucostAdjustment": {
            "format": "double",
            "type": "integer"
          },
          "labels": {
            "properties": {
              "organization_id": {
                "type": "string"
              },
              "organization_name": {
                "type": "string"
              },
              "project_id": {
                "type": "string"
              },
              "project_name": {
                "type": "string"
              },
              "project_owner_id": {
                "type": "string"
              },
              "project_owner_name": {
                "type": "string"
              },
              "starting_user_id": {
                "type": "string"
              },
              "starting_user_name": {
                "type": "string"
              },
              "workload_id": {
                "type": "string"
              },
              "workload_type": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "loadBalancerCost": {
            "format": "double",
            "type": "integer"
          },
          "loadBalancerCostAdjustment": {
            "format": "double",
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "nodeType": {
            "type": "string"
          },
          "pv": {
            "properties": {
              "pvByteHours": {
                "format": "double",
                "type": "integer"
              },
              "pvBytes": {
                "format": "double",
                "type": "integer"
              },
              "pvCost": {
                "format": "double",
                "type": "integer"
              },
              "pvCostAdjustment": {
                "format": "double",
                "type": "integer"
              },
              "pvs": {
                "additionalProperties": {
                  "properties": {
                    "byteHours": {
                      "format": "double",
                      "type": "integer"
                    },
                    "cost": {
                      "format": "double",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                },
                "type": "object"
              }
            },
            "type": "object"
          },
          "ramCost": {
            "format": "double",
            "type": "integer"
          },
          "ramCostAdjustment": {
            "format": "double",
            "type": "integer"
          },
          "totalCost": {
            "format": "double",
            "type": "integer"
          },
          "window": {
            "properties": {
              "end": {
                "type": "string"
              },
              "minutes": {
                "format": "double",
                "type": "integer"
              },
              "start": {
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "CostAssetsEnvelopeV1": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/CostAssetsV1"
            },
            "type": "array"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "CostAssetsV1": {
        "properties": {
          "cpuCost": {
            "format": "double",
            "type": "integer"
          },
          "gpuCost": {
            "format": "double",
            "type": "integer"
          },
          "labels": {
            "properties": {
              "instance": {
                "type": "string"
              },
              "job": {
                "type": "string"
              },
              "label_dominodatalab_com_domino_node": {
                "type": "string"
              },
              "label_dominodatalab_com_node_pool": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "name": {
            "type": "string"
          },
          "properties": {
            "properties": {
              "category": {
                "type": "string"
              },
              "cluster": {
                "type": "string"
              },
              "provider": {
                "type": "string"
              },
              "providerId": {
                "type": "string"
              },
              "service": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "ramCost": {
            "format": "double",
            "type": "integer"
          },
          "totalCost": {
            "format": "double",
            "type": "integer"
          },
          "type": {
            "type": "string"
          },
          "window": {
            "$ref": "#/components/schemas/CostAssetsV1Window"
          }
        },
        "type": "object"
      },
      "CostAssetsV1Window": {
        "properties": {
          "end": {
            "type": "string"
          },
          "minutes": {
            "format": "double",
            "type": "integer"
          },
          "start": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "DataSourceAuditDataV1": {
        "properties": {
          "dataSourceId": {
            "description": "ID of the datasource",
            "type": "string"
          },
          "dataSourceName": {
            "description": "name of the datasource",
            "type": "string"
          },
          "dataSourceType": {
            "description": "type of the datasource",
            "type": "string"
          },
          "eventKind": {
            "$ref": "#/components/schemas/DataSourceAuditEventKindV1"
          },
          "metadata": {
            "$ref": "#/components/schemas/DataSourceAuditMetadataV1"
          },
          "performedBy": {
            "description": "username of user who performed the event",
            "type": "string"
          },
          "timestamp": {
            "description": "timestamp of when event was performed",
            "example": "1996-07-19T03:13:44.467Z",
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "dataSourceId",
          "dataSourceName",
          "dataSourceType",
          "eventKind",
          "metadata",
          "performedBy",
          "timestamp"
        ],
        "type": "object"
      },
      "DataSourceAuditEventKindV1": {
        "description": "Kinds of datasource audit events",
        "enum": [
          "AccessDataSource",
          "CreateDataSource",
          "DataSourceAssociatedToProject",
          "DataSourceDissociatedFromProject",
          "DataSourceChangeOfOwnership",
          "DataSourceChangeOfPermissions",
          "DeleteDataSource"
        ],
        "type": "string"
      },
      "DataSourceAuditMetadataV1": {
        "additionalProperties": {
          "type": "string"
        },
        "description": "A map of string -> string",
        "example": {
          "foo": "bar"
        },
        "type": "object"
      },
      "DatasetInfoV1": {
        "properties": {
          "createdAt": {
            "description": "When the dataset was created",
            "example": "2022-03-12T02:13:44.467Z",
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "description": "A description of the dataset",
            "type": "string"
          },
          "id": {
            "description": "Dataset ID",
            "example": "62313ce67a0af0281c01a6a5",
            "type": "string"
          },
          "name": {
            "description": "Name of the dataset",
            "example": "My Dataset",
            "type": "string"
          },
          "projectId": {
            "description": "ID of the project this dataset belongs to",
            "example": "62313ce67a0af0281c01a6a5",
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "createdAt"
        ],
        "type": "object"
      },
      "DatasetMountV1": {
        "properties": {
          "containerPath": {
            "description": "Location dataset is mounted at in the Job.",
            "example": "/domino/datasets/local/quick-start",
            "type": "string"
          },
          "datasetName": {
            "description": "Name of dataset to be mounted.",
            "example": "MyDataset",
            "type": "string"
          },
          "id": {
            "description": "Id of dataset to be mounted.",
            "example": "623137f57a0af0281c01a6a0",
            "type": "string"
          },
          "isInput": {
            "description": "Whether a dataset was an input to be used in the execution, or an output created by the execution.",
            "example": true,
            "type": "boolean"
          },
          "projectId": {
            "description": "Id of project the dataset belongs to.",
            "example": "6231383c7a0af0281c01a6a1",
            "type": "string"
          },
          "snapshotId": {
            "description": "Id of snapshot to mount for this dataset.",
            "example": "623138807a0af0281c01a6a2",
            "type": "string"
          },
          "snapshotVersion": {
            "description": "Version of dataset snapshot to mound.",
            "example": 2,
            "type": "integer"
          }
        },
        "required": [
          "id",
          "datasetName",
          "projectId",
          "isInput"
        ],
        "type": "object"
      },
      "DatasetNotCopiedV1": {
        "properties": {
          "datasetInfo": {
            "$ref": "#/components/schemas/DatasetInfoV1",
            "description": "dataset not copied"
          },
          "errorMessage": {
            "description": "error message explaining why dataset wasn't copied",
            "type": "string"
          }
        },
        "required": [
          "datasetInfo",
          "errorMessage"
        ],
        "type": "object"
      },
      "DatasetRwDetailsV1": {
        "properties": {
          "createdAt": {
            "description": "When the dataset was created",
            "example": "2022-03-12T02:13:44.467Z",
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "description": "A description of the dataset",
            "type": "string"
          },
          "id": {
            "description": "ID of the dataset",
            "example": "62313ce67a0af0281c01a6a5",
            "type": "string"
          },
          "name": {
            "description": "Name of the dataset",
            "example": "My Dataset",
            "type": "string"
          },
          "projectId": {
            "description": "ID of the project this dataset belongs to",
            "example": "62313ce67a0af0281c01a6a5",
            "type": "string"
          },
          "snapshotIds": {
            "description": "List of snapshot IDs belonging to this dataset",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "tags": {
            "$ref": "#/components/schemas/DatasetRwTagsV1"
          }
        },
        "required": [
          "id",
          "name",
          "createdAt",
          "snapshotIds",
          "tags"
        ],
        "type": "object"
      },
      "DatasetRwEnvelopeV1": {
        "properties": {
          "dataset": {
            "$ref": "#/components/schemas/DatasetRwDetailsV1"
          },
          "metadata": {
            "$ref": "#/components/schemas/MetadataV1"
          }
        },
        "required": [
          "dataset",
          "metadata"
        ],
        "type": "object"
      },
      "DatasetRwGrantDetailsEnvelopeV1": {
        "properties": {
          "grantDetails": {
            "items": {
              "$ref": "#/components/schemas/DatasetRwGrantDetailsV1"
            },
            "type": "array"
          },
          "metadata": {
            "$ref": "#/components/schemas/MetadataV1"
          }
        },
        "required": [
          "grantDetails",
          "metadata"
        ],
        "type": "object"
      },
      "DatasetRwGrantDetailsV1": {
        "properties": {
          "isOrganization": {
            "description": "If target id is an organization",
            "type": "boolean"
          },
          "targetId": {
            "description": "ID of the user within the grant",
            "type": "string"
          },
          "targetName": {
            "description": "Username of user within the grant",
            "type": "string"
          },
          "targetRole": {
            "$ref": "#/components/schemas/DatasetRwRoleV1"
          }
        },
        "required": [
          "targetId",
          "targetName",
          "targetRole",
          "isOrganization"
        ],
        "type": "object"
      },
      "DatasetRwGrantEnvelopeV1": {
        "properties": {
          "grants": {
            "items": {
              "$ref": "#/components/schemas/DatasetRwGrantV1"
            },
            "type": "array"
          },
          "metadata": {
            "$ref": "#/components/schemas/MetadataV1"
          }
        },
        "required": [
          "grants",
          "metadata"
        ],
        "type": "object"
      },
      "DatasetRwGrantV1": {
        "properties": {
          "targetId": {
            "description": "ID of the user within the grant",
            "type": "string"
          },
          "targetRole": {
            "$ref": "#/components/schemas/DatasetRwRoleV1"
          }
        },
        "required": [
          "targetId",
          "targetRole"
        ],
        "type": "object"
      },
      "DatasetRwInfoDtoV1": {
        "properties": {
          "dataset": {
            "$ref": "#/components/schemas/DatasetRwDetailsV1"
          },
          "projectInfo": {
            "$ref": "#/components/schemas/DatasetRwProjectInfoDtoV1"
          }
        },
        "required": [
          "dataset"
        ],
        "type": "object"
      },
      "DatasetRwMetadataV1": {
        "properties": {
          "description": {
            "description": "Description of the dataset",
            "type": "string"
          },
          "name": {
            "description": "Name of this dataset. The name must be unique in the same project",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DatasetRwPermissionV1": {
        "description": "Permission within a dataset",
        "enum": [
          "DeleteDatasetRwV2",
          "EditSecurityDatasetRwV2",
          "ListDatasetRwV2",
          "PerformDatasetRwActionsInProjectV2",
          "PermanentDeleteDatasetRwV2",
          "ReadDatasetRwV2",
          "UpdateDatasetRwV2",
          "PerformDatasetRwActionsAsAdminV2"
        ],
        "type": "string"
      },
      "DatasetRwProjectInfoDtoV1": {
        "properties": {
          "projectId": {
            "description": "ID of the project this dataset belongs to",
            "type": "string"
          },
          "projectName": {
            "description": "Name of the project this dataset belongs to",
            "type": "string"
          },
          "projectOwnerUsername": {
            "description": "Username of the project's owner",
            "type": "string"
          }
        },
        "required": [
          "projectId",
          "projectName",
          "projectOwnerUsername"
        ],
        "type": "object"
      },
      "DatasetRwRoleV1": {
        "description": "Role that the user will assume in the dataset. Note that organizations cannot be dataset Owners",
        "enum": [
          "DatasetRwOwner",
          "DatasetRwEditor",
          "DatasetRwReader"
        ],
        "type": "string"
      },
      "DatasetRwTagToAddV1": {
        "properties": {
          "snapshotId": {
            "description": "ID of a snapshot belonging to the dataset",
            "example": "62313ce67a0af0281c01a6a5",
            "type": "string"
          },
          "tagName": {
            "description": "Name of tag to add to a snapshot",
            "example": "MyTag",
            "type": "string"
          }
        },
        "required": [
          "tagName",
          "snapshotId"
        ],
        "type": "object"
      },
      "DatasetRwTagsV1": {
        "additionalProperties": {
          "type": "string"
        },
        "description": "A map of tagName -> snapshotId",
        "example": {
          "bar": "62313ce67a0af0281c01a6a5",
          "foo": "62313ce67a0af0281c01a6a5"
        },
        "type": "object"
      },
      "DatasetToAddV1": {
        "properties": {
          "datasetId": {
            "description": "ID of shared dataset to link with this project",
            "example": "62313ce67a0af0281c01a6a5",
            "type": "string"
          }
        },
        "required": [
          "datasetId"
        ],
        "type": "object"
      },
      "DeepCopyGitRepoSpecBeta": {
        "description": "Data which specifies what the copied repository will look like.",
        "properties": {
          "isPrivate": {
            "description": "Whether or not the new code repo should be private.",
            "type": "boolean"
          },
          "newRepoName": {
            "description": "The name of the new repository.",
            "type": "string"
          },
          "newRepoOwnerName": {
            "description": "The name of the user who will own the new repository in the git service provider.",
            "type": "string"
          }
        },
        "required": [
          "newRepoName",
          "newRepoOwnerName",
          "isPrivate"
        ],
        "type": "object"
      },
      "DeepCopyGitRepoSpecV1": {
        "description": "Data which specifies what the copied repository will look like.",
        "properties": {
          "newRepoName": {
            "description": "The name of the new repository.",
            "type": "string"
          },
          "newRepoOwnerName": {
            "description": "The name of the user who will own the new repository in the git service provider.",
            "type": "string"
          },
          "visibility": {
            "$ref": "#/components/schemas/ProviderRepoVisibilityV1"
          }
        },
        "required": [
          "newRepoName",
          "newRepoOwnerName",
          "visibility"
        ],
        "type": "object"
      },
      "DeleteEnvelopeV1": {
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/MetadataV1"
          },
          "success": {
            "type": "boolean"
          }
        },
        "required": [
          "success",
          "metadata"
        ],
        "type": "object"
      },
      "DominoStatsV1": {
        "properties": {
          "name": {
            "description": "The key name in the domino stats.",
            "example": "R-squared",
            "type": "string"
          },
          "value": {
            "description": "The value for the key in the domino stats",
            "example": 0.89,
            "type": "string"
          }
        },
        "required": [
          "name",
          "value"
        ],
        "type": "object"
      },
      "EnvironmentEnvelopeV1": {
        "properties": {
          "environment": {
            "$ref": "#/components/schemas/EnvironmentV1"
          },
          "metadata": {
            "$ref": "#/components/schemas/MetadataV1"
          }
        },
        "required": [
          "environment",
          "metadata"
        ],
        "type": "object"
      },
      "EnvironmentOwnerTypeV1": {
        "description": "Type of owner for an Environment. Environments can either be owned by a normal user or by an Organization.",
        "enum": [
          "individual",
          "organization"
        ],
        "type": "string"
      },
      "EnvironmentOwnerV1": {
        "properties": {
          "id": {
            "description": "Id of owner of an environment.",
            "example": "6231327c7a0af0281c01a69b",
            "type": "string"
          },
          "ownerType": {
            "$ref": "#/components/schemas/EnvironmentOwnerTypeV1"
          },
          "username": {
            "description": "Username of owner of an environment.",
            "example": "OrgOwner",
            "type": "string"
          }
        },
        "required": [
          "id",
          "username",
          "ownerType"
        ],
        "type": "object"
      },
      "EnvironmentRevisionBuildStatusV1": {
        "description": "Status of the build for an Environment Revision.",
        "enum": [
          "queued",
          "starting",
          "pulling",
          "building",
          "pushing",
          "succeeded",
          "failed",
          "killed"
        ],
        "type": "string"
      },
      "EnvironmentRevisionEnvelopeV1": {
        "properties": {
          "environmentRevision": {
            "$ref": "#/components/schemas/EnvironmentRevisionV1"
          },
          "metadata": {
            "$ref": "#/components/schemas/MetadataV1"
          }
        },
        "required": [
          "environmentRevision",
          "metadata"
        ],
        "type": "object"
      },
      "EnvironmentRevisionSpecV1": {
        "description": "Specification describing which environment revision to use. Defaults to \"ActiveRevision\"",
        "example": "ActiveRevision | LatestRevision | SomeRevision(623131577a0af0281c01a69a)",
        "type": "string"
      },
      "EnvironmentRevisionUpdateEnvelopeV1": {
        "properties": {
          "id": {
            "type": "string"
          }
        },
        "required": [
          "id"
        ],
        "type": "object"
      },
      "EnvironmentRevisionV1": {
        "properties": {
          "availableTools": {
            "items": {
              "$ref": "#/components/schemas/EnvironmentToolV1"
            },
            "type": "array"
          },
          "id": {
            "description": "Id of Environment Revision.",
            "example": "62313cfd7a0af0281c01a6a6",
            "type": "string"
          },
          "number": {
            "description": "Revision number, increasing sequentially with each revision.",
            "example": 4,
            "type": "integer"
          },
          "status": {
            "$ref": "#/components/schemas/EnvironmentRevisionBuildStatusV1"
          }
        },
        "required": [
          "id",
          "number",
          "availableTools"
        ],
        "type": "object"
      },
      "EnvironmentToolV1": {
        "properties": {
          "iconUrl": {
            "description": "Url to pull icon image from",
            "example": "/assets/images/workspace-logos/Jupyter.svg",
            "type": "string"
          },
          "name": {
            "description": "Name of environment tool",
            "example": "Jupyter",
            "type": "string"
          },
          "proxyConfig": {
            "$ref": "#/components/schemas/ProxyConfigV1"
          },
          "startScripts": {
            "items": {
              "description": "Scripts to run on workspace start.",
              "example": "echo hello",
              "type": "string"
            },
            "type": "array"
          },
          "supportedFileExtensions": {
            "items": {
              "description": "File extensions this tool supports.",
              "example": ".ipynb",
              "type": "string"
            },
            "type": "array"
          },
          "title": {
            "description": "Title of environment tool.",
            "example": "Jupyter",
            "type": "string"
          }
        },
        "required": [
          "name",
          "title",
          "startScripts"
        ],
        "type": "object"
      },
      "EnvironmentV1": {
        "properties": {
          "activeRevisionTags": {
            "description": "The tags on the active revision for this environment",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "archived": {
            "description": "Whether the environment is archived",
            "example": false,
            "type": "boolean"
          },
          "id": {
            "description": "Id of environment",
            "example": "623132867a0af0281c01a69c",
            "type": "string"
          },
          "internalTags": {
            "description": "The internal tags specifying if this environment is restricted",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "isCurated": {
            "description": "Whether or not the environment is curated for a deployment",
            "type": "boolean"
          },
          "latestRevision": {
            "$ref": "#/components/schemas/EnvironmentRevisionV1"
          },
          "name": {
            "example": "MyOrg",
            "type": "string"
          },
          "owner": {
            "$ref": "#/components/schemas/EnvironmentOwnerV1"
          },
          "restrictedRevision": {
            "$ref": "#/components/schemas/EnvironmentRevisionV1"
          },
          "selectedRevision": {
            "$ref": "#/components/schemas/EnvironmentRevisionV1"
          },
          "supportedClusters": {
            "items": {
              "$ref": "#/components/schemas/ClusterTypeV1"
            },
            "type": "array"
          },
          "visibility": {
            "$ref": "#/components/schemas/EnvironmentVisibilityV1"
          }
        },
        "required": [
          "id",
          "name",
          "visibility",
          "supportedClusters",
          "archived"
        ],
        "type": "object"
      },
      "EnvironmentVariableV1": {
        "description": "Key-value pair that defines an environment variable name and value",
        "properties": {
          "key": {
            "example": "USERNAME",
            "type": "string"
          },
          "value": {
            "example": "my_name",
            "type": "string"
          }
        },
        "required": [
          "key",
          "value"
        ],
        "type": "object"
      },
      "EnvironmentVisibilityV1": {
        "description": "Visiblity of an environment. Private Environments are only visible to the creating user, whereas Organization owned Environments can be seen by all Org members.",
        "enum": [
          "global",
          "private",
          "organization"
        ],
        "type": "string"
      },
      "ExternalVolumeMountV1": {
        "properties": {
          "mountPath": {
            "description": "Path to mount the external volume at.",
            "example": "/path/to/my/volume",
            "type": "string"
          },
          "name": {
            "description": "Name of external volume to mount.",
            "example": "MyExternalVolume",
            "type": "string"
          },
          "readOnly": {
            "description": "Whether to mount the volume as read only.",
            "example": false,
            "type": "boolean"
          },
          "subPath": {
            "description": "Path within the external volume to mount. The entire volume will be mounted if not specified.",
            "example": "/mypath",
            "type": "string"
          }
        },
        "required": [
          "name",
          "mountPath",
          "readOnly"
        ],
        "type": "object"
      },
      "FailureEnvelopeV1": {
        "properties": {
          "errors": {
            "description": "Errors that caused a request to fail",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "requestId": {
            "description": "Id used to correlate a request with server actions.",
            "example": "bbd78579-93c4-45ee-a983-0d5c8da6d5b1",
            "type": "string"
          }
        },
        "required": [
          "requestId",
          "errors"
        ],
        "type": "object"
      },
      "GitCodeRepoSpecBeta": {
        "description": "Details needed in order to copy the code repository of a Git-backed project.",
        "properties": {
          "credentialId": {
            "description": "The Domino ID of the PAT credential, which will be used to copy and/or read from the code repository on the new project.",
            "type": "string"
          },
          "deepCopy": {
            "$ref": "#/components/schemas/DeepCopyGitRepoSpecBeta"
          },
          "referenceCopy": {
            "$ref": "#/components/schemas/ReferenceCopyGitRepoSpecV1"
          }
        },
        "required": [
          "credentialId"
        ],
        "type": "object"
      },
      "GitCodeRepoSpecV1": {
        "description": "Details needed in order to copy the code repository of a Git-backed project.",
        "properties": {
          "credentialId": {
            "description": "The Domino ID of the PAT credential, which will be used to copy and/or read from the code repository on the new project.",
            "type": "string"
          },
          "deepCopy": {
            "$ref": "#/components/schemas/DeepCopyGitRepoSpecV1"
          },
          "referenceCopy": {
            "$ref": "#/components/schemas/ReferenceCopyGitRepoSpecV1"
          }
        },
        "required": [
          "credentialId"
        ],
        "type": "object"
      },
      "GitCredentialsAccessorV1": {
        "properties": {
          "domain": {
            "description": "The domain these credentials apply to",
            "example": "github.com",
            "type": "string"
          },
          "fingerprint": {
            "example": "ba:78:09:d8:4b:3b:09:9b:43:bf:9b:5a:34:f7:3f:28",
            "type": "string"
          },
          "gitServiceProvider": {
            "$ref": "#/components/schemas/GitServiceProviderV1"
          },
          "id": {
            "description": "Id for these git credentials",
            "type": "string"
          },
          "name": {
            "description": "Name for these git credentials",
            "example": "My creds",
            "type": "string"
          },
          "protocol": {
            "example": "https",
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "gitServiceProvider",
          "domain",
          "fingerprint",
          "protocol"
        ],
        "type": "object"
      },
      "GitRefV1": {
        "properties": {
          "refType": {
            "description": "The type of git reference being used.",
            "example": "head | commitId | tags | branches",
            "type": "string"
          },
          "value": {
            "description": "The value of the git reference. Only necessary for relevant git ref types.",
            "example": "my-test-branch",
            "type": "string"
          }
        },
        "required": [
          "refType"
        ],
        "type": "object"
      },
      "GitReferenceTypeV1": {
        "enum": [
          "head",
          "branch",
          "tag",
          "commit"
        ],
        "type": "string"
      },
      "GitServiceProviderV1": {
        "description": "Git service provider",
        "enum": [
          "bitbucket",
          "bitbucketServer",
          "github",
          "githubEnterprise",
          "gitLab",
          "gitLabEnterprise",
          "unknown"
        ],
        "type": "string"
      },
      "GoalEnvelopeV1": {
        "properties": {
          "goal": {
            "$ref": "#/components/schemas/LinkedGoalV1"
          },
          "metadata": {
            "$ref": "#/components/schemas/MetadataV1"
          }
        },
        "required": [
          "goal",
          "metadata"
        ],
        "type": "object"
      },
      "GoalToLinkV1": {
        "properties": {
          "goalId": {
            "description": "Id of Goal to link to Job.",
            "example": "62313cfd7a0af0281c01a6a6",
            "type": "string"
          },
          "projectId": {
            "description": "Id of project resources belong to.",
            "example": "62313d377a0af0281c01a6a8",
            "type": "string"
          }
        },
        "required": [
          "goalId",
          "projectId"
        ],
        "type": "object"
      },
      "HealthCheck": {
        "properties": {
          "commit": {
            "type": "string"
          },
          "kubecostStatus": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "version": {
            "type": "string"
          }
        },
        "required": [
          "status",
          "version"
        ],
        "type": "object"
      },
      "InvalidBodyEnvelopeV1": {
        "properties": {
          "message": {
            "description": "Error message when request is missing a required field and therefore cannot be handled.",
            "type": "string"
          }
        },
        "required": [
          "message"
        ],
        "type": "object"
      },
      "JobDetailsV1": {
        "properties": {
          "commentsCount": {
            "type": "integer"
          },
          "commitDetails": {
            "$ref": "#/components/schemas/CommitDetailsV1"
          },
          "computeCluster": {
            "$ref": "#/components/schemas/ComputeClusterConfigV1"
          },
          "datasetMounts": {
            "items": {
              "$ref": "#/components/schemas/DatasetMountV1"
            },
            "type": "array"
          },
          "dominoStats": {
            "items": {
              "$ref": "#/components/schemas/DominoStatsV1"
            },
            "type": "array"
          },
          "externalVolumeMounts": {
            "items": {
              "$ref": "#/components/schemas/ExternalVolumeMountV1"
            },
            "type": "array"
          },
          "gitRepos": {
            "items": {
              "$ref": "#/components/schemas/MountedGitRepoV1"
            },
            "type": "array"
          },
          "goalIds": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "id": {
            "type": "string"
          },
          "mainRepoGitRef": {
            "$ref": "#/components/schemas/GitRefV1"
          },
          "number": {
            "type": "integer"
          },
          "projects": {
            "items": {
              "$ref": "#/components/schemas/MountedProjectV1"
            },
            "type": "array"
          },
          "queuedJobStatusDetails": {
            "$ref": "#/components/schemas/QueuedJobStatusDetailsV1"
          },
          "runCommand": {
            "type": "string"
          },
          "runLauncherId": {
            "type": "string"
          },
          "stageTimes": {
            "$ref": "#/components/schemas/StageTimesV1"
          },
          "startedById": {
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/JobStatusV1"
          },
          "tags": {
            "items": {
              "$ref": "#/components/schemas/TagV1"
            },
            "type": "array"
          },
          "title": {
            "type": "string"
          },
          "usage": {
            "$ref": "#/components/schemas/JobUsageV1"
          }
        },
        "required": [
          "id",
          "number",
          "stageTimes",
          "tags",
          "runCommand",
          "commentsCount",
          "commitDetails",
          "dominoStats",
          "status",
          "projects",
          "gitRepos",
          "datasetMounts",
          "externalVolumeMounts",
          "goalIds"
        ],
        "type": "object"
      },
      "JobEnvelopeV1": {
        "properties": {
          "job": {
            "$ref": "#/components/schemas/JobDetailsV1"
          },
          "metadata": {
            "$ref": "#/components/schemas/MetadataV1"
          }
        },
        "required": [
          "job",
          "metadata"
        ],
        "type": "object"
      },
      "JobLogsV1": {
        "properties": {
          "helpLink": {
            "description": "Suggestion link for helpful resources.",
            "example": "Error. No such file or directory.",
            "type": "string"
          },
          "isComplete": {
            "description": "Whether all logs for the job have been retrieved.",
            "example": true,
            "type": "boolean"
          },
          "logContent": {
            "items": {
              "$ref": "#/components/schemas/LogContentV1"
            },
            "type": "array"
          },
          "problem": {
            "description": "Description of issue that occurred in a job.",
            "example": "python: can't open file 'invalid.py': [Errno 2] No such file or directory",
            "type": "string"
          }
        },
        "required": [
          "logContent",
          "isComplete"
        ],
        "type": "object"
      },
      "JobStatusV1": {
        "properties": {
          "executionStatus": {
            "description": "Current status of the job.",
            "example": "Succeeded",
            "type": "string"
          },
          "isArchived": {
            "description": "Whether a job is archived.",
            "example": false,
            "type": "boolean"
          },
          "isCompleted": {
            "description": "Whether a job is complete.",
            "example": true,
            "type": "boolean"
          },
          "isScheduled": {
            "description": "Whether a job was started by a scheduled trigger.",
            "example": false,
            "type": "boolean"
          }
        },
        "required": [
          "isCompleted",
          "isArchived",
          "isScheduled",
          "executionStatus"
        ],
        "type": "object"
      },
      "JobUsageV1": {
        "properties": {
          "cpuPercentage": {
            "description": "Max cpu usage for a job as a percentage of the total available cpu.",
            "example": 5,
            "type": "number"
          },
          "memoryGiB": {
            "description": "Max memory usage for a job in GiB.",
            "example": 0.73,
            "type": "number"
          }
        },
        "required": [
          "cpuPercentage",
          "memoryGiB"
        ],
        "type": "object"
      },
      "JobV1": {
        "properties": {
          "commitDetails": {
            "$ref": "#/components/schemas/CommitDetailsV1"
          },
          "computeCluster": {
            "$ref": "#/components/schemas/ComputeClusterConfigV1"
          },
          "datasetMounts": {
            "items": {
              "$ref": "#/components/schemas/DatasetMountV1"
            },
            "type": "array"
          },
          "dominoStats": {
            "items": {
              "$ref": "#/components/schemas/DominoStatsV1"
            },
            "type": "array"
          },
          "externalVolumeMounts": {
            "items": {
              "$ref": "#/components/schemas/ExternalVolumeMountV1"
            },
            "type": "array"
          },
          "gitRepos": {
            "items": {
              "$ref": "#/components/schemas/MountedGitRepoV1"
            },
            "type": "array"
          },
          "id": {
            "type": "string"
          },
          "mainRepoGitRef": {
            "$ref": "#/components/schemas/GitRefV1"
          },
          "number": {
            "type": "integer"
          },
          "projects": {
            "items": {
              "$ref": "#/components/schemas/MountedProjectV1"
            },
            "type": "array"
          },
          "runCommand": {
            "type": "string"
          },
          "runLauncherId": {
            "type": "string"
          },
          "stageTimes": {
            "$ref": "#/components/schemas/StageTimesV1"
          },
          "startedById": {
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/JobStatusV1"
          },
          "title": {
            "type": "string"
          },
          "usage": {
            "$ref": "#/components/schemas/JobUsageV1"
          }
        },
        "required": [
          "id",
          "number",
          "stageTimes",
          "runCommand",
          "commitDetails",
          "dominoStats",
          "status",
          "projects",
          "gitRepos",
          "datasetMounts",
          "externalVolumeMounts"
        ],
        "type": "object"
      },
      "KubecostLicenseResponseV1": {
        "properties": {
          "description": {
            "type": "string"
          },
          "key": {
            "description": "License Key set on Kubecost",
            "type": "string"
          }
        },
        "required": [
          "key"
        ],
        "type": "object"
      },
      "KubecostLicenseV1": {
        "properties": {
          "key": {
            "description": "License Key to be set on Kubecost",
            "type": "string"
          }
        },
        "required": [
          "key"
        ],
        "type": "object"
      },
      "LinkedGoalV1": {
        "properties": {
          "currentStage": {
            "description": "The stage this goal is currently assigned.",
            "example": "Ideation",
            "type": "string"
          },
          "description": {
            "description": "Description of the Goal.",
            "example": "Develop a better performing model",
            "type": "string"
          },
          "goalId": {
            "description": "Id of Goal linked to Job.",
            "example": "62313cfd7a0af0281c01a6a6",
            "type": "string"
          },
          "jobId": {
            "description": "Id of Job linked to Goal.",
            "example": "62313d207a0af0281c01a6a7",
            "type": "string"
          },
          "projectId": {
            "description": "Id of project resources belong to.",
            "example": "62313d377a0af0281c01a6a8",
            "type": "string"
          },
          "title": {
            "description": "Name of goal.",
            "example": "MyGoal",
            "type": "string"
          }
        },
        "required": [
          "goalId",
          "jobId",
          "projectId",
          "title",
          "currentStage"
        ],
        "type": "object"
      },
      "LogContentV1": {
        "properties": {
          "log": {
            "description": "Log message",
            "example": "Pulling image \"172.20.22.242:5000/noahjax11699-compute/environment:622a6879dde1a920fcccfef5-1\"",
            "type": "string"
          },
          "logType": {
            "$ref": "#/components/schemas/LogTypeV1"
          },
          "size": {
            "description": "Length of log line.",
            "example": 94,
            "type": "integer"
          },
          "timestamp": {
            "description": "Time logs were written.",
            "example": "2022-03-12T02:13:51.616Z",
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "timestamp",
          "logType",
          "log",
          "size"
        ],
        "type": "object"
      },
      "LogTypeV1": {
        "description": "Type of log. Complete includes all log types.",
        "enum": [
          "stdOut",
          "stdErr",
          "prepareOutput",
          "complete"
        ],
        "type": "string"
      },
      "LogsEnvelopeV1": {
        "properties": {
          "logs": {
            "$ref": "#/components/schemas/JobLogsV1"
          },
          "metadata": {
            "properties": {
              "notices": {
                "description": "Notices relating to the request",
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "pagination": {
                "$ref": "#/components/schemas/LogsPaginationV1"
              },
              "requestId": {
                "description": "Id used to correlate a request with server actions.",
                "example": "bbd78579-93c4-45ee-a983-0d5c8da6d5b1",
                "type": "string"
              }
            },
            "required": [
              "pagination",
              "requestId",
              "notices"
            ],
            "type": "object"
          }
        },
        "required": [
          "logs",
          "metadata"
        ],
        "type": "object"
      },
      "LogsPaginationV1": {
        "properties": {
          "latestTimeNano": {
            "description": "Time of last log. Can be used to specify only logs after a certain time.",
            "example": "1647051415275957459",
            "type": "string"
          },
          "limit": {
            "description": "Max number of log messages to retrieve.",
            "example": 10,
            "type": "integer"
          }
        },
        "required": [
          "limit"
        ],
        "type": "object"
      },
      "MetadataV1": {
        "properties": {
          "notices": {
            "description": "Notices relating to the request",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "requestId": {
            "type": "string"
          }
        },
        "required": [
          "requestId",
          "notices"
        ],
        "type": "object"
      },
      "MetricAlertRequestV1": {
        "properties": {
          "description": {
            "description": "Optional text to append to the metric alert message",
            "type": "string"
          },
          "metric": {
            "description": "Name of the metric to send alert for",
            "type": "string"
          },
          "modelMonitoringId": {
            "description": "ID of the monitored model to send metric alerts for",
            "type": "string"
          },
          "targetRange": {
            "$ref": "#/components/schemas/TargetRangeV1"
          },
          "value": {
            "description": "Value of the metric",
            "type": "number"
          }
        },
        "required": [
          "modelMonitoringId",
          "metric",
          "value",
          "targetRange"
        ],
        "type": "object"
      },
      "MetricTagV1": {
        "properties": {
          "key": {
            "description": "Key for the metric tag",
            "type": "string"
          },
          "value": {
            "description": "Value for the metric tag",
            "type": "string"
          }
        },
        "required": [
          "key",
          "value"
        ],
        "type": "object"
      },
      "MetricValueV1": {
        "properties": {
          "referenceTimestamp": {
            "description": "Timestamp associated with the metric log entry",
            "type": "string"
          },
          "tags": {
            "description": "List of tags associated with the metric",
            "items": {
              "$ref": "#/components/schemas/MetricTagV1"
            },
            "type": "array"
          },
          "value": {
            "description": "Value of the metric",
            "type": "number"
          }
        },
        "required": [
          "value",
          "referenceTimestamp",
          "tags"
        ],
        "type": "object"
      },
      "MetricValuesEnvelopeV1": {
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/MetadataV1"
          },
          "metricValues": {
            "items": {
              "$ref": "#/components/schemas/MetricValueV1"
            },
            "type": "array"
          }
        },
        "required": [
          "metricValues",
          "metadata"
        ],
        "type": "object"
      },
      "MountedGitRepoV1": {
        "properties": {
          "endingBranch": {
            "description": "Branch this git repo ended at.",
            "example": "final-branch",
            "type": "string"
          },
          "endingCommitId": {
            "description": "Ending commitId for this git repo.",
            "example": "dff155c9a736f9cd230eac420e3c1ef3daa0ad7e",
            "type": "string"
          },
          "id": {
            "description": "Id of the git repo mounted to the Job.",
            "example": "6231365e7a0af0281c01a69f",
            "type": "string"
          },
          "name": {
            "description": "Name of the git repo mounted to the Job.",
            "example": "MyRepo",
            "type": "string"
          },
          "ref": {
            "type": "string"
          },
          "serviceProvider": {
            "$ref": "#/components/schemas/GitServiceProviderV1"
          },
          "startingBranch": {
            "description": "Branch this git repo started at.",
            "example": "init-test-branch",
            "type": "string"
          },
          "startingCommitId": {
            "description": "CommitId the git repo should be mounted at.",
            "example": "4f2d5c2f54db4fbb16a093d4fb11fdb1fe0794c7",
            "type": "string"
          },
          "uri": {
            "description": "Uri for the repo being mounted.",
            "example": "git@github.com:apache/spark.git",
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "uri",
          "ref",
          "serviceProvider"
        ],
        "type": "object"
      },
      "MountedProjectV1": {
        "properties": {
          "commitId": {
            "description": "CommitId to use for project being mounted.",
            "example": "7f8e3908f129c0ca6529028618e6f10b3d2f315a",
            "type": "string"
          },
          "projectId": {
            "description": "Id of project to mount.",
            "example": "623138c87a0af0281c01a6a3",
            "type": "string"
          }
        },
        "required": [
          "projectId",
          "commitId"
        ],
        "type": "object"
      },
      "NewAsyncPredictionV1": {
        "properties": {
          "parameters": {
            "description": "Parameters that will be passed to Async Model predict function",
            "type": "object"
          }
        },
        "required": [
          "parameters"
        ],
        "type": "object"
      },
      "NewDatasetRwV1": {
        "properties": {
          "description": {
            "description": "Description of the dataset",
            "type": "string"
          },
          "grants": {
            "description": "Permission grants to be assigned for this newly created dataset. Note that permissions can be edited after creation. If snapshotId is passed in, this parameter won't have any effect and caller will be assigned dataset Ownership.",
            "items": {
              "$ref": "#/components/schemas/DatasetRwGrantV1"
            },
            "type": "array"
          },
          "name": {
            "description": "Name of this dataset. The name must be unique in the same project",
            "type": "string"
          },
          "projectId": {
            "description": "ID of the project this dataset belongs to. Either projectId or snapshotId must be provided",
            "type": "string"
          },
          "snapshotId": {
            "description": "ID of an existing snapshot to create a new dataset from. Either snapshotId or projectId must be provided.",
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "NewEnvironmentRevisionV1": {
        "properties": {
          "dockerfileInstructions": {
            "type": "string"
          },
          "environmentVariables": {
            "items": {
              "$ref": "#/components/schemas/EnvironmentVariableV1"
            },
            "type": "array"
          },
          "image": {
            "description": "Environment revision image. Required for creating a new environment",
            "type": "string"
          },
          "postRunScript": {
            "type": "string"
          },
          "postSetupScript": {
            "type": "string"
          },
          "preRunScript": {
            "type": "string"
          },
          "preSetupScript": {
            "type": "string"
          },
          "skipCache": {
            "type": "boolean"
          },
          "summary": {
            "type": "string"
          },
          "supportedClusters": {
            "items": {
              "$ref": "#/components/schemas/ClusterTypeV1"
            },
            "type": "array"
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "useVpn": {
            "type": "boolean"
          },
          "workspaceTools": {
            "items": {
              "$ref": "#/components/schemas/EnvironmentToolV1"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "NewEnvironmentV1": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NewEnvironmentRevisionV1"
          },
          {
            "properties": {
              "addBaseDependencies": {
                "description": "Required for creating a new environment",
                "type": "boolean"
              },
              "description": {
                "type": "string"
              },
              "duplicateFromEnvironmentId": {
                "description": "The id of the environment to duplicate. When specifying this property, no other properties in the payload must be set.",
                "type": "string"
              },
              "isCurated": {
                "type": "boolean"
              },
              "isRestricted": {
                "description": "Specifies if an environment is restricted. Only users with ClassifyEnvironments permission can set this to true",
                "type": "boolean"
              },
              "name": {
                "description": "Environment name. Required for creating a new environment",
                "type": "string"
              },
              "orgOwnerId": {
                "description": "Sets an Organization as the Environment owner. Only used if visibility is 'Private', as 'Global' environments don't have owners.",
                "type": "string"
              },
              "visibility": {
                "$ref": "#/components/schemas/NewEnvironmentVisibilityV1"
              }
            },
            "type": "object"
          }
        ]
      },
      "NewEnvironmentVisibilityV1": {
        "description": "Environment visibility. Required for creating a new environment",
        "enum": [
          "global",
          "private"
        ],
        "type": "string"
      },
      "NewJobV1": {
        "properties": {
          "commitId": {
            "description": "Git commitId to start job from. Defaults to head commitId for the project.",
            "example": "960a4c99a4cc38194cbacbcce41caa68ba5369ea",
            "type": "string"
          },
          "computeCluster": {
            "$ref": "#/components/schemas/ComputeClusterConfigV1"
          },
          "environmentId": {
            "description": "Id of environment to use when creating job. Defaults to project default environment.",
            "example": "623131507a0af0281c01a699",
            "type": "string"
          },
          "environmentRevisionSpec": {
            "$ref": "#/components/schemas/EnvironmentRevisionSpecV1"
          },
          "externalVolumeMountIds": {
            "description": "Id's of external volumes to be mounted on this job.",
            "example": [
              "6231327c7a0af0281c01a69b",
              "623132867a0af0281c01a69c"
            ],
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "hardwareTier": {
            "description": "Hardware tier to use for this job. Defaults to project default hardware tier.",
            "example": "small-k8s",
            "type": "string"
          },
          "mainRepoGitRef": {
            "$ref": "#/components/schemas/GitRefV1"
          },
          "projectId": {
            "description": "Id of project to create job in.",
            "example": "623130ad7a0af0281c01a698",
            "type": "string"
          },
          "runCommand": {
            "description": "Command for job to run",
            "example": "main.py",
            "type": "string"
          },
          "snapshotDatasetsOnCompletion": {
            "description": "Whether to snapshot datasets mounted on the Job when the Job completes.",
            "type": "boolean"
          },
          "title": {
            "description": "Name of job to start",
            "example": "K-means clustering",
            "type": "string"
          }
        },
        "required": [
          "projectId",
          "runCommand"
        ],
        "type": "object"
      },
      "NewMetricValueV1": {
        "properties": {
          "metric": {
            "description": "Name of the metric to log values for",
            "type": "string"
          },
          "modelMonitoringId": {
            "description": "ID of the monitored model to log metric values for",
            "type": "string"
          },
          "referenceTimestamp": {
            "description": "Timestamp to associate the metric log entry with. Timestamp should follow the RFC3339 format with timezone e.g. 2013-07-01T17:55:13-07:00",
            "type": "string"
          },
          "tags": {
            "description": "List of tags associated with the metric",
            "items": {
              "$ref": "#/components/schemas/MetricTagV1"
            },
            "type": "array"
          },
          "value": {
            "description": "Value of the metric",
            "type": "number"
          }
        },
        "required": [
          "modelMonitoringId",
          "metric",
          "value",
          "referenceTimestamp"
        ],
        "type": "object"
      },
      "NewMetricValuesEnvelopeV1": {
        "properties": {
          "newMetricValues": {
            "items": {
              "$ref": "#/components/schemas/NewMetricValueV1"
            },
            "type": "array"
          }
        },
        "required": [
          "newMetricValues"
        ],
        "type": "object"
      },
      "NewOrganizationV1": {
        "properties": {
          "members": {
            "items": {
              "$ref": "#/components/schemas/OrganizationMemberV1"
            },
            "type": "array"
          },
          "name": {
            "description": "The name for this organization",
            "example": "MyNewOrg",
            "type": "string"
          }
        },
        "required": [
          "name",
          "members"
        ],
        "type": "object"
      },
      "NewProjectGitRepositoryV1": {
        "properties": {
          "defaultRef": {
            "$ref": "#/components/schemas/ProjectRepositoryReferenceV1"
          },
          "gitCredentialId": {
            "description": "Id of the git creds to use for the repo. Credentials only apply for the current user, and other users will need to add their own unique creds.",
            "type": "string"
          },
          "name": {
            "description": "Optional name of the repository in the project",
            "type": "string"
          },
          "serviceProvider": {
            "$ref": "#/components/schemas/GitServiceProviderV1"
          },
          "uri": {
            "description": "URI of the repository origin",
            "example": "https://github.com/torvalds/linux",
            "type": "string"
          }
        },
        "required": [
          "uri"
        ],
        "type": "object"
      },
      "NewProjectGoalV1": {
        "properties": {
          "assigneeId": {
            "description": "Optional id of the user the goal will be assigned to",
            "type": "string"
          },
          "description": {
            "description": "An optional description of the goal",
            "type": "string"
          },
          "stageId": {
            "description": "Optional id of the stage the goal will be set to",
            "type": "string"
          },
          "title": {
            "description": "Title of the goal",
            "example": "MyGoal",
            "type": "string"
          }
        },
        "required": [
          "title"
        ],
        "type": "object"
      },
      "NewProjectV1": {
        "properties": {
          "description": {
            "description": "Project description.",
            "type": "string"
          },
          "isRestricted": {
            "description": "Optional flag for setting a new project as restricted. ProjectClassifier permission required for use.",
            "type": "boolean"
          },
          "mainRepository": {
            "$ref": "#/components/schemas/NewProjectGitRepositoryV1"
          },
          "name": {
            "description": "Name of this project. The name must be unique and cannot contain white space.",
            "type": "string"
          },
          "ownerId": {
            "description": "Optional Id of a user to own this project. Defaults to the calling user if not provided. Does not currently support creating projects owned by Organizations.",
            "type": "string"
          },
          "templateDetails": {
            "$ref": "#/components/schemas/ProjectTemplateDetailsV1"
          },
          "visibility": {
            "$ref": "#/components/schemas/ProjectVisibilityV1"
          }
        },
        "required": [
          "name",
          "description",
          "visibility"
        ],
        "type": "object"
      },
      "NewRegisteredModelReviewResponseV1": {
        "properties": {
          "decision": {
            "description": "The decision of the reviewer",
            "example": "Approved",
            "type": "string"
          },
          "notes": {
            "description": "The notes of the reviewer",
            "example": "LGTM",
            "type": "string"
          }
        },
        "required": [
          "decision"
        ],
        "type": "object"
      },
      "NewRegisteredModelReviewReviewersV1": {
        "properties": {
          "userId": {
            "description": "The user Id of the user to be set as reviewer",
            "example": "452f88ac21bd0c60eca085",
            "type": "string"
          }
        },
        "required": [
          "userId"
        ],
        "type": "object"
      },
      "NewRegisteredModelReviewV1": {
        "properties": {
          "notes": {
            "description": "The notes added to the review",
            "example": "Please review this model",
            "type": "string"
          },
          "reviewers": {
            "description": "The users to be set as reviewers",
            "items": {
              "$ref": "#/components/schemas/NewRegisteredModelReviewReviewersV1"
            },
            "type": "array"
          },
          "targetStage": {
            "description": "The target stage for the new review",
            "example": "QA",
            "type": "string"
          }
        },
        "required": [
          "targetStage",
          "reviewers"
        ],
        "type": "object"
      },
      "NewRegisteredModelV1": {
        "properties": {
          "description": {
            "description": "The description of the registered model",
            "example": "This model predicts housing prices",
            "type": "string"
          },
          "discoverable": {
            "description": "Indicates whether this model is publicly discoverable. If true, users who are not project members will see this model in search results and can view basic model details.\n",
            "type": "boolean"
          },
          "experimentRunId": {
            "description": "The id of the experiment run to create the version from",
            "example": "a8ea375c781d4b9c8e58469f0ad738f8",
            "type": "string"
          },
          "modelName": {
            "description": "The name of the registered model",
            "example": "Housing Price Predictor",
            "type": "string"
          },
          "tags": {
            "$ref": "#/components/schemas/RegisteredModelTagsV1"
          }
        },
        "required": [
          "modelName",
          "experimentRunId",
          "discoverable"
        ],
        "type": "object"
      },
      "NewRegisteredModelVersionV1": {
        "properties": {
          "artifact": {
            "description": "The artifact of the run to create the version from",
            "example": "LogisticRegression",
            "type": "string"
          },
          "description": {
            "description": "The description of the registered model version",
            "example": "Logistic regression model version 2",
            "type": "string"
          },
          "experimentRunId": {
            "description": "The id of the experiment run to create the version from",
            "example": "a8ea375c781d4b9c8e58469f0ad738f8",
            "type": "string"
          }
        },
        "required": [
          "description",
          "experimentRunId",
          "artifact"
        ],
        "type": "object"
      },
      "NewSnapshotV1": {
        "properties": {
          "relativeFilePaths": {
            "description": "List of paths to include in snapshot",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "relativeFilePaths"
        ],
        "type": "object"
      },
      "NewWorkspaceSessionV1": {
        "properties": {
          "externalVolumeMounts": {
            "default": [],
            "items": {
              "description": "External volume mount IDs",
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "externalVolumeMounts"
        ],
        "type": "object"
      },
      "OrganizationEnvelopeV1": {
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/MetadataV1"
          },
          "org": {
            "$ref": "#/components/schemas/OrganizationV1"
          }
        },
        "required": [
          "org",
          "metadata"
        ],
        "type": "object"
      },
      "OrganizationMemberV1": {
        "properties": {
          "organizationRole": {
            "$ref": "#/components/schemas/OrganizationRoleV1"
          },
          "userId": {
            "description": "Id of the user in the org.",
            "example": "6234c9542bc6731e3471ade8",
            "type": "string"
          }
        },
        "required": [
          "userId",
          "organizationRole"
        ],
        "type": "object"
      },
      "OrganizationRoleV1": {
        "description": "Role of member in the organization.",
        "enum": [
          "member",
          "admin"
        ],
        "type": "string"
      },
      "OrganizationV1": {
        "properties": {
          "defaultEnvironmentId": {
            "description": "Id of the default environment used in the organization.",
            "example": "6231327c7a0af0281c01a65f",
            "type": "string"
          },
          "id": {
            "description": "Organization identifier in the users collection.",
            "example": "623132867a0af0281c01a69c",
            "type": "string"
          },
          "members": {
            "description": "List of the organization members.",
            "items": {
              "$ref": "#/components/schemas/OrganizationMemberV1"
            },
            "type": "array"
          },
          "name": {
            "description": "Organization name.",
            "example": "MyOrg",
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "members"
        ],
        "type": "object"
      },
      "PaginatedDatasetRwEnvelopeV1": {
        "properties": {
          "datasets": {
            "items": {
              "$ref": "#/components/schemas/DatasetRwDetailsV1"
            },
            "type": "array"
          },
          "metadata": {
            "$ref": "#/components/schemas/PaginatedMetadataV1"
          }
        },
        "required": [
          "datasets",
          "metadata"
        ],
        "type": "object"
      },
      "PaginatedDatasetRwEnvelopeV2": {
        "properties": {
          "datasets": {
            "items": {
              "$ref": "#/components/schemas/DatasetRwInfoDtoV1"
            },
            "type": "array"
          },
          "metadata": {
            "$ref": "#/components/schemas/PaginatedMetadataV1"
          }
        },
        "required": [
          "datasets",
          "metadata"
        ],
        "type": "object"
      },
      "PaginatedEnvironmentEnvelopeV1": {
        "properties": {
          "environments": {
            "items": {
              "$ref": "#/components/schemas/EnvironmentV1"
            },
            "type": "array"
          },
          "metadata": {
            "$ref": "#/components/schemas/PaginatedMetadataV1"
          }
        },
        "required": [
          "environments",
          "metadata"
        ],
        "type": "object"
      },
      "PaginatedGitCredentialsAccessorEnvelopeV1": {
        "properties": {
          "credentials": {
            "items": {
              "$ref": "#/components/schemas/GitCredentialsAccessorV1"
            },
            "type": "array"
          },
          "metadata": {
            "$ref": "#/components/schemas/MetadataV1"
          }
        },
        "required": [
          "credentials",
          "metadata"
        ],
        "type": "object"
      },
      "PaginatedGitRepositoriesEnvelopeV1": {
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/PaginatedMetadataV1"
          },
          "repositories": {
            "items": {
              "$ref": "#/components/schemas/ProjectGitRepositoryV1"
            },
            "type": "array"
          }
        },
        "required": [
          "repositories",
          "metadata"
        ],
        "type": "object"
      },
      "PaginatedGoalEnvelopeV1": {
        "properties": {
          "goals": {
            "items": {
              "$ref": "#/components/schemas/LinkedGoalV1"
            },
            "type": "array"
          },
          "metadata": {
            "$ref": "#/components/schemas/MetadataV1"
          }
        },
        "required": [
          "goals",
          "metadata"
        ],
        "type": "object"
      },
      "PaginatedJobEnvelopeV1": {
        "properties": {
          "jobs": {
            "items": {
              "$ref": "#/components/schemas/JobV1"
            },
            "type": "array"
          },
          "metadata": {
            "$ref": "#/components/schemas/PaginatedMetadataV1"
          }
        },
        "required": [
          "jobs",
          "metadata"
        ],
        "type": "object"
      },
      "PaginatedMetadataV1": {
        "allOf": [
          {
            "$ref": "#/components/schemas/MetadataV1"
          },
          {
            "$ref": "#/components/schemas/PaginationV1"
          }
        ],
        "required": [
          "pagination",
          "requestId",
          "notices"
        ]
      },
      "PaginatedOrganizationEnvelopeV1": {
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/PaginatedMetadataV1"
          },
          "orgs": {
            "items": {
              "$ref": "#/components/schemas/OrganizationV1"
            },
            "type": "array"
          }
        },
        "required": [
          "orgs",
          "metadata"
        ],
        "type": "object"
      },
      "PaginatedProjectsEnvelopeV1": {
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/PaginatedMetadataV1"
          },
          "projects": {
            "items": {
              "$ref": "#/components/schemas/ProjectV1"
            },
            "type": "array"
          }
        },
        "required": [
          "projects",
          "metadata"
        ],
        "type": "object"
      },
      "PaginatedRegisteredModelNamesV1": {
        "properties": {
          "items": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "metadata": {
            "$ref": "#/components/schemas/PaginatedMetadataV1"
          }
        },
        "required": [
          "items",
          "metadata"
        ],
        "type": "object"
      },
      "PaginatedRegisteredModelVersionModelApiEnvelopeV1": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/RegisteredModelVersionModelApiV1"
            },
            "type": "array"
          },
          "metadata": {
            "$ref": "#/components/schemas/PaginatedMetadataV1"
          }
        },
        "required": [
          "items",
          "metadata"
        ],
        "type": "object"
      },
      "PaginatedRegisteredModelVersionOverviewEnvelopeV1": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/RegisteredModelVersionOverviewV1"
            },
            "type": "array"
          },
          "metadata": {
            "$ref": "#/components/schemas/PaginatedMetadataV1"
          }
        },
        "required": [
          "items",
          "metadata"
        ],
        "type": "object"
      },
      "PaginatedRegisteredModelsEnvelopeV1": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/RegisteredModelV1"
            },
            "type": "array"
          },
          "metadata": {
            "$ref": "#/components/schemas/TokenPaginatedMetadataV1"
          }
        },
        "required": [
          "items",
          "metadata"
        ],
        "type": "object"
      },
      "PaginatedRegisteredModelsForUIEnvelopeV1": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/RegisteredModelForUIV1"
            },
            "type": "array"
          },
          "metadata": {
            "$ref": "#/components/schemas/TokenPaginatedMetadataV1"
          }
        },
        "required": [
          "items",
          "metadata"
        ],
        "type": "object"
      },
      "PaginatedSnapshotEnvelopeV1": {
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/PaginatedMetadataV1"
          },
          "snapshots": {
            "items": {
              "$ref": "#/components/schemas/SnapshotDetailsV1"
            },
            "type": "array"
          }
        },
        "required": [
          "snapshots",
          "metadata"
        ],
        "type": "object"
      },
      "PaginatedUserEnvelopeV1": {
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/PaginatedMetadataV1"
          },
          "users": {
            "items": {
              "$ref": "#/components/schemas/UserV1"
            },
            "type": "array"
          }
        },
        "required": [
          "users",
          "metadata"
        ],
        "type": "object"
      },
      "PaginationV1": {
        "properties": {
          "limit": {
            "description": "Max number of objects returned",
            "type": "integer"
          },
          "offset": {
            "description": "Number of object skipped forward from start of objects",
            "type": "integer"
          },
          "totalCount": {
            "description": "Total number of available objects",
            "type": "integer"
          }
        },
        "required": [
          "offset",
          "limit"
        ],
        "type": "object"
      },
      "PatchRegisteredModelV1": {
        "properties": {
          "description": {
            "description": "The description of the registered model",
            "example": "Logistic regression model",
            "type": "string"
          },
          "discoverable": {
            "description": "Whether this registered model is discoverable",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "ProjectCollaboratorEnvelopeV1": {
        "properties": {
          "collaborator": {
            "$ref": "#/components/schemas/ProjectCollaboratorV1"
          },
          "metadata": {
            "$ref": "#/components/schemas/MetadataV1"
          }
        },
        "required": [
          "collaborator",
          "metadata"
        ],
        "type": "object"
      },
      "ProjectCollaboratorV1": {
        "properties": {
          "id": {
            "description": "userId of collaborating user or organization",
            "example": "662604702b7e5d347dbe7a908",
            "type": "string"
          },
          "role": {
            "description": "Collaborator's role in the project",
            "enum": [
              "contributor",
              "launcherUser",
              "resultsConsumer",
              "projectImporter"
            ],
            "type": "string"
          }
        },
        "required": [
          "id",
          "role"
        ],
        "type": "object"
      },
      "ProjectCopyResultEnvelopeV1": {
        "properties": {
          "datasetsNotCopied": {
            "items": {
              "$ref": "#/components/schemas/DatasetNotCopiedV1"
            },
            "type": "array"
          },
          "metadata": {
            "$ref": "#/components/schemas/MetadataV1"
          },
          "project": {
            "$ref": "#/components/schemas/ProjectV1"
          }
        },
        "required": [
          "project",
          "metadata"
        ],
        "type": "object"
      },
      "ProjectEnvelopeV1": {
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/MetadataV1"
          },
          "project": {
            "$ref": "#/components/schemas/ProjectV1"
          }
        },
        "required": [
          "project",
          "metadata"
        ],
        "type": "object"
      },
      "ProjectGitRepositoryEnvelopeV1": {
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/MetadataV1"
          },
          "repository": {
            "$ref": "#/components/schemas/ProjectGitRepositoryV1"
          }
        },
        "required": [
          "repository",
          "metadata"
        ],
        "type": "object"
      },
      "ProjectGitRepositoryV1": {
        "properties": {
          "defaultRef": {
            "$ref": "#/components/schemas/ProjectRepositoryReferenceV1"
          },
          "id": {
            "description": "Id of the repository",
            "example": "62604702b7e5d347dbe7a908",
            "type": "string"
          },
          "name": {
            "description": "Optional name of the repository in the project. If not provided, a name will be inferred from the URL",
            "type": "string"
          },
          "serviceProvider": {
            "$ref": "#/components/schemas/GitServiceProviderV1"
          },
          "uri": {
            "description": "URI of the repository origin",
            "example": "https://github.com/torvalds/linux",
            "type": "string"
          }
        },
        "required": [
          "id",
          "uri",
          "defaultRef",
          "serviceProvider"
        ],
        "type": "object"
      },
      "ProjectGoalEnvelopeV1": {
        "properties": {
          "goal": {
            "$ref": "#/components/schemas/ProjectGoalV1"
          },
          "metadata": {
            "$ref": "#/components/schemas/MetadataV1"
          }
        },
        "required": [
          "goal",
          "metadata"
        ],
        "type": "object"
      },
      "ProjectGoalForUpdateV1": {
        "properties": {
          "isComplete": {
            "description": "Flag indicating if the goal is complete",
            "type": "boolean"
          }
        },
        "required": [
          "isComplete"
        ],
        "type": "object"
      },
      "ProjectGoalV1": {
        "properties": {
          "createdAt": {
            "description": "Timestamp at which goal was created",
            "example": "2022-03-12T02:13:44.467Z",
            "format": "date-time",
            "type": "string"
          },
          "creatorId": {
            "description": "User id that created the goal",
            "type": "string"
          },
          "description": {
            "description": "Optional description of project goal",
            "type": "string"
          },
          "id": {
            "description": "The unique project goal id",
            "type": "string"
          },
          "isComplete": {
            "description": "Flag indicating if the goal is complete",
            "type": "boolean"
          },
          "projectId": {
            "description": "Id of project to which the goal belongs",
            "type": "string"
          },
          "title": {
            "description": "The title of project goal",
            "type": "string"
          }
        },
        "required": [
          "id",
          "title",
          "isComplete",
          "projectId",
          "createdAt",
          "creatorId"
        ],
        "type": "object"
      },
      "ProjectGoalsEnvelopeV1": {
        "properties": {
          "goals": {
            "items": {
              "$ref": "#/components/schemas/ProjectGoalV1"
            },
            "type": "array"
          },
          "metadata": {
            "$ref": "#/components/schemas/MetadataV1"
          }
        },
        "required": [
          "goals",
          "metadata"
        ],
        "type": "object"
      },
      "ProjectRepositoryReferenceV1": {
        "properties": {
          "refType": {
            "$ref": "#/components/schemas/GitReferenceTypeV1"
          },
          "value": {
            "type": "string"
          }
        },
        "required": [
          "refType"
        ],
        "type": "object"
      },
      "ProjectResultsSettingsEnvelopeV1": {
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/MetadataV1"
          },
          "resultsSettings": {
            "$ref": "#/components/schemas/ProjectResultsSettingsV1"
          }
        },
        "required": [
          "resultsSettings",
          "metadata"
        ],
        "type": "object"
      },
      "ProjectResultsSettingsV1": {
        "properties": {
          "branch": {
            "enum": [
              "isolated",
              "main"
            ],
            "type": "string"
          }
        },
        "required": [
          "branch"
        ],
        "type": "object"
      },
      "ProjectStatusEnvelopeV1": {
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/MetadataV1"
          },
          "status": {
            "$ref": "#/components/schemas/ProjectStatusV1"
          }
        },
        "required": [
          "status",
          "metadata"
        ],
        "type": "object"
      },
      "ProjectStatusV1": {
        "properties": {
          "blockedReason": {
            "description": "The reason the project is blocked",
            "type": "string"
          },
          "completedMessage": {
            "description": "The completed project message",
            "type": "string"
          },
          "isBlocked": {
            "description": "Whether or not the project is blocked. If true, it has precedence over the status",
            "type": "boolean"
          },
          "status": {
            "description": "The project status",
            "enum": [
              "active",
              "complete"
            ],
            "type": "string"
          }
        },
        "required": [
          "status",
          "isBlocked"
        ],
        "type": "object"
      },
      "ProjectTemplateDetailsV1": {
        "properties": {
          "name": {
            "description": "name of the template",
            "example": "ImageNet Classifier",
            "type": "string"
          },
          "templateId": {
            "description": "id of the template",
            "example": "templateId",
            "type": "string"
          },
          "templateRevisionId": {
            "description": "optional id of the revision of the template",
            "type": "string"
          }
        },
        "required": [
          "name",
          "templateId"
        ],
        "type": "object"
      },
      "ProjectV1": {
        "properties": {
          "collaborators": {
            "description": "List of collaborators, if any",
            "items": {
              "$ref": "#/components/schemas/ProjectCollaboratorV1"
            },
            "type": "array"
          },
          "description": {
            "description": "A description of the project",
            "type": "string"
          },
          "id": {
            "description": "Project ID",
            "example": "626046fcb7e5d347dbe7a904",
            "type": "string"
          },
          "internal tags": {
            "description": "Optional list of strings containing internal tags of project",
            "example": [
              "restricted"
            ],
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "mainRepository": {
            "$ref": "#/components/schemas/ProjectGitRepositoryV1"
          },
          "name": {
            "description": "Name of the project",
            "example": "My Project",
            "type": "string"
          },
          "ownerId": {
            "description": "userId of the project owner",
            "example": "662604702b7e5d347dbe7a908",
            "type": "string"
          },
          "ownerUsername": {
            "description": "username of the project owner",
            "example": "steve_holt",
            "type": "string"
          },
          "visibility": {
            "$ref": "#/components/schemas/ProjectVisibilityV1"
          }
        },
        "required": [
          "id",
          "name",
          "description",
          "visibility",
          "ownerId",
          "ownerUsername",
          "collaborators",
          "internalTags"
        ],
        "type": "object"
      },
      "ProjectVisibilityV1": {
        "description": "Project visibility",
        "enum": [
          "public",
          "searchable",
          "private"
        ],
        "type": "string"
      },
      "ProviderRepoVisibilityV1": {
        "description": "The visibility of the code repo. Internal can only be used for Github Enterprise.",
        "enum": [
          "public",
          "private",
          "internal"
        ],
        "type": "string"
      },
      "ProxyConfigV1": {
        "properties": {
          "internalPath": {
            "description": "Path to find workspace at. Used internally.",
            "example": "/{{ownerUsername}}/{{projectName}}/{{sessionPathComponent}}/{{runId}}/{{#if pathToOpen}}tree/{{pathToOpen}}{{/if}}",
            "type": "string"
          },
          "port": {
            "description": "Port to run this tool on.",
            "example": 8888,
            "type": "integer"
          },
          "requireSubdomain": {
            "description": "Whether workspace requires subdomains. Subdomain workspaces only work if deployment is configured to support subdomains. Defaults to false.",
            "example": false,
            "type": "boolean"
          },
          "rewrite": {
            "description": "If url rewriting is necessary for routing. Defaults to false",
            "example": false,
            "type": "boolean"
          }
        },
        "required": [
          "internalPath",
          "port"
        ],
        "type": "object"
      },
      "QueuedJobStatusDetailsV1": {
        "properties": {
          "expectedWait": {
            "description": "Message describing estimated wait time between state changes.",
            "example": "Now",
            "type": "string"
          },
          "explanation": {
            "description": "Message explaining the wait time",
            "example": "Your run has been assigned to a machine",
            "type": "string"
          },
          "helpText": {
            "description": "Message informing the caller what should be done next",
            "example": "It will start being prepared for execution momentarily",
            "type": "string"
          }
        },
        "required": [
          "expectedWait",
          "explanation",
          "helpText"
        ],
        "type": "object"
      },
      "ReferenceCopyGitRepoSpecV1": {
        "description": "Specifies the git service provider repository to use as the code repository in the new Domino project.",
        "properties": {
          "mainRepoUrl": {
            "description": "The cloneable url for the git service provider repository. Must be a http(s) schema url.",
            "type": "string"
          }
        },
        "required": [
          "mainRepoUrl"
        ],
        "type": "object"
      },
      "RegisteredModelForUIV1": {
        "properties": {
          "createdAt": {
            "description": "When the latest version of the model was created",
            "example": "2022-03-12T02:13:44.467Z",
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "description": "Description of the model",
            "example": "Customer churn model",
            "type": "string"
          },
          "discoverable": {
            "default": false,
            "description": "Indicates whether this model is publicly discoverable. If true, users who are not project members will see this model in search results and can view basic model details.\nThis field may be omitted when false.\n",
            "type": "boolean"
          },
          "latestVersion": {
            "description": "The latest version of the model",
            "example": 1,
            "type": "integer"
          },
          "latestVersionExperimentMetrics": {
            "$ref": "#/components/schemas/RegisteredModelMetricsV1"
          },
          "latestVersionStage": {
            "description": "The current stage of the latest version of the model",
            "example": "Staging",
            "type": "string"
          },
          "modelApiCount": {
            "description": "The number of model APIs associated with the latest version of the model",
            "example": 1,
            "type": "integer"
          },
          "name": {
            "description": "Name of the registered model",
            "example": "churn-prediction",
            "type": "string"
          },
          "ownerUsername": {
            "description": "Username of the project owner",
            "example": "martin_hito",
            "type": "string"
          },
          "predictionCount": {
            "description": "The number of predictions captured for the active versions of model APIs associated with the latest version of the model",
            "example": 100,
            "type": "integer"
          },
          "project": {
            "$ref": "#/components/schemas/RegisteredModelProjectSummaryV1"
          },
          "tags": {
            "$ref": "#/components/schemas/RegisteredModelTagsV1"
          },
          "updatedAt": {
            "description": "When the latest version of the model was updated",
            "example": "2022-03-12T02:13:44.467Z",
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "name",
          "description",
          "project",
          "tags",
          "ownerUsername",
          "createdAt",
          "updatedAt",
          "modelApiCount"
        ],
        "type": "object"
      },
      "RegisteredModelMetricsV1": {
        "additionalProperties": {
          "format": "double",
          "type": "number"
        },
        "description": "A map of key -> value",
        "example": {
          "key": "foo",
          "value": 1
        },
        "type": "object"
      },
      "RegisteredModelProjectSummaryV1": {
        "description": "type that tracks properties of the project associated with a model",
        "properties": {
          "id": {
            "description": "ID of the project housing the model",
            "example": "62313ce67a0af0281c01a6a5",
            "type": "string"
          },
          "isGitBasedProject": {
            "description": "Whether the project is a git-based project",
            "type": "boolean"
          },
          "name": {
            "description": "Name of the project overview housing the model",
            "example": "TO-DO",
            "type": "string"
          },
          "ownerUsername": {
            "description": "Name of the project owner",
            "example": "TO-DO",
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "ownerUsername",
          "isGitBasedProject"
        ],
        "type": "object"
      },
      "RegisteredModelRequestingUserAccessV1": {
        "properties": {
          "canEditModel": {
            "description": "True if the requesting user can update this model",
            "type": "boolean"
          },
          "canEditProjectAssets": {
            "description": "True if the requesting user has permissions to edit other assets of the project that this model belongs to.\n",
            "type": "boolean"
          },
          "canViewExperimentRuns": {
            "description": "True if the requesting user can view experiment runs of the project that this model belongs to.\n",
            "type": "boolean"
          },
          "canViewModelApis": {
            "description": "True if the requesting user can view model apis of the project that this model belongs to.\n",
            "type": "boolean"
          },
          "canViewProject": {
            "description": "True if the requesting user can view the project overview of the project that this model belongs to.\n",
            "type": "boolean"
          },
          "canViewProjectFiles": {
            "description": "True if the requesting user can view the files of the project that this model belongs to.\n",
            "type": "boolean"
          }
        },
        "required": [
          "canEditModel",
          "canEditProjectAssets",
          "canViewExperimentRuns",
          "canViewModelApis",
          "canViewProject",
          "canViewProjectFiles"
        ],
        "type": "object"
      },
      "RegisteredModelReviewSummaryV1": {
        "properties": {
          "modelReviewId": {
            "description": "The id of the model review",
            "type": "string"
          },
          "notes": {
            "description": "The notes of the review",
            "example": "Please review this model",
            "type": "string"
          },
          "reviewerResponses": {
            "items": {
              "properties": {
                "decision": {
                  "description": "The response of the reviewer",
                  "example": "Approved",
                  "type": "string"
                },
                "reviewer": {
                  "$ref": "#/components/schemas/RegisteredModelReviewUserInfoV1"
                }
              },
              "required": [
                "reviewer"
              ],
              "type": "object"
            },
            "type": "array"
          },
          "status": {
            "description": "The status of the model review",
            "type": "string"
          },
          "targetStage": {
            "description": "The target stage of the model review",
            "type": "string"
          }
        },
        "required": [
          "modelReviewId",
          "targetStage",
          "notes",
          "status",
          "reviewerResponses"
        ],
        "type": "object"
      },
      "RegisteredModelReviewUserInfoV1": {
        "properties": {
          "firstName": {
            "description": "The first name of the model review user",
            "example": "Tuanathon",
            "type": "string"
          },
          "id": {
            "description": "The id of the model review user",
            "example": "452f88ac21bd0c60eca085",
            "type": "string"
          },
          "lastName": {
            "description": "The last name of the model review user",
            "example": "Nguyen",
            "type": "string"
          },
          "username": {
            "description": "The username of the model review user",
            "example": "ddl-tnguyen",
            "type": "string"
          }
        },
        "required": [
          "id",
          "username",
          "firstName",
          "lastName"
        ],
        "type": "object"
      },
      "RegisteredModelStageEnvelopeV1": {
        "properties": {
          "items": {
            "description": "The Registered Model stages",
            "items": {
              "$ref": "#/components/schemas/RegisteredModelStageV1"
            },
            "type": "array"
          },
          "metadata": {
            "$ref": "#/components/schemas/MetadataV1"
          }
        },
        "required": [
          "items",
          "metadata"
        ],
        "type": "object"
      },
      "RegisteredModelStageV1": {
        "properties": {
          "label": {
            "description": "The label of the model stage",
            "example": "QA",
            "type": "string"
          }
        },
        "required": [
          "label"
        ],
        "type": "object"
      },
      "RegisteredModelTagsV1": {
        "additionalProperties": {
          "type": "string"
        },
        "description": "A map of key -> value",
        "example": {
          "key": "foo",
          "value": "bar"
        },
        "type": "object"
      },
      "RegisteredModelV1": {
        "properties": {
          "createdAt": {
            "description": "When the latest version of the model was created",
            "example": "2022-03-12T02:13:44.467Z",
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "description": "Description of the model",
            "example": "Customer churn model",
            "type": "string"
          },
          "discoverable": {
            "default": false,
            "description": "Indicates whether this model is publicly discoverable. If true, users who are not project members will see this model in search results and can view basic model details.\nThis field may be omitted when false.\n",
            "type": "boolean"
          },
          "latestVersion": {
            "description": "The latest version of the model",
            "example": 1,
            "type": "integer"
          },
          "name": {
            "description": "Name of the registered model",
            "example": "churn-prediction",
            "type": "string"
          },
          "ownerUsername": {
            "description": "Username of the model's creator",
            "example": "martin_hito",
            "type": "string"
          },
          "project": {
            "$ref": "#/components/schemas/RegisteredModelProjectSummaryV1"
          },
          "requestingUserAccess": {
            "$ref": "#/components/schemas/RegisteredModelRequestingUserAccessV1",
            "description": "Describes the operations that the requesting user has permission to do with this model."
          },
          "tags": {
            "$ref": "#/components/schemas/RegisteredModelTagsV1"
          },
          "updatedAt": {
            "description": "When the latest version of the model was updated",
            "example": "2022-03-12T02:13:44.467Z",
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "name",
          "description",
          "project",
          "tags",
          "ownerUsername",
          "createdAt",
          "updatedAt",
          "requestingUserAccess"
        ],
        "type": "object"
      },
      "RegisteredModelVersionCustomStageResponseV1": {
        "properties": {
          "label": {
            "description": "The label of the model stage",
            "example": "QA",
            "type": "string"
          }
        },
        "required": [
          "label"
        ],
        "type": "object"
      },
      "RegisteredModelVersionCustomStageV1": {
        "properties": {
          "label": {
            "description": "The custom stage of a registered model version for a project",
            "example": "Pre-Production",
            "type": "string"
          }
        },
        "required": [
          "label"
        ],
        "type": "object"
      },
      "RegisteredModelVersionDataSourceDetailsV1": {
        "properties": {
          "dataSourceType": {
            "description": "The dataSourceType of the datasource",
            "type": "string"
          },
          "id": {
            "description": "The id of the datasource",
            "type": "string"
          },
          "name": {
            "description": "The name of the datasource",
            "type": "string"
          }
        },
        "required": [
          "name",
          "id",
          "dataSourceType"
        ],
        "type": "object"
      },
      "RegisteredModelVersionDatasetDetailsV1": {
        "properties": {
          "id": {
            "description": "The id of the dataset",
            "type": "string"
          },
          "name": {
            "description": "The name of the dataset",
            "type": "string"
          },
          "snapshotId": {
            "description": "The snapshotId of the dataset",
            "type": "string"
          }
        },
        "required": [
          "name",
          "id",
          "snapshotId"
        ],
        "type": "object"
      },
      "RegisteredModelVersionDetailsV1": {
        "properties": {
          "createdAt": {
            "description": "When the latest version of the model was created",
            "example": "2022-03-12T02:13:44.467Z",
            "format": "date-time",
            "type": "string"
          },
          "currentStage": {
            "description": "The current stage of the model version",
            "example": "Staging",
            "type": "string"
          },
          "experimentRunId": {
            "description": "The name of experiment run linked to the model version",
            "example": "db79712b47084c27a463a188bf901943",
            "type": "string"
          },
          "modelName": {
            "description": "Name of the registered model",
            "example": "churn-prediction",
            "type": "string"
          },
          "modelVersion": {
            "description": "The latest version of the model",
            "example": 4,
            "type": "integer"
          },
          "modelVersionDescription": {
            "description": "Description of the model version",
            "example": "Customer churn model V1",
            "type": "string"
          },
          "ownerUsername": {
            "description": "username of the project owner",
            "example": "martin_hito",
            "type": "string"
          },
          "project": {
            "$ref": "#/components/schemas/RegisteredModelProjectSummaryV1"
          },
          "reviewSummary": {
            "$ref": "#/components/schemas/RegisteredModelReviewSummaryV1"
          },
          "tags": {
            "$ref": "#/components/schemas/RegisteredModelTagsV1"
          },
          "updatedAt": {
            "description": "When the latest version of the model was updated",
            "example": "2022-03-12T02:13:44.467Z",
            "format": "date-time",
            "type": "string"
          },
          "versionUiDetails": {
            "$ref": "#/components/schemas/RegisteredModelVersionUiDetailsV1"
          }
        },
        "required": [
          "modelName",
          "modelVersion",
          "modelVersionDescription",
          "experimentRunId",
          "currentStage",
          "project",
          "versionUiDetails",
          "tags",
          "ownerUsername",
          "createdAt",
          "updatedAt"
        ],
        "type": "object"
      },
      "RegisteredModelVersionExperimentRunInfoV1": {
        "properties": {
          "metrics": {
            "description": "Run metrics.",
            "items": {
              "$ref": "#/components/schemas/RegisteredModelVersionExperimentRunMetricV1"
            },
            "type": "array"
          },
          "params": {
            "description": "Run parameters.",
            "items": {
              "$ref": "#/components/schemas/RegisteredModelVersionExperimentRunParamV1"
            },
            "type": "array"
          },
          "runUrl": {
            "description": "The snapshotId of the dataset",
            "type": "string"
          }
        },
        "required": [
          "metrics",
          "params",
          "runUrl"
        ],
        "type": "object"
      },
      "RegisteredModelVersionExperimentRunMetricV1": {
        "properties": {
          "key": {
            "description": "Key identifying this metric.",
            "type": "string"
          },
          "timestamp": {
            "description": "The timestamp at which this metric was recorded.",
            "example": "2022-03-12T02:13:44.467Z",
            "format": "date-time",
            "type": "string"
          },
          "value": {
            "description": "Value associated with this metric.",
            "format": "double",
            "type": "number"
          }
        },
        "required": [
          "key",
          "value",
          "timestamp"
        ],
        "type": "object"
      },
      "RegisteredModelVersionExperimentRunParamV1": {
        "properties": {
          "key": {
            "description": "Key identifying this param.",
            "type": "string"
          },
          "value": {
            "description": "Value associated with this param.",
            "type": "string"
          }
        },
        "required": [
          "key",
          "value"
        ],
        "type": "object"
      },
      "RegisteredModelVersionModelApiV1": {
        "properties": {
          "activeModelVersionId": {
            "description": "The id of the Model API",
            "example": "6452f88ac21bd0c60eca087",
            "type": "string"
          },
          "activeVersionNumber": {
            "description": "The active version number of the Model API",
            "example": 2,
            "type": "integer"
          },
          "activeVersionStatus": {
            "description": "The status of the Model API",
            "example": "Running",
            "type": "string"
          },
          "description": {
            "description": "Description of the model",
            "example": "Customer churn model",
            "type": "string"
          },
          "id": {
            "description": "ID of the Model API",
            "example": "6452f88ac21bd0c60eca085",
            "type": "string"
          },
          "name": {
            "description": "Name of the Model API",
            "example": "Test Model API",
            "type": "string"
          },
          "project": {
            "$ref": "#/components/schemas/RegisteredModelProjectSummaryV1"
          },
          "updatedAt": {
            "description": "When the latest version of the model was updated",
            "example": "2022-03-12T02:13:44.467Z",
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "description",
          "project",
          "updatedAt"
        ],
        "type": "object"
      },
      "RegisteredModelVersionOverviewV1": {
        "properties": {
          "createdAt": {
            "description": "When the latest version of the model was created",
            "example": "2022-03-12T02:13:44.467Z",
            "format": "date-time",
            "type": "string"
          },
          "experimentRunId": {
            "description": "The name of experiment run linked to the model version",
            "example": "db79712b47084c27a463a188bf901943",
            "type": "string"
          },
          "modelName": {
            "description": "Name of the registered model",
            "example": "churn-prediction",
            "type": "string"
          },
          "modelVersion": {
            "description": "The latest version of the model",
            "example": 4,
            "type": "integer"
          },
          "ownerUsername": {
            "description": "username of the project owner",
            "example": "martin_hito",
            "type": "string"
          },
          "project": {
            "$ref": "#/components/schemas/RegisteredModelProjectSummaryV1"
          },
          "updatedAt": {
            "description": "When the latest version of the model was updated",
            "example": "2022-03-12T02:13:44.467Z",
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "modelName",
          "modelVersion",
          "experimentRunId",
          "project",
          "ownerUsername",
          "createdAt",
          "updatedAt"
        ],
        "type": "object"
      },
      "RegisteredModelVersionReviewStageResponseV1": {
        "properties": {
          "label": {
            "description": "The label of the model stage valid for starting a model review",
            "example": "QA",
            "type": "string"
          }
        },
        "required": [
          "label"
        ],
        "type": "object"
      },
      "RegisteredModelVersionReviewStagesResponseV1": {
        "properties": {
          "items": {
            "description": "The registered model version stages valid for starting a model review",
            "items": {
              "$ref": "#/components/schemas/RegisteredModelVersionReviewStageResponseV1"
            },
            "type": "array"
          },
          "metadata": {
            "$ref": "#/components/schemas/MetadataV1"
          }
        },
        "required": [
          "items",
          "metadata"
        ],
        "type": "object"
      },
      "RegisteredModelVersionStageValidationV1": {
        "properties": {
          "stage": {
            "description": "The stage to validate the transition for",
            "example": "QA",
            "type": "string"
          }
        },
        "required": [
          "stage"
        ],
        "type": "object"
      },
      "RegisteredModelVersionStagesResponseV1": {
        "properties": {
          "items": {
            "description": "The Registered Model Version stages for a project",
            "items": {
              "$ref": "#/components/schemas/RegisteredModelVersionCustomStageResponseV1"
            },
            "type": "array"
          },
          "metadata": {
            "$ref": "#/components/schemas/MetadataV1"
          }
        },
        "required": [
          "items",
          "metadata"
        ],
        "type": "object"
      },
      "RegisteredModelVersionStagesV1": {
        "properties": {
          "stages": {
            "description": "The Registered Model Version stages for a project",
            "items": {
              "$ref": "#/components/schemas/RegisteredModelVersionCustomStageV1"
            },
            "type": "array"
          }
        },
        "required": [
          "stages"
        ],
        "type": "object"
      },
      "RegisteredModelVersionUiDetailsV1": {
        "properties": {
          "experimentRunInfo": {
            "$ref": "#/components/schemas/RegisteredModelVersionExperimentRunInfoV1"
          },
          "modelVersionDataSources": {
            "items": {
              "$ref": "#/components/schemas/RegisteredModelVersionDataSourceDetailsV1"
            },
            "type": "array"
          },
          "modelVersionDatasets": {
            "items": {
              "$ref": "#/components/schemas/RegisteredModelVersionDatasetDetailsV1"
            },
            "type": "array"
          }
        },
        "required": [
          "experimentRunInfo",
          "modelVersionDataSources",
          "modelVersionDatasets"
        ],
        "type": "object"
      },
      "SharedDatasetRwEntryV1": {
        "description": "An object describing the shared datasets imported into a project",
        "properties": {
          "projectId": {
            "description": "Id of the project being described.",
            "example": "62313ce67a0af0281c01a6a5",
            "type": "string"
          },
          "sharedDatasetIds": {
            "description": "List of dataset ids shared with this project",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "projectId",
          "sharedDatasetIds"
        ],
        "type": "object"
      },
      "SharedDatasetsEnvelopeV1": {
        "properties": {
          "dataset": {
            "$ref": "#/components/schemas/SharedDatasetRwEntryV1"
          },
          "metadata": {
            "$ref": "#/components/schemas/MetadataV1"
          }
        },
        "required": [
          "dataset",
          "metadata"
        ],
        "type": "object"
      },
      "SnapshotDetailsV1": {
        "properties": {
          "createdAt": {
            "description": "When the snapshot was created",
            "example": "2022-03-12T02:13:44.467Z",
            "format": "date-time",
            "type": "string"
          },
          "creatorId": {
            "description": "ID of the user who created this snapshot",
            "type": "string"
          },
          "datasetId": {
            "description": "ID of the dataset this snapshot belongs to",
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "description": "ID of this snapshot",
            "type": "string"
          },
          "lastMounted": {
            "description": "When the snapshot was last mounted",
            "format": "date-time",
            "type": "string"
          },
          "status": {
            "enum": [
              "active",
              "markForDeletion",
              "deletionInProgress",
              "deleted",
              "pending",
              "failed",
              "copying"
            ],
            "type": "string"
          }
        },
        "required": [
          "id",
          "datasetId",
          "createdAt",
          "status"
        ],
        "type": "object"
      },
      "SnapshotEnvelopeV1": {
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/MetadataV1"
          },
          "snapshot": {
            "$ref": "#/components/schemas/SnapshotDetailsV1"
          }
        },
        "required": [
          "snapshot",
          "metadata"
        ],
        "type": "object"
      },
      "StageTimesV1": {
        "properties": {
          "completedTime": {
            "description": "When the job completed",
            "example": "2022-03-12T02:16:43.127Z",
            "format": "date-time",
            "type": "string"
          },
          "startTime": {
            "description": "When the job started",
            "example": "2022-03-12T02:15:44.848Z",
            "format": "date-time",
            "type": "string"
          },
          "submissionTime": {
            "description": "When the start job request was submitted.",
            "example": "2022-03-12T02:13:44.467Z",
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "submissionTime"
        ],
        "type": "object"
      },
      "StreamedResponseDTO": {
        "description": "An internal DTO to stream responses. Should not be referenced by public OAS files directly.",
        "properties": {
          "contentType": {
            "type": "string"
          },
          "extraHeaders": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          },
          "size": {
            "format": "int64",
            "type": "integer"
          },
          "source": {
            "format": "binary",
            "type": "string",
            "x-domino-binary-stream": true
          }
        },
        "required": [
          "source",
          "size",
          "extraHeaders"
        ],
        "type": "object",
        "x-domino-binary-stream": true
      },
      "TagEnvelopeV1": {
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/MetadataV1"
          },
          "tag": {
            "$ref": "#/components/schemas/TagV1"
          }
        },
        "required": [
          "tag",
          "metadata"
        ],
        "type": "object"
      },
      "TagToAddV1": {
        "properties": {
          "projectId": {
            "description": "Id of project the resource belongs to.",
            "example": "62313ce67a0af0281c01a6a5",
            "type": "string"
          },
          "tagName": {
            "description": "Name of tag to add to a job.",
            "example": "MyTag",
            "type": "string"
          }
        },
        "required": [
          "tagName",
          "projectId"
        ],
        "type": "object"
      },
      "TagV1": {
        "properties": {
          "createdAt": {
            "description": "When the tag was created.",
            "example": "2022-03-15T21:48:36.586Z",
            "format": "date-time",
            "type": "string"
          },
          "creatorId": {
            "description": "Id of the user who created the tag.",
            "example": "6231342b7a0af0281c01a69e",
            "type": "string"
          },
          "id": {
            "description": "Id of the tag.",
            "example": "623133e87a0af0281c01a69d",
            "type": "string"
          },
          "name": {
            "description": "Name of the tag.",
            "example": "KMeansTest",
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "creatorId",
          "createdAt"
        ],
        "type": "object"
      },
      "TargetRangeV1": {
        "properties": {
          "condition": {
            "description": "Condition to evaluate metric value against upperLimit/lowerLimit",
            "enum": [
              "lessThan",
              "lessThanEqual",
              "greaterThan",
              "greaterThanEqual",
              "between"
            ],
            "type": "string"
          },
          "lowerLimit": {
            "description": "Lower limit in the target range for a metric; lowerLimit, upperLimit, or both must be provided",
            "type": "number"
          },
          "upperLimit": {
            "description": "Upper limit in the target range for a metric; lowerLimit, upperLimit, or both must be provided",
            "type": "number"
          }
        },
        "required": [
          "condition"
        ],
        "type": "object"
      },
      "TokenPaginatedMetadataV1": {
        "allOf": [
          {
            "$ref": "#/components/schemas/MetadataV1"
          },
          {
            "$ref": "#/components/schemas/TokenPaginationV1"
          }
        ],
        "required": [
          "pagination",
          "requestId",
          "notices"
        ]
      },
      "TokenPaginationV1": {
        "properties": {
          "nextPageToken": {
            "description": "Pagination token to request the next page of objects",
            "type": "string"
          }
        },
        "type": "object"
      },
      "UpdateEnvironmentRevisionV1": {
        "properties": {
          "isRestricted": {
            "description": "Boolean determining if revision is restricted",
            "type": "boolean"
          }
        },
        "required": [
          "isRestricted"
        ],
        "type": "object"
      },
      "UpdatedRegisteredModelReviewV1": {
        "properties": {
          "notes": {
            "description": "The notes added to the review",
            "example": "Updating list of reviewers for this model review",
            "type": "string"
          },
          "reviewers": {
            "description": "The users to be set as reviewers",
            "items": {
              "$ref": "#/components/schemas/NewRegisteredModelReviewReviewersV1"
            },
            "type": "array"
          },
          "status": {
            "description": "The status of the review",
            "example": "Canceled",
            "type": "string"
          }
        },
        "type": "object"
      },
      "UpdatedRegisteredModelVersionV1": {
        "properties": {
          "currentStage": {
            "description": "The current stage of the model version",
            "example": "Staging",
            "type": "string"
          }
        },
        "type": "object"
      },
      "UserEnvelopeV1": {
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/MetadataV1"
          },
          "user": {
            "$ref": "#/components/schemas/UserV1"
          }
        },
        "required": [
          "user",
          "metadata"
        ],
        "type": "object"
      },
      "UserV1": {
        "properties": {
          "avatarUrl": {
            "type": "string"
          },
          "companyName": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "fullName": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "phoneNumber": {
            "type": "string"
          },
          "userName": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "firstName",
          "lastName",
          "fullName",
          "userName",
          "avatarUrl"
        ],
        "type": "object"
      },
      "WorkspaceSessionCreatedEnvelopeV1": {
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/MetadataV1"
          },
          "workspaceSession": {
            "$ref": "#/components/schemas/WorkspaceSessionCreatedV1"
          }
        },
        "required": [
          "workspaceSession",
          "metadata"
        ],
        "type": "object"
      },
      "WorkspaceSessionCreatedV1": {
        "properties": {
          "executionId": {
            "description": "ID of the underlying execution serving the workspace session.",
            "type": "string"
          },
          "id": {
            "description": "ID of the newly created workspace session.",
            "type": "string"
          }
        },
        "required": [
          "id",
          "executionId"
        ],
        "type": "object"
      }
    },
    "securitySchemes": {
      "BearerAuthentication": {
        "in": "header",
        "name": "Authorization",
        "type": "apiKey"
      },
      "DominoApiKey": {
        "in": "header",
        "name": "X-Domino-Api-Key",
        "type": "apiKey"
      }
    }
  },
  "info": {
    "description": "Domino Public API Endpoints",
    "title": "Domino Public API",
    "version": "5.9.1"
  },
  "openapi": "3.0.3",
  "paths": {
    "/api/cost/v1/allocation": {
      "get": {
        "description": "Retrieve cost allocation",
        "operationId": "getCostAllocation",
        "parameters": [
          {
            "description": "Duration of time over which to query. Accepts words like today, week, month, yesterday, lastweek, lastmonth; durations like 30m, 12h, 7d, or time like 2021-03-10T00:00:00Z,2021-03-11T00:00:00Z",
            "in": "query",
            "name": "window",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Aggregate the cost allocation. Accepts kubecost aggregates cluster, namespace, pod, deployment, service, daemonset, statefulset, job, cronjob, replicaset, node, container, pv, pvc, storageclass, cluster",
            "in": "query",
            "name": "aggregate",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Start time of the query. Accepts RFC3339 format, must be inside the window",
            "in": "query",
            "name": "start",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "End time of the query. Accepts RFC3339 format, must be inside the window",
            "in": "query",
            "name": "end",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "If the result will be accumulated. Default is false. If true, the result will be accumulated from the start time to the end time.",
            "in": "query",
            "name": "accumulate",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Filter the result by the kubecost filter like cluster, namespace, pod, deployment, service, daemonset, statefulset, job, cronjob, replicaset, node, container, pv, pvc, storageclass, cluster.",
            "in": "query",
            "name": "filter",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "if the idle cost will be shared",
            "in": "query",
            "name": "shareIdle",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "list of namespaces to share the costs",
            "in": "query",
            "name": "shareNamespaces",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Determines how to split shared costs among non-idle, unshared allocations.",
            "in": "query",
            "name": "shareSplit",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The cost to share",
            "in": "query",
            "name": "shareCost",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The label to share the cost",
            "in": "query",
            "name": "shareLabels",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "If the cost will be reconciled",
            "in": "query",
            "name": "reconcile",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "If the tenancy costs will be shared",
            "in": "query",
            "name": "shareTenancyCosts",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "If the idle cost will be calculated",
            "in": "query",
            "name": "idle",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "If the external cost will be calculated",
            "in": "query",
            "name": "external",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CostAllocationEnvelopeV1"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Get the cost allocation over a time window",
        "tags": [
          "Cost"
        ]
      }
    },
    "/api/cost/v1/asset": {
      "get": {
        "description": "Retrieve asset cost",
        "operationId": "getCostAssets",
        "parameters": [
          {
            "description": "Duration of time over which to query. Accepts words like today, week, month, yesterday, lastweek, lastmonth; durations like 30m, 12h, 7d, or time like 2021-03-10T00:00:00Z,2021-03-11T00:00:00Z",
            "in": "query",
            "name": "window",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Aggregate the cost allocation. Accepts kubecost aggregates cluster, namespace, pod, deployment, service, daemonset, statefulset, job, cronjob, replicaset, node, container, pv, pvc, storageclass, cluster",
            "in": "query",
            "name": "aggregate",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Start time of the query. Accepts RFC3339 format, must be inside the window",
            "in": "query",
            "name": "start",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "End time of the query. Accepts RFC3339 format, must be inside the window",
            "in": "query",
            "name": "end",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "If the result will be accumulated. Default is false. If true, the result will be accumulated from the start time to the end time.",
            "in": "query",
            "name": "accumulate",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Filter the result by the kubecost filter like cluster, namespace, pod, deployment, service, daemonset, statefulset",
            "in": "query",
            "name": "filter",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CostAssetsEnvelopeV1"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Get the asset cost over a time window",
        "tags": [
          "Cost"
        ]
      }
    },
    "/api/datasetrw/v1/datasets": {
      "get": {
        "description": "Deprecated: Use GetDatasetsV2. Get Datasets that a user has access to",
        "operationId": "getDatasets",
        "parameters": [
          {
            "description": "Project ID filter",
            "in": "query",
            "name": "projectId",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "How many Datasets from the start to skip. Defaults to 0.",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Max number of Datasets to fetch. Defaults to 10.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedDatasetRwEnvelopeV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Deprecated - Get datasets accessible to user",
        "tags": [
          "DatasetRw"
        ]
      },
      "post": {
        "description": "Create a new Dataset. Requires access to the project the dataset will originate from",
        "operationId": "createDataset",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewDatasetRwV1"
              }
            }
          },
          "description": "Dataset to create",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DatasetRwEnvelopeV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Create a dataset",
        "tags": [
          "DatasetRw"
        ]
      }
    },
    "/api/datasetrw/v1/datasets/{datasetId}": {
      "delete": {
        "description": "Delete a dataset. Requires PermanentDelete access to the dataset",
        "operationId": "deleteDataset",
        "parameters": [
          {
            "description": "ID of dataset to remove from project",
            "in": "path",
            "name": "datasetId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DatasetRwEnvelopeV1"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Delete Dataset",
        "tags": [
          "DatasetRw"
        ]
      },
      "get": {
        "description": "Get Dataset by ID. Requires List access to the dataset",
        "operationId": "getDataset",
        "parameters": [
          {
            "description": "ID of dataset to retrieve",
            "example": "62604702b7e5d347dbe7a909",
            "in": "path",
            "name": "datasetId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DatasetRwEnvelopeV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Get dataset by ID",
        "tags": [
          "DatasetRw"
        ]
      },
      "patch": {
        "description": "Update Dataset name or description. Requires Update access to the dataset",
        "operationId": "updateDataset",
        "parameters": [
          {
            "description": "ID of dataset to update",
            "example": "62604702b7e5d347dbe7a909",
            "in": "path",
            "name": "datasetId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DatasetRwMetadataV1"
              }
            }
          },
          "description": "Fields to update",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DatasetRwEnvelopeV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Update dataset metadata",
        "tags": [
          "DatasetRw"
        ]
      }
    },
    "/api/datasetrw/v1/datasets/{datasetId}/grants": {
      "delete": {
        "description": "Remove a grant from a dataset's existing sequence of grants. Requires EditSecurity access to the dataset",
        "operationId": "removeDatasetGrant",
        "parameters": [
          {
            "description": "ID of dataset to remove the grant from",
            "in": "path",
            "name": "datasetId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DatasetRwGrantV1"
              }
            }
          },
          "description": "Grant to remove",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DatasetRwGrantEnvelopeV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Remove a grant from a dataset's existing sequence of grants",
        "tags": [
          "DatasetRw"
        ]
      },
      "get": {
        "description": "Get Dataset grants by ID. Requires List access to the dataset",
        "operationId": "getDatasetGrants",
        "parameters": [
          {
            "description": "ID of dataset to get grants for",
            "example": "62604702b7e5d347dbe7a909",
            "in": "path",
            "name": "datasetId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DatasetRwGrantDetailsEnvelopeV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Get dataset grants by ID",
        "tags": [
          "DatasetRw"
        ]
      },
      "post": {
        "description": "Add a grant to a dataset's existing sequence of grants. Requires EditSecurity access to the dataset.",
        "operationId": "addDatasetGrant",
        "parameters": [
          {
            "description": "ID of dataset to add a grant to",
            "in": "path",
            "name": "datasetId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DatasetRwGrantV1"
              }
            }
          },
          "description": "Grant to add",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DatasetRwGrantEnvelopeV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Add a grant to a dataset's existing sequence of grants",
        "tags": [
          "DatasetRw"
        ]
      }
    },
    "/api/datasetrw/v1/datasets/{datasetId}/snapshots": {
      "get": {
        "description": "Get Snapshots belonging to a dataset. Requires List access to the dataset",
        "operationId": "getDatasetSnapshots",
        "parameters": [
          {
            "description": "ID of dataset to retrieve snapshots for",
            "example": "62604702b7e5d347dbe7a909",
            "in": "path",
            "name": "datasetId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "How many Snapshots from the start to skip. Defaults to 0.",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Max number of Snapshots to fetch. Defaults to 10.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedSnapshotEnvelopeV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Get snapshots belonging to dataset",
        "tags": [
          "DatasetRw"
        ]
      },
      "post": {
        "description": "Create a new Snapshot in a dataset. Requires Read access to the dataset and project access",
        "operationId": "createSnapshot",
        "parameters": [
          {
            "description": "Dataset ID",
            "in": "path",
            "name": "datasetId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewSnapshotV1"
              }
            }
          },
          "description": "Snapshot to create",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SnapshotEnvelopeV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Create a snapshot",
        "tags": [
          "DatasetRw"
        ]
      }
    },
    "/api/datasetrw/v1/datasets/{datasetId}/tags": {
      "post": {
        "description": "Tag a snapshot in this Dataset with the given tagName. Requires Update access to the dataset",
        "operationId": "addDatasetTag",
        "parameters": [
          {
            "description": "Dataset ID",
            "in": "path",
            "name": "datasetId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DatasetRwTagToAddV1"
              }
            }
          },
          "description": "Tag name and snapshot ID to apply it to",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DatasetRwEnvelopeV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Tag a snapshot in this Dataset",
        "tags": [
          "DatasetRw"
        ]
      }
    },
    "/api/datasetrw/v1/datasets/{datasetId}/tags/{tagName}": {
      "delete": {
        "description": "Remove a Tag from a dataset. Requires Update access to the dataset",
        "operationId": "removeDatasetTag",
        "parameters": [
          {
            "description": "Dataset ID",
            "in": "path",
            "name": "datasetId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of tag to delete",
            "in": "path",
            "name": "tagName",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DatasetRwEnvelopeV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Remove a tag from a Dataset",
        "tags": [
          "DatasetRw"
        ]
      }
    },
    "/api/datasetrw/v1/snapshots/{snapshotId}": {
      "get": {
        "description": "Fetch a snapshot by ID. Requires List access to the dataset",
        "operationId": "getSnapshot",
        "parameters": [
          {
            "description": "Snapshot ID",
            "example": "62604702b7e5d347dbe7a909",
            "in": "path",
            "name": "snapshotId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SnapshotEnvelopeV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Get snapshot",
        "tags": [
          "DatasetRw"
        ]
      }
    },
    "/api/datasetrw/v2/datasets": {
      "get": {
        "description": "Get Datasets that a user has access to based on dataset permissions and input filters",
        "operationId": "getDatasetsV2",
        "parameters": [
          {
            "description": "Filter for minimum dataset permission the principal needs to have in returned datasets.",
            "in": "query",
            "name": "minimumPermission",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/DatasetRwPermissionV1"
            }
          },
          {
            "description": "ProjectIds of datasets to exclude from result.",
            "in": "query",
            "name": "projectIdsToExclude",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "ProjectIds to get the datasets from. Should not be passed in if projectIdsToExclude is and vice versa.",
            "in": "query",
            "name": "projectIdsToInclude",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "Boolean to determine whether or not to return project-info in return objects.",
            "in": "query",
            "name": "includeProjectInfo",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "How many Datasets from the start to skip. Defaults to 0.",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Max number of Datasets to fetch. Defaults to 10.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedDatasetRwEnvelopeV2"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Get datasets the user has access to",
        "tags": [
          "DatasetRw"
        ]
      }
    },
    "/api/datasource/v1/audit": {
      "get": {
        "description": "Gets data source audit data given filter input parameters",
        "operationId": "getDataSourceAuditData",
        "parameters": [
          {
            "description": "Datasource IDs to query audit data for",
            "in": "query",
            "name": "dataSourceIds",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "Datasource names to query audit data for",
            "in": "query",
            "name": "dataSourceNames",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "events to query - AccessDataSource, CreateDataSource, DataSourceAssociatedToProject, DataSourceDissociatedFromProject, DataSourceChangeOfOwnership, DataSourceChangeOfPermissions, DeleteDataSource",
            "in": "query",
            "name": "eventKinds",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "Start time (iso8601)",
            "in": "query",
            "name": "startTime",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "End time (iso8601)",
            "in": "query",
            "name": "endTime",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/DataSourceAuditDataV1"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Get DataSource Audit Data",
        "tags": [
          "DataSource"
        ]
      }
    },
    "/api/environments/beta/environments": {
      "get": {
        "description": "Get environments that a user can see. Required permissions: `None`. *Note:* This is a beta endpoint with known limitations.",
        "operationId": "getEnvironments",
        "parameters": [
          {
            "description": "How many Environments from the start to skip. Defaults to 0.",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Max number of Environments to fetch. Defaults to 10.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedEnvironmentEnvelopeV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Get Environments visible to a user",
        "tags": [
          "Environments"
        ]
      },
      "post": {
        "description": "Create an environment. Required permissions: `CreateEnvironment, EditEnvironment, UseFileStorage`. *Note:* This is a beta endpoint with known limitations.",
        "operationId": "createEnvironment",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewEnvironmentV1"
              }
            }
          },
          "description": "Environment to create",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnvironmentEnvelopeV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Create an environment",
        "tags": [
          "Environments"
        ]
      }
    },
    "/api/environments/beta/environments/{environmentId}/revisions": {
      "post": {
        "description": "Create a revision of an environment. Required permissions: `ManageEnvironments, EditEnvironment, UseFileStorage`. *Note:* This is a beta endpoint with known limitations.",
        "operationId": "createEnvironmentRevision",
        "parameters": [
          {
            "description": "Id of environment to create revision of",
            "in": "path",
            "name": "environmentId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewEnvironmentRevisionV1"
              }
            }
          },
          "description": "Environment revision to create",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnvironmentRevisionEnvelopeV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Create a Revision of an Environment",
        "tags": [
          "Environments"
        ]
      }
    },
    "/api/environments/beta/environments/{environmentId}/revisions/{revisionId}": {
      "patch": {
        "description": "Update a revision of an environment to mark if isRestricted. Required permissions: `ClassifyEnvironments`. *Note:* This is a beta endpoint with known limitations.",
        "operationId": "updateEnvironmentRevisionIsRestricted",
        "parameters": [
          {
            "description": "Id of environment to mark restricted revision",
            "in": "path",
            "name": "environmentId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Id of environment revision to mark is restricted",
            "in": "path",
            "name": "revisionId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateEnvironmentRevisionV1"
              }
            }
          },
          "description": "Body of isRestricted",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnvironmentRevisionUpdateEnvelopeV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Update the restricted revision of an environment",
        "tags": [
          "Environments"
        ]
      }
    },
    "/api/environments/v1/environments/{environmentId}": {
      "delete": {
        "description": "Archive an Environment, removing it from the list of visible environments. Required permissions: `ManageEnvironments, EditEnvironment`",
        "operationId": "archiveEnvironment",
        "parameters": [
          {
            "description": "Id of environment to archive",
            "in": "path",
            "name": "environmentId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnvironmentEnvelopeV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Archive an environment",
        "tags": [
          "Environments"
        ]
      },
      "get": {
        "description": "Get an Environment by its Id. Required permissions: `ViewEnvironment`",
        "operationId": "getEnvironment",
        "parameters": [
          {
            "description": "Id of environment to retrieve",
            "in": "path",
            "name": "environmentId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnvironmentEnvelopeV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Get an environment",
        "tags": [
          "Environments"
        ]
      }
    },
    "/api/jobs/beta/jobs": {
      "get": {
        "description": "Retrieve all Jobs that belong to a project. Required permissions: `ViewJobs.` *Note:* This is a beta endpoint with known limitations.",
        "operationId": "getJobs",
        "parameters": [
          {
            "description": "Id of project to retrieve Jobs for",
            "example": "622a6944dde1a920fcccff0d",
            "in": "query",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Number of jobs from the start to skip. Defaults to 0.",
            "example": 2,
            "in": "query",
            "name": "offset",
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Total number of Jobs to retrieve. Defaults to 10.",
            "example": 25,
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Field to sort Jobs by. Defaults to \"number\".",
            "in": "query",
            "name": "sortBy",
            "schema": {
              "enum": [
                "number",
                "title",
                "command",
                "startedTime",
                "duration",
                "status",
                "user",
                "commentCount",
                "dominoStatsField"
              ],
              "type": "string"
            }
          },
          {
            "description": "Field in domino stats to sort by. Only used if sortBy = dominoStatsField.",
            "example": "r-squared",
            "in": "query",
            "name": "dominoStatsSortFieldName",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Whether to sort ascending or descending. Defaults to to False.",
            "example": true,
            "in": "query",
            "name": "ascending",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Whether to include archived Jobs in results. Defaults to false.",
            "example": true,
            "in": "query",
            "name": "showArchived",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Status of Jobs to fetch. Defaults to \"all\".",
            "in": "query",
            "name": "statusFilter",
            "schema": {
              "enum": [
                "all",
                "queued",
                "running",
                "completed",
                "archived",
                "active"
              ],
              "type": "string"
            }
          },
          {
            "description": "Tag to filter by. Must match tag name exactly.",
            "example": "MyTag",
            "in": "query",
            "name": "tagFilter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedJobEnvelopeV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Get Jobs for a project",
        "tags": [
          "Jobs"
        ]
      }
    },
    "/api/jobs/beta/jobs/{jobId}": {
      "get": {
        "description": "Retrieve a Job's details by its Id. Required permissions: `ViewJobs`. *Note:* This is a beta endpoint with known limitations.",
        "operationId": "getJobDetails",
        "parameters": [
          {
            "description": "Id of Job to retrieve details for",
            "in": "path",
            "name": "jobId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobEnvelopeV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Get Job details",
        "tags": [
          "Jobs"
        ]
      }
    },
    "/api/jobs/beta/jobs/{jobId}/logs": {
      "get": {
        "description": "Retrieve the logs for the Job with the specified Id. Required permissions: `ViewJobs`. *Note:* This is a beta endpoint with known limitations.",
        "operationId": "getJobLogs",
        "parameters": [
          {
            "description": "Id of job to get logs for",
            "in": "path",
            "name": "jobId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Type of log to retrieve. Case insensitive.",
            "in": "query",
            "name": "logType",
            "required": false,
            "schema": {
              "enum": [
                "stdOut",
                "stdErr",
                "prepareOutput",
                "complete"
              ],
              "type": "string"
            }
          },
          {
            "description": "Max number of log lines to fetch. Will not retrieve over 10000 log lines at a time.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "The epoch time in nanoseconds to start fetching from",
            "in": "query",
            "name": "latestTimeNano",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LogsEnvelopeV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Get logs for a Job",
        "tags": [
          "Jobs"
        ]
      }
    },
    "/api/jobs/v1/goals": {
      "get": {
        "description": "Retrieve goals for a Job with the specified Id. Required permissions: `ViewJobs`",
        "operationId": "getLinkedGoalsForJob",
        "parameters": [
          {
            "description": "Id of job to link to goal",
            "in": "query",
            "name": "jobId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedGoalEnvelopeV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Get linked goals for a job",
        "tags": [
          "Jobs"
        ]
      },
      "post": {
        "description": "Link the Goal with the specified Id to a Job. Required permissions: `ViewJobs, Edit`",
        "operationId": "linkJobToGoal",
        "parameters": [
          {
            "description": "Id of job to link to goal",
            "in": "query",
            "name": "jobId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GoalToLinkV1"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GoalEnvelopeV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Link a goal to a job",
        "tags": [
          "Jobs"
        ]
      }
    },
    "/api/jobs/v1/goals/{goalId}": {
      "delete": {
        "description": "Unlink the Goal with the specified Id from a Job. Required permissions: `ViewJobs, Edit`",
        "operationId": "unlinkJobFromGoal",
        "parameters": [
          {
            "description": "Id of goal to remove",
            "in": "path",
            "name": "goalId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Id of job to remove goal from",
            "in": "query",
            "name": "jobId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Id of project for the goal",
            "in": "query",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteEnvelopeV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Unlink goal from job",
        "tags": [
          "Jobs"
        ]
      }
    },
    "/api/jobs/v1/jobs": {
      "post": {
        "description": "Start a new Job. Required permissions: `StartJob, UseGlobalCompute`",
        "operationId": "startJob",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewJobV1"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobEnvelopeV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Start a Job",
        "tags": [
          "Jobs"
        ]
      }
    },
    "/api/jobs/v1/jobs/{jobId}/tags": {
      "post": {
        "description": "Add a Tag to the Job with the specified Id. Required permissions: `ViewJobs`",
        "operationId": "addJobTag",
        "parameters": [
          {
            "description": "Id of job to add tag to",
            "in": "path",
            "name": "jobId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TagToAddV1"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagEnvelopeV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Add a tag to a Job",
        "tags": [
          "Jobs"
        ]
      }
    },
    "/api/jobs/v1/jobs/{jobId}/tags/{tagId}": {
      "delete": {
        "description": "Remove a Tag from the Job with the specified Id. Required permissions: `ViewJobs`",
        "operationId": "removeJobTag",
        "parameters": [
          {
            "description": "Id of job to remove tag from",
            "in": "path",
            "name": "jobId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Id of tag to remove",
            "in": "path",
            "name": "tagId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Id of project that tag belongs to",
            "in": "query",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteEnvelopeV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Remove a tag from a Job",
        "tags": [
          "Jobs"
        ]
      }
    },
    "/api/metricAlerts/v1": {
      "post": {
        "description": "Send a metric out of range alert for a monitored model. Required Permissions: None",
        "operationId": "sendMetricAlert",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricAlertRequestV1"
              }
            }
          },
          "description": "Details about the metric alert to send",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Send a metric alert",
        "tags": [
          "CustomMetrics"
        ]
      }
    },
    "/api/metricValues/v1": {
      "post": {
        "description": "Log metric values. Required Permissions: None",
        "operationId": "logMetricValues",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewMetricValuesEnvelopeV1"
              }
            }
          },
          "description": "List of metric values to log",
          "required": true
        },
        "responses": {
          "201": {
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Log metric values",
        "tags": [
          "CustomMetrics"
        ]
      }
    },
    "/api/metricValues/v1/{modelMonitoringId}/{metric}": {
      "get": {
        "description": "Retrieve metric values. Required Permissions: None",
        "operationId": "retrieveMetricValues",
        "parameters": [
          {
            "description": "ID of the monitored model",
            "in": "path",
            "name": "modelMonitoringId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of the metric to retrieve",
            "in": "path",
            "name": "metric",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Timestamp to filter metrics by referenceTimestamp >= startingReferenceTimestampInclusive. Timestamp should follow the RFC3339 format with timezone e.g. 2013-07-01T17:55:13-07:00",
            "in": "query",
            "name": "startingReferenceTimestampInclusive",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Timestamp to filter metrics by referenceTimestamp <= endingReferenceTimestampInclusive. Timestamp should follow the RFC3339 format with timezone e.g. 2013-07-01T17:55:13-07:00",
            "in": "query",
            "name": "endingReferenceTimestampInclusive",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricValuesEnvelopeV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Retrieve metric values",
        "tags": [
          "CustomMetrics"
        ]
      }
    },
    "/api/modelApis/async/v1/{asyncModelId}": {
      "post": {
        "description": "Request a prediction from an Async Model",
        "operationId": "requestAsyncPrediction",
        "parameters": [
          {
            "description": "Id of Async Model",
            "in": "path",
            "name": "asyncModelId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewAsyncPredictionV1"
              }
            }
          },
          "description": "Information for new Async Prediction",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncPredictionRequestEnvelopeV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "413": {
            "$ref": "#/components/responses/413"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Request a prediction from an Async model",
        "tags": [
          "AsyncPredictions"
        ]
      }
    },
    "/api/modelApis/async/v1/{asyncModelId}/{asyncPredictionId}": {
      "get": {
        "description": "Retrieve the result of an Async Model prediction",
        "operationId": "retrieveAsyncPredictionResult",
        "parameters": [
          {
            "description": "Id of Async Model",
            "in": "path",
            "name": "asyncModelId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Id of Async Prediction",
            "in": "path",
            "name": "asyncPredictionId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncPredictionEnvelopeV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Retrieve the result of an Async Model prediction",
        "tags": [
          "AsyncPredictions"
        ]
      }
    },
    "/api/organizations/v1/organizations": {
      "get": {
        "description": "Retrieve all Organizations of which this user is a member. Required permissions: `None`",
        "operationId": "getUserOrgs",
        "parameters": [
          {
            "description": "Optional value to filter organization names with. Must exactly match organization name.",
            "in": "query",
            "name": "nameFilter",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "How many orgs from the start to skip. Defaults to 0.",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Max number of orgs to fetch. Defaults to 10.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedOrganizationEnvelopeV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Get the Organizations for a user",
        "tags": [
          "Organizations"
        ]
      },
      "post": {
        "description": "Create a new Organization. Required permissions: `Must be logged in user`",
        "operationId": "createOrg",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewOrganizationV1"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationEnvelopeV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Create an organization",
        "tags": [
          "Organizations"
        ]
      }
    },
    "/api/organizations/v1/organizations/all": {
      "get": {
        "description": "Get all organizations. Required permissions: `ManageOrganizations`",
        "operationId": "getAllOrgs",
        "parameters": [
          {
            "description": "Optional value to filter organization names with.",
            "in": "query",
            "name": "nameFilter",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "How many orgs from the start to skip. Defaults to 0.",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Max number of orgs to fetch. Defaults to 10.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedOrganizationEnvelopeV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Get all organizations. Only accessible to admin users.",
        "tags": [
          "Organizations"
        ]
      }
    },
    "/api/organizations/v1/organizations/{organizationId}": {
      "get": {
        "description": "Retrieve an Organization by its Id. Required permissions: `ViewOrganization`",
        "operationId": "getOrg",
        "parameters": [
          {
            "description": "Id of organization to retrieve. This is the id of the org in the users collection, not the organizations collection.",
            "in": "path",
            "name": "organizationId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationEnvelopeV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Get an organization by Id",
        "tags": [
          "Organizations"
        ]
      }
    },
    "/api/organizations/v1/organizations/{organizationId}/user": {
      "delete": {
        "description": "Remove a user from an Organization. Required permissions: `EditMembers`",
        "operationId": "removeUserFromOrg",
        "parameters": [
          {
            "description": "Id of organization to add a user to. This is the id of the org in the users collection, not the organizations collection.",
            "in": "path",
            "name": "organizationId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Id of user to remove from org.",
            "in": "query",
            "name": "memberToRemoveId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationEnvelopeV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Remove a user from an org",
        "tags": [
          "Organizations"
        ]
      },
      "put": {
        "description": "Add a new user to an Organization. Required permissions: `EditMembers`",
        "operationId": "addUserToOrg",
        "parameters": [
          {
            "description": "Id of organization to add a user to. This is the id of the org in the users collection, not the organizations collection.",
            "in": "path",
            "name": "organizationId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationMemberV1"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationEnvelopeV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Add a user to an org",
        "tags": [
          "Organizations"
        ]
      }
    },
    "/api/projects/beta/projects": {
      "get": {
        "description": "Get projects that a user can see. Required permissions: `ListProject`. *Note:* This is a beta endpoint with known limitations.",
        "operationId": "getProjects",
        "parameters": [
          {
            "description": "How many Projects from the start to skip. Defaults to 0.",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Max number of Projects to fetch. Defaults to 10.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedProjectsEnvelopeV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Get Projects visible to user",
        "tags": [
          "Projects"
        ]
      },
      "post": {
        "description": "Create a project. Required permissions: `CreateProject, UseFileStorage`. *Note:* This is a beta endpoint with known limitations.",
        "operationId": "createProject",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewProjectV1"
              }
            }
          },
          "description": "Project to create",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectEnvelopeV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Create a project",
        "tags": [
          "Projects"
        ]
      }
    },
    "/api/projects/beta/projects/{projectId}": {
      "delete": {
        "description": "Archive a project by id. Required permissions: `ArchiveProject`. *Note:* This is a beta endpoint with known limitations.",
        "operationId": "archiveProject",
        "parameters": [
          {
            "description": "ID of the project to retrieve",
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteEnvelopeV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Archive project by id",
        "tags": [
          "Projects"
        ]
      }
    },
    "/api/projects/beta/projects/{projectId}/copy-project": {
      "post": {
        "description": "Create a new project by copying an existing project and providing optional overrides. Specify a git repository to link to the copied project or copy the original project's git repository for the copied project.",
        "operationId": "copyProjectBeta",
        "parameters": [
          {
            "description": "Project ID",
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CopyProjectSpecBeta"
              }
            }
          },
          "description": "Information needed in order to copy a project.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectCopyResultEnvelopeV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Create a new project by copying an existing project and providing optional overrides. Deprecated.",
        "tags": [
          "Projects"
        ]
      }
    },
    "/api/projects/beta/projects/{projectId}/files/{commitId}/{path}/content": {
      "get": {
        "description": "Return the raw contents of a file in a project at given commit.",
        "operationId": "getProjectFileContents",
        "parameters": [
          {
            "description": "Id of the project to return files for",
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Id of a commit in the project repository to list files from",
            "in": "path",
            "name": "commitId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Path in the project's repository to the file. It must be url-encoded and is case-sensitive.",
            "example": "nested%2Ffolder%2Ffile.ext",
            "in": "path",
            "name": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": "Success. It returns a stream of data with the file content, specifying the appropriate\nmedia type based on the file extension in a best-effort basis.\n",
            "x-domino-binary-stream": true
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Returns the contents of a file",
        "tags": [
          "ProjectsFiles"
        ]
      }
    },
    "/api/projects/beta/projects/{projectId}/results-settings": {
      "get": {
        "operationId": "getProjectResultSettings",
        "parameters": [
          {
            "description": "Project ID",
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectResultsSettingsEnvelopeV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Get project result settings",
        "tags": [
          "Projects"
        ]
      },
      "put": {
        "operationId": "updateProjectResultSettings",
        "parameters": [
          {
            "description": "Project ID",
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectResultsSettingsV1"
              }
            }
          },
          "description": "Project status",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectResultsSettingsEnvelopeV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Update project result settings",
        "tags": [
          "Projects"
        ]
      }
    },
    "/api/projects/v1/projects/{projectId}": {
      "get": {
        "description": "Get project by id. Required permissions: `ListProject`",
        "operationId": "getProjectById",
        "parameters": [
          {
            "description": "ID of the project to retrieve",
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectEnvelopeV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Get Project by Id",
        "tags": [
          "Projects"
        ]
      }
    },
    "/api/projects/v1/projects/{projectId}/collaborators": {
      "post": {
        "description": "Add a collaborator to this project. Required permissions: `ManageCollaborators`",
        "operationId": "addCollaboratorToProject",
        "parameters": [
          {
            "description": "Project ID",
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectCollaboratorV1"
              }
            }
          },
          "description": "Collaborator ID",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectCollaboratorEnvelopeV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Add a collaborator to this project",
        "tags": [
          "Projects"
        ]
      }
    },
    "/api/projects/v1/projects/{projectId}/collaborators/{collaboratorId}": {
      "delete": {
        "description": "Remove a collaborator from the project. Required permissions: `ManageCollaborators`",
        "operationId": "removeCollaboratorFromProject",
        "parameters": [
          {
            "description": "ID of the project to remove collaborator from",
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "ID of the collaborator to remove",
            "in": "path",
            "name": "collaboratorId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteEnvelopeV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Remove a collaborator from project",
        "tags": [
          "Projects"
        ]
      }
    },
    "/api/projects/v1/projects/{projectId}/copy-project": {
      "post": {
        "description": "Create a new project by copying an existing project and providing optional overrides. Specify a git repository to link to the copied project or copy the original project's git repository for the copied project.",
        "operationId": "copyProject",
        "parameters": [
          {
            "description": "Project ID",
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CopyProjectSpecV1"
              }
            }
          },
          "description": "Information needed in order to copy a project.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectCopyResultEnvelopeV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Create a new project by copying an existing project and providing optional overrides.",
        "tags": [
          "Projects"
        ]
      }
    },
    "/api/projects/v1/projects/{projectId}/goals": {
      "get": {
        "description": "Get goals in this project. Required permissions: `ListProject`",
        "operationId": "getProjectGoals",
        "parameters": [
          {
            "description": "Project ID",
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectGoalsEnvelopeV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Get goals in this project",
        "tags": [
          "Projects"
        ]
      },
      "post": {
        "description": "Add a goal to this project. Required permissions: `Edit`",
        "operationId": "addGoalToProject",
        "parameters": [
          {
            "description": "Project ID",
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewProjectGoalV1"
              }
            }
          },
          "description": "Goal to add",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectGoalEnvelopeV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Add a goal to this project",
        "tags": [
          "Projects"
        ]
      }
    },
    "/api/projects/v1/projects/{projectId}/goals/{goalId}": {
      "delete": {
        "description": "Delete a project goal. Required permissions: `Edit`",
        "operationId": "deleteProjectGoal",
        "parameters": [
          {
            "description": "ID of the project to delete goal from",
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "ID of the goal to delete",
            "in": "path",
            "name": "goalId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteEnvelopeV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Delete a project goal",
        "tags": [
          "Projects"
        ]
      },
      "patch": {
        "description": "Update project goal status. Required permissions: `Edit`",
        "operationId": "updateProjectGoal",
        "parameters": [
          {
            "description": "Project ID of the goal",
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "ID of the goal to update",
            "in": "path",
            "name": "goalId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectGoalForUpdateV1"
              }
            }
          },
          "description": "Project goal for update",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectGoalEnvelopeV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Update project goal status",
        "tags": [
          "Projects"
        ]
      }
    },
    "/api/projects/v1/projects/{projectId}/repositories": {
      "get": {
        "description": "Get all imported git repositories in this project. Required permissions: `ListProject`",
        "operationId": "getImportedRepos",
        "parameters": [
          {
            "description": "Project ID",
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "How many Projects from the start to skip. Defaults to 0.",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Max number of Projects to fetch. Defaults to 10.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedGitRepositoriesEnvelopeV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Get all imported git repositories in this project",
        "tags": [
          "Projects"
        ]
      },
      "post": {
        "description": "Add an imported git repository to this project. Required permissions: `ChangeProjectSettings`",
        "operationId": "addRepoToProject",
        "parameters": [
          {
            "description": "Project ID",
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewProjectGitRepositoryV1"
              }
            }
          },
          "description": "Repository to add",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectGitRepositoryEnvelopeV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Add an imported git repository to this project",
        "tags": [
          "Projects"
        ]
      }
    },
    "/api/projects/v1/projects/{projectId}/repositories/{repositoryId}": {
      "delete": {
        "description": "Remove an imported repository from the project. Required permissions: `ChangeProjectSettings`",
        "operationId": "removeRepoFromProject",
        "parameters": [
          {
            "description": "ID of the project to remove goal from",
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "ID of the repository to remove",
            "in": "path",
            "name": "repositoryId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteEnvelopeV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Remove an imported repository from project",
        "tags": [
          "Projects"
        ]
      }
    },
    "/api/projects/v1/projects/{projectId}/shared-datasets": {
      "get": {
        "description": "List shared datasets used by a project. Required permissions: `GetDatasetsRw`",
        "operationId": "listProjectSharedDatasets",
        "parameters": [
          {
            "description": "Project ID",
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SharedDatasetsEnvelopeV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Get shared datasets that a project uses",
        "tags": [
          "ProjectSharedDatasets"
        ]
      },
      "post": {
        "description": "Link a shared dataset to this project. Required permissions: `ManageDatasetsRw,UseFileStorage`",
        "operationId": "linkProjectToDataset",
        "parameters": [
          {
            "description": "Project ID",
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DatasetToAddV1"
              }
            }
          },
          "description": "Dataset ID",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SharedDatasetsEnvelopeV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Link a shared dataset to this project",
        "tags": [
          "ProjectSharedDatasets"
        ]
      }
    },
    "/api/projects/v1/projects/{projectId}/shared-datasets/{datasetId}": {
      "delete": {
        "description": "Unlink the dataset with the specified Id from a project. Required permissions: `ManageDatasetsRw,UseFileStorage`",
        "operationId": "unlinkDatasetFromProject",
        "parameters": [
          {
            "description": "Id of project",
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Id of shared dataset to remove",
            "in": "path",
            "name": "datasetId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteEnvelopeV1"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Unlink a shared dataset from this project",
        "tags": [
          "ProjectSharedDatasets"
        ]
      }
    },
    "/api/projects/v1/projects/{projectId}/status": {
      "put": {
        "description": "Update the status of a project. Required permissions: `Edit`",
        "operationId": "updateProjectStatus",
        "parameters": [
          {
            "description": "Project ID",
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectStatusV1"
              }
            }
          },
          "description": "Project status",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectStatusEnvelopeV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Update project status",
        "tags": [
          "Projects"
        ]
      }
    },
    "/api/projects/v1/projects/{projectId}/workspaces/{workspaceId}/sessions": {
      "post": {
        "description": "Creates a new session given an existing workspace. Required permissions: `OpenWorkspace`, `UseGlobalCompute`",
        "operationId": "createWorkspaceSession",
        "parameters": [
          {
            "description": "Project ID",
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Workspace ID",
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewWorkspaceSessionV1"
              }
            }
          },
          "description": "New session parameters",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkspaceSessionCreatedEnvelopeV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Create workspace session",
        "tags": [
          "Workspaces"
        ]
      }
    },
    "/api/registeredmodels/v1": {
      "get": {
        "description": "Get registered models that a user can see.",
        "operationId": "getRegisteredModels",
        "parameters": [
          {
            "description": "Project ID of requested models.",
            "in": "query",
            "name": "projectId",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Search parameter to retrieve models from Mlflow (currently supports name and tags)",
            "in": "query",
            "name": "searchPattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Pagination token to go to the next page based on a previous search query.",
            "in": "query",
            "name": "pageToken",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Max number of Registered Models to fetch. Defaults to 25.",
            "in": "query",
            "name": "maxResults",
            "required": false,
            "schema": {
              "default": 25,
              "type": "integer"
            }
          },
          {
            "description": "List of columns for ordering search results, which can include model name and last updated timestamp with an optional ���DESC��� or ���ASC��� annotation, where ���ASC��� is the default. Tiebreaks are done by model name ASC.",
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedRegisteredModelsEnvelopeV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Get Registered Models visible to user",
        "tags": [
          "RegisteredModels"
        ]
      },
      "post": {
        "description": "Create a new a Registered Model from an experiment run",
        "operationId": "createRegisteredModelFromRun",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewRegisteredModelV1"
              }
            }
          },
          "description": "Details of the registered model to create",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegisteredModelV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Create a new a Registered Model from an experiment run",
        "tags": [
          "RegisteredModels"
        ]
      }
    },
    "/api/registeredmodels/v1/access/{projectId}": {
      "post": {
        "description": "Request access to a project",
        "operationId": "requestProjectAccess",
        "parameters": [
          {
            "description": "Project ID",
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Request access to a project",
        "tags": [
          "RegisteredModels"
        ]
      }
    },
    "/api/registeredmodels/v1/names": {
      "get": {
        "description": "Get a list of Registered Models' names visible to user.",
        "operationId": "getRegisteredModelNames",
        "parameters": [
          {
            "description": "Search filter by model name",
            "in": "query",
            "name": "search",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "How many Registered Models from the start to skip. Defaults to 0.",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "default": 0,
              "type": "integer"
            }
          },
          {
            "description": "Max number of Registered Models to fetch. Defaults to 10.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "default": 10,
              "type": "integer"
            }
          },
          {
            "description": "Project ID of requested models.",
            "in": "query",
            "name": "projectId",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedRegisteredModelNamesV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Get a list of Registered Models' names visible to user",
        "tags": [
          "RegisteredModels"
        ]
      }
    },
    "/api/registeredmodels/v1/ui": {
      "get": {
        "description": "Get registered models that a user can see.",
        "operationId": "getRegisteredModelsForUI",
        "parameters": [
          {
            "description": "Project ID of requested models.",
            "in": "query",
            "name": "projectId",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Search parameter to retrieve models from Mlflow (currently supports name and tags)",
            "in": "query",
            "name": "searchPattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "globallyDiscoverable flag to indicate if we want to return globally discoverable models. Defaults to false.",
            "in": "query",
            "name": "globallyDiscoverable",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Pagination token to go to the next page based on a previous search query.",
            "in": "query",
            "name": "pageToken",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Max number of Registered Models to fetch. Defaults to 25.",
            "in": "query",
            "name": "maxResults",
            "required": false,
            "schema": {
              "default": 25,
              "type": "integer"
            }
          },
          {
            "description": "List of columns for ordering search results, which can include model name and last updated timestamp with an optional ���DESC��� or ���ASC��� annotation, where ���ASC��� is the default.",
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedRegisteredModelsForUIEnvelopeV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Get Registered Models visible to user",
        "tags": [
          "RegisteredModels"
        ]
      }
    },
    "/api/registeredmodels/v1/versions/stages/projects/{projectId}": {
      "get": {
        "description": "Get registered model version stages for a project",
        "operationId": "getRegisteredModelVersionStages",
        "parameters": [
          {
            "description": "Project ID",
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "includeDefaults flag to indicate if we want to return global stages if no overrides are set for the project",
            "in": "query",
            "name": "includeDefaults",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegisteredModelVersionStagesResponseV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Get registered model version stages for a project",
        "tags": [
          "RegisteredModels"
        ]
      },
      "put": {
        "description": "Set registered model version stages for a project",
        "operationId": "setRegisteredModelVersionStages",
        "parameters": [
          {
            "description": "Project ID",
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisteredModelVersionStagesV1"
              }
            }
          },
          "description": "List of registered model version stages to set for a project",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegisteredModelVersionStagesResponseV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Set registered model version stages for a project",
        "tags": [
          "RegisteredModels"
        ]
      }
    },
    "/api/registeredmodels/v1/{modelName}": {
      "get": {
        "description": "Get a specific Registered Model",
        "operationId": "getRegisteredModelByName",
        "parameters": [
          {
            "description": "Registered model name",
            "in": "path",
            "name": "modelName",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegisteredModelV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Get a specific Registered Model",
        "tags": [
          "RegisteredModels"
        ]
      },
      "patch": {
        "description": "Update a Registered Model",
        "operationId": "patchRegisteredModelByName",
        "parameters": [
          {
            "description": "Registered model name",
            "in": "path",
            "name": "modelName",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchRegisteredModelV1"
              }
            }
          },
          "description": "Details of the model to update",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegisteredModelV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Update a Registered Model",
        "tags": [
          "RegisteredModels"
        ]
      }
    },
    "/api/registeredmodels/v1/{modelName}/modelapis": {
      "get": {
        "description": "Gets all active model Apis that were deployed from a given Registered Model",
        "operationId": "getModelApisFromRegisteredModel",
        "parameters": [
          {
            "description": "Registered model name",
            "in": "path",
            "name": "modelName",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedRegisteredModelVersionModelApiEnvelopeV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Returns list of Model APIs deployed from a specific Registered Model",
        "tags": [
          "RegisteredModels"
        ]
      }
    },
    "/api/registeredmodels/v1/{modelName}/versions": {
      "get": {
        "description": "Get all versions of a Registered Model",
        "operationId": "getRegisteredModelVersions",
        "parameters": [
          {
            "description": "Registered model name",
            "in": "path",
            "name": "modelName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Offset for pagination from the start to skip. Defaults to 0.",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "default": 0,
              "type": "integer"
            }
          },
          {
            "description": "Max number of Registered Models to fetch. Defaults to 20",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "default": 20,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedRegisteredModelVersionOverviewEnvelopeV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Get all versions of a Registered Model",
        "tags": [
          "RegisteredModels"
        ]
      },
      "post": {
        "description": "Create a new version of a Registered Model",
        "operationId": "createRegisteredModelVersionFromRun",
        "parameters": [
          {
            "description": "Registered model name",
            "in": "path",
            "name": "modelName",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewRegisteredModelVersionV1"
              }
            }
          },
          "description": "Details of the model version to create",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegisteredModelVersionDetailsV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Create a new version of a Registered Model",
        "tags": [
          "RegisteredModels"
        ]
      }
    },
    "/api/registeredmodels/v1/{modelName}/versions/{version}": {
      "get": {
        "description": "Get a specific version of a Registered Model",
        "operationId": "getRegisteredModelVersion",
        "parameters": [
          {
            "description": "Registered model name",
            "in": "path",
            "name": "modelName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Version of the registered model",
            "in": "path",
            "name": "version",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegisteredModelVersionDetailsV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Get a specific version of a Registered Model",
        "tags": [
          "RegisteredModels"
        ]
      },
      "patch": {
        "description": "Update a Registered Model version",
        "operationId": "updateRegisteredModelVersion",
        "parameters": [
          {
            "description": "Registered model name",
            "in": "path",
            "name": "modelName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Version of the registered model",
            "in": "path",
            "name": "version",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatedRegisteredModelVersionV1"
              }
            }
          },
          "description": "Updated details of the registered model version",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegisteredModelVersionDetailsV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Update a Registered Model version",
        "tags": [
          "RegisteredModels"
        ]
      }
    },
    "/api/registeredmodels/v1/{modelName}/versions/{version}/modelapis": {
      "get": {
        "description": "Gets all active model Apis that were deployed from a given Registered Model Version",
        "operationId": "getModelApisFromRegisteredModelVersion",
        "parameters": [
          {
            "description": "Registered model name",
            "in": "path",
            "name": "modelName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Version of the registered model",
            "in": "path",
            "name": "version",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedRegisteredModelVersionModelApiEnvelopeV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Returns list of Model APIs deployed from a specific Registered Model Version",
        "tags": [
          "RegisteredModels"
        ]
      }
    },
    "/api/registeredmodels/v1/{modelName}/versions/{version}/reviews": {
      "post": {
        "description": "Create a review of a Registered Model",
        "operationId": "createRegisteredModelReview",
        "parameters": [
          {
            "description": "Registered model name",
            "in": "path",
            "name": "modelName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Version of the registered model",
            "in": "path",
            "name": "version",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewRegisteredModelReviewV1"
              }
            }
          },
          "description": "Details about the review to create",
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Create a review of a Registered Model",
        "tags": [
          "RegisteredModels"
        ]
      }
    },
    "/api/registeredmodels/v1/{modelName}/versions/{version}/reviews/{modelReviewId}": {
      "patch": {
        "description": "Update a review of a Registered Model by 1) adding or remove reviewers with an option to change notes, or 2) changing status to canceled with an an option to change notes, but cannot do both simultaneously, or 3) changing only notes",
        "operationId": "updateRegisteredModelReview",
        "parameters": [
          {
            "description": "Registered model name",
            "in": "path",
            "name": "modelName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Version of the registered model",
            "in": "path",
            "name": "version",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Id of the model review to edit",
            "in": "path",
            "name": "modelReviewId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatedRegisteredModelReviewV1"
              }
            }
          },
          "description": "Details about the review edit",
          "required": true
        },
        "responses": {
          "204": {
            "description": "Updated"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Update a review of a Registered Model - add or remove reviewers with an option to change notes, or change status to canceled with an an option to change notes but cannot do both simultaneously or simply change notes",
        "tags": [
          "RegisteredModels"
        ]
      }
    },
    "/api/registeredmodels/v1/{modelName}/versions/{version}/reviews/{modelReviewId}/responses": {
      "post": {
        "description": "Create a response to a Registered Model review",
        "operationId": "createRegisteredModelReviewResponse",
        "parameters": [
          {
            "description": "Registered model name",
            "in": "path",
            "name": "modelName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Version of the registered model",
            "in": "path",
            "name": "version",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Id of Model Review",
            "in": "path",
            "name": "modelReviewId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewRegisteredModelReviewResponseV1"
              }
            }
          },
          "description": "Details about the review to create",
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Create a response to a Registered Model review",
        "tags": [
          "RegisteredModels"
        ]
      }
    },
    "/api/registeredmodels/v1/{modelName}/versions/{version}/reviewstages": {
      "get": {
        "description": "Get registered model version stages valid for starting a model review",
        "operationId": "getModelVersionReviewStages",
        "parameters": [
          {
            "description": "model name",
            "in": "path",
            "name": "modelName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "version of the model",
            "in": "path",
            "name": "version",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegisteredModelVersionReviewStagesResponseV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Get registered model version stages valid for starting a model review",
        "tags": [
          "RegisteredModels"
        ]
      }
    },
    "/api/registeredmodels/v1/{modelName}/versions/{version}/stages/validation": {
      "put": {
        "description": "Validates whether a model version can transition to a given stage",
        "operationId": "validateRegisteredModelVersionStage",
        "parameters": [
          {
            "description": "Registered model name",
            "in": "path",
            "name": "modelName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Version of the registered model",
            "in": "path",
            "name": "version",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisteredModelVersionStageValidationV1"
              }
            }
          },
          "description": "The information of the stage to transition",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Validates whether a model version can transition to a given stage",
        "tags": [
          "RegisteredModels"
        ]
      }
    },
    "/api/registeredmodelstages/v1": {
      "get": {
        "description": "Get the possible stages of a Registered Model",
        "operationId": "getRegisteredModelStages",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegisteredModelStageEnvelopeV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Get the possible stages of a Registered Model",
        "tags": [
          "RegisteredModels"
        ]
      }
    },
    "/api/users/beta/credentials/{userId}": {
      "get": {
        "description": "Retrieve a users git credentials. Required permissions: `UpdateUser`. *Note:* This is a beta endpoint with known limitations.",
        "operationId": "getUserGitCreds",
        "parameters": [
          {
            "description": "Id of the User to fetch creds for",
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedGitCredentialsAccessorEnvelopeV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Get git credential accessor for a User",
        "tags": [
          "Users"
        ]
      }
    },
    "/api/users/v1/self": {
      "get": {
        "description": "Retrieve the current user. Required permissions: `None`",
        "operationId": "getCurrentUser",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserEnvelopeV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Get the current user",
        "tags": [
          "Users"
        ]
      }
    },
    "/api/users/v1/users": {
      "get": {
        "description": "Retrieves all users visible to the current user. Required permissions: `None`",
        "operationId": "getVisibleUsers",
        "parameters": [
          {
            "description": "How many users from the start to skip. Defaults to 0.",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Max number of users to fetch. Defaults to 10.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedUserEnvelopeV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Get all users visible to the current user",
        "tags": [
          "Users"
        ]
      }
    },
    "/athenaConfigs": {
      "put": {
        "description": "Set AWS Billing API Configuration",
        "operationId": "setAthenaConfigs",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AthenaBillingConfigsV1"
              }
            }
          },
          "description": "AWS Billing API Config",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AthenaBillingConfigsV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Set AWS Billing API Configuration",
        "tags": [
          "Cost"
        ]
      }
    },
    "/licenseKey": {
      "put": {
        "description": "Add kubecost license key",
        "operationId": "addKubecostLicenseKey",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/KubecostLicenseV1"
              }
            }
          },
          "description": "Kubecost License Key",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KubecostLicenseResponseV1"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "Add kubecost license key",
        "tags": [
          "Cost"
        ]
      }
    }
  },
  "security": [
    {
      "DominoApiKey": []
    },
    {
      "BearerAuthentication": []
    }
  ],
  "tags": [
    {
      "name": "CustomMetrics"
    },
    {
      "name": "DatasetRw"
    },
    {
      "name": "DataSource"
    },
    {
      "name": "Cost"
    },
    {
      "name": "Environments"
    },
    {
      "name": "Jobs"
    },
    {
      "name": "Organizations"
    },
    {
      "name": "Projects"
    },
    {
      "name": "Registered Models"
    },
    {
      "name": "Users"
    },
    {
      "name": "AsyncPredictions"
    }
  ]
}
